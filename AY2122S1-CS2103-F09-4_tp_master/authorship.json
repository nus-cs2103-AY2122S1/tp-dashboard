[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"[![Java CI](https://github.com/AY2122S1-CS2103-F09-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103-F09-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"##Connections","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"Connections is an address book application with a text based UI built for university students who possess","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"any combination of the following traits:","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"  * Forgetful","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"  * Loves celebrating birthdays","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"  * Very sociable with multiple friend groups","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"  * Uses application with a smooth learning curve","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"Connection helps you with:","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"  * Retrieving contact details with mouse free with fast and easy look up","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"  * Notifications for birthday reminders/ lookup upcoming birthdays","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"  * Mass send invitations for birthday parties","lastModifiedDate":"2021-09-24"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"  * Partition contacts by groups","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"For a detailed user guide visit our [product website](https://ay2122s1-cs2103-f09-4.github.io/tp/UserGuide.html).","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Justinhoejj":19,"-":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"### Chan Yu Cheng","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"\u003cimg src\u003d\"images/yucheng11122017.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"[[github](https://github.com/yucheng11122017)]","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"[[portfolio](team/chanyucheng.md)]","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"* Role: In charge of Model","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"### Lee Zhi Xuan","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"\u003cimg src\u003d\"images/leezhixuan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"[[github](https://github.com/leezhixuan)]","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"[[portfolio](team/leezhixuan.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"* Role: In charge of Logic","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"### Justin Hoe","lastModifiedDate":"2021-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"\u003cimg src\u003d\"images/justinhoejj.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"[[github](http://github.com/justinhoejj)]","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"[[portfolio](team/justinhoe.md)]","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"* Responsibilities: UI + Repo config","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"### Daniel Tan","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"\u003cimg src\u003d\"images/cookiedan42.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"[[github](http://github.com/cookiedan42)]","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"[[portfolio](team/daniel.md)]","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"* Responsibilities: tests and documentation","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"### Lim Ji Wei","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"\u003cimg src\u003d\"images/jiwei99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"[![github](https://img.shields.io/badge/GitHub-100000?style\u003dfor-the-badge\u0026logo\u003dgithub\u0026logoColor\u003dwhite)](http://github.com/jiwei99)","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"[[portfolio](team/jiwei.md)]","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"* Responsibilities: In charge of Storage","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"Jiwei99":5,"cookiedan42":5,"Justinhoejj":5,"yucheng11122017":5,"leezhixuan":5,"-":33}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"cookiedan42"},"content":"* sociable and has multiple different friend groups that can partially overlap","lastModifiedDate":"2021-09-30"},{"lineNumber":262,"author":{"gitId":"cookiedan42"},"content":"* regularly organises birthday parties for these contacts","lastModifiedDate":"2021-09-30"},{"lineNumber":263,"author":{"gitId":"cookiedan42"},"content":"* regularly invites other contacts to these parties","lastModifiedDate":"2021-09-30"},{"lineNumber":264,"author":{"gitId":"cookiedan42"},"content":"* needs to keep track of different groups who are invited to different parties","lastModifiedDate":"2021-09-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":268,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"cookiedan42"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-30"},{"lineNumber":271,"author":{"gitId":"cookiedan42"},"content":"* receive reminders about birthdays or lookup upcoming birthdays","lastModifiedDate":"2021-09-30"},{"lineNumber":272,"author":{"gitId":"cookiedan42"},"content":"* retrieve contact details of all members of a group quickly and easily","lastModifiedDate":"2021-09-30"},{"lineNumber":273,"author":{"gitId":"cookiedan42"},"content":"* partition contacts by group","lastModifiedDate":"2021-09-30"},{"lineNumber":274,"author":{"gitId":"cookiedan42"},"content":"* keep track of upcoming birthdays and invite lists of these parties","lastModifiedDate":"2021-09-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"cookiedan42"},"content":"Chosen user stories v1.2","lastModifiedDate":"2021-09-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"cookiedan42"},"content":"| As a... | I want to... | So that I can... |","lastModifiedDate":"2021-09-23"},{"lineNumber":282,"author":{"gitId":"cookiedan42"},"content":"|---|---|---|","lastModifiedDate":"2021-09-23"},{"lineNumber":283,"author":{"gitId":"cookiedan42"},"content":"| Person who loves Birthdays    | Track birthdays                       | Easy way of checking the birthday of friends","lastModifiedDate":"2021-09-30"},{"lineNumber":284,"author":{"gitId":"cookiedan42"},"content":"| Sociable person               | Partition frequent contacts           | Easy to access people within each group","lastModifiedDate":"2021-09-30"},{"lineNumber":285,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser               | Add people to a party list            | Easily extend a party invite list","lastModifiedDate":"2021-09-30"},{"lineNumber":286,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser               | Remove people to a party list         | Easily Remove people from only one party","lastModifiedDate":"2021-09-30"},{"lineNumber":287,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser               | Search contacts by invited party      | Generate invite list","lastModifiedDate":"2021-09-30"},{"lineNumber":288,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-30"},{"lineNumber":289,"author":{"gitId":"cookiedan42"},"content":"| User                          | App need to be bug free               | So that I can rely on the app to give me accurate contact details","lastModifiedDate":"2021-09-30"},{"lineNumber":290,"author":{"gitId":"cookiedan42"},"content":"| Fast typer                    | Use sentences to interact with the app| Can utilise the functions of the app quicker without using a mouse","lastModifiedDate":"2021-09-23"},{"lineNumber":291,"author":{"gitId":"cookiedan42"},"content":"| Sociable person               | To be able to save up to 100 contacts | I can keep all my friends contacts","lastModifiedDate":"2021-09-30"},{"lineNumber":292,"author":{"gitId":"cookiedan42"},"content":"| User with many contacts       | Search timings to be reasonable       | Do not have to wait too long for search results","lastModifiedDate":"2021-09-23"},{"lineNumber":293,"author":{"gitId":"cookiedan42"},"content":"| Forgetful user                | Track contacts                        | Retrieve Contact details whenever I need to contact somebody","lastModifiedDate":"2021-09-30"},{"lineNumber":294,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":295,"author":{"gitId":"cookiedan42"},"content":"Nice to have user stories v1.2","lastModifiedDate":"2021-09-23"},{"lineNumber":296,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":297,"author":{"gitId":"cookiedan42"},"content":"| As a... | I want to... | So that I can... |","lastModifiedDate":"2021-09-23"},{"lineNumber":298,"author":{"gitId":"cookiedan42"},"content":"|---|---|---|","lastModifiedDate":"2021-09-23"},{"lineNumber":299,"author":{"gitId":"cookiedan42"},"content":"| Beginner user                 | View feedback on wrong commands       | Format commands better","lastModifiedDate":"2021-09-30"},{"lineNumber":300,"author":{"gitId":"cookiedan42"},"content":"| User                          | Can modify contact details            | So that I can update my contact details","lastModifiedDate":"2021-09-23"},{"lineNumber":301,"author":{"gitId":"cookiedan42"},"content":"| Beginner user                 | View feedback on wrong commands       | To format commands better","lastModifiedDate":"2021-09-23"},{"lineNumber":302,"author":{"gitId":"cookiedan42"},"content":"| Advanced user                 | Add nicknames to my contacts          | Find my close friends using their nicknames","lastModifiedDate":"2021-09-23"},{"lineNumber":303,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":304,"author":{"gitId":"cookiedan42"},"content":"Future versions user stories","lastModifiedDate":"2021-09-23"},{"lineNumber":305,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":306,"author":{"gitId":"cookiedan42"},"content":"| As a... | I want to... | So that I can... |","lastModifiedDate":"2021-09-23"},{"lineNumber":307,"author":{"gitId":"cookiedan42"},"content":"| --- | --- | --- |","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"cookiedan42"},"content":"| Beginner              | See sample commands                               | To see what I should be typing.","lastModifiedDate":"2021-09-23"},{"lineNumber":309,"author":{"gitId":"cookiedan42"},"content":"| Beginner              | View tutorials                                    | To see how the app should be used","lastModifiedDate":"2021-09-23"},{"lineNumber":310,"author":{"gitId":"cookiedan42"},"content":"| Beginner              | View helpful prompts                              | To see what can be done with the app","lastModifiedDate":"2021-09-23"},{"lineNumber":311,"author":{"gitId":"cookiedan42"},"content":"| New user              | Immediately add my first contact                  | Use the product without reading a manual","lastModifiedDate":"2021-09-23"},{"lineNumber":312,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":313,"author":{"gitId":"cookiedan42"},"content":"| Advanced user         | Disable suggestions                               | Avoid accidentally pressing on them","lastModifiedDate":"2021-09-23"},{"lineNumber":314,"author":{"gitId":"cookiedan42"},"content":"| Experienced user      | Quickly add contact without my mouse              | Just type","lastModifiedDate":"2021-09-30"},{"lineNumber":315,"author":{"gitId":"cookiedan42"},"content":"| Experienced user      | Get suggestions on commonly run commands          | don\u0027t have to keep typing the commands they use frequently.","lastModifiedDate":"2021-09-23"},{"lineNumber":316,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":317,"author":{"gitId":"cookiedan42"},"content":"| Forgetful person      | Use the help button                               | Remind myself how to use the app","lastModifiedDate":"2021-09-23"},{"lineNumber":318,"author":{"gitId":"cookiedan42"},"content":"| Forgetful person      | Select from existing tags                         | Have consistent labelling","lastModifiedDate":"2021-09-23"},{"lineNumber":319,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":320,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser       | Look for contacts details for all my friends      | Send out my invites","lastModifiedDate":"2021-09-24"},{"lineNumber":321,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser       | Generate mailing list from my contacts            | Contact all invitees as a group","lastModifiedDate":"2021-09-24"},{"lineNumber":322,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser       | Generate csv file of my invitees                  | Take attendance or make external notes","lastModifiedDate":"2021-09-24"},{"lineNumber":323,"author":{"gitId":"cookiedan42"},"content":"| Party Organiser       | Generate a mail to link for my selection          | Send emails to a group","lastModifiedDate":"2021-09-24"},{"lineNumber":324,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":325,"author":{"gitId":"cookiedan42"},"content":"| Loves Birthdays       | Birthday reminders                                | Won’t miss any of his/her friends’ birthdays","lastModifiedDate":"2021-09-23"},{"lineNumber":326,"author":{"gitId":"cookiedan42"},"content":"| Sociable person       | Pin frequent contacts                             | Access these contacts easily","lastModifiedDate":"2021-09-23"},{"lineNumber":327,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":328,"author":{"gitId":"cookiedan42"},"content":"| Fast typer            | Use the app with little lag                       | Can utilise functions of the app quickly","lastModifiedDate":"2021-09-23"},{"lineNumber":329,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":330,"author":{"gitId":"cookiedan42"},"content":"| Person                | Add new optional fields                           | Add my own types of data","lastModifiedDate":"2021-09-23"},{"lineNumber":331,"author":{"gitId":"cookiedan42"},"content":"| Youth                 | Use Emojis                                        | Add \u003c3 to people i like and poop to people I don’t","lastModifiedDate":"2021-09-23"},{"lineNumber":332,"author":{"gitId":"cookiedan42"},"content":"| University student    | User experience to be smooth                      | Find who they want to contact easily","lastModifiedDate":"2021-09-23"},{"lineNumber":333,"author":{"gitId":"cookiedan42"},"content":"|  |  |  |","lastModifiedDate":"2021-09-23"},{"lineNumber":334,"author":{"gitId":"cookiedan42"},"content":"| User with many contacts   | Show search suggestions                       | Easily find contacts","lastModifiedDate":"2021-09-23"},{"lineNumber":335,"author":{"gitId":"cookiedan42"},"content":"| User with many contacts   | Search timings to be reasonable               | Do not have to wait too long for search results","lastModifiedDate":"2021-09-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"leezhixuan"},"content":"**Use case: Add a person**","lastModifiedDate":"2021-09-22"},{"lineNumber":342,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":343,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":344,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":345,"author":{"gitId":"leezhixuan"},"content":"1.  User chooses to add a person","lastModifiedDate":"2021-09-22"},{"lineNumber":346,"author":{"gitId":"leezhixuan"},"content":"2.  User provides the person\u0027s details","lastModifiedDate":"2021-09-22"},{"lineNumber":347,"author":{"gitId":"leezhixuan"},"content":"3.  Connections create an entry for that person\u0027s details","lastModifiedDate":"2021-09-22"},{"lineNumber":348,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":349,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":350,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":351,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":352,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":353,"author":{"gitId":"leezhixuan"},"content":"* 2a. User provides incomplete details","lastModifiedDate":"2021-09-22"},{"lineNumber":354,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":355,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections show an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":356,"author":{"gitId":"leezhixuan"},"content":"      ","lastModifiedDate":"2021-09-22"},{"lineNumber":357,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2","lastModifiedDate":"2021-09-22"},{"lineNumber":358,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":359,"author":{"gitId":"leezhixuan"},"content":"* 2b. User provides details identical to an existing entry in Connections","lastModifiedDate":"2021-09-22"},{"lineNumber":360,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":361,"author":{"gitId":"leezhixuan"},"content":"    * 2b1. Connections remind User that this is a duplicate","lastModifiedDate":"2021-09-22"},{"lineNumber":362,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":363,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at Step 1","lastModifiedDate":"2021-09-22"},{"lineNumber":364,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":365,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":366,"author":{"gitId":"leezhixuan"},"content":"**Use case: Clear all entries**","lastModifiedDate":"2021-09-22"},{"lineNumber":367,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":368,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":369,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":370,"author":{"gitId":"leezhixuan"},"content":"1.  User request to clear all entries","lastModifiedDate":"2021-09-22"},{"lineNumber":371,"author":{"gitId":"leezhixuan"},"content":"2.  Connections deletes all entries","lastModifiedDate":"2021-09-24"},{"lineNumber":372,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":373,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":374,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":375,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"leezhixuan"},"content":"2.  Connections show a list of persons","lastModifiedDate":"2021-09-22"},{"lineNumber":381,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"leezhixuan"},"content":"4.  Connections delete the person","lastModifiedDate":"2021-09-22"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message.","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"leezhixuan"},"content":"**Use case: Edit a person\u0027s details**","lastModifiedDate":"2021-09-22"},{"lineNumber":399,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":400,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":401,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":402,"author":{"gitId":"leezhixuan"},"content":"1.  User requests to list persons","lastModifiedDate":"2021-09-22"},{"lineNumber":403,"author":{"gitId":"leezhixuan"},"content":"2.  Connections show a list of persons","lastModifiedDate":"2021-09-22"},{"lineNumber":404,"author":{"gitId":"leezhixuan"},"content":"3.  User provides his/her index in the list along with the replacement information","lastModifiedDate":"2021-09-24"},{"lineNumber":405,"author":{"gitId":"leezhixuan"},"content":"4.  Connections reflect the edits that were made","lastModifiedDate":"2021-09-22"},{"lineNumber":406,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":407,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":408,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":409,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":410,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":411,"author":{"gitId":"leezhixuan"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":412,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":413,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":414,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":415,"author":{"gitId":"leezhixuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":416,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":417,"author":{"gitId":"leezhixuan"},"content":"    * 3a1. Connections show an error message.","lastModifiedDate":"2021-09-22"},{"lineNumber":418,"author":{"gitId":"leezhixuan"},"content":"      ","lastModifiedDate":"2021-09-22"},{"lineNumber":419,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":420,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":421,"author":{"gitId":"leezhixuan"},"content":"**Use case: Exit the program**","lastModifiedDate":"2021-09-22"},{"lineNumber":422,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":423,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":424,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":425,"author":{"gitId":"leezhixuan"},"content":"1.  User request to exit","lastModifiedDate":"2021-09-22"},{"lineNumber":426,"author":{"gitId":"leezhixuan"},"content":"2.  Connections exit","lastModifiedDate":"2021-09-22"},{"lineNumber":427,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":428,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":429,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":430,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":431,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":432,"author":{"gitId":"leezhixuan"},"content":"**Use case: Find a person**","lastModifiedDate":"2021-09-22"},{"lineNumber":433,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":434,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":435,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":436,"author":{"gitId":"leezhixuan"},"content":"1.  User chooses to look for an entry","lastModifiedDate":"2021-09-22"},{"lineNumber":437,"author":{"gitId":"leezhixuan"},"content":"2.  Use provides the search term","lastModifiedDate":"2021-09-22"},{"lineNumber":438,"author":{"gitId":"leezhixuan"},"content":"3.  Connections return all entries that matches the search term","lastModifiedDate":"2021-09-22"},{"lineNumber":439,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":440,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":441,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":442,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":443,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":444,"author":{"gitId":"leezhixuan"},"content":"* 2a. Connections is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":445,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":446,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections display a message to indicate no entries","lastModifiedDate":"2021-09-24"},{"lineNumber":447,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":448,"author":{"gitId":"leezhixuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":449,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":450,"author":{"gitId":"leezhixuan"},"content":"* 2a. No existing entries match the search term provided","lastModifiedDate":"2021-09-22"},{"lineNumber":451,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":452,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections display a message to indicate no matching entries","lastModifiedDate":"2021-09-22"},{"lineNumber":453,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":454,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":455,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":456,"author":{"gitId":"leezhixuan"},"content":"**Use case: Find people via Tags**","lastModifiedDate":"2021-09-22"},{"lineNumber":457,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":458,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":459,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":460,"author":{"gitId":"leezhixuan"},"content":"1.  User choose to look for an entry","lastModifiedDate":"2021-09-22"},{"lineNumber":461,"author":{"gitId":"leezhixuan"},"content":"2.  User provides the tag","lastModifiedDate":"2021-09-22"},{"lineNumber":462,"author":{"gitId":"leezhixuan"},"content":"3.  Connections return all entries that matches the tag","lastModifiedDate":"2021-09-22"},{"lineNumber":463,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":464,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":465,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":466,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":467,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":468,"author":{"gitId":"leezhixuan"},"content":"* 2a. Connections is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":469,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":470,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections display a message to indicate no entries","lastModifiedDate":"2021-09-24"},{"lineNumber":471,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":472,"author":{"gitId":"leezhixuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":473,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":474,"author":{"gitId":"leezhixuan"},"content":"* 2a. No existing entries match the tag provided","lastModifiedDate":"2021-09-22"},{"lineNumber":475,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":476,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections display a message to indicate no matching entries","lastModifiedDate":"2021-09-22"},{"lineNumber":477,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":478,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":479,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":480,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":481,"author":{"gitId":"leezhixuan"},"content":"**Use case: List everyone in the address book**","lastModifiedDate":"2021-09-22"},{"lineNumber":482,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":483,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":484,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":485,"author":{"gitId":"leezhixuan"},"content":"1.  User requests to list all entries","lastModifiedDate":"2021-09-22"},{"lineNumber":486,"author":{"gitId":"leezhixuan"},"content":"2.  Connections display all entries","lastModifiedDate":"2021-09-22"},{"lineNumber":487,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":488,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":489,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":490,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":491,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":492,"author":{"gitId":"leezhixuan"},"content":"* 2a. Connections is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":493,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":494,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":495,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":496,"author":{"gitId":"leezhixuan"},"content":"**Use Case: Obtaining more information about a command**","lastModifiedDate":"2021-09-22"},{"lineNumber":497,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":498,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":499,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":500,"author":{"gitId":"leezhixuan"},"content":"1.  User requests for help","lastModifiedDate":"2021-09-22"},{"lineNumber":501,"author":{"gitId":"leezhixuan"},"content":"2.  User provides the command","lastModifiedDate":"2021-09-22"},{"lineNumber":502,"author":{"gitId":"leezhixuan"},"content":"3.  Connections explain how to use the command and provide examples","lastModifiedDate":"2021-09-22"},{"lineNumber":503,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":504,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":505,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":506,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":507,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":508,"author":{"gitId":"leezhixuan"},"content":"* 2a. Command provided is not supported","lastModifiedDate":"2021-09-22"},{"lineNumber":509,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":510,"author":{"gitId":"leezhixuan"},"content":"    * 2a1. Connections display an error message","lastModifiedDate":"2021-09-22"},{"lineNumber":511,"author":{"gitId":"leezhixuan"},"content":"      ","lastModifiedDate":"2021-09-22"},{"lineNumber":512,"author":{"gitId":"leezhixuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":513,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":514,"author":{"gitId":"leezhixuan"},"content":"**Use case: Tag a person**","lastModifiedDate":"2021-09-22"},{"lineNumber":515,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":516,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":517,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":518,"author":{"gitId":"leezhixuan"},"content":"1.  User requests to list persons","lastModifiedDate":"2021-09-22"},{"lineNumber":519,"author":{"gitId":"leezhixuan"},"content":"2.  Connections show a list of persons","lastModifiedDate":"2021-09-22"},{"lineNumber":520,"author":{"gitId":"leezhixuan"},"content":"3.  User provides his index in the list along with the tags to be added","lastModifiedDate":"2021-09-22"},{"lineNumber":521,"author":{"gitId":"leezhixuan"},"content":"4.  Connections add those tags from that entry","lastModifiedDate":"2021-09-22"},{"lineNumber":522,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":523,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":524,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":525,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":526,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":527,"author":{"gitId":"leezhixuan"},"content":"* 2a. Connections is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":528,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":529,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":530,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":531,"author":{"gitId":"leezhixuan"},"content":"* 3a. Index provided is out of range","lastModifiedDate":"2021-09-22"},{"lineNumber":532,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":533,"author":{"gitId":"leezhixuan"},"content":"    * 3a1. Connections display an error message","lastModifiedDate":"2021-09-22"},{"lineNumber":534,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":535,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":536,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":537,"author":{"gitId":"leezhixuan"},"content":"* 3b. Target entry already has the tag specified","lastModifiedDate":"2021-09-22"},{"lineNumber":538,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":539,"author":{"gitId":"leezhixuan"},"content":"    * 3b1. Connections display an error message","lastModifiedDate":"2021-09-22"},{"lineNumber":540,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":541,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":542,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":543,"author":{"gitId":"leezhixuan"},"content":"**Use case: Untag a person**","lastModifiedDate":"2021-09-22"},{"lineNumber":544,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":545,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":546,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":547,"author":{"gitId":"leezhixuan"},"content":"1.  User requests to list persons","lastModifiedDate":"2021-09-22"},{"lineNumber":548,"author":{"gitId":"leezhixuan"},"content":"2.  Connections show a list of persons","lastModifiedDate":"2021-09-22"},{"lineNumber":549,"author":{"gitId":"leezhixuan"},"content":"3.  User provides his index in the list along with the tags to be removed","lastModifiedDate":"2021-09-22"},{"lineNumber":550,"author":{"gitId":"leezhixuan"},"content":"4.  Connections remove those tags from that entry","lastModifiedDate":"2021-09-22"},{"lineNumber":551,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":552,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":553,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":554,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":555,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":556,"author":{"gitId":"leezhixuan"},"content":"* 2a. Connections is empty","lastModifiedDate":"2021-09-22"},{"lineNumber":557,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":558,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":559,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":560,"author":{"gitId":"leezhixuan"},"content":"* 3a. Index provided is out of range","lastModifiedDate":"2021-09-22"},{"lineNumber":561,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":562,"author":{"gitId":"leezhixuan"},"content":"    * 3a1. Connections display an error message","lastModifiedDate":"2021-09-22"},{"lineNumber":563,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":564,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":565,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":566,"author":{"gitId":"leezhixuan"},"content":"* 3b. Target entry do not have the tag specified","lastModifiedDate":"2021-09-22"},{"lineNumber":567,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":568,"author":{"gitId":"leezhixuan"},"content":"    * 3b1. Connections display an error message","lastModifiedDate":"2021-09-22"},{"lineNumber":569,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":570,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":571,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":572,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":581,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"leezhixuan"},"content":"* **Connections**: The name of our product","lastModifiedDate":"2021-09-22"},{"lineNumber":585,"author":{"gitId":"leezhixuan"},"content":"* **Entry**: An item written or printed in a diary, list, account book, or reference book.","lastModifiedDate":"2021-09-22"},{"lineNumber":586,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"leezhixuan"},"content":"* **Search Term**: A search term is what users key in when they want to find something specific","lastModifiedDate":"2021-09-22"},{"lineNumber":589,"author":{"gitId":"leezhixuan"},"content":"* **Tag**: A label attached to someone or something for the purpose of identification or to give other information.","lastModifiedDate":"2021-09-22"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":615,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":616,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":617,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":619,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":627,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":628,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":629,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":631,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":636,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"cookiedan42":65,"leezhixuan":215,"-":362}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"# User Guide","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"CONNECTIONS is a **desktop app for managing contacts, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CONNECTIONS can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"* [Features](#features)","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"  * [Viewing help : `help`](#viewing-help--help)","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"  * [Adding a person: `add`](#adding-a-person-add)","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"  * [Listing all persons : `list`](#listing-all-persons--list)","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"  * [Editing a person : `edit`](#editing-a-person--edit)","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"  * [Adding Tags : `tag`](#adding-tags--tag)","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"  * [Removing Tags : `untag`](#removing-tags--untag)","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"  * [Locating persons by name: `find`](#locating-persons-by-name-find)","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"  * [Locating persons by tag: `findTag`](#locating-persons-by-tag-findtag)","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"  * [Deleting a person : `delete`](#deleting-a-person--delete)","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"  * [Clearing all entries : `clear`](#clearing-all-entries--clear)","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"  * [Exiting the program : `exit`](#exiting-the-program--exit)","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"* [FAQ](#faq)","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"1. Download the latest `connections.jar` from [here](https://github.com/AY2122S1-CS2103-F09-4/tp/releases).","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"1. Copy the file to the folder you want to use as the _home directory_ for your CONNECTIONS.","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"   Click [here](#command-summary) for example commands you can try!","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-09-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2021-09-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"* `help` - List out all available commands","lastModifiedDate":"2021-09-23"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"* `help COMMAND` - Shows help message for the command","lastModifiedDate":"2021-09-23"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"* `help d/` - Opens link to documentation","lastModifiedDate":"2021-09-23"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"`help add`","lastModifiedDate":"2021-09-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"**Sample Outcome:**","lastModifiedDate":"2021-09-23"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"add: Adds a person to the address book.","lastModifiedDate":"2021-09-23"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"Parameters: n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...","lastModifiedDate":"2021-09-23"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"Example: add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney","lastModifiedDate":"2021-09-23"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"```","lastModifiedDate":"2021-09-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":":bulb: **Tip:**","lastModifiedDate":"2021-09-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":":bulb: **Tip:**","lastModifiedDate":"2021-09-23"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"Format birthday as ddMMyyyy","lastModifiedDate":"2021-09-23"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison b/25121999 p/1234567 t/criminal`","lastModifiedDate":"2021-09-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"* `list`","lastModifiedDate":"2021-09-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"* When editing tags, the existing tags of the person will be removed i.e. adding of tags is not cumulative.","lastModifiedDate":"2021-09-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"* `edit 1 p/91234567 e/johndoe@example.com`","lastModifiedDate":"2021-09-23"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"  * Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"* `edit 2 n/Betsy Crower t/`","lastModifiedDate":"2021-09-23"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"  * Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"### Adding Tags : `tag`","lastModifiedDate":"2021-09-23"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"Adds tag to an existing person in the address book.","lastModifiedDate":"2021-09-23"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":152,"author":{"gitId":"Jiwei99"},"content":"* `tag INDEX [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":155,"author":{"gitId":"Jiwei99"},"content":"* Adds tag to the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-23"},{"lineNumber":156,"author":{"gitId":"Jiwei99"},"content":"* New tags will be added on top of existing tags i.e. tags added is cumulative.","lastModifiedDate":"2021-09-23"},{"lineNumber":157,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":158,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":159,"author":{"gitId":"Jiwei99"},"content":"* `tag 2 t/friend t/NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":160,"author":{"gitId":"Jiwei99"},"content":"    * Adds the tags `friend` and `NUS` to the 2nd person.","lastModifiedDate":"2021-09-23"},{"lineNumber":161,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":162,"author":{"gitId":"Jiwei99"},"content":"### Removing Tags : `untag`","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"Jiwei99"},"content":"Removes an existing tag from an existing person in the address book.","lastModifiedDate":"2021-09-23"},{"lineNumber":165,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"Jiwei99"},"content":"* `untag INDEX [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":169,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":170,"author":{"gitId":"Jiwei99"},"content":"* Adds tag to the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"Jiwei99"},"content":"* Only tags that exist will be removed.","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"Jiwei99"},"content":"* `untag 2 t/friend t/NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":175,"author":{"gitId":"Jiwei99"},"content":"    * Removes the tags `friend` and `NUS` from the 2nd person.","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":182,"author":{"gitId":"Jiwei99"},"content":"* `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-09-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":185,"author":{"gitId":"Jiwei99"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`","lastModifiedDate":"2021-09-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"Jiwei99"},"content":"* `find John`","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"Jiwei99"},"content":"  * returns `john` and `John Doe`","lastModifiedDate":"2021-09-23"},{"lineNumber":195,"author":{"gitId":"Jiwei99"},"content":"* `find alex david`","lastModifiedDate":"2021-09-23"},{"lineNumber":196,"author":{"gitId":"Jiwei99"},"content":"  * returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":197,"author":{"gitId":"Jiwei99"},"content":"    ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png","lastModifiedDate":"2021-09-23"},{"lineNumber":198,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":199,"author":{"gitId":"Jiwei99"},"content":"### Locating persons by tags: `findTag`","lastModifiedDate":"2021-09-23"},{"lineNumber":200,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":201,"author":{"gitId":"Jiwei99"},"content":"Finds persons whose contact contain any of the given tags.","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":204,"author":{"gitId":"Jiwei99"},"content":"* `findTag TAG [MORE_TAGS]`","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":206,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":207,"author":{"gitId":"Jiwei99"},"content":"* The search is case-insensitive. e.g. `friend` will match `Friend`","lastModifiedDate":"2021-09-23"},{"lineNumber":208,"author":{"gitId":"Jiwei99"},"content":"* The order of the tags does not matter.","lastModifiedDate":"2021-09-23"},{"lineNumber":209,"author":{"gitId":"Jiwei99"},"content":"* Only full tags will be matched e.g. `Friend` will not match `Friends`","lastModifiedDate":"2021-09-23"},{"lineNumber":210,"author":{"gitId":"Jiwei99"},"content":"* Persons matching all tags will be returned (i.e. `AND` search).","lastModifiedDate":"2021-09-23"},{"lineNumber":211,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":212,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"Jiwei99"},"content":"* `find Friend NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"Jiwei99"},"content":"    * returns people tagged with both `Friend` and `NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"Jiwei99"},"content":"* `delete INDEX`","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":229,"author":{"gitId":"Jiwei99"},"content":"* `list` followed by `delete 2`","lastModifiedDate":"2021-09-23"},{"lineNumber":230,"author":{"gitId":"Jiwei99"},"content":"  * deletes the 2nd person in the address book.","lastModifiedDate":"2021-09-23"},{"lineNumber":231,"author":{"gitId":"Jiwei99"},"content":"* `find Betsy` followed by `delete 1`","lastModifiedDate":"2021-09-23"},{"lineNumber":232,"author":{"gitId":"Jiwei99"},"content":"  * deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"Jiwei99"},"content":"* `clear`","lastModifiedDate":"2021-09-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":246,"author":{"gitId":"Jiwei99"},"content":"* `exit`","lastModifiedDate":"2021-09-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"Jiwei99"},"content":"CONNECTIONS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":254,"author":{"gitId":"Jiwei99"},"content":"CONNECTIONS data are saved as a JSON file `[JAR file location]/data/connections.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-09-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":256,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":258,"author":{"gitId":"Jiwei99"},"content":":exclamation: **Caution:**","lastModifiedDate":"2021-09-23"},{"lineNumber":259,"author":{"gitId":"Jiwei99"},"content":"If your changes to the data file makes its format invalid, CONNECTIONS will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-09-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"Jiwei99"},"content":"## Command Summary","lastModifiedDate":"2021-09-23"},{"lineNumber":276,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":277,"author":{"gitId":"Jiwei99"},"content":"Action | Summary | Format, Examples","lastModifiedDate":"2021-09-23"},{"lineNumber":278,"author":{"gitId":"Jiwei99"},"content":"--------|--------|----------------","lastModifiedDate":"2021-09-23"},{"lineNumber":279,"author":{"gitId":"Jiwei99"},"content":"**Add** | Adds a person | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/23062001 t/friend t/colleague`","lastModifiedDate":"2021-09-23"},{"lineNumber":280,"author":{"gitId":"Jiwei99"},"content":"**Clear** | Clears all entries | `clear`","lastModifiedDate":"2021-09-23"},{"lineNumber":281,"author":{"gitId":"Jiwei99"},"content":"**Delete** | Deletes a person | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-09-23"},{"lineNumber":282,"author":{"gitId":"Jiwei99"},"content":"**Edit** | Edits a person | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com b/30012000`","lastModifiedDate":"2021-09-23"},{"lineNumber":283,"author":{"gitId":"Jiwei99"},"content":"**Exit** | Exits the program | `exit`","lastModifiedDate":"2021-09-23"},{"lineNumber":284,"author":{"gitId":"Jiwei99"},"content":"**Find** | Locates persons by name | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2021-09-23"},{"lineNumber":285,"author":{"gitId":"Jiwei99"},"content":"**FindTag** | Locates persons by tags | `findTag TAG [MORE_TAGS]`\u003cbr\u003e e.g., `find friend NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":286,"author":{"gitId":"Jiwei99"},"content":"**Help** | Displays help information | `help [COMMAND] [/d]`","lastModifiedDate":"2021-09-23"},{"lineNumber":287,"author":{"gitId":"Jiwei99"},"content":"**List** | Lists all persons | `list`","lastModifiedDate":"2021-09-23"},{"lineNumber":288,"author":{"gitId":"Jiwei99"},"content":"**Tag** | Tags a person | `tag INDEX [t/TAG]…​`\u003cbr\u003e e.g., `tag 2 t/friend t/NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":289,"author":{"gitId":"Jiwei99"},"content":"**Untag** | Untags a person | `untag INDEX [t/TAG]…​`\u003cbr\u003e e.g., `untag 2 t/colleague`","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"Jiwei99":151,"-":138}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"title: CONNECTIONS","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103-F09-4/tp/branch/master/graph/badge.svg?token\u003dGXI6LDV6WE)](https://codecov.io/gh/AY2122S1-CS2103-F09-4/tp)","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"**CONNECTIONS is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"* If you are interested in using CONNECTIONS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"* If you are interested about developing CONNECTIONS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jiwei99":4,"-":15}},{"path":"docs/team/chanyucheng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"title: Chan Yu Cheng\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"Connections is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dyucheng11122017\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)  ","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"cookiedan42":2,"yucheng11122017":12}},{"path":"docs/team/daniel.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"title: Daniel Tan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dcookiedan42\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"    * Added user stories","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"cookiedan42":16}},{"path":"docs/team/jiwei.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"layout: page","lastModifiedDate":"2021-09-25"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"title: Lim Ji Wei\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-25"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"---","lastModifiedDate":"2021-09-25"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-09-25"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"CONNECTIONS is a desktop address book application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-25"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-25"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"* **New Feature**: Added the ability to untag tags from contacts.","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"  * What it does: allows the user to remove one or multiple tags from a contact.","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"  * Justification: This feature improves the product because the user can now remove individual tags instead of having to rebuild the whole list of tags.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"  * Highlights: This enhancement improves usability of CONNECTIONS.","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dJiwei99\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"* **Project management**:","lastModifiedDate":"2021-09-25"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-25"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-25"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"  * User Guide [\\#20]():","lastModifiedDate":"2021-09-25"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"      * Updated documentation to align with features of CONNECTIONS","lastModifiedDate":"2021-09-25"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"      * Added documentation for BIRTHDAY parameter","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"      * Added documentation for the features `tag`, `untag` and `findTag` ","lastModifiedDate":"2021-09-25"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"* **Community**:","lastModifiedDate":"2021-09-25"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"* **Tools**:","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"Jiwei99":36,"cookiedan42":1}},{"path":"docs/team/justinhoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"---","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"layout: page","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"title: Justin Hoe\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"---","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"### Project: Connections","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"Connections is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-24"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"* **New Feature**: ","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dJustinhoejj\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"* **Project management**:","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-24"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    * Read Me:","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"        * Added application summary","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"* **Community**:","lastModifiedDate":"2021-09-24"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"* **Tools**:","lastModifiedDate":"2021-09-24"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"cookiedan42":1,"Justinhoejj":26}},{"path":"docs/team/leezhixuan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"title: Lee Zhi Xuan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"CONNECTIONS is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dleezhixuan\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"  * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"cookiedan42":1,"leezhixuan":43}},{"path":"src/main/java/seedu/address/commons/util/EditUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"public class EditUtil {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"        private Name name;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"        private Phone phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"        private Email email;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"        private Address address;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"        private Birthday birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"            setBirthday(toCopy.birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"            this.email \u003d email;","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"            this.address \u003d address;","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"        public void setBirthday(Birthday birthday) {","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"            this.birthday \u003d birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"                return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"                return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"            // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday());","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"cookiedan42":132}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"            + PREFIX_TAG + \"owesMoney \"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"            + PREFIX_BIRTHDAY + \"04071999\";","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Justinhoejj":1,"leezhixuan":4,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMultipleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.util.List;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":" * Deletes multiple people identified using the displayed index range from the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommand extends Command {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"    public static final String COMMAND_WORD \u003d \"deletem\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"            + \": Deletes a range of people identified by the index numbers in the displayed person list.\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"            + \"Parameters: START_INDEX - END_INDEX (must be positive integers, both inclusive)\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"            + \"Example: \" + COMMAND_WORD + \" 8 - 14\";","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS \u003d \"Deleted Persons: \";","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"STARTINDEX cannot be larger than ENDINDEX\";","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"    private final Index startIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"    private final Index endIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"     * Deletes multiple people between the range of start index and end index both inclusive.","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"     * @param startIndex displayed index of first person to be deleted.","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"     * @param endIndex displayed index of last person to be deleted.","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"    public DeleteMultipleCommand(Index startIndex, Index endIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"        requireAllNonNull(startIndex, endIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(areValidIndexes(startIndex, endIndex), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"        this.startIndex \u003d startIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"        this.endIndex \u003d endIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    private boolean areValidIndexes(Index startIndex, Index endIndex) {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"        return startIndex.getZeroBased() \u003c\u003d endIndex.getZeroBased();","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"    private boolean haveEqualIndexes(DeleteMultipleCommand other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"        return startIndex.equals(other.startIndex)","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"                \u0026\u0026 endIndex.equals(other.endIndex);","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"        if (startIndex.getZeroBased() \u003e\u003d lastShownList.size()","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"                || endIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"        StringBuilder result \u003d new StringBuilder(MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS);","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"        for (int i \u003d startIndex.getZeroBased(); i \u003c\u003d endIndex.getZeroBased(); i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"            Person personToDelete \u003d lastShownList.get(startIndex.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"            result.append(String.format(\"\\n%1$s\", personToDelete));","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"        return new CommandResult(result.toString());","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"                || (other instanceof DeleteMultipleCommand // instanceof handles nulls","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"                    \u0026\u0026 haveEqualIndexes((DeleteMultipleCommand) other)); // both indexes are equal","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":79}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\"","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"    public Index getIndex() {","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        return index;","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    public EditPersonDescriptor getEditPersonDescriptor() {","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"        return editPersonDescriptor;","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday().orElse(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedBirthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Jiwei99":8,"cookiedan42":1,"Justinhoejj":1,"leezhixuan":5,"-":119}},{"path":"src/main/java/seedu/address/logic/commands/FindTagsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.PersonTagsContainsTagsPredicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" * Finds and lists all persons in address book whose tags contains all of the argument tags.","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":" * Tag matching is case insensitive.","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"public class FindTagsCommand extends Command {","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_WORD \u003d \"findTag\";","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"            + \"the specified tags (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"            + \"Parameters: TAG [MORE_TAGS]...\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"            + \"Example: \" + COMMAND_WORD + \" friend NUS\";","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    private final PersonTagsContainsTagsPredicate predicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    public FindTagsCommand(PersonTagsContainsTagsPredicate predicate) {","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"        if (other instanceof FindTagsCommand) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"            FindTagsCommand otherFindTagsCommand \u003d (FindTagsCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"            return predicate.equals(otherFindTagsCommand.predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":49}},{"path":"src/main/java/seedu/address/logic/commands/TagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":" * Adds a new tag to the details of an existing person in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"public class TagCommand extends Command {","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Tag to the details of the person identified \"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"            + \"by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"            + PREFIX_TAG + \"TAG\" + \" [\" + PREFIX_TAG + \"EXTRA_TAG]...\\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \"ExampleTag\";","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_TAG_ADD_SUCCESS \u003d \"Person %1$s now has tags: %2$s\";","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    private final Index index;","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    public TagCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        assert personToEdit.isSamePerson(editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"        return new CommandResult(String.format(MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags()));","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        Name updatedName \u003d personToEdit.getName();","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"Justinhoejj"},"content":"        Birthday updatedBirthday \u003d personToEdit.getBirthday().orElse(null);","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003cTag\u003e();","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"        updatedTags.addAll(personToEdit.getTags());","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"        updatedTags.addAll(editPersonDescriptor.getTags().orElse(new HashSet\u003cTag\u003e()));","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedBirthday);","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"        if (!(other instanceof TagCommand)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"        // state check","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        TagCommand e \u003d (TagCommand) other;","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":109,"Justinhoejj":1}},{"path":"src/main/java/seedu/address/logic/commands/UntagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommand extends Command {","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_WORD \u003d \"untag\";","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a tag from the \"","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"            + \"details of the person identified \"","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"            + PREFIX_TAG + \"friend\";","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_REMOVE_PERSON_SUCCESS \u003d \"Removed tag(s) from %1$s: %2$s\";","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_NOT_REMOVED \u003d \"At least one tag to be removed must be provided.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_TAG_NOT_IN_PERSON \u003d \"%s does not have the following tags: %s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    private final Index index;","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    public UntagCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_PERSON_SUCCESS, editedPerson.getName(),","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"                getRemovedTags(editPersonDescriptor)));","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor)","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"Justinhoejj"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday().orElse(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"        Set\u003cTag\u003e removedTags \u003d editPersonDescriptor.getTags().orElse(new HashSet\u003cTag\u003e());","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"        if (!updatedTags.containsAll(removedTags)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_IN_PERSON, updatedName,","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"                    getNotFoundTags(updatedTags, removedTags)));","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"        updatedTags.removeAll(removedTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedBirthday);","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"     * Retrieves tags that user wants to remove, but are not present in the contact.","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"     * @param originalTags Tags that contact are tagged with","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"     * @param removedTags Tags to be removed","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"     * @return String containing tags that are not found","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"    public static String getNotFoundTags(Set\u003cTag\u003e originalTags, Set\u003cTag\u003e removedTags) {","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        // filters out tags that are not found in original tags","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"        // map to abstract out tagNames and join them into a string","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"        return removedTags.stream().filter(x -\u003e !originalTags.contains(x)).map(x -\u003e x.tagName)","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"                .collect(Collectors.joining(\", \"));","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"     * Retrieves tags that are removed.","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"     * @return String containing tags that are removed","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"    public static String getRemovedTags(EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"        return editPersonDescriptor.getTags().orElse(new HashSet\u003cTag\u003e()).stream()","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.joining(\", \"));","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"Jiwei99"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"Jiwei99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"Jiwei99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"Jiwei99"},"content":"        if (!(other instanceof UntagCommand)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"        // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand e \u003d (UntagCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":142,"cookiedan42":1,"Justinhoejj":1}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"                        PREFIX_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"        Birthday possibleBirthday \u003d ParserUtil.parseBirthday((argMultimap.getValue(PREFIX_BIRTHDAY).orElse(null)));","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, possibleBirthday);","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Justinhoejj":2,"leezhixuan":4,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"        case UntagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"            return new UntagCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"            return new TagCommandParser().parse(arguments);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"        case DeleteMultipleCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"            return new DeleteMultipleCommandParser().parse(arguments);","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"        case FindTagsCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"            return new FindTagsCommandParser().parse(arguments);","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":4,"cookiedan42":4,"Justinhoejj":4,"yucheng11122017":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"leezhixuan":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMultipleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandParser implements Parser\u003cDeleteMultipleCommand\u003e {","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMultipleCommand","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"     * and returns a DeleteMultipleCommand object for execution.","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    public DeleteMultipleCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"            int indexOfDash \u003d ParserUtil.getIndexOfSubstring(args, \"-\");","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"            Index indexStart \u003d ParserUtil.parseIndex(args.substring(0, indexOfDash));","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"            Index indexEnd \u003d ParserUtil.parseIndex(args.substring(indexOfDash + 1));","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"            return new DeleteMultipleCommand(indexStart, indexEnd);","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":26}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"                        PREFIX_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday((argMultimap.getValue(PREFIX_BIRTHDAY).get())));","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"cookiedan42":1,"leezhixuan":6,"-":80}},{"path":"src/main/java/seedu/address/logic/parser/FindTagsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.PersonTagsContainsTagsPredicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new FindTagsCommand object","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"public class FindTagsCommandParser implements Parser\u003cFindTagsCommand\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagsCommand","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     * and returns a FindTagsCommand object for execution.","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"    public FindTagsCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagsCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"            List\u003cTag\u003e tagKeywords \u003d Arrays.stream(trimmedArgs.split(\"\\\\s+\"))","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"                    .map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"            return new FindTagsCommand(new PersonTagsContainsTagsPredicate(tagKeywords));","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":39}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_INVALID_SUBSTRING \u003d \"Substring does not exist.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"     * Parses {@code String birthday} into a {@code Birthday}.","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"Justinhoejj"},"content":"            return null;","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"        String trimmedBirthday \u003d birthday.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidFormat(trimmedBirthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidDate(trimmedBirthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(Birthday.MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"        return new Birthday(trimmedBirthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"Justinhoejj"},"content":"     * Parses {@code String} of arguments to retrieve index of start of {@code String} of substring.","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"Justinhoejj"},"content":"     * @throws ParseException if the given {@code substring} is not found in {@code args}.","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"Justinhoejj"},"content":"    public static int getIndexOfSubstring(String args, String substring) throws ParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"Justinhoejj"},"content":"        requireAllNonNull(args, substring);","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"Justinhoejj"},"content":"        int indexOfStartOfSubstring \u003d args.indexOf(substring);","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"Justinhoejj"},"content":"        if (indexOfStartOfSubstring \u003d\u003d -1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(MESSAGE_INVALID_SUBSTRING);","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"Justinhoejj"},"content":"        return indexOfStartOfSubstring;","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Justinhoejj":24,"leezhixuan":10,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/TagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":" * Parses input arguments and creates a new TagCommand object","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"     * Parses the given {@code String} of arguments in the context of the TagCommand","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"     * and returns an TagCommand object for execution.","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"    public TagCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"        Index index;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"        parseTagsForAppend(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        assert editPersonDescriptor.isAnyFieldEdited();","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"        return new TagCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForAppend(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        return Optional.of(ParserUtil.parseTags(tags));","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":56}},{"path":"src/main/java/seedu/address/logic/parser/UntagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_NOT_REMOVED;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"     * Parses the given {@code String} of arguments in the context of the UntagCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"     * and returns an UntagCommand object for execution.","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    public UntagCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(MESSAGE_NOT_REMOVED);","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        return new UntagCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"     * @throws ParseException if tags contain empty string","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"            return Optional.empty();","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"        if (tags.contains(\"\")) {","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        return Optional.of(ParserUtil.parseTags(tags));","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":64,"cookiedan42":1}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":" * Represents a Person\u0027s birthday in the address book.","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidFormat(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"public class Birthday {","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Birthdays should come in the form of ddMMyyyy\";","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"Birthday is not a valid date\";","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}\";","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"    private static final DateTimeFormatter BIRTHDATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"ddMMuuuu\");","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    public final LocalDate birthdate;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"     * Constructs an {@code Birthday}.","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"     * @param birthdate A valid date value.","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"    public Birthday(String birthdate) {","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"        requireNonNull(birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(isValidFormat(birthdate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(isValidDate(birthdate), MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        this.birthdate \u003d LocalDate.parse(birthdate, BIRTHDATE_FORMATTER);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"     * Returns if a given string is in valid birthday format.","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isValidFormat(String birthday) {","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"        return birthday.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"     * Returns if a given string is a valid date.","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isValidDate(String birthday) {","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"            LocalDate.parse(birthday, BIRTHDATE_FORMATTER.withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"            return true;","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        return BIRTHDATE_FORMATTER.format(this.birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"                || (other instanceof Birthday // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"                \u0026\u0026 birthdate.equals(((Birthday) other).birthdate)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"     * @return format for UI display as dd MMM yyyy","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"    public String display() {","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"        return DateTimeFormatter.ofPattern(\"dd MMM yyyy\").format(this.birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Justinhoejj":38,"leezhixuan":35}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"    private final Birthday birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    public Person(Name name, Phone phone, Email email, Address address,","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"                  Set\u003cTag\u003e tags, Birthday birthday) {","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"    public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"        return Optional.ofNullable(this.birthday);","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday());","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        return Objects.hash(name, phone, email, address, tags, birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"        if (getBirthday().isPresent()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"            builder.append(\"; Birthday: \")","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"                    .append(getBirthday().get());","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Justinhoejj":8,"leezhixuan":8,"-":120}},{"path":"src/main/java/seedu/address/model/person/PersonTagsContainsTagsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches all of the tags given.","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"public class PersonTagsContainsTagsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    private final List\u003cTag\u003e tagList;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    public PersonTagsContainsTagsPredicate(List\u003cTag\u003e tagList) {","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"        Tag[] arrayTags \u003d new Tag[person.getTags().toArray().length];","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"        return tagList.stream()","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"                .allMatch(tag -\u003e Arrays.stream(person.getTags().toArray(arrayTags))","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"                        .anyMatch(personTag-\u003e personTag.compareTag(tag, false)));","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"                || (other instanceof PersonTagsContainsTagsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 tagList.equals(((PersonTagsContainsTagsPredicate) other).tagList)); // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":35}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * Compares this tag with other tag with case sensitivity and case insensitivity","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @param otherTag other tag to be compared to this tag","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"     * @param isCaseSensitive if case sensitivity is wanted","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     * @return boolean that indicates if this and other tag are equal","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    public boolean compareTag(Tag otherTag, boolean isCaseSensitive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"        if (isCaseSensitive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"            return this.equals(otherTag);","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"            return this.tagName.equalsIgnoreCase(otherTag.tagName);","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        if (other instanceof Tag) {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"            Tag otherTag \u003d (Tag) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"            return tagName.equals(otherTag.tagName);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":24,"-":51}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"friends\"), new Birthday(\"01021997\")),","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"colleagues\", \"friends\"), null),","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"neighbours\"), null),","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"family\"), null),","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"classmates\"), new Birthday(\"20111998\")),","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"                getTagSet(\"colleagues\"), new Birthday(\"15092001\"))","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Justinhoejj":6,"leezhixuan":1,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"    private final String birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"birthday\") String birthday) {","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"        birthday \u003d source.getBirthday().map(Birthday::toString).orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"Justinhoejj"},"content":"            return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, null);","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"        // Set birthday if non-null","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidFormat(birthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidDate(birthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"Justinhoejj"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelBirthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":8,"leezhixuan":12,"-":107}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103-f09-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Jiwei99":1,"-":101}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    private Label birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e possibleBirthday \u003d person.getBirthday();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"        birthday.setText(possibleBirthday.map(Birthday::display).orElse(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Justinhoejj":4,"leezhixuan":2,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"leezhixuan":1,"-":36}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"    \"birthday\": \"1999-07-04\"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"    \"birthday\": \"2000-09-09\"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"leezhixuan":4,"-":11}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"    \"birthday\": \"2001-06-15\"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"leezhixuan":2,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\": [ \"friends\" ],","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"16121997\"","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"16121997\"","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":2,"leezhixuan":2,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"    \"address\": \"4th street\",","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"15122000\"","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":1,"leezhixuan":1,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ \"friends\" ],","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"05021999\"","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"16042000\"","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"25011997\"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ \"friends\" ],","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"08091990\"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"12101990\"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"07111990\"","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"    \"tagged\" : [ ],","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\": \"12041990\"","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"  }, {","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"      \"name\": \"Hannah Worst\",","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"      \"phone\": \"1234567\",","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"      \"email\": \"hhhhannah@example.com\",","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"      \"address\": \"12th street\",","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"      \"tagged\" : [],","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"      \"birthday\" : \"31011990\"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"  }, {","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"      \"name\": \"Hannah No Birthday Worst\",","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"      \"phone\": \"1234567\",","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"      \"email\": \"hhhhannah@example.com\",","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"      \"address\": \"12th street\",","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"      \"birthday\" : null","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"  }, {","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    \"name\" : \"Indigo Color\",","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"    \"phone\" : \"2442984\",","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"    \"email\" : \"color@rainbow.com\",","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"    \"address\" : \"big tokyo\",","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\" : \"11101995\"","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"  }, {","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"    \"name\" : \"Indigo No Birthday Color\",","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"    \"phone\" : \"2442984\",","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"    \"email\" : \"color@rainbow.com\",","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"    \"address\" : \"big tokyo\",","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"    \"birthday\" : null","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":32,"leezhixuan":7,"-":39}},{"path":"src/test/java/seedu/address/commons/util/EditUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"class EditUtilTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"    public void copy_isEqual() {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor base \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor test \u003d new EditPersonDescriptor(base);","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(base, test);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    public void isAnyFieldEdited_true() {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        testTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setTags(testTags);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"    public void isAnyFieldEdited_false() {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor test \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(test.isAnyFieldEdited());","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    public void equals_emptyDescriptor() {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor left \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor right \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(left, right);","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"    public void equals_filledDescriptor() {","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor left \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor right \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"        left.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        left.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        left.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"        left.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e leftTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        leftTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        left.setTags(leftTags);","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"        left.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"        right.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"        right.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"        right.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        right.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e rightTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        rightTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"        right.setTags(rightTags);","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        right.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(left, right);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"cookiedan42":109}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"leezhixuan":2,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_WIFE \u003d \"wife\";","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_STUDENT \u003d \"student\";","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_TEACHING_ASSISTANT \u003d \"teachingassistant\";","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_TEACHING_ASSISTANT_CAMEL \u003d \"TeachingAssistant\";","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"05061999\";","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"02011988\";","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_WIFE \u003d \" \" + PREFIX_TAG + VALID_TAG_WIFE;","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_TEACHING_ASSISTANT \u003d \" \" + PREFIX_TAG + VALID_TAG_TEACHING_ASSISTANT;","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_TEACHING_ASSISTANT_CAMEL \u003d \" \" + PREFIX_TAG","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"            + VALID_TAG_TEACHING_ASSISTANT_CAMEL;","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"2020-Jan-12\"; // only numbers","lastModifiedDate":"2021-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"    public static final EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    public static final EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"Justinhoejj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person between and including given","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"Justinhoejj"},"content":"     * {@code targetIndex} in the {@code model}\u0027s address book.","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"Justinhoejj"},"content":"    public static void showPersonBetweenIndex(Model model, Index startIndex, Index endIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(startIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(endIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"Justinhoejj"},"content":"        // Determine persons to display within and including given indexes.","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"Justinhoejj"},"content":"        ArrayList\u003cPerson\u003e personsToDisplay \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"Justinhoejj"},"content":"        for (int i \u003d startIndex.getZeroBased(); i \u003c\u003d endIndex.getZeroBased(); i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"Justinhoejj"},"content":"            Person person \u003d model.getFilteredPersonList().get(i);","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"Justinhoejj"},"content":"            personsToDisplay.add(person);","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"Justinhoejj"},"content":"        model.updateFilteredPersonList(person -\u003e personsToDisplay.contains(person));","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(endIndex.getOneBased() - startIndex.getOneBased() + 1, model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"cookiedan42":12,"Justinhoejj":21,"leezhixuan":6,"-":124}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMultipleCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonBetweenIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINETH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_TENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_validIndexEightToElevenUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(INDEX_EIGHTH_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_ELEVENTH_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        Person eighth \u003d model.getFilteredPersonList().get(INDEX_EIGHTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"        Person nineth \u003d model.getFilteredPersonList().get(INDEX_NINETH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"        Person tenth \u003d model.getFilteredPersonList().get(INDEX_TENTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"        Person eleventh \u003d model.getFilteredPersonList().get(INDEX_ELEVENTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"        String expectedMessage \u003d new StringBuilder(DeleteMultipleCommand.MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS)","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", eighth))","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", nineth))","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", tenth))","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", eleventh))","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"                .toString();","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(eighth);","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(nineth);","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(tenth);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(eleventh);","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandSuccess(deleteMultipleCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        Index validIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(validIndex, outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandFailure(deleteMultipleCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_validIndexFilteredListDeleteThreePersons_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"        showPersonBetweenIndex(model, INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"        Person personFirstToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"        Person personSecondToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"        Person personThirdToDelete \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"        String expectedMessage \u003d String.format(DeleteMultipleCommand.MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"                + \"\\n%1$s\\n%2$s\\n%3$s\", personFirstToDelete, personSecondToDelete, personThirdToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personFirstToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personSecondToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personThirdToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"Justinhoejj"},"content":"        showPersonBetweenIndex(model, INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"Justinhoejj"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"Justinhoejj"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"Justinhoejj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"Justinhoejj"},"content":"    public void equals() {","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteFirstToThird \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteThirdToEighth \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"Justinhoejj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(deleteFirstToThird.equals(deleteFirstToThird));","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteFirstToThirdCopy \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(deleteFirstToThird.equals(deleteFirstToThirdCopy));","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"Justinhoejj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(1));","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"Justinhoejj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"Justinhoejj"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(deleteThirdToEighth));","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"Justinhoejj"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":131}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"cookiedan42":1,"-":172}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cookiedan42":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/FindTagsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.PersonTagsContainsTagsPredicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagsCommand}.","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"public class FindTagsCommandTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"    public void equals() {","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e firstTagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        firstTagList.add(new Tag(\"first\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e secondTagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"        secondTagList.add(new Tag(\"second\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"                new PersonTagsContainsTagsPredicate(firstTagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"                new PersonTagsContainsTagsPredicate(secondTagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand findFirstTagCommand \u003d new FindTagsCommand(firstPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand findSecondTagCommand \u003d new FindTagsCommand(secondPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand findFirstTagCommandCopy \u003d new FindTagsCommand(firstPredicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommandCopy));","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(findFirstTagCommand.equals(1));","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(findFirstTagCommand.equals(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(findFirstTagCommand.equals(findSecondTagCommand));","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_oneTags_noPersonFound() {","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d preparePredicate(\"sdfiojoij\");","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_oneTag_multiplePersonsFound() {","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d preparePredicate(\"friends\");","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_multipleTag_onePersonFound() {","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d preparePredicate(\"friends owesMoney\");","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand command \u003d new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-10-05"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"    private PersonTagsContainsTagsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-10-05"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        String[] userArguments \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2021-10-05"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e tagList \u003d Arrays.stream(userArguments).map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"        return new PersonTagsContainsTagsPredicate(tagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":104}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WIFE;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalPersons.getNoTagTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalPersons.getTaggedTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TagCommand.","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"class TagCommandTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddFriend \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddHusband \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddBoth \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"    private Model generateNoTagModel() {","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        return new ModelManager(getNoTagTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    private Model generateDefaultTagModel() {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_WIFE), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"    public void execute_singleTagNoExistingUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"    public void execute_singleTagPreExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"    public void execute_multipleTagNoExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddBoth);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"    public void execute_multipleTagPreExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst)","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddBoth);","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"                new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build());","lastModifiedDate":"2021-10-06"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":138,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"cookiedan42"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"cookiedan42"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":143,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":145,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":147,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":148,"author":{"gitId":"cookiedan42"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-06"},{"lineNumber":149,"author":{"gitId":"cookiedan42"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-06"},{"lineNumber":150,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":152,"author":{"gitId":"cookiedan42"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":153,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"cookiedan42"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"cookiedan42"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":156,"author":{"gitId":"cookiedan42"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-06"},{"lineNumber":157,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":159,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":160,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":161,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":162,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":163,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":164,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":165,"author":{"gitId":"cookiedan42"},"content":"    public void equals() {","lastModifiedDate":"2021-10-06"},{"lineNumber":166,"author":{"gitId":"cookiedan42"},"content":"        final TagCommand standardCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":167,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":168,"author":{"gitId":"cookiedan42"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":169,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":170,"author":{"gitId":"cookiedan42"},"content":"        TagCommand commandWithSameValues \u003d new TagCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":171,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-06"},{"lineNumber":172,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":173,"author":{"gitId":"cookiedan42"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":174,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-06"},{"lineNumber":175,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":176,"author":{"gitId":"cookiedan42"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":177,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":178,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":179,"author":{"gitId":"cookiedan42"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":180,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-06"},{"lineNumber":181,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":182,"author":{"gitId":"cookiedan42"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":183,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_SECOND_PERSON, descriptorAddFriend)));","lastModifiedDate":"2021-10-06"},{"lineNumber":184,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":185,"author":{"gitId":"cookiedan42"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":186,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, descriptorAddHusband)));","lastModifiedDate":"2021-10-06"},{"lineNumber":187,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":188,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":188}},{"path":"src/test/java/seedu/address/logic/commands/UntagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-09"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEACHING_ASSISTANT;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WIFE;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_REMOVE_PERSON_SUCCESS;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_TAG_NOT_IN_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.getNotFoundTags;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.getRemovedTags;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalPersons.getTaggedTypicalAddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"class UntagCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendAndHusbandTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND, VALID_TAG_HUSBAND), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendHusbandTeachingAssistantStudentTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND, VALID_TAG_HUSBAND,","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"                VALID_TAG_TEACHING_ASSISTANT, VALID_TAG_STUDENT), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"    void execute_singleTagNoRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(firstPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_PERSON_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"    void execute_singleTagWithRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(firstPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_PERSON_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"    void execute_multipleTagsNoRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(secondPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_PERSON_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"    void execute_multipleTagsWithRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendHusbandTeachingAssistantStudentTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(thirdPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_STUDENT, VALID_TAG_TEACHING_ASSISTANT).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_THIRD_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_PERSON_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":130,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(thirdPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_PERSON_SUCCESS,","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"Jiwei99"},"content":"    public void execute_personNotTagged_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":159,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":160,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_STUDENT).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":162,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand editCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":163,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":164,"author":{"gitId":"Jiwei99"},"content":"        String tagsNotFound \u003d getNotFoundTags(firstPerson.getTags(),","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"Jiwei99"},"content":"                descriptor.getTags().orElse(new HashSet\u003cTag\u003e()));","lastModifiedDate":"2021-10-09"},{"lineNumber":166,"author":{"gitId":"Jiwei99"},"content":"        String message \u003d String.format(MESSAGE_TAG_NOT_IN_PERSON, firstPerson.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"Jiwei99"},"content":"                tagsNotFound);","lastModifiedDate":"2021-10-09"},{"lineNumber":168,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(editCommand, model, message);","lastModifiedDate":"2021-10-09"},{"lineNumber":169,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":170,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":171,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":172,"author":{"gitId":"Jiwei99"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-08"},{"lineNumber":173,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor removeFriendDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":175,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor removeWifeDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":177,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":178,"author":{"gitId":"Jiwei99"},"content":"        final UntagCommand standardCommand \u003d new UntagCommand(INDEX_THIRD_PERSON, removeFriendDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":179,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"Jiwei99"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(removeFriendDescriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand commandWithSameValues \u003d new UntagCommand(INDEX_THIRD_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-09"},{"lineNumber":184,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"Jiwei99"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":186,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":188,"author":{"gitId":"Jiwei99"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":190,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"Jiwei99"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":192,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-09"},{"lineNumber":193,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":194,"author":{"gitId":"Jiwei99"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":195,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new UntagCommand(INDEX_SECOND_PERSON, removeFriendDescriptor)));","lastModifiedDate":"2021-10-09"},{"lineNumber":196,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":197,"author":{"gitId":"Jiwei99"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":198,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new UntagCommand(INDEX_THIRD_PERSON, removeWifeDescriptor)));","lastModifiedDate":"2021-10-09"},{"lineNumber":199,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":200,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":199,"cookiedan42":1}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"                        + BIRTHDAY_DESC_AMY, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        // missing birthday prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"\",","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + BIRTHDAY_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"        // invalid birthday","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_FRIEND + VALID_TAG_FRIEND + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"                        + BIRTHDAY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"leezhixuan":33,"-":118}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.PersonTagsContainsTagsPredicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"    public void parseCommand_unTag() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(new UntagCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"    public void parseCommand_addTag() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(new TagCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"    public void parseCommand_findTag() throws Exception {","lastModifiedDate":"2021-10-05"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2021-10-05"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e tagList \u003d keywords.stream().map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand command \u003d (FindTagsCommand) parser.parseCommand(","lastModifiedDate":"2021-10-05"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"                FindTagsCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-05"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(new FindTagsCommand(new PersonTagsContainsTagsPredicate(tagList)), command);","lastModifiedDate":"2021-10-05"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Jiwei99":11,"cookiedan42":12,"yucheng11122017":12,"-":100}},{"path":"src/test/java/seedu/address/logic/parser/DeleteMultipleCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandParserTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    private DeleteMultipleCommandParser parser \u003d new DeleteMultipleCommandParser();","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"        assertParseSuccess(parser, \"8-11\",","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"                new DeleteMultipleCommand(INDEX_EIGHTH_PERSON, INDEX_ELEVENTH_PERSON));","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"        assertParseSuccess(parser, \"8 - 8\",","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"                new DeleteMultipleCommand(INDEX_EIGHTH_PERSON, INDEX_EIGHTH_PERSON));","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"14 -- 18\",","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"9 -1 3\",","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":33}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"cookiedan42":1,"-":210}},{"path":"src/test/java/seedu/address/logic/parser/FindTagsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.FindTagsCommand;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.PersonTagsContainsTagsPredicate;","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"public class FindTagsCommandParserTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    private FindTagsCommandParser parser \u003d new FindTagsCommandParser();","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagsCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_oneTags_returnsFindTagCommand() {","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        tagList.add(new Tag(\"friends\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d new PersonTagsContainsTagsPredicate(tagList);","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"                new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"friends\", expectedFindCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"\\n friends \\n  \\t\", expectedFindCommand);","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_invalidTags_throwsParseException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, \"a!\", Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_multipleTags_returnsFindTagCommand() {","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        tagList.add(new Tag(\"friends\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"        tagList.add(new Tag(\"husband\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d new PersonTagsContainsTagsPredicate(tagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        FindTagsCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"                new FindTagsCommand(predicate);","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"friends husband\", expectedFindCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"\\n friends \\n \\t husband  \\t\", expectedFindCommand);","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":60}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"12345678\";","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    private static final String INVALID_SUBSTRING \u003d \"..\";","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_BIRTHDAY \u003d \"31011991\";","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_STRING \u003d \"substring\";","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_SUBSTRING \u003d \"sub\";","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_null_returnsNull() throws ParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"Justinhoejj"},"content":"        assertNull(ParserUtil.parseBirthday((String) null));","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":209,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_validValue_returnsBirthday() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"Justinhoejj"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));","lastModifiedDate":"2021-10-12"},{"lineNumber":218,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":219,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":220,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":221,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"Justinhoejj"},"content":"        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;","lastModifiedDate":"2021-10-12"},{"lineNumber":223,"author":{"gitId":"Justinhoejj"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":224,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));","lastModifiedDate":"2021-10-12"},{"lineNumber":225,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":226,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":228,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":229,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(null, null));","lastModifiedDate":"2021-10-12"},{"lineNumber":230,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_STRING, null));","lastModifiedDate":"2021-10-12"},{"lineNumber":231,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(null, VALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_invalidValues_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_STRING, INVALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":237,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_SUBSTRING, VALID_STRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":238,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":239,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":240,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":241,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_validValue_returnsIndex() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"Justinhoejj"},"content":"        int expectedIndex \u003d VALID_STRING.indexOf(VALID_SUBSTRING);","lastModifiedDate":"2021-10-12"},{"lineNumber":243,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedIndex, ParserUtil.getIndexOfSubstring(VALID_STRING, VALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"Justinhoejj":49,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/TagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"class TagCommandParserTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"        // no index specified","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"        // no field specified","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        // negative index","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"-5\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        // zero index","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"0\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        // invalid tag alone","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        // valid tag followed by invalid tag","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"        // invalid tag followed by valid tag","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        // adding an empty tag is always invalid","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"    public void parse_oneTag_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"    public void parse_multipleTag_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    public void parse_multipleRepeatedTags_acceptsUnique() {","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"                .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":112}},{"path":"src/test/java/seedu/address/logic/parser/UntagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-08"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-08"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-08"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommandParserTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"    private UntagCommandParser parser \u003d new UntagCommandParser();","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        // no index specified","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"        // no field specified","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\", UntagCommand.MESSAGE_NOT_REMOVED);","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        // negative index","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"-5\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"        // zero index","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"0\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-08"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-08"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        // invalid tag followed by valid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        // valid tag followed by invalid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_HUSBAND + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        // empty tag","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"        // parsing {@code PREFIX_TAG} together with a valid tag results in error.","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    public void parse_singleTagSpecified_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand expectedCommand \u003d new UntagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"    public void parse_multipleTagsSpecified_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand expectedCommand \u003d new UntagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-08"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":98,"cookiedan42":3}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"public class BirthdayTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"        String invalidBirthday \u003d \"\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    public void isValidBirthday() {","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"        // null address","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidFormat(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"        // blank birthday","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidFormat(\"31-12-2011\")); // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidFormat(\"2021-11-12\")); // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"12122012 \")); // white space at end","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"12122012 \")); // white space at the start","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"        // invalid dates","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"32022011\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"12345678\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"00000000\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"        // valid birthday","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(Birthday.isValidFormat(\"19011999\")); // valid date","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(Birthday.isValidFormat(\"31121999\")); // 31st December 1999","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(Birthday.isValidFormat(\"29022012\")); // 29th Febuary leap year","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Justinhoejj":47}},{"path":"src/test/java/seedu/address/model/person/PersonTagsContainsTagsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"public class PersonTagsContainsTagsPredicateTest {","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    public void equals() {","lastModifiedDate":"2021-10-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cString\u003e firstPredicateTags \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cString\u003e secondPredicateTags \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e firstPredicateTagList \u003d firstPredicateTags.stream().map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e secondPredicateTagList \u003d secondPredicateTags.stream().map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate firstPredicate \u003d new PersonTagsContainsTagsPredicate(firstPredicateTagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate secondPredicate \u003d new PersonTagsContainsTagsPredicate(secondPredicateTagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate firstPredicateCopy \u003d new PersonTagsContainsTagsPredicate(firstPredicateTagList);","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainTags_returnsTrue() {","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        // One tag","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e firstTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        firstTags.add(new Tag(\"Alice\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate firstPredicate \u003d new PersonTagsContainsTagsPredicate(firstTags);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Alice\");","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(firstPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        // Multiple tag","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e secondTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        secondTags.add(new Tag(\"Alice\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        secondTags.add(new Tag(\"Bob\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate secondPredicate \u003d new PersonTagsContainsTagsPredicate(secondTags);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"        personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Alice\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(secondPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        // Only one matching tag","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e thirdTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        thirdTags.add(new Tag(\"Bob\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        thirdTags.add(new Tag(\"Carol\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate thirdPredicate \u003d new PersonTagsContainsTagsPredicate(thirdTags);","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        personToTest \u003d createsPersonWithTags(\"Alice Carol\", \"Friend\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(thirdPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        // Mixed-case tag","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e fourthTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"        fourthTags.add(new Tag(\"BOb\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        fourthTags.add(new Tag(\"cAroL\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate fourthPredicate \u003d new PersonTagsContainsTagsPredicate(fourthTags);","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Carol\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(fourthPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        // Subset tag","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e fifthTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"        fifthTags.add(new Tag(\"BOb\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"        fifthTags.add(new Tag(\"cAroL\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate fifthPredicate \u003d new PersonTagsContainsTagsPredicate(fifthTags);","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"        personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Carol\", \"Bobs\");","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(fifthPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainOneTag_returnsTrue() {","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"        // One tag","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e firstTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"        firstTags.add(new Tag(\"Alice\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate firstPredicate \u003d new PersonTagsContainsTagsPredicate(firstTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Alice\");","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(firstPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainMultipleTags_returnsTrue() {","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"        // Multiple tag","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e secondTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"        secondTags.add(new Tag(\"Alice\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"        secondTags.add(new Tag(\"Bob\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate secondPredicate \u003d new PersonTagsContainsTagsPredicate(secondTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Alice\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(secondPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainOnlyOneTag_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"        // Only one matching tag","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e thirdTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"        thirdTags.add(new Tag(\"Bob\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"        thirdTags.add(new Tag(\"Carol\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate thirdPredicate \u003d new PersonTagsContainsTagsPredicate(thirdTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Carol\", \"Friend\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(thirdPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainCaseInsensitiveTags_returnsTrue() {","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"        // Mixed-case tag","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e fourthTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"        fourthTags.add(new Tag(\"BOb\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"        fourthTags.add(new Tag(\"cAroL\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate fourthPredicate \u003d new PersonTagsContainsTagsPredicate(fourthTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Carol\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(fourthPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagsContainSubsetTags_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"        // Subset tag","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e fifthTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"        fifthTags.add(new Tag(\"BOb\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"        fifthTags.add(new Tag(\"cAroL\"));","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate fifthPredicate \u003d new PersonTagsContainsTagsPredicate(fifthTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Carol\", \"Bobs\");","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(fifthPredicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"yucheng11122017"},"content":"    public void test_personOtherAttributeHasTagString_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"yucheng11122017"},"content":"        String[] tagString \u003d new String[]{\"12345\", \"Main\", \"Street\"};","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e secondTagList \u003d Arrays.stream(tagString).map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d new PersonTagsContainsTagsPredicate(secondTagList);","lastModifiedDate":"2021-10-07"},{"lineNumber":145,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-10-07"},{"lineNumber":146,"author":{"gitId":"yucheng11122017"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build();","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":149,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":150,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-05"},{"lineNumber":151,"author":{"gitId":"yucheng11122017"},"content":"    public void test_noTags_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":152,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d new PersonTagsContainsTagsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-05"},{"lineNumber":153,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-10-05"},{"lineNumber":154,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":156,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":157,"author":{"gitId":"yucheng11122017"},"content":"    public void test_tagDoesNotMatch_returnsFalse() {","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"yucheng11122017"},"content":"        // Non-matching tag","lastModifiedDate":"2021-10-05"},{"lineNumber":159,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cTag\u003e firstTagList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-05"},{"lineNumber":160,"author":{"gitId":"yucheng11122017"},"content":"        firstTagList.add(new Tag(\"Carol\"));","lastModifiedDate":"2021-10-05"},{"lineNumber":161,"author":{"gitId":"yucheng11122017"},"content":"        PersonTagsContainsTagsPredicate predicate \u003d new PersonTagsContainsTagsPredicate(firstTagList);","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"yucheng11122017"},"content":"        Person personToTest \u003d createsPersonWithTags(\"Alice Bob\", \"Alice\", \"Bob\");","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":166,"author":{"gitId":"yucheng11122017"},"content":"    private Person createsPersonWithTags(String name, String ... tags) {","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"yucheng11122017"},"content":"        PersonBuilder builder \u003d new PersonBuilder().withName(name);","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"yucheng11122017"},"content":"        builder.withTags(tags);","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"yucheng11122017"},"content":"        return builder.build();","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":171,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"yucheng11122017":171}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON_NO_BIRTHDAY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"19-06-2001\";","lastModifiedDate":"2021-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().map(Birthday::toString).orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    public void toModelType_withoutBirthday_returnsPerson() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"                        null);","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(BENSON_NO_BIRTHDAY, person.toModelType());","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"                        VALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"    public void toModelType_invalidBirthday_throwsIllegalException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"                        INVALID_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-07"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":10,"leezhixuan":33,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"        descriptor.setBirthday(person.getBirthday().orElse(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"     * Parses the {@code birthday} into a {@code EditPersonDescriptor} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"     * that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        descriptor.setBirthday(new Birthday(birthday));","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cookiedan42":2,"Justinhoejj":1,"leezhixuan":10,"-":86}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"05061999\";","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    private Birthday birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"        birthday \u003d personToCopy.getBirthday().orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"     * Creates a {@code PersonBuilder} with null birthday.","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"    public static PersonBuilder ofNoBirthday() {","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"        PersonBuilder person \u003d new PersonBuilder();","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"        person.birthday \u003d null;","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"        return person;","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"    public PersonBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"        return new Person(name, phone, email, address, tags, birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Justinhoejj":9,"leezhixuan":12,"-":97}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"        if (person.getBirthday().isPresent()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"            sb.append(PREFIX_BIRTHDAY + person.getBirthday().map(x -\u003e x.toString()).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"                sb.append(PREFIX_TAG).append(\" \");","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday));","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"cookiedan42":1,"Justinhoejj":4,"leezhixuan":2,"-":60}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_EIGHTH_PERSON \u003d Index.fromOneBased(8);","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_NINETH_PERSON \u003d Index.fromOneBased(9);","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_TENTH_PERSON \u003d Index.fromOneBased(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_ELEVENTH_PERSON \u003d Index.fromOneBased(11);","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"Justinhoejj":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"05021999\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"16042000\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person BENSON_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday().withName(\"Benson Meier\")","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"            .build();","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"25011997\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"08091990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"12101990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"07111990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"12041990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person HANNAH \u003d new PersonBuilder().withName(\"Hannah Worst\").withPhone(\"1234567\")","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"hhhhannah@example.com\").withAddress(\"12th street\")","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"31011990\").build();","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person HANNAH_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday()","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"            .withName(\"Hannah No Birthday Worst\").withPhone(\"1234567\")","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"hhhhannah@example.com\").withAddress(\"12th street\").build();","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person INDIGO \u003d new PersonBuilder().withName(\"Indigo Color\").withPhone(\"2442984\")","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"color@rainbow.com\").withAddress(\"big tokyo\")","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"11101995\").build();","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person INDIGO_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday()","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"            .withName(\"Indigo No Birthday Color\").withPhone(\"2442984\")","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"color@rainbow.com\").withAddress(\"big tokyo\").build();","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"01102003\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"17121998\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"            .withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"     * Returns an {@code AddressBook} based on {@code getTypicalPersons()} but which has no tags.","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"     * @return Model containing tag-free contacts","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"    public static AddressBook getNoTagTypicalAddressBook() {","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"            person \u003d new PersonBuilder(person).withTags().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"        return ab;","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"     * Returns an {@code AddressBook} based on {@code getTypicalPersons()} but with the specified tags.","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"     * @param tags tags to give every contact in the model","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"     * @return Model containing all contacts with the specified tags","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"    public static AddressBook getTaggedTypicalAddressBook(String ... tags) {","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"            person \u003d new PersonBuilder(person).withTags(tags).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"        return ab;","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"                ALICE,","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"Justinhoejj"},"content":"                BENSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"                CARL,","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"Justinhoejj"},"content":"                DANIEL,","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"Justinhoejj"},"content":"                ELLE,","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"Justinhoejj"},"content":"                FIONA,","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"Justinhoejj"},"content":"                GEORGE,","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"Justinhoejj"},"content":"                HANNAH,","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"Justinhoejj"},"content":"                HANNAH_NO_BIRTHDAY,","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"Justinhoejj"},"content":"                INDIGO,","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"Justinhoejj"},"content":"                INDIGO_NO_BIRTHDAY","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"Justinhoejj"},"content":"        ));","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"cookiedan42":29,"Justinhoejj":40,"leezhixuan":12,"-":64}}]
