[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"[![Java CI](https://github.com/AY2122S1-CS2103-F09-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103-F09-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"## CONNECTIONS","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"CONNECTIONS is an address book application with a text based UI built for university students who possess","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"any combination of the following traits:","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"  * Forgetful","lastModifiedDate":"2021-09-24"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"  * Loves celebrating birthdays","lastModifiedDate":"2021-09-24"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"  * Frequently contacts a few contacts","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"  * Very sociable with multiple friend groups","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"  * Uses application with a smooth learning curve","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"CONNECTIONS helps you with:","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"  * Retrieving contact details with mouse free with fast and easy look up","lastModifiedDate":"2021-09-24"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"  * Notifications for birthday reminders/ lookup upcoming birthdays","lastModifiedDate":"2021-09-24"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"  * Mass send invitations for birthday parties","lastModifiedDate":"2021-09-24"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"  * View contacts by groups","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"For a detailed user guide visit our [product website](https://ay2122s1-cs2103-f09-4.github.io/tp/UserGuide.html).","lastModifiedDate":"2021-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-24"}],"authorContributionMap":{"Jiwei99":1,"Justinhoejj":15,"yucheng11122017":5,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"    implementation group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00275.5.2\u0027","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"    archiveName \u003d \u0027CONNECTIONS.jar\u0027","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"run {","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"cookiedan42":6,"yucheng11122017":1,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"### Chan Yu Cheng","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"\u003cimg src\u003d\"images/yucheng11122017.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"[[github](https://github.com/yucheng11122017)]","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"[[portfolio](team/yucheng11122017.md)]","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"* Role: Developer","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"* Responsibilities: Model","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"### Lee Zhi Xuan","lastModifiedDate":"2021-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"\u003cimg src\u003d\"images/leezhixuan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"[[github](https://github.com/leezhixuan)]","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"[[portfolio](team/leezhixuan.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"* Role: Developer","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"* Responsibilities: Logic","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"### Justin Hoe","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"\u003cimg src\u003d\"images/justinhoejj.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"[[github](http://github.com/justinhoejj)]","lastModifiedDate":"2021-09-24"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"[[portfolio](team/justinhoejj.md)]","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"* Responsibilities: UI + Repo config","lastModifiedDate":"2021-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"### Daniel Tan","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"\u003cimg src\u003d\"images/cookiedan42.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"[[github](http://github.com/cookiedan42)]","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"[[portfolio](team/cookiedan42.md)]","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"* Responsibilities: tests and documentation","lastModifiedDate":"2021-09-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"### Lim Ji Wei","lastModifiedDate":"2021-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"\u003cimg src\u003d\"images/jiwei99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"[![github](https://img.shields.io/badge/GitHub-100000?style\u003dfor-the-badge\u0026logo\u003dgithub\u0026logoColor\u003dwhite)](http://github.com/jiwei99)","lastModifiedDate":"2021-09-25"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"[[portfolio](team/jiwei99.md)]","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-09-25"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"* Responsibilities: In charge of Storage","lastModifiedDate":"2021-09-25"}],"authorContributionMap":{"Jiwei99":5,"cookiedan42":5,"Justinhoejj":5,"yucheng11122017":8,"leezhixuan":4,"-":32}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c","lastModifiedDate":"2020-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository.","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup).","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov.","lastModifiedDate":"2020-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project.","lastModifiedDate":"2020-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/MainApp.java).","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadowJar`).","lastModifiedDate":"2021-08-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"yucheng11122017":1,"-":78}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"* [Setting up, getting started](#setting-up-getting-started)","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"* [Design](#design)","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"    * [Architecture](#architecture)","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"    * [UI component](#ui-component)","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"    * [Logic component](#logic-component)","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    * [Model component](#model-component)","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    * [Storage component](#storage-component)","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"    * [Command classes](#common-classes)","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"* [Implementation](#implementation)","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    * [Tags](#tags)","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    * [Pin feature](#pin-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    * [Find feature](#find-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    * [FindAny feature](#findany-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    * [Help feature](#help-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    * [Birthday Reminder feature](#birthday-reminder-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"    * [Mailing List feature](#mailing-list-feature)","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"    * [Command History feature](#command-history-feature)","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    * [Command Assistant feature](#command-assistant-feature)","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"* [Documentation, logging, testing, configuration, dev-ops](#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"* [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"* [Appendix: Instructions for manual testing](#appendix-instructions-for-manual-testing)","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"* [Opencsv](http://opencsv.sourceforge.net/) is used when creating the CSV file in `mailingList` command.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"Given below is a quick overview of the main components and how they interact with each other.","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BirthdayReminderListPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts is defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/resources/view/MainWindow.fxml).","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a contact).","lastModifiedDate":"2021-11-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"Justinhoejj"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` and `DeleteCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"The Activity Diagram below accompanies the `DeleteCommand`.","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"![Activity Diagram of Delete Command](images/DeleteActivityDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":151,"author":{"gitId":"yucheng11122017"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and creates an `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"yucheng11122017"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-11-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":164,"author":{"gitId":"yucheng11122017"},"content":"* stores and sorts the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change. The `Person` objects are sorted according to how they should be displayed.","lastModifiedDate":"2021-11-03"},{"lineNumber":165,"author":{"gitId":"yucheng11122017"},"content":"* stores and sorts the `Person` objects as a separate _sorted_ list according to their birthday which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-11-03"},{"lineNumber":166,"author":{"gitId":"cookiedan42"},"content":"* Stores a set of `Prefix` objects which is exposed to outsiders as an unmodifiable `Set\u003cPrefix\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this set so that the UI can use this data.","lastModifiedDate":"2021-11-08"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` object.","lastModifiedDate":"2021-11-07"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components).","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"yucheng11122017"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103-F09-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-11-06"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":181,"author":{"gitId":"Justinhoejj"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`).","lastModifiedDate":"2021-11-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":190,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"Jiwei99"},"content":"### Tags","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"Jiwei99"},"content":"#### Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":199,"author":{"gitId":"leezhixuan"},"content":"Tags for contacts are implemented as a `Tag` class and are stored internally in a `Set\u003cTag\u003e` within the `Person` object. Tags are parsed and created through the `add`, `edit` and `tag` commands, and removed through the `edit` and `untag` commands. Multiple **distinct** tags can also be added for each contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":201,"author":{"gitId":"Jiwei99"},"content":"#### Usage","lastModifiedDate":"2021-10-22"},{"lineNumber":202,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"Jiwei99"},"content":"Given below is an example usage scenario and how the Tag mechanism behaves at each step.","lastModifiedDate":"2021-10-22"},{"lineNumber":204,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":205,"author":{"gitId":"Jiwei99"},"content":"Step 1. The user launches the application for the first time.","lastModifiedDate":"2021-10-22"},{"lineNumber":206,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"Step 2. The user executes the `add ... t/friend` command to add a contact tagged with `friend` into CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":209,"author":{"gitId":"Jiwei99"},"content":"Step 3. CONNECTIONS displays the newly added contact with the added tag.","lastModifiedDate":"2021-10-22"},{"lineNumber":210,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":211,"author":{"gitId":"Jiwei99"},"content":"Step 4. The user decides to add additional tags to the contact at index 1, and executes `tag 1 t/classmate`.","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":213,"author":{"gitId":"Justinhoejj"},"content":"Step 5. CONNECTIONS will update the specified contact to include the new tag `classmate`.","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":215,"author":{"gitId":"Jiwei99"},"content":"Step 6. The user decides to remove the tag `student` from a contact at index 3, and executes `untag 3 t/student`.","lastModifiedDate":"2021-10-23"},{"lineNumber":216,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":217,"author":{"gitId":"Jiwei99"},"content":"Step 7. CONNECTIONS updates and removes the tag `student` from the contact.","lastModifiedDate":"2021-10-23"},{"lineNumber":218,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":219,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":220,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":221,"author":{"gitId":"Jiwei99"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-22"},{"lineNumber":222,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":223,"author":{"gitId":"yucheng11122017"},"content":"* **Option 1 (Current choice): Tags are saved within a `Set\u003cTag\u003e` within `Person`**","lastModifiedDate":"2021-11-06"},{"lineNumber":224,"author":{"gitId":"Jiwei99"},"content":"  * Pros: Easy to implement and doesn\u0027t allow for duplicates. ","lastModifiedDate":"2021-10-22"},{"lineNumber":225,"author":{"gitId":"Jiwei99"},"content":"  * Cons: Searching for contacts by tags may be slow, especially if there are many contacts, with each contact having multiple tags.","lastModifiedDate":"2021-10-22"},{"lineNumber":226,"author":{"gitId":"Jiwei99"},"content":"  ","lastModifiedDate":"2021-10-22"},{"lineNumber":227,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2: Utilize a separate `HashMap` data structure to map contacts to tags.**","lastModifiedDate":"2021-11-08"},{"lineNumber":228,"author":{"gitId":"Jiwei99"},"content":"  * Pros: Fast retrieval of tagged contacts.","lastModifiedDate":"2021-10-22"},{"lineNumber":229,"author":{"gitId":"Jiwei99"},"content":"  * Cons: Difficult to maintain a separate data structure.","lastModifiedDate":"2021-10-22"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"yucheng11122017"},"content":"### Pin feature","lastModifiedDate":"2021-11-03"},{"lineNumber":232,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":233,"author":{"gitId":"yucheng11122017"},"content":"#### Implementation","lastModifiedDate":"2021-11-06"},{"lineNumber":234,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":236,"author":{"gitId":"yucheng11122017"},"content":"The pin mechanism is facilitated by `UniquePersonList`. It stores all the list of contacts in CONNECTIONS and maintains the order of these contacts according to if they are pinned or not. Pinned contacts have a higher priority and hence are displayed first. It currently implements the following operations:","lastModifiedDate":"2021-11-06"},{"lineNumber":237,"author":{"gitId":"yucheng11122017"},"content":"* `UniquePersonList#add` - adds a contact into the list of stored contacts and stores the contacts according to their priority. ","lastModifiedDate":"2021-11-06"},{"lineNumber":238,"author":{"gitId":"yucheng11122017"},"content":"* `UniquePersonList#setPerson` - updates an edited contact in the list of stored contacts and stores the contacts according to their priority. ","lastModifiedDate":"2021-11-06"},{"lineNumber":239,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":240,"author":{"gitId":"leezhixuan"},"content":"The operation is exposed in the `Command` interface as `Command#Execute`, specifically in `PinCommand#Execute`.","lastModifiedDate":"2021-11-07"},{"lineNumber":241,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":242,"author":{"gitId":"yucheng11122017"},"content":"Given below is an example usage scenario and how the pin mechanism behaves at each step.","lastModifiedDate":"2021-10-22"},{"lineNumber":243,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":244,"author":{"gitId":"yucheng11122017"},"content":"Step 1. The user launches the application. Current `UniquePersonList` will contain previously added contacts `person1` and `person2`.","lastModifiedDate":"2021-11-03"},{"lineNumber":245,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":246,"author":{"gitId":"yucheng11122017"},"content":"![PinUniquePersonListState0](images/PinUniquePersonListState0.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":249,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":250,"author":{"gitId":"yucheng11122017"},"content":"Step 2. The user executes `add n/person3 …​` to add a new contact. This contact is initially unpinned and will be added to the `UniquePersonList`. It will be added to the end of the `UniquePersonList`.","lastModifiedDate":"2021-11-06"},{"lineNumber":251,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"yucheng11122017"},"content":"![PinUniquePersonListState1](images/PinUniquePersonListState1.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":254,"author":{"gitId":"yucheng11122017"},"content":"Step 3. CONNECTIONS UI displays the new contact at the end of `PersonListPanel` using a `PersonCard`.","lastModifiedDate":"2021-11-06"},{"lineNumber":255,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"leezhixuan"},"content":"Step 4. The user decides that `person3` will be frequently contacted and should be pinned. The user executes `pin 3`.","lastModifiedDate":"2021-11-07"},{"lineNumber":257,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":258,"author":{"gitId":"yucheng11122017"},"content":"Step 5. Contact\u0027s `Pin` attribute will change to indicate that the contact is pinned. Contact will be brought forward in `UniquePersonList`, behind `person1` that was already pinned.","lastModifiedDate":"2021-11-06"},{"lineNumber":259,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":260,"author":{"gitId":"yucheng11122017"},"content":"![PinUniquePersonListState2](images/PinUniquePersonListState2.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":261,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":262,"author":{"gitId":"leezhixuan"},"content":"Step 6. CONNECTIONS UI will update to show the new contact at the top of the list using a `PinnedPersonCard` which shows a pin next to the contact\u0027s name. ","lastModifiedDate":"2021-11-07"},{"lineNumber":263,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":264,"author":{"gitId":"leezhixuan"},"content":"Step 7. The user decides that `person3` will no longer be frequently contacted and should be unpinned. The user executes `unpin 2` which unpins `person3` which is second in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":265,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":266,"author":{"gitId":"leezhixuan"},"content":"Step 8. Contact\u0027s `Pin` attribute will change to indicate that the contact is not pinned. Contact will be moved behind other pinned contacts in `UniquePersonList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":267,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":268,"author":{"gitId":"yucheng11122017"},"content":"![PinUniquePersonListState3](images/PinUniquePersonListState3.png)","lastModifiedDate":"2021-11-03"},{"lineNumber":269,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":270,"author":{"gitId":"leezhixuan"},"content":"Step 9. CONNECTIONS UI will update to show the contact behind other pinned contacts using a `PersonCard`. ","lastModifiedDate":"2021-11-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":272,"author":{"gitId":"Justinhoejj"},"content":"The following sequence diagram shows how the `pin` operation works:","lastModifiedDate":"2021-11-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":274,"author":{"gitId":"yucheng11122017"},"content":"![PinSequenceDiagram](images/PinSequenceDiagram.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":275,"author":{"gitId":"Justinhoejj"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `PinCommandParser` and `PinCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-07"},{"lineNumber":276,"author":{"gitId":"yucheng11122017"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":277,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":278,"author":{"gitId":"Justinhoejj"},"content":"The following activity diagram shows possible user interactions with a `pin` command.","lastModifiedDate":"2021-11-08"},{"lineNumber":279,"author":{"gitId":"Justinhoejj"},"content":"![PinActivityDiagram](images/PinActivityDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":280,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":281,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":282,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":283,"author":{"gitId":"yucheng11122017"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-22"},{"lineNumber":284,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"yucheng11122017"},"content":"**Aspect: How pin executes:**","lastModifiedDate":"2021-10-22"},{"lineNumber":286,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"yucheng11122017"},"content":"* **Option 1:** Contact has a boolean field isPinned to indicate if the contact is pinned or not.","lastModifiedDate":"2021-11-06"},{"lineNumber":288,"author":{"gitId":"Justinhoejj"},"content":"    * Pros: Easy to implement, less memory usage.","lastModifiedDate":"2021-11-07"},{"lineNumber":289,"author":{"gitId":"yucheng11122017"},"content":"    * Cons: Less flexibility in expanding the usage of pin.","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":291,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2 (current choice):** Contact has Pin object to indicate if the contact is pinned or not.","lastModifiedDate":"2021-11-06"},{"lineNumber":292,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: More flexible to expand, other methods can be added to Pin if needed.","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"yucheng11122017"},"content":"    * Cons: Will use more memory.","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"yucheng11122017"},"content":"**Aspect: How each pinned contact is displayed:**","lastModifiedDate":"2021-11-03"},{"lineNumber":296,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":297,"author":{"gitId":"yucheng11122017"},"content":"* **Option 1 (current choice):** Have two separate cards, `PersonCard` and `PinnedPersonCard`, for a unpinned contact and pinned contact respectively.","lastModifiedDate":"2021-11-08"},{"lineNumber":298,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: Easier to implement.","lastModifiedDate":"2021-11-03"},{"lineNumber":299,"author":{"gitId":"yucheng11122017"},"content":"    * Cons: More code duplication.","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":301,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2:** Have one card that will add a pin if the contact is pinned.","lastModifiedDate":"2021-11-06"},{"lineNumber":302,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: Harder to implement.","lastModifiedDate":"2021-11-03"},{"lineNumber":303,"author":{"gitId":"yucheng11122017"},"content":"    * Cons: Less code duplication.","lastModifiedDate":"2021-11-03"},{"lineNumber":304,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":305,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":306,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":307,"author":{"gitId":"leezhixuan"},"content":"### Find feature","lastModifiedDate":"2021-10-22"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":309,"author":{"gitId":"leezhixuan"},"content":"#### Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":311,"author":{"gitId":"leezhixuan"},"content":"The operation is exposed in the `Command` interface as `Command#Execute`, specifically in `FindCommand#Execute`.","lastModifiedDate":"2021-11-07"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":313,"author":{"gitId":"leezhixuan"},"content":"The filtered list will be updated using `ModelManager#updateFilteredPersonList`. A `FindPredicate` is generated according to the user\u0027s command and passed as an argument into `ModelManager#updateFilteredPersonList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":314,"author":{"gitId":"yucheng11122017"},"content":"It will be displayed in `PersonListPanel`.","lastModifiedDate":"2021-11-03"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":316,"author":{"gitId":"leezhixuan"},"content":"Given below is an example usage scenario and how the Find mechanism behaves at each step.","lastModifiedDate":"2021-10-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":318,"author":{"gitId":"yucheng11122017"},"content":"Step 1. The user launches the application for the first time. All contacts are displayed by default.","lastModifiedDate":"2021-11-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":320,"author":{"gitId":"leezhixuan"},"content":"Step 2. The user executes `find n/David t/friend t/football` to search for a matching contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":322,"author":{"gitId":"yucheng11122017"},"content":"Step 3. A `FindPredicate`  which will only return `true` if contact\u0027s name contains `David` **while also having** `friend` **and**","lastModifiedDate":"2021-11-06"},{"lineNumber":323,"author":{"gitId":"yucheng11122017"},"content":"`football` tagged to them is made.","lastModifiedDate":"2021-11-03"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":325,"author":{"gitId":"yucheng11122017"},"content":"Step 4. This`FindPredicate` is passed into `ModelManager#updateFilteredPersonList`, updating the filtered list.","lastModifiedDate":"2021-11-03"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":327,"author":{"gitId":"yucheng11122017"},"content":"Step 5. CONNECTIONS\u0027 `UI` observes the filtered list and displays the updated filtered list in `PersonListPanel`. Only contacts whose name contains `David` **while also having** `friend` **and**","lastModifiedDate":"2021-11-08"},{"lineNumber":328,"author":{"gitId":"yucheng11122017"},"content":"`football` tagged to them will be displayed.","lastModifiedDate":"2021-11-08"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":330,"author":{"gitId":"leezhixuan"},"content":"The following sequence diagram shows how the Find operation works:","lastModifiedDate":"2021-11-08"},{"lineNumber":331,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":332,"author":{"gitId":"leezhixuan"},"content":"![FindSequenceDiagram](images/FindSequenceDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":333,"author":{"gitId":"leezhixuan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `FindCommandParser`, `FindPredicate` and `FindCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":336,"author":{"gitId":"leezhixuan"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-22"},{"lineNumber":337,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":338,"author":{"gitId":"leezhixuan"},"content":"**Aspect: How Find executes:**","lastModifiedDate":"2021-10-22"},{"lineNumber":339,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":340,"author":{"gitId":"yucheng11122017"},"content":"* **Option 1:** Utilize two predicates, one to check if contact\u0027s Name contains the keywords and one to check if contact\u0027s Tag(s) contains the keywords.","lastModifiedDate":"2021-11-08"},{"lineNumber":341,"author":{"gitId":"leezhixuan"},"content":"    * Pros: Straightforward.","lastModifiedDate":"2021-10-22"},{"lineNumber":342,"author":{"gitId":"leezhixuan"},"content":"    * Cons: Introduces additional and unnecessary complexities to ModelManager.","lastModifiedDate":"2021-10-22"},{"lineNumber":343,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":344,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2 (current choice):** Create a `FindPredicate` to store Name and Tag(s)","lastModifiedDate":"2021-11-08"},{"lineNumber":345,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: Cleaner implementation. Only need to modify a method to modify the functionality of `FindCommand`.","lastModifiedDate":"2021-11-03"},{"lineNumber":346,"author":{"gitId":"leezhixuan"},"content":"    * Cons: More code.","lastModifiedDate":"2021-10-22"},{"lineNumber":347,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":348,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":349,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":350,"author":{"gitId":"leezhixuan"},"content":"### FindAny feature","lastModifiedDate":"2021-10-26"},{"lineNumber":351,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":352,"author":{"gitId":"leezhixuan"},"content":"#### Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":353,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":354,"author":{"gitId":"leezhixuan"},"content":"The operation is exposed in the `Command` interface as `Command#Execute`, specifically in `FindAnyCommand#Execute`.","lastModifiedDate":"2021-11-07"},{"lineNumber":355,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":356,"author":{"gitId":"leezhixuan"},"content":"The filtered list will be updated using `ModelManager#updateFilteredPersonList`. A `FindAnyPredicate` is generated according to the user\u0027s command and passed as an argument into `ModelManager#updateFilteredPersonList`.","lastModifiedDate":"2021-11-07"},{"lineNumber":357,"author":{"gitId":"yucheng11122017"},"content":"It will be displayed in `PersonListPanel`.","lastModifiedDate":"2021-11-03"},{"lineNumber":358,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":359,"author":{"gitId":"leezhixuan"},"content":"Given below is an example usage scenario and how the FindAny mechanism behaves at each step.","lastModifiedDate":"2021-10-26"},{"lineNumber":360,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":361,"author":{"gitId":"yucheng11122017"},"content":"Step 1. The user launches the application for the first time. All contacts are displayed by default. ","lastModifiedDate":"2021-11-08"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":363,"author":{"gitId":"leezhixuan"},"content":"Step 2. The user executes `findAny n/David n/Henry t/friend t/football` to search for a matching contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":365,"author":{"gitId":"yucheng11122017"},"content":"Step 3. A `FindAnyPredicate`  which will only return `true` if contact\u0027s name contains **either** `David` **or** `Henry` **OR** are","lastModifiedDate":"2021-11-06"},{"lineNumber":366,"author":{"gitId":"yucheng11122017"},"content":"tagged to **either** `friend` **or** `football` is made.","lastModifiedDate":"2021-11-03"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":368,"author":{"gitId":"yucheng11122017"},"content":"Step 4. This`FindAnyPredicate` is passed into `ModelManager#updateFilteredPersonList`, updating the filtered list.","lastModifiedDate":"2021-11-03"},{"lineNumber":369,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":370,"author":{"gitId":"yucheng11122017"},"content":"Step 5. CONNECTIONS\u0027 `UI` observes the filtered list is updated and displayed the updated filtered list in `PersonListPanel`.","lastModifiedDate":"2021-11-03"},{"lineNumber":371,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":372,"author":{"gitId":"leezhixuan"},"content":"The following sequence diagram shows how the FindAny operation works:","lastModifiedDate":"2021-11-08"},{"lineNumber":373,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":374,"author":{"gitId":"leezhixuan"},"content":"![FindAnySequenceDiagram](images/FindAnySequenceDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":375,"author":{"gitId":"leezhixuan"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `FindAnyCommandParser`, `FindAnyPredicate` and `FindAnyCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-08"},{"lineNumber":376,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":378,"author":{"gitId":"leezhixuan"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-22"},{"lineNumber":379,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":380,"author":{"gitId":"yucheng11122017"},"content":"**Aspect: How FindAny executes:**","lastModifiedDate":"2021-11-03"},{"lineNumber":381,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":382,"author":{"gitId":"yucheng11122017"},"content":"* **Option 1:** Utilize two predicates, one to check if contact\u0027s Name contains the keywords and one to check if contact\u0027s Tag(s) contains the keywords.","lastModifiedDate":"2021-11-08"},{"lineNumber":383,"author":{"gitId":"leezhixuan"},"content":"    * Pros: Straightforward.","lastModifiedDate":"2021-10-22"},{"lineNumber":384,"author":{"gitId":"leezhixuan"},"content":"    * Cons: Introduces additional and unnecessary complexities to ModelManager.","lastModifiedDate":"2021-10-22"},{"lineNumber":385,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":386,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2 (current choice):** Create a `FindAnyPredicate` to store Name and Tag(s).","lastModifiedDate":"2021-11-08"},{"lineNumber":387,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: Cleaner implementation. Only need to modify a method to modify the functionality of `FindAnyCommand`.","lastModifiedDate":"2021-11-03"},{"lineNumber":388,"author":{"gitId":"leezhixuan"},"content":"    * Cons: More code.","lastModifiedDate":"2021-10-22"},{"lineNumber":389,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":390,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":391,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":392,"author":{"gitId":"Jiwei99"},"content":"### Help feature","lastModifiedDate":"2021-10-25"},{"lineNumber":393,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":394,"author":{"gitId":"Jiwei99"},"content":"#### Implementation","lastModifiedDate":"2021-10-22"},{"lineNumber":395,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":396,"author":{"gitId":"leezhixuan"},"content":"The operation is exposed in the `Command` interface as `Command#Execute`, specifically in `HelpCommand#Execute`.","lastModifiedDate":"2021-11-07"},{"lineNumber":397,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":398,"author":{"gitId":"yucheng11122017"},"content":"Help messages will be displayed in the CONNECTIONS\u0027 `UI` through the `ResultDisplay`.","lastModifiedDate":"2021-11-03"},{"lineNumber":399,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":400,"author":{"gitId":"Jiwei99"},"content":"Given below is an example usage scenario and how the Help mechanism behaves at each step.","lastModifiedDate":"2021-10-22"},{"lineNumber":401,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":402,"author":{"gitId":"Jiwei99"},"content":"Step 1. The user launches the application for the first time.","lastModifiedDate":"2021-10-22"},{"lineNumber":403,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":404,"author":{"gitId":"Jiwei99"},"content":"Step 2. The user executes `help` to seek help on CONNECTION\u0027s usage.","lastModifiedDate":"2021-10-22"},{"lineNumber":405,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":406,"author":{"gitId":"yucheng11122017"},"content":"Step 3. CONNECTIONS displays a list of available commands in `ResultDisplay`.","lastModifiedDate":"2021-11-03"},{"lineNumber":407,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":408,"author":{"gitId":"Jiwei99"},"content":"Step 4. The user decides to view the usage of `add` to learn to add a contact, and executes `help add`.","lastModifiedDate":"2021-10-22"},{"lineNumber":409,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":410,"author":{"gitId":"yucheng11122017"},"content":"Step 5. CONNECTIONS will display a detailed help message on the usage of the `add` command in `ResultDisplay`.","lastModifiedDate":"2021-11-08"},{"lineNumber":411,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":412,"author":{"gitId":"Jiwei99"},"content":"![HelpSequenceDiagram](images/HelpCommandDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":413,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":414,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":415,"author":{"gitId":"yucheng11122017"},"content":"### Birthday Reminder feature","lastModifiedDate":"2021-11-03"},{"lineNumber":416,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":417,"author":{"gitId":"yucheng11122017"},"content":"#### Implementation","lastModifiedDate":"2021-11-06"},{"lineNumber":418,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":419,"author":{"gitId":"leezhixuan"},"content":"Shows a list of contacts with upcoming birthdays. This list of birthday reminders is displayed to the user through the `UI`, specifically in `BirthdayReminderListPanel`. Each birthday is displayed as a `BirthdayReminderCard`.","lastModifiedDate":"2021-11-07"},{"lineNumber":420,"author":{"gitId":"yucheng11122017"},"content":"The list of birthdays is generated in the `ModelManager`, which implements the following functions:","lastModifiedDate":"2021-11-03"},{"lineNumber":421,"author":{"gitId":"Justinhoejj"},"content":"* `ModelManager#getBirthdayReminderList` returns an `ObservableList\u003cPerson\u003e birthdayReminders` that is ordered according to upcoming birthdays.","lastModifiedDate":"2021-11-07"},{"lineNumber":422,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":423,"author":{"gitId":"Justinhoejj"},"content":"Given below is an example usage scenario and how the birthday reminders mechanism behaves at each step.","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":425,"author":{"gitId":"yucheng11122017"},"content":"Step 1. On app startup, contacts with a birthday are sorted by birth month and day. Contacts with birthdays that fall on the present day are colored green while birthdays that are within one week are colored blue. Additionally, a customized message with each contact\u0027s phone number and age will be displayed in the birthday reminder list.","lastModifiedDate":"2021-11-08"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":427,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":429,"author":{"gitId":"leezhixuan"},"content":"Step 2. The `BirthdayReminderListPanel` in CONNECTIONS\u0027 `UI` displays birthday reminders in sorted order, starting with the earliest upcoming birthday to the latest upcoming birthday for the year, after which displays birthdays that have passed for the current year in sorted order.","lastModifiedDate":"2021-11-07"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":431,"author":{"gitId":"Justinhoejj"},"content":"Step 3. The user executes `add n/person3 b/01012000 …​` to add a new contact. ","lastModifiedDate":"2021-11-07"},{"lineNumber":432,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":433,"author":{"gitId":"Justinhoejj"},"content":"Step 4. CONNECTIONS will store the new contact. The `ObservableList\u003cPerson\u003e birthdayReminders` for `BirthdayReminderPanelList` will be updated to include the new contact, ensuring the birthday reminder list remains sorted as shown below. ","lastModifiedDate":"2021-11-08"},{"lineNumber":434,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":435,"author":{"gitId":"Justinhoejj"},"content":"![BirthdayReminderSequenceDiagram](images/BirthdayReminderSequenceDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":436,"author":{"gitId":"Justinhoejj"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-08"},{"lineNumber":437,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":439,"author":{"gitId":"Justinhoejj"},"content":"Step 5. CONNECTIONS `UI` will observe for changes in the `ObservableList\u003cPerson\u003e birthdayReminders` and update `BirthdayReminderPanelList`, displaying the new contact. ","lastModifiedDate":"2021-11-07"},{"lineNumber":440,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":441,"author":{"gitId":"yucheng11122017"},"content":"#### Design considerations:","lastModifiedDate":"2021-11-03"},{"lineNumber":442,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":443,"author":{"gitId":"Justinhoejj"},"content":"**Aspect: How will the `ObservableList\u003cPerson\u003e birthdayReminders` update with a new contact:**","lastModifiedDate":"2021-11-07"},{"lineNumber":444,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":445,"author":{"gitId":"leezhixuan"},"content":"* **Option 1 (current choice):** Clear the birthday reminders and regenerate them.","lastModifiedDate":"2021-11-07"},{"lineNumber":446,"author":{"gitId":"yucheng11122017"},"content":"    * Pros: Straightforward.","lastModifiedDate":"2021-11-03"},{"lineNumber":447,"author":{"gitId":"leezhixuan"},"content":"    * Cons: It will be slower as the whole list is regenerated.","lastModifiedDate":"2021-11-07"},{"lineNumber":448,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":449,"author":{"gitId":"yucheng11122017"},"content":"* **Option 2:** Insert the contact into the list. ","lastModifiedDate":"2021-11-06"},{"lineNumber":450,"author":{"gitId":"leezhixuan"},"content":"    * Pros: Faster than the alternative.","lastModifiedDate":"2021-11-07"},{"lineNumber":451,"author":{"gitId":"yucheng11122017"},"content":"    * Cons: Harder to implement and maintain.","lastModifiedDate":"2021-11-03"},{"lineNumber":452,"author":{"gitId":"yucheng11122017"},"content":"    ","lastModifiedDate":"2021-11-03"},{"lineNumber":453,"author":{"gitId":"cookiedan42"},"content":"### Mailing List feature","lastModifiedDate":"2021-10-29"},{"lineNumber":454,"author":{"gitId":"leezhixuan"},"content":"Allows users to download a CSV file mailing list of the current view.  ","lastModifiedDate":"2021-11-07"},{"lineNumber":455,"author":{"gitId":"cookiedan42"},"content":"Users can use arguments to specify which fields to include in their download.","lastModifiedDate":"2021-11-06"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":457,"author":{"gitId":"cookiedan42"},"content":"#### Implementation","lastModifiedDate":"2021-10-29"},{"lineNumber":458,"author":{"gitId":"yucheng11122017"},"content":"Given below is an example usage scenario and how the Mailing List mechanism behaves at each step.","lastModifiedDate":"2021-11-04"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":460,"author":{"gitId":"yucheng11122017"},"content":"Step 1. The user filters the contacts using other commands, eg. `find`.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":461,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":462,"author":{"gitId":"cookiedan42"},"content":"Step 2. The `FilteredList` in `Model` is updated.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":463,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":464,"author":{"gitId":"cookiedan42"},"content":"Step 3. The UI is updated to reflect this new state.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":465,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":466,"author":{"gitId":"cookiedan42"},"content":"Step 4. The user provides a series of prefixes to `mailingList` to pick the fields. If no arguments are provided, default selectors are used.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":467,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":468,"author":{"gitId":"cookiedan42"},"content":"Step 5. These `Prefix` arguments are stored in `Model`.","lastModifiedDate":"2021-11-06"},{"lineNumber":469,"author":{"gitId":"cookiedan42"},"content":"![MailingListSequenceDiagram](images/MailingListSequenceDiagram.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":470,"author":{"gitId":"yucheng11122017"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `MailingListCommandParser` and `MailingListCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-11-08"},{"lineNumber":471,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":473,"author":{"gitId":"cookiedan42"},"content":"Step 6. The user is prompted to pick a name and the download location for their generated CSV file.   ","lastModifiedDate":"2021-11-08"},{"lineNumber":474,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":475,"author":{"gitId":"cookiedan42"},"content":"Step 7. The `FilteredList`, `Prefixes` and `Path` are passed to `CsvUtil#modelToCsv`, which will serialize and write the CSV file.  ","lastModifiedDate":"2021-11-08"},{"lineNumber":476,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"cookiedan42"},"content":"![MainWindowMailingListActivityDiagram.](images/MainWindowMailingListActivityDiagram.png)  ","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":479,"author":{"gitId":"cookiedan42"},"content":"Step 8. The header row is created based on `Prefix` arguments stored in `Model`, based on a mapping in `CsvUtil`.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":480,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":481,"author":{"gitId":"cookiedan42"},"content":"Step 9. Individual rows are generated based on the `Prefix` arguments stored in `Model` and the `FilteredPerson` in `ModelManager`, based on a mapping in `CsvUtil`.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":482,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":483,"author":{"gitId":"cookiedan42"},"content":"Step 10. The headers and rows are written to the CSV file that is specified by the user.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":484,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":485,"author":{"gitId":"cookiedan42"},"content":"#### Front end design considerations:","lastModifiedDate":"2021-11-08"},{"lineNumber":486,"author":{"gitId":"cookiedan42"},"content":"* Arguments for the command should follow the standard used in other parts of the software.","lastModifiedDate":"2021-10-29"},{"lineNumber":487,"author":{"gitId":"cookiedan42"},"content":"* Balancing between simplicity of use when no arguments are provided, and flexibility for users who might want additional information.","lastModifiedDate":"2021-11-06"},{"lineNumber":488,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":489,"author":{"gitId":"cookiedan42"},"content":"#### Back end design considerations:","lastModifiedDate":"2021-11-08"},{"lineNumber":490,"author":{"gitId":"cookiedan42"},"content":"* **Option 1 (current choice):** Store serialized CSV data in CommandResult and pass it directly to CsvUtil","lastModifiedDate":"2021-11-08"},{"lineNumber":491,"author":{"gitId":"cookiedan42"},"content":"    * Pros: Straightforward.","lastModifiedDate":"2021-11-08"},{"lineNumber":492,"author":{"gitId":"cookiedan42"},"content":"    * Cons: Requires large changes to the attributes and purpose of CommandResult. ","lastModifiedDate":"2021-11-08"},{"lineNumber":493,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":494,"author":{"gitId":"cookiedan42"},"content":"* **Option 2 (current choice):** Store data in model and access using logic","lastModifiedDate":"2021-11-08"},{"lineNumber":495,"author":{"gitId":"cookiedan42"},"content":"    * Pros: Minimal changes to CommandResult structure are necessary.","lastModifiedDate":"2021-11-08"},{"lineNumber":496,"author":{"gitId":"cookiedan42"},"content":"    * Cons: Additional calls to logic and model are needed to get the required information.","lastModifiedDate":"2021-11-08"},{"lineNumber":497,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":498,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":499,"author":{"gitId":"Jiwei99"},"content":"### Command History feature","lastModifiedDate":"2021-11-08"},{"lineNumber":500,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":501,"author":{"gitId":"Jiwei99"},"content":"#### Implementation","lastModifiedDate":"2021-11-08"},{"lineNumber":502,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":503,"author":{"gitId":"Jiwei99"},"content":"The operation is exposed in `CommandBox` and `CommandHistory`.","lastModifiedDate":"2021-11-08"},{"lineNumber":504,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":505,"author":{"gitId":"Jiwei99"},"content":"The user keystroke will be read in `CommandBox#handleKeyStroke`, which will call the appropriate method in `CommandHistory` to retrieve the previous and next commands. The retrieved commands are passed into `CommandBox#commandTextField` to be displayed.","lastModifiedDate":"2021-11-08"},{"lineNumber":506,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":507,"author":{"gitId":"Jiwei99"},"content":"Given below is an example usage scenario and how the Command History mechanism behaves at each step.","lastModifiedDate":"2021-11-08"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":509,"author":{"gitId":"Jiwei99"},"content":"Step 1. The user launches the application for the first time. All contacts are displayed by default.","lastModifiedDate":"2021-11-08"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":511,"author":{"gitId":"Jiwei99"},"content":"Step 2. The user executes `find n/David t/friend t/football` to search for a matching contact.","lastModifiedDate":"2021-11-08"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":513,"author":{"gitId":"Jiwei99"},"content":"Step 3. User wants to retrieve previous command and presses the `UP` key.","lastModifiedDate":"2021-11-08"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":515,"author":{"gitId":"Jiwei99"},"content":"Step 4. `CommandBox#handleKeyStroke` reads the `UP` keystroke and calls `CommandHistory#getPreviousCommand`.","lastModifiedDate":"2021-11-08"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":517,"author":{"gitId":"Jiwei99"},"content":"Step 5. `CommandHistory` retrieves the previous command and returns it.","lastModifiedDate":"2021-11-08"},{"lineNumber":518,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":519,"author":{"gitId":"Jiwei99"},"content":"Step 6. `CommandBox` displays the previous command in the Command Box.","lastModifiedDate":"2021-11-08"},{"lineNumber":520,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":521,"author":{"gitId":"Jiwei99"},"content":"![CommandHistoryActivityDiagram](images/CommandHistoryActivityDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":523,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-11-08"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":525,"author":{"gitId":"Jiwei99"},"content":"**Aspect: Implementation of Command History:**","lastModifiedDate":"2021-11-08"},{"lineNumber":526,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":527,"author":{"gitId":"Jiwei99"},"content":"* **Option 1 (current choice):** Generate `CommandHistory` as a Singleton class.","lastModifiedDate":"2021-11-08"},{"lineNumber":528,"author":{"gitId":"Jiwei99"},"content":"    * Pros: Ensures that there is only one set of history that is tracked.","lastModifiedDate":"2021-11-08"},{"lineNumber":529,"author":{"gitId":"Jiwei99"},"content":"    * Cons: Complicates testing as different versions of history cannot be created.","lastModifiedDate":"2021-11-08"},{"lineNumber":530,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":531,"author":{"gitId":"Jiwei99"},"content":"* **Option 2:** Generate `CommandHistory` as a normal class.","lastModifiedDate":"2021-11-08"},{"lineNumber":532,"author":{"gitId":"Jiwei99"},"content":"    * Pros: Makes testing easier as multiple `CommandHistory` objects can be created with different history to test different conditions.","lastModifiedDate":"2021-11-08"},{"lineNumber":533,"author":{"gitId":"Jiwei99"},"content":"    * Cons: Possible conflicting history if `CommandHistory` is not updated properly.","lastModifiedDate":"2021-11-08"},{"lineNumber":534,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":535,"author":{"gitId":"Jiwei99"},"content":"### Command Assistant feature","lastModifiedDate":"2021-11-08"},{"lineNumber":536,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":537,"author":{"gitId":"Jiwei99"},"content":"#### Implementation","lastModifiedDate":"2021-11-08"},{"lineNumber":538,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":539,"author":{"gitId":"Jiwei99"},"content":"The operation is exposed in `SystemCommand`, specifically in `SystemCommand#execute`.","lastModifiedDate":"2021-11-08"},{"lineNumber":540,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":541,"author":{"gitId":"Jiwei99"},"content":"The user keystroke will be read in `CommandBox#handleKeyStroke`. The user input will be evaluated by `SystemCommand#execute` to determine the appropriate help message to display.","lastModifiedDate":"2021-11-08"},{"lineNumber":542,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":543,"author":{"gitId":"Jiwei99"},"content":"Given below is an example usage scenario and how the Command Assistant mechanism behaves at each step.","lastModifiedDate":"2021-11-08"},{"lineNumber":544,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":545,"author":{"gitId":"Jiwei99"},"content":"Step 1. The user launches the application for the first time. All contacts are displayed by default.","lastModifiedDate":"2021-11-08"},{"lineNumber":546,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":547,"author":{"gitId":"Jiwei99"},"content":"Step 2. The user enters `find ` to search for a matching contact.","lastModifiedDate":"2021-11-08"},{"lineNumber":548,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":549,"author":{"gitId":"Jiwei99"},"content":"Step 3. `CommandBox#handleKeyStroke` reads `find ` input string and calls `SystemCommand#execute`.","lastModifiedDate":"2021-11-08"},{"lineNumber":550,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":551,"author":{"gitId":"Jiwei99"},"content":"Step 4. `SystemCommand` evaluates the user input and returns the appropriate help message.","lastModifiedDate":"2021-11-08"},{"lineNumber":552,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":553,"author":{"gitId":"Jiwei99"},"content":"Step 5. CONNECTIONS will display a help message in `ResultDisplay`.","lastModifiedDate":"2021-11-08"},{"lineNumber":554,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":555,"author":{"gitId":"Jiwei99"},"content":"#### Design considerations:","lastModifiedDate":"2021-11-08"},{"lineNumber":556,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":557,"author":{"gitId":"Jiwei99"},"content":"**Aspect: Implementation of Command Assistant:**","lastModifiedDate":"2021-11-08"},{"lineNumber":558,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":559,"author":{"gitId":"Jiwei99"},"content":"* **Option 1:** Create a `AssistantCommand` class which extends from `Command` to handle the features of `Command Assistant`.","lastModifiedDate":"2021-11-08"},{"lineNumber":560,"author":{"gitId":"Jiwei99"},"content":"    * Pros: Simplifies implementation as only an additional subclass needs to be created.","lastModifiedDate":"2021-11-08"},{"lineNumber":561,"author":{"gitId":"Jiwei99"},"content":"    * Cons: Creates an additional command that users may be able to utilise, which they are not supposed to.","lastModifiedDate":"2021-11-08"},{"lineNumber":562,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":563,"author":{"gitId":"Jiwei99"},"content":"* **Option 2 (current choice):** Create a new type of command called `SystemCommand` that does not extend from `Command`.","lastModifiedDate":"2021-11-08"},{"lineNumber":564,"author":{"gitId":"Jiwei99"},"content":"    * Pros: Prevents potential issues such as users using an additional command which they are not supposed to use.","lastModifiedDate":"2021-11-08"},{"lineNumber":565,"author":{"gitId":"Jiwei99"},"content":"    * Cons: Requires additional code to interface with `Logic`, \u0027MainWindow` and `CommandBox`.","lastModifiedDate":"2021-11-08"},{"lineNumber":566,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":567,"author":{"gitId":"yucheng11122017"},"content":"### [Proposed] Partial data recovery feature","lastModifiedDate":"2021-11-04"},{"lineNumber":568,"author":{"gitId":"leezhixuan"},"content":"Allows the user to recover partial data if the data file becomes corrupted. ","lastModifiedDate":"2021-11-07"},{"lineNumber":569,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":570,"author":{"gitId":"yucheng11122017"},"content":"#### Proposed Implementation","lastModifiedDate":"2021-11-04"},{"lineNumber":571,"author":{"gitId":"yucheng11122017"},"content":"Currently, if the data file is corrupted, CONNECTIONS will use an empty data file upon start up. ","lastModifiedDate":"2021-11-08"},{"lineNumber":572,"author":{"gitId":"yucheng11122017"},"content":"The proposed implementation can be facilitated by `JsonAdaptedPerson` and `JsonAddressBookStorage`. Upon getting an invalid data format for compulsory fields, `JsonAdaptedPerson` can return `null` and ","lastModifiedDate":"2021-11-04"},{"lineNumber":573,"author":{"gitId":"yucheng11122017"},"content":"not be added to `JsonAddressBookStorage`. If optional fields are corrupt, default values can be used. This allows other contacts and the other fields of the corrupt contact to be recovered. ","lastModifiedDate":"2021-11-04"},{"lineNumber":574,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":575,"author":{"gitId":"yucheng11122017"},"content":"Given below is an example usage scenario and how the Help mechanism behaves at each step.","lastModifiedDate":"2021-11-04"},{"lineNumber":576,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":577,"author":{"gitId":"leezhixuan"},"content":"Step 1. The user edits the data file and changes the `Tag` field of the first contact to an invalid value.","lastModifiedDate":"2021-11-07"},{"lineNumber":578,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":579,"author":{"gitId":"yucheng11122017"},"content":"Step 2. The user edits the data file and changes the `Email` field of the second contact to an invalid value.","lastModifiedDate":"2021-11-04"},{"lineNumber":580,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":581,"author":{"gitId":"yucheng11122017"},"content":"Step 3. Upon start up, `JsonAddressBookStorage` attempts to load the data file. Since the value of `Tag` (optional field) for the first contact is invalid, `JsonAdaptedPerson` will not add the invalid `Tag`.","lastModifiedDate":"2021-11-06"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":583,"author":{"gitId":"yucheng11122017"},"content":"Step 4. Since the value of `Email` (compulsory field) for the second contact is invalid, `JsonAdaptedPerson` returns `null` which is not added to `JsonAddressBookStorage`.","lastModifiedDate":"2021-11-06"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":585,"author":{"gitId":"yucheng11122017"},"content":"Step 3. CONNECTIONS will not display the first contact\u0027s invalid `Tag` and will not display the second contact. The other fields and contacts will be displayed as per normal.  ","lastModifiedDate":"2021-11-06"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":588,"author":{"gitId":"yucheng11122017"},"content":"#### Design considerations:","lastModifiedDate":"2021-11-04"},{"lineNumber":589,"author":{"gitId":"yucheng11122017"},"content":"* Arguments for the command should follow the standard used in other parts of the software.","lastModifiedDate":"2021-11-04"},{"lineNumber":590,"author":{"gitId":"yucheng11122017"},"content":"* Balancing between simplicity of use when no arguments are provided, and customisability for users who might want additional information.","lastModifiedDate":"2021-11-04"},{"lineNumber":591,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":593,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":596,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":597,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":600,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":601,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":602,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":603,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":604,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"cookiedan42"},"content":"* sociable and has multiple different friend groups that can partially overlap","lastModifiedDate":"2021-09-30"},{"lineNumber":615,"author":{"gitId":"yucheng11122017"},"content":"* regularly organizes birthday parties for these contacts","lastModifiedDate":"2021-11-08"},{"lineNumber":616,"author":{"gitId":"cookiedan42"},"content":"* regularly invites other contacts to these parties","lastModifiedDate":"2021-09-30"},{"lineNumber":617,"author":{"gitId":"yucheng11122017"},"content":"* is forgetful ","lastModifiedDate":"2021-11-03"},{"lineNumber":618,"author":{"gitId":"cookiedan42"},"content":"* needs to keep track of different groups who are invited to different parties","lastModifiedDate":"2021-09-30"},{"lineNumber":619,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":622,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"cookiedan42"},"content":"**Value proposition**:","lastModifiedDate":"2021-09-30"},{"lineNumber":625,"author":{"gitId":"cookiedan42"},"content":"* retrieve contact details of all members of a group quickly and easily","lastModifiedDate":"2021-09-30"},{"lineNumber":626,"author":{"gitId":"yucheng11122017"},"content":"* view contact details of frequently contacted contacts easily","lastModifiedDate":"2021-11-06"},{"lineNumber":627,"author":{"gitId":"yucheng11122017"},"content":"* keep track of upcoming birthdays","lastModifiedDate":"2021-11-03"},{"lineNumber":628,"author":{"gitId":"Justinhoejj"},"content":"* easy to use","lastModifiedDate":"2021-11-07"},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":631,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":632,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":635,"author":{"gitId":"cookiedan42"},"content":"| As a... | I want to... | So that I can... |","lastModifiedDate":"2021-09-23"},{"lineNumber":636,"author":{"gitId":"cookiedan42"},"content":"|---|---|---|","lastModifiedDate":"2021-09-23"},{"lineNumber":637,"author":{"gitId":"yucheng11122017"},"content":"| Person who loves birthdays    | Track birthdays                       | Easily check the birthday of friends","lastModifiedDate":"2021-11-05"},{"lineNumber":638,"author":{"gitId":"yucheng11122017"},"content":"| Person who loves birthdays and is forgetful    | Have birthday reminders            | Avoid missing any of my friends’ birthdays","lastModifiedDate":"2021-11-06"},{"lineNumber":639,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer       | Look for contact details for all my friends      | Send out invites","lastModifiedDate":"2021-11-08"},{"lineNumber":640,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer       | Generate csv file of my invitees                  | Take attendance or make external notes","lastModifiedDate":"2021-11-08"},{"lineNumber":641,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer               | Tag contacts with a party           | Easily keep track of those coming for parties","lastModifiedDate":"2021-11-08"},{"lineNumber":642,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer               | Untag contacts from a party         | Easily remove those who are not coming for parties","lastModifiedDate":"2021-11-08"},{"lineNumber":643,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer               | Search contacts by party      | Generate invite list","lastModifiedDate":"2021-11-08"},{"lineNumber":644,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer               | Search contacts by parties      | View who is coming for these parties","lastModifiedDate":"2021-11-08"},{"lineNumber":645,"author":{"gitId":"yucheng11122017"},"content":"| Party Organizer               | Delete multiple contacts at once      | Quickly delete contacts that I no longer need","lastModifiedDate":"2021-11-08"},{"lineNumber":646,"author":{"gitId":"yucheng11122017"},"content":"| Sociable person               | Pin frequent contacts           | Easily access contacts that I contact often","lastModifiedDate":"2021-11-06"},{"lineNumber":647,"author":{"gitId":"leezhixuan"},"content":"| Sociable person               | Save up to 100 contacts | Keep all my friends\u0027 contacts","lastModifiedDate":"2021-11-07"},{"lineNumber":648,"author":{"gitId":"yucheng11122017"},"content":"| Sociable person               | Search for contacts within a reasonable timing | Avoid waiting too long for search results","lastModifiedDate":"2021-11-04"},{"lineNumber":649,"author":{"gitId":"Justinhoejj"},"content":"| Beginner              | See sample commands                               | See what I should be typing","lastModifiedDate":"2021-11-07"},{"lineNumber":650,"author":{"gitId":"yucheng11122017"},"content":"| Beginner              | View helpful prompts                              | See what can be done with the app","lastModifiedDate":"2021-11-04"},{"lineNumber":651,"author":{"gitId":"yucheng11122017"},"content":"| Beginner                 | View feedback on wrong commands       | Format commands better","lastModifiedDate":"2021-11-04"},{"lineNumber":652,"author":{"gitId":"yucheng11122017"},"content":"| Beginner     | Get help on specific commands                                 | Learn how to use the app","lastModifiedDate":"2021-11-04"},{"lineNumber":653,"author":{"gitId":"yucheng11122017"},"content":"| Fast typer                    | Use sentences to interact with the app | Utilize the functions of the app quicker without using a mouse","lastModifiedDate":"2021-11-08"},{"lineNumber":654,"author":{"gitId":"yucheng11122017"},"content":"| User                          | Can modify contact details            | Update my contacts\u0027 details","lastModifiedDate":"2021-11-06"},{"lineNumber":655,"author":{"gitId":"yucheng11122017"},"content":"| Experienced user      | Retrieve previously run commands          | Avoid typing the commands I use frequently again and again","lastModifiedDate":"2021-11-06"},{"lineNumber":656,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":657,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":658,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":659,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":660,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Add a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":662,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":663,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":664,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":665,"author":{"gitId":"Justinhoejj"},"content":"1.  User chooses to add a contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":666,"author":{"gitId":"Justinhoejj"},"content":"2.  User provides the contact\u0027s details.","lastModifiedDate":"2021-11-07"},{"lineNumber":667,"author":{"gitId":"yucheng11122017"},"content":"3.  CONNECTIONS creates a contact entry for that contact\u0027s details","lastModifiedDate":"2021-11-08"},{"lineNumber":668,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":669,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":670,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":671,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":672,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":673,"author":{"gitId":"Justinhoejj"},"content":"* 2a. User provides incomplete details.","lastModifiedDate":"2021-11-07"},{"lineNumber":674,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":675,"author":{"gitId":"yucheng11122017"},"content":"    * 2a1. CONNECTIONS shows an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":676,"author":{"gitId":"leezhixuan"},"content":"      ","lastModifiedDate":"2021-09-22"},{"lineNumber":677,"author":{"gitId":"Justinhoejj"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-11-07"},{"lineNumber":678,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":679,"author":{"gitId":"yucheng11122017"},"content":"* 2b. User provides details identical to an existing contact in CONNECTIONS.","lastModifiedDate":"2021-11-08"},{"lineNumber":680,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":681,"author":{"gitId":"Justinhoejj"},"content":"    * 2b1. CONNECTIONS informs user that this is a duplicate.","lastModifiedDate":"2021-11-07"},{"lineNumber":682,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":683,"author":{"gitId":"Justinhoejj"},"content":"      Use case resumes at Step 1.","lastModifiedDate":"2021-11-07"},{"lineNumber":684,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":685,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":686,"author":{"gitId":"leezhixuan"},"content":"**Use case: Clear all contacts**","lastModifiedDate":"2021-11-07"},{"lineNumber":687,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":688,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":689,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":690,"author":{"gitId":"yucheng11122017"},"content":"1.  User requests to clear all contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":691,"author":{"gitId":"leezhixuan"},"content":"2.  CONNECTIONS deletes all contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":692,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":693,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":695,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Delete a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":696,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"Justinhoejj"},"content":"1.  User requests to list contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":700,"author":{"gitId":"Justinhoejj"},"content":"2.  CONNECTIONS shows a list of contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":701,"author":{"gitId":"Justinhoejj"},"content":"3.  User requests to delete a specific contact in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":702,"author":{"gitId":"Justinhoejj"},"content":"4.  CONNECTIONS deletes the contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":703,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":707,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":708,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"yucheng11122017"},"content":"    * 3a1. CONNECTIONS shows an error message.","lastModifiedDate":"2021-11-06"},{"lineNumber":717,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":718,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":719,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":720,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Edit a contact\u0027s details**","lastModifiedDate":"2021-11-06"},{"lineNumber":721,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":722,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":723,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":724,"author":{"gitId":"Justinhoejj"},"content":"1.  User requests to list contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":725,"author":{"gitId":"yucheng11122017"},"content":"2.  CONNECTIONS shows a list of contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":726,"author":{"gitId":"Justinhoejj"},"content":"3.  User provides his/her index of the contact that is to be edited in the list, along with the replacement information.","lastModifiedDate":"2021-11-07"},{"lineNumber":727,"author":{"gitId":"yucheng11122017"},"content":"4.  CONNECTIONS reflects the edits that were made.","lastModifiedDate":"2021-11-08"},{"lineNumber":728,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":729,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":730,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":731,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":732,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":733,"author":{"gitId":"leezhixuan"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-22"},{"lineNumber":734,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":735,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":736,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":737,"author":{"gitId":"leezhixuan"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2021-09-22"},{"lineNumber":738,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":739,"author":{"gitId":"yucheng11122017"},"content":"    * 3a1. CONNECTIONS shows an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":740,"author":{"gitId":"leezhixuan"},"content":"      ","lastModifiedDate":"2021-09-22"},{"lineNumber":741,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":742,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":743,"author":{"gitId":"leezhixuan"},"content":"**Use case: Exit the program**","lastModifiedDate":"2021-09-22"},{"lineNumber":744,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":745,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":746,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":747,"author":{"gitId":"yucheng11122017"},"content":"1.  User requests to exit","lastModifiedDate":"2021-11-08"},{"lineNumber":748,"author":{"gitId":"Jiwei99"},"content":"2.  CONNECTIONS exit","lastModifiedDate":"2021-10-26"},{"lineNumber":749,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":750,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":751,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":752,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":753,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":754,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Find a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":755,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":756,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":757,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":758,"author":{"gitId":"leezhixuan"},"content":"1.  User chooses to look for a contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":759,"author":{"gitId":"Justinhoejj"},"content":"2.  Use provides the search term.","lastModifiedDate":"2021-11-07"},{"lineNumber":760,"author":{"gitId":"Justinhoejj"},"content":"3.  CONNECTIONS returns all contacts that match all search terms provided.","lastModifiedDate":"2021-11-07"},{"lineNumber":761,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":762,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":763,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":764,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":765,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":766,"author":{"gitId":"Justinhoejj"},"content":"* 2a. CONNECTIONS is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":767,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":768,"author":{"gitId":"yucheng11122017"},"content":"    * 2a1. CONNECTIONS displays a message to indicate no contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":769,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":770,"author":{"gitId":"leezhixuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":771,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":772,"author":{"gitId":"leezhixuan"},"content":"* 2b. No existing contact match the search term provided.","lastModifiedDate":"2021-11-07"},{"lineNumber":773,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":774,"author":{"gitId":"yucheng11122017"},"content":"    * 2b1. CONNECTIONS displays a message to indicate no matching contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":775,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":776,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":777,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":778,"author":{"gitId":"Justinhoejj"},"content":"* 2c. User requests for `or` search (at least one search term is matches).","lastModifiedDate":"2021-11-07"},{"lineNumber":779,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":780,"author":{"gitId":"yucheng11122017"},"content":"    * 2c1. CONNECTIONS returns all contacts that match any of the search terms provided.","lastModifiedDate":"2021-11-08"},{"lineNumber":781,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-10-22"},{"lineNumber":782,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":783,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":784,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Find contacts via Tags**","lastModifiedDate":"2021-11-06"},{"lineNumber":785,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":786,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":787,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":788,"author":{"gitId":"yucheng11122017"},"content":"1.  User chooses to look for a contact.","lastModifiedDate":"2021-11-08"},{"lineNumber":789,"author":{"gitId":"Justinhoejj"},"content":"2.  User provides the tag.","lastModifiedDate":"2021-11-07"},{"lineNumber":790,"author":{"gitId":"yucheng11122017"},"content":"3.  CONNECTIONS returns all contacts that match the tag.","lastModifiedDate":"2021-11-08"},{"lineNumber":791,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":792,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":793,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":794,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":795,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":796,"author":{"gitId":"Justinhoejj"},"content":"* 2a. CONNECTIONS is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":797,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":798,"author":{"gitId":"yucheng11122017"},"content":"    * 2a1. CONNECTIONS displays a message to indicate no contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":799,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":800,"author":{"gitId":"leezhixuan"},"content":"      Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":801,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":802,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":803,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":804,"author":{"gitId":"cookiedan42"},"content":"* 2b. No existing contacts match the tag provided.","lastModifiedDate":"2021-11-08"},{"lineNumber":805,"author":{"gitId":"leezhixuan"},"content":"  ","lastModifiedDate":"2021-09-22"},{"lineNumber":806,"author":{"gitId":"yucheng11122017"},"content":"    * 2b1. CONNECTIONS displays a message to indicate no matching contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":807,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":808,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":809,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":810,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Pin a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":811,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":812,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-10-27"},{"lineNumber":813,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":814,"author":{"gitId":"leezhixuan"},"content":"1.  User provides the index of contact to pin.","lastModifiedDate":"2021-11-07"},{"lineNumber":815,"author":{"gitId":"Justinhoejj"},"content":"2.  CONNECTIONS pins the contact to the top of the displayed list.","lastModifiedDate":"2021-11-07"},{"lineNumber":816,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":817,"author":{"gitId":"yucheng11122017"},"content":"    Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":818,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":819,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-10-27"},{"lineNumber":820,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":821,"author":{"gitId":"Justinhoejj"},"content":"* 1a. Index provided is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":822,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":823,"author":{"gitId":"yucheng11122017"},"content":"    * 1a1. CONNECTIONS displays a message to indicate the index is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":824,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":825,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":826,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":827,"author":{"gitId":"Justinhoejj"},"content":"* 1b. Contact at index is already pinned.","lastModifiedDate":"2021-11-07"},{"lineNumber":828,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":829,"author":{"gitId":"yucheng11122017"},"content":"    * 1b1. CONNECTIONS displays a message to indicate contact is already pinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":830,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":831,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":832,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":833,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Unpin a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":834,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":835,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-10-27"},{"lineNumber":836,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":837,"author":{"gitId":"leezhixuan"},"content":"1.  User provides the index of contact to unpin.","lastModifiedDate":"2021-11-07"},{"lineNumber":838,"author":{"gitId":"Justinhoejj"},"content":"2.  CONNECTIONS unpins the contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":839,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":840,"author":{"gitId":"yucheng11122017"},"content":"    Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":841,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":842,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-10-27"},{"lineNumber":843,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":844,"author":{"gitId":"Justinhoejj"},"content":"* 1a. Index provided is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":845,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":846,"author":{"gitId":"yucheng11122017"},"content":"    * 1a1. CONNECTIONS displays a message to indicate that the index is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":847,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":848,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-10-27"},{"lineNumber":849,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":850,"author":{"gitId":"Justinhoejj"},"content":"* 1b. Contact at index is not pinned.","lastModifiedDate":"2021-11-07"},{"lineNumber":851,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":852,"author":{"gitId":"yucheng11122017"},"content":"    * 1b1. CONNECTIONS displays a message to indicate contact is not pinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":853,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":854,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":855,"author":{"gitId":"yucheng11122017"},"content":"    ","lastModifiedDate":"2021-10-27"},{"lineNumber":856,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":857,"author":{"gitId":"leezhixuan"},"content":"**Use case: List everyone in the address book**","lastModifiedDate":"2021-09-22"},{"lineNumber":858,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":859,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":860,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":861,"author":{"gitId":"leezhixuan"},"content":"1.  User requests to list all contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":862,"author":{"gitId":"yucheng11122017"},"content":"2.  CONNECTIONS displays all contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":863,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":864,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":865,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":866,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":867,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":868,"author":{"gitId":"Justinhoejj"},"content":"* 2a. CONNECTIONS is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":869,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":870,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":871,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":872,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Tag a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":873,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":874,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":875,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":876,"author":{"gitId":"Justinhoejj"},"content":"1.  User requests to list contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":877,"author":{"gitId":"Justinhoejj"},"content":"2.  CONNECTIONS shows a list of contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":878,"author":{"gitId":"Justinhoejj"},"content":"3.  User provides his index in the list along with the tags to be added.","lastModifiedDate":"2021-11-07"},{"lineNumber":879,"author":{"gitId":"yucheng11122017"},"content":"4.  CONNECTIONS adds those tags to that contact.","lastModifiedDate":"2021-11-08"},{"lineNumber":880,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":881,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":882,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":883,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":884,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":885,"author":{"gitId":"Jiwei99"},"content":"* 2a. CONNECTIONS is empty","lastModifiedDate":"2021-10-26"},{"lineNumber":886,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":887,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":888,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":889,"author":{"gitId":"Justinhoejj"},"content":"* 3a. Index provided is out of range.","lastModifiedDate":"2021-11-07"},{"lineNumber":890,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":891,"author":{"gitId":"Justinhoejj"},"content":"    * 3a1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":892,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":893,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":894,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":895,"author":{"gitId":"leezhixuan"},"content":"* 3b. Target contact already has the tag specified.","lastModifiedDate":"2021-11-07"},{"lineNumber":896,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":897,"author":{"gitId":"Justinhoejj"},"content":"    * 3b1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":898,"author":{"gitId":"leezhixuan"},"content":"    ","lastModifiedDate":"2021-09-22"},{"lineNumber":899,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":900,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":901,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":902,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":903,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Untag a contact**","lastModifiedDate":"2021-11-06"},{"lineNumber":904,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":905,"author":{"gitId":"leezhixuan"},"content":"**MSS**","lastModifiedDate":"2021-09-22"},{"lineNumber":906,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":907,"author":{"gitId":"Justinhoejj"},"content":"1.  User requests to list contacts.","lastModifiedDate":"2021-11-07"},{"lineNumber":908,"author":{"gitId":"yucheng11122017"},"content":"2.  CONNECTIONS shows a list of contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":909,"author":{"gitId":"Justinhoejj"},"content":"3.  User provides his index in the list along with the tags to be removed.","lastModifiedDate":"2021-11-07"},{"lineNumber":910,"author":{"gitId":"leezhixuan"},"content":"4.  CONNECTIONS remove those tags from that contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":911,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":912,"author":{"gitId":"leezhixuan"},"content":"    Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":913,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":914,"author":{"gitId":"leezhixuan"},"content":"**Extensions**","lastModifiedDate":"2021-09-22"},{"lineNumber":915,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":916,"author":{"gitId":"Justinhoejj"},"content":"* 2a. CONNECTIONS is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":917,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":918,"author":{"gitId":"leezhixuan"},"content":"  Use case ends.","lastModifiedDate":"2021-09-22"},{"lineNumber":919,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":920,"author":{"gitId":"Justinhoejj"},"content":"* 3a. Index provided is out of range.","lastModifiedDate":"2021-11-07"},{"lineNumber":921,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":922,"author":{"gitId":"yucheng11122017"},"content":"    * 3a1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":923,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":924,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":925,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":926,"author":{"gitId":"leezhixuan"},"content":"* 3b. Target contact do not have the tag specified.","lastModifiedDate":"2021-11-07"},{"lineNumber":927,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":928,"author":{"gitId":"yucheng11122017"},"content":"    * 3b1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":929,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":930,"author":{"gitId":"leezhixuan"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-09-22"},{"lineNumber":931,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":932,"author":{"gitId":"Jiwei99"},"content":"**Use case: Getting help**","lastModifiedDate":"2021-10-21"},{"lineNumber":933,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":934,"author":{"gitId":"Jiwei99"},"content":"**MSS**","lastModifiedDate":"2021-10-21"},{"lineNumber":935,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":936,"author":{"gitId":"Justinhoejj"},"content":"1.  User requests to show help for a command.","lastModifiedDate":"2021-11-07"},{"lineNumber":937,"author":{"gitId":"yucheng11122017"},"content":"2.  CONNECTIONS shows the guide on how to use the command.","lastModifiedDate":"2021-11-08"},{"lineNumber":938,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":939,"author":{"gitId":"Jiwei99"},"content":"    Use case ends.","lastModifiedDate":"2021-10-21"},{"lineNumber":940,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":941,"author":{"gitId":"Jiwei99"},"content":"**Extensions**","lastModifiedDate":"2021-10-21"},{"lineNumber":942,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":943,"author":{"gitId":"Justinhoejj"},"content":"* 1a. Keyword `more` was provided.","lastModifiedDate":"2021-11-07"},{"lineNumber":944,"author":{"gitId":"Justinhoejj"},"content":"    * 1a1. CONNECTIONS shows a pop-up with a link to the UserGuide.","lastModifiedDate":"2021-11-07"},{"lineNumber":945,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":946,"author":{"gitId":"Jiwei99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-21"},{"lineNumber":947,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":948,"author":{"gitId":"Justinhoejj"},"content":"* 1b. Command was not provided.","lastModifiedDate":"2021-11-07"},{"lineNumber":949,"author":{"gitId":"Justinhoejj"},"content":"  * 1b1. CONNECTIONS shows all available commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":950,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":951,"author":{"gitId":"Jiwei99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-25"},{"lineNumber":952,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":953,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":954,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":955,"author":{"gitId":"Justinhoejj"},"content":"* 1c. Command provided is invalid.","lastModifiedDate":"2021-11-07"},{"lineNumber":956,"author":{"gitId":"leezhixuan"},"content":"  * 1c1. CONNECTIONS displays an error message followed by a list of valid commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":957,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":958,"author":{"gitId":"Jiwei99"},"content":"      Use case ends.","lastModifiedDate":"2021-10-21"},{"lineNumber":959,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":960,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":961,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Generate CSV file**","lastModifiedDate":"2021-11-04"},{"lineNumber":962,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":963,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-11-04"},{"lineNumber":964,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":965,"author":{"gitId":"yucheng11122017"},"content":"1. User requests to generate a CSV file containing selected data fields of the contacts displayed.","lastModifiedDate":"2021-11-05"},{"lineNumber":966,"author":{"gitId":"leezhixuan"},"content":"2. CONNECTIONS requests for the user to input export location and file name.","lastModifiedDate":"2021-11-07"},{"lineNumber":967,"author":{"gitId":"leezhixuan"},"content":"3. User selects an export location and file name.","lastModifiedDate":"2021-11-07"},{"lineNumber":968,"author":{"gitId":"leezhixuan"},"content":"4. CONNECTIONS generates a CSV file in the export location with the specified file name.","lastModifiedDate":"2021-11-07"},{"lineNumber":969,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":970,"author":{"gitId":"yucheng11122017"},"content":"    Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":971,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":972,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-11-04"},{"lineNumber":973,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":974,"author":{"gitId":"Justinhoejj"},"content":"* 1a. User inputs invalid fields.","lastModifiedDate":"2021-11-07"},{"lineNumber":975,"author":{"gitId":"Justinhoejj"},"content":"    * 1a1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":976,"author":{"gitId":"yucheng11122017"},"content":"    ","lastModifiedDate":"2021-11-04"},{"lineNumber":977,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":978,"author":{"gitId":"yucheng11122017"},"content":"    ","lastModifiedDate":"2021-11-04"},{"lineNumber":979,"author":{"gitId":"leezhixuan"},"content":"* 2a. User fails to choose an export location.","lastModifiedDate":"2021-11-07"},{"lineNumber":980,"author":{"gitId":"yucheng11122017"},"content":"    * 2a1. CONNECTIONS does not export the CSV file.","lastModifiedDate":"2021-11-04"},{"lineNumber":981,"author":{"gitId":"yucheng11122017"},"content":"      ","lastModifiedDate":"2021-11-04"},{"lineNumber":982,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":983,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":984,"author":{"gitId":"yucheng11122017"},"content":"**Use case: Deleting multiple contacts**","lastModifiedDate":"2021-11-04"},{"lineNumber":985,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":986,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-11-04"},{"lineNumber":987,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":988,"author":{"gitId":"yucheng11122017"},"content":"1. User requests to delete multiple contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":989,"author":{"gitId":"yucheng11122017"},"content":"2. CONNECTIONS deletes the contacts.","lastModifiedDate":"2021-11-04"},{"lineNumber":990,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":991,"author":{"gitId":"yucheng11122017"},"content":"   Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":992,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":993,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-11-04"},{"lineNumber":994,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":995,"author":{"gitId":"Justinhoejj"},"content":"* 1a. User inputs indexes that are out of range.","lastModifiedDate":"2021-11-07"},{"lineNumber":996,"author":{"gitId":"yucheng11122017"},"content":"    * 1a1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":997,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":998,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":999,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1000,"author":{"gitId":"Justinhoejj"},"content":"* 1b. User inputs negative numbers.","lastModifiedDate":"2021-11-07"},{"lineNumber":1001,"author":{"gitId":"yucheng11122017"},"content":"    * 1b1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1002,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1003,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1004,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1005,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1006,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1007,"author":{"gitId":"Justinhoejj"},"content":"* 1c. User inputs start index that is bigger then end index.","lastModifiedDate":"2021-11-07"},{"lineNumber":1008,"author":{"gitId":"yucheng11122017"},"content":"    * 1c1. CONNECTIONS displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1009,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1010,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1011,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1012,"author":{"gitId":"yucheng11122017"},"content":"**Use case: View prompts for commands**","lastModifiedDate":"2021-11-04"},{"lineNumber":1013,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1014,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-11-04"},{"lineNumber":1015,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1016,"author":{"gitId":"leezhixuan"},"content":"1. User starts typing a command.","lastModifiedDate":"2021-11-07"},{"lineNumber":1017,"author":{"gitId":"leezhixuan"},"content":"2. CONNECTIONS displays a prompt to help the user write the command.","lastModifiedDate":"2021-11-07"},{"lineNumber":1018,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1019,"author":{"gitId":"yucheng11122017"},"content":"   Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1020,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1021,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-11-04"},{"lineNumber":1022,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1023,"author":{"gitId":"yucheng11122017"},"content":"* 1a. User is not writing a valid command.","lastModifiedDate":"2021-11-04"},{"lineNumber":1024,"author":{"gitId":"leezhixuan"},"content":"    * 1a1. CONNECTIONS will not display a prompt.","lastModifiedDate":"2021-11-07"},{"lineNumber":1025,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1026,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1027,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1028,"author":{"gitId":"yucheng11122017"},"content":"**Use case: View previous command history**","lastModifiedDate":"2021-11-04"},{"lineNumber":1029,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1030,"author":{"gitId":"yucheng11122017"},"content":"**MSS**","lastModifiedDate":"2021-11-04"},{"lineNumber":1031,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1032,"author":{"gitId":"yucheng11122017"},"content":"1. User requests to view previous commands.","lastModifiedDate":"2021-11-04"},{"lineNumber":1033,"author":{"gitId":"yucheng11122017"},"content":"2. CONNECTIONS displays previous commands.","lastModifiedDate":"2021-11-04"},{"lineNumber":1034,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1035,"author":{"gitId":"yucheng11122017"},"content":"   Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1036,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1037,"author":{"gitId":"yucheng11122017"},"content":"**Extensions**","lastModifiedDate":"2021-11-04"},{"lineNumber":1038,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1039,"author":{"gitId":"yucheng11122017"},"content":"* 1a. There is no previous command history.","lastModifiedDate":"2021-11-04"},{"lineNumber":1040,"author":{"gitId":"leezhixuan"},"content":"    * 1a1. CONNECTIONS will not display any commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":1041,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1042,"author":{"gitId":"yucheng11122017"},"content":"      Use case ends.","lastModifiedDate":"2021-11-04"},{"lineNumber":1043,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":1044,"author":{"gitId":"yucheng11122017"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":1049,"author":{"gitId":"yucheng11122017"},"content":"2.  Should be able to hold up to 100 contacts without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-11-06"},{"lineNumber":1050,"author":{"gitId":"leezhixuan"},"content":"3.  A user with above-average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-11-07"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":1053,"author":{"gitId":"Jiwei99"},"content":"* **CONNECTIONS**: The name of our product","lastModifiedDate":"2021-10-26"},{"lineNumber":1054,"author":{"gitId":"leezhixuan"},"content":"* **Contact**: An item written or printed in a diary, list, account book, or reference book.","lastModifiedDate":"2021-11-07"},{"lineNumber":1055,"author":{"gitId":"leezhixuan"},"content":"* **Mainstream OS**: Windows, Linux, Unix, macOS","lastModifiedDate":"2021-11-07"},{"lineNumber":1056,"author":{"gitId":"leezhixuan"},"content":"* **Search Term**: A search term is what users key in when they want to find something specific","lastModifiedDate":"2021-09-22"},{"lineNumber":1057,"author":{"gitId":"leezhixuan"},"content":"* **Tag**: A label attached to someone or something for the purpose of identification or to give other information.","lastModifiedDate":"2021-09-22"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1061,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1062,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1076,"author":{"gitId":"leezhixuan"},"content":"   1. Download the jar file and copy it into an empty folder.","lastModifiedDate":"2021-11-07"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1078,"author":{"gitId":"yucheng11122017"},"content":"   1. Launch the jar file using the `java -jar CONNECTIONS.jar` in powershell for Windows users and terminal for macOS and Linux users. Double-click the jar file as last resort.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1079,"author":{"gitId":"leezhixuan"},"content":"      Expected: Shows the GUI with a set of sample contacts. The birthday reminder list shows a birthday reminder message for each contact with a non-empty birthday field. ","lastModifiedDate":"2021-11-07"},{"lineNumber":1080,"author":{"gitId":"Justinhoejj"},"content":"      The window size may not be optimum.","lastModifiedDate":"2021-11-07"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1089,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1090,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1091,"author":{"gitId":"Justinhoejj"},"content":"### Adding a contact","lastModifiedDate":"2021-11-07"},{"lineNumber":1092,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1093,"author":{"gitId":"Justinhoejj"},"content":"1. Adding a contact with all fields","lastModifiedDate":"2021-11-07"},{"lineNumber":1094,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1095,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: No existing contact with phone number 98989898 and existing contact with phone number 32323232.","lastModifiedDate":"2021-11-07"},{"lineNumber":1096,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1097,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `add n/James p/98989898 e/james@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney b/04071999`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1098,"author":{"gitId":"cookiedan42"},"content":"       Expected: Contact with correct details added to contact list. Contact\u0027s birthday added to birthday reminder list in correct position. Details of the added contact are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1099,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1100,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `add n/James p/32323232 e/james@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney b/04071999`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1101,"author":{"gitId":"cookiedan42"},"content":"       Expected: No contact is added due to duplicated phone number. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1102,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1103,"author":{"gitId":"cookiedan42"},"content":"    1. Other incorrect add commands to try: `add \u003cother valid params\u003e b/\u003cfuture date\u003e`, `add \u003cother valid params\u003e p/hp:1200123`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1104,"author":{"gitId":"cookiedan42"},"content":"       Expected: No contact is added. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1105,"author":{"gitId":"Justinhoejj"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":1106,"author":{"gitId":"Justinhoejj"},"content":"1. Adding a contact without optional fields","lastModifiedDate":"2021-11-07"},{"lineNumber":1107,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: No existing contact with phone number 98989898.","lastModifiedDate":"2021-11-07"},{"lineNumber":1108,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1109,"author":{"gitId":"Justinhoejj"},"content":"    1. Test Case: `add n/James p/98989898 e/james@gmail.com a/311, Clementi Ave 2, #02-25`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1110,"author":{"gitId":"cookiedan42"},"content":"       Expected: Contact with correct details added to contact list. Birthday reminder list unchanged. Details of the added contact are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1111,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1112,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `add n/James p/98989898 e/jamesgmail.com a/311, Clementi Ave 2, #02-25`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1113,"author":{"gitId":"cookiedan42"},"content":"       Expected: No contact is added due to invalid email format. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1114,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1115,"author":{"gitId":"Justinhoejj"},"content":"    1. Other incorrect add commands to try: `add n/James! \u003cother valid params\u003e`, `add \u003cone invalid param amongst other valid params\u003e`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1116,"author":{"gitId":"cookiedan42"},"content":"       Expected: No contact is added. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1117,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1118,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1119,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1120,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1121,"author":{"gitId":"cookiedan42"},"content":"### Finding a contact (all search terms must be fulfilled)","lastModifiedDate":"2021-11-08"},{"lineNumber":1122,"author":{"gitId":"cookiedan42"},"content":"1. Finding a contact by name","lastModifiedDate":"2021-11-08"},{"lineNumber":1123,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1124,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Multiple contacts in the list with at least one contact named Roy. No contact has the name George (case-insensitive).","lastModifiedDate":"2021-11-08"},{"lineNumber":1125,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1126,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `find n/Roy`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1127,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with name Roy. Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1128,"author":{"gitId":"yucheng11122017"},"content":"        ","lastModifiedDate":"2021-11-08"},{"lineNumber":1129,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `find n/George`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1130,"author":{"gitId":"yucheng11122017"},"content":"       Expected: 0 contacts displayed. Status message indicates 0 contacts are found.","lastModifiedDate":"2021-11-08"},{"lineNumber":1131,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1132,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `find n/roy!`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1133,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1134,"author":{"gitId":"Justinhoejj"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":1135,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `find`, `find n/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1136,"author":{"gitId":"cookiedan42"},"content":"        Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1137,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1138,"author":{"gitId":"cookiedan42"},"content":"1. Finding a contact by tag","lastModifiedDate":"2021-11-08"},{"lineNumber":1139,"author":{"gitId":"cookiedan42"},"content":"    1. Prerequisites: Multiple contacts in the list with one contact having tag colleagues and one with tag Colleagues. No contact has the tag owesMoney (case-insensitive).","lastModifiedDate":"2021-11-08"},{"lineNumber":1140,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1141,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1142,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `find t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1143,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag colleagues. Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1144,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1145,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `find c/ t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1146,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag Colleagues (case-sensitive). Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1147,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1148,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `find t/owesMoney`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1149,"author":{"gitId":"yucheng11122017"},"content":"       Expected: 0 contacts displayed. Status message indicates 0 contacts are found.","lastModifiedDate":"2021-11-08"},{"lineNumber":1150,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1151,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `find t/123!`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1152,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1153,"author":{"gitId":"Justinhoejj"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":1154,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `find`, `find t/Colleagues c/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1155,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1156,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1157,"author":{"gitId":"yucheng11122017"},"content":"1. Find a contact by tag and name","lastModifiedDate":"2021-11-08"},{"lineNumber":1158,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Multiple contacts in the list with one contact with name Roy having tag name colleagues and one with name Adam having tag name Colleagues.","lastModifiedDate":"2021-11-08"},{"lineNumber":1159,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1160,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `find n/Roy t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1161,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag colleagues and whose name contains Roy. Number of contacts found shown in the status message. Roy is within the list but Adam is not.","lastModifiedDate":"2021-11-08"},{"lineNumber":1162,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1163,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `find c/ n/Roy t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1164,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag Colleagues (case-sensitive) and whose name contains Roy. Number of contacts found shown in the status message. Neither Roy nor Adam is within the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":1165,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1166,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `find n/Roy t/123!`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1167,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1168,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1169,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `find`, `find t/\u003cvalid tag\u003e n\u003cvalid name\u003e c/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1170,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1171,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1172,"author":{"gitId":"yucheng11122017"},"content":"### Find a contact (at least one search term must be fulfilled)","lastModifiedDate":"2021-11-08"},{"lineNumber":1173,"author":{"gitId":"yucheng11122017"},"content":"1. Find a contact by name","lastModifiedDate":"2021-11-08"},{"lineNumber":1174,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1175,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Multiple contacts in the list with at least one contact named Roy. None of the contacts has the name George (case-insensitive).","lastModifiedDate":"2021-11-08"},{"lineNumber":1176,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1177,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny n/Roy`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1178,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with name Roy. Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1179,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1180,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny n/George`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1181,"author":{"gitId":"yucheng11122017"},"content":"       Expected: 0 contacts displayed. Status message indicates 0 contacts are found.","lastModifiedDate":"2021-11-08"},{"lineNumber":1182,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1183,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny n/roy!`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1184,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1185,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1186,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `findAny`, `findAny n/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1187,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1188,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1189,"author":{"gitId":"yucheng11122017"},"content":"1. Find a contact by tag","lastModifiedDate":"2021-11-08"},{"lineNumber":1190,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Multiple contacts in the list with one contact having tag name colleagues and one with tag name Colleagues. None of the contacts has the tag owesMoney (case-insensitive).","lastModifiedDate":"2021-11-08"},{"lineNumber":1191,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1192,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1193,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag colleagues. Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1194,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1195,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny c/ t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1196,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag Colleagues (case-sensitive). Number of contacts found shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1197,"author":{"gitId":"yucheng11122017"},"content":"        ","lastModifiedDate":"2021-11-08"},{"lineNumber":1198,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny t/owesMoney`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1199,"author":{"gitId":"yucheng11122017"},"content":"       Expected: 0 contacts displayed. Status message indicates 0 contacts are found.","lastModifiedDate":"2021-11-08"},{"lineNumber":1200,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1201,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny t/123!`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1202,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1203,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1204,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `findAny`, `findAny t/\u003cvalid tag\u003e c/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1205,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1206,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1207,"author":{"gitId":"yucheng11122017"},"content":"1. Find a contact by tag and name","lastModifiedDate":"2021-11-08"},{"lineNumber":1208,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Multiple contacts in the list with one contact with name Roy having tag name colleagues and one with name Adam having tag name Colleagues.","lastModifiedDate":"2021-11-08"},{"lineNumber":1209,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1210,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny n/Roy t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1211,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag colleagues (case-insensitive) or whose name contains Roy. Number of contacts found shown in the status message. Both Adam and Roy are within the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":1212,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny c/ n/Roy t/Colleagues`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1213,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Displays contacts with tag Colleagues (case-sensitive) or whose name contains Roy. Number of contacts found shown in the status message. Both Adam and Roy are within the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":1214,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `findAny n/Roy t/123!`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1215,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1216,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1217,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect untag commands to try: `findAny`, `findAny t/\u003cvalid tag\u003e n/\u003cvalid name\u003e c/`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1218,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1219,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1220,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1221,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1222,"author":{"gitId":"yucheng11122017"},"content":"### Deleting a contact","lastModifiedDate":"2021-11-06"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1224,"author":{"gitId":"yucheng11122017"},"content":"1. Deleting a contact while all contacts are being shown","lastModifiedDate":"2021-11-06"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1226,"author":{"gitId":"yucheng11122017"},"content":"   1. Prerequisites: List all contacts using the `list` command. Multiple contacts in the list.","lastModifiedDate":"2021-11-06"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1229,"author":{"gitId":"Justinhoejj"},"content":"      Expected: First contact is deleted from the list. If deleted contact has a birthday, it\u0027s birthday reminder message is deleted from the birthday reminder list. Details of the deleted contact are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1232,"author":{"gitId":"leezhixuan"},"content":"      Expected: No contact is deleted. Error details are shown in the status message. The status bar remains the same.","lastModifiedDate":"2021-11-07"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1235,"author":{"gitId":"cookiedan42"},"content":"      Expected: No contact is deleted. Error details are shown in the status message. The status bar remains the same.","lastModifiedDate":"2021-11-08"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"       ","lastModifiedDate":"2020-05-23"},{"lineNumber":1237,"author":{"gitId":"yucheng11122017"},"content":"1. Deleting a contact while some contacts are being shown","lastModifiedDate":"2021-11-06"},{"lineNumber":1238,"author":{"gitId":"leezhixuan"},"content":"    1. Prerequisites: View only some contacts using the `find` or `findAny` command. Multiple contacts in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":1239,"author":{"gitId":"yucheng11122017"},"content":"    ","lastModifiedDate":"2021-11-06"},{"lineNumber":1240,"author":{"gitId":"yucheng11122017"},"content":"    1. Test Case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1241,"author":{"gitId":"leezhixuan"},"content":"       Expected: First contact that is being viewed is deleted from the list. Details of the deleted contact are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1243,"author":{"gitId":"yucheng11122017"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1244,"author":{"gitId":"cookiedan42"},"content":"      Expected: No contact is deleted. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1246,"author":{"gitId":"Justinhoejj"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the size of the contacts that are currently being viewed).\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1247,"author":{"gitId":"cookiedan42"},"content":"      Expected: No contact is deleted. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1249,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1250,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1251,"author":{"gitId":"Justinhoejj"},"content":"### Deleting multiple contacts","lastModifiedDate":"2021-11-07"},{"lineNumber":1252,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1253,"author":{"gitId":"leezhixuan"},"content":"1. Deleting multiple contacts while all contacts are being shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1254,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: List all contacts using the `list` command. At least 10 contacts in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":1255,"author":{"gitId":"Justinhoejj"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":1256,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `deletem 8 - 10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1257,"author":{"gitId":"leezhixuan"},"content":"       Expected: Eighth, ninth and tenth contact deleted from the list. If deleted contact has a birthday, its birthday reminder message is deleted from the birthday reminder list. Details of the deleted contact are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1258,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1259,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `deletem 6 - 4`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1260,"author":{"gitId":"leezhixuan"},"content":"       Expected: No contact is deleted since the end index is smaller than the start index. Error details are shown in the status message. The status bar remains the same.","lastModifiedDate":"2021-11-07"},{"lineNumber":1261,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1262,"author":{"gitId":"Justinhoejj"},"content":"    1. Other incorrect delete commands to try: `deletem`, `deletem -2 - -1 `, `deletem x - y`, `...` (where x is not less than y, either x or y is not a positive integer within list size currently being viewed).\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1263,"author":{"gitId":"cookiedan42"},"content":"       Expected: No contact is deleted. Error details are shown in the status message. The status bar remains the same.","lastModifiedDate":"2021-11-08"},{"lineNumber":1264,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1265,"author":{"gitId":"Justinhoejj"},"content":"1. Deleting a contact while some contacts are being shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1266,"author":{"gitId":"leezhixuan"},"content":"    1. Prerequisites: View only some contacts using the `find` or `findAny` command. At least 10 contacts in the list are displayed.","lastModifiedDate":"2021-11-07"},{"lineNumber":1267,"author":{"gitId":"Justinhoejj"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":1268,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `deletem 8 - 10`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1269,"author":{"gitId":"leezhixuan"},"content":"       Expected: Eighth, ninth and tenth contact deleted from the list. If deleted contact has a birthday, its birthday reminder message is deleted from the birthday reminder list. Details of the deleted contact are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1270,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1271,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `deletem 6 - 4`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1272,"author":{"gitId":"leezhixuan"},"content":"       Expected: No contact is deleted since the end index is smaller than the start index. Error details are shown in the status message. The status bar remains the same.","lastModifiedDate":"2021-11-07"},{"lineNumber":1273,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1274,"author":{"gitId":"leezhixuan"},"content":"    1. Other incorrect delete commands to try: `deletem`, `deletem -2 - -1 `, `deletem x - y`, `...` (where x is not less than y, either of x or y is not a positive integer within the list size currently being viewed).\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1275,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1276,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1277,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1278,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1279,"author":{"gitId":"Justinhoejj"},"content":"### Pinning a contact","lastModifiedDate":"2021-11-07"},{"lineNumber":1280,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1281,"author":{"gitId":"cookiedan42"},"content":"1. Pinning a contact","lastModifiedDate":"2021-11-08"},{"lineNumber":1282,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1283,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: Contact at index 1 pinned and index 2 not pinned.","lastModifiedDate":"2021-11-07"},{"lineNumber":1284,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1285,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `pin 2`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1286,"author":{"gitId":"leezhixuan"},"content":"       Expected: Contact at index 2 pinned. Details of the recently pinned contact are shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1287,"author":{"gitId":"Justinhoejj"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":1288,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `pin 1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1289,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1290,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1291,"author":{"gitId":"Justinhoejj"},"content":"    1. Other incorrect pin commands to try: `pin`, `pin -1`, `pin x`, `...` (where x is larger than the size of the contacts that are currently being viewed).\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1292,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1293,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1294,"author":{"gitId":"Justinhoejj"},"content":"### Unpinning a contact","lastModifiedDate":"2021-11-07"},{"lineNumber":1295,"author":{"gitId":"cookiedan42"},"content":"1. Unpinning a contact","lastModifiedDate":"2021-11-08"},{"lineNumber":1296,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1297,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: Contact at index 1 pinned and index 2 not pinned.","lastModifiedDate":"2021-11-07"},{"lineNumber":1298,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1299,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `unpin 1`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1300,"author":{"gitId":"cookiedan42"},"content":"       Expected: Contact at index 1 unpinned. Details of the recently unpinned contact are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1302,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `unpin 2`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1303,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1305,"author":{"gitId":"Justinhoejj"},"content":"    1. Other incorrect unpin commands to try: `unpin`, `unpin -1`, `unpin x`, `...` (where x is larger than the size of the contacts that are currently being viewed).\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1306,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1307,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1308,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1309,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1310,"author":{"gitId":"cookiedan42"},"content":"### Tagging a contact","lastModifiedDate":"2021-11-08"},{"lineNumber":1311,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1312,"author":{"gitId":"cookiedan42"},"content":"1. Tagging a contact with multiple tags","lastModifiedDate":"2021-11-08"},{"lineNumber":1313,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1314,"author":{"gitId":"yucheng11122017"},"content":"    1. Prerequisites: Contact at index 1 has no tags and contact at index 2 has tag of friends.","lastModifiedDate":"2021-11-08"},{"lineNumber":1315,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1316,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `tag 1 t/johnBirthday t/party`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1317,"author":{"gitId":"cookiedan42"},"content":"       Expected: Tags added to contact at index 1. Details of the tags added to contact are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1318,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1319,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `tag 2 t/friends`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1320,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes to the contact. Warning details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1321,"author":{"gitId":"cookiedan42"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1322,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `tag 2 t/party t/friends`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1323,"author":{"gitId":"cookiedan42"},"content":"        Expected: New tag is added to the contact. Warning details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1324,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1325,"author":{"gitId":"yucheng11122017"},"content":"    1. Other incorrect tag commands to try: `tag`, `tag -1 t/\u003cvalid tag name\u003e`, `tag 1 t/\u003ctag name longer than 60 characters\u003e`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1326,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes to contacts. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1327,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1328,"author":{"gitId":"cookiedan42"},"content":"### Untagging a contact","lastModifiedDate":"2021-11-08"},{"lineNumber":1329,"author":{"gitId":"cookiedan42"},"content":"1. Untagging a contact","lastModifiedDate":"2021-11-08"},{"lineNumber":1330,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1331,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisites: Contact at index 1 has tags johnBirthday and party and contact at index 2 has no tags.","lastModifiedDate":"2021-11-07"},{"lineNumber":1332,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1333,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `untag 1 t/johnBirthday t/party`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1334,"author":{"gitId":"yucheng11122017"},"content":"       Expected: Removes specified tags from contact at index 1. Details of the removed tags are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1335,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1336,"author":{"gitId":"yucheng11122017"},"content":"    1. Test case: `untag 2 t/party`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1337,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1338,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-06"},{"lineNumber":1339,"author":{"gitId":"Justinhoejj"},"content":"    1. Other incorrect untag commands to try: `untag`, `untag -1 t/\u003cvalid tag name\u003e`, `...`.\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1340,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1341,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1342,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1343,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1344,"author":{"gitId":"Justinhoejj"},"content":"### Export Mailing List Command","lastModifiedDate":"2021-11-07"},{"lineNumber":1345,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1346,"author":{"gitId":"cookiedan42"},"content":"1.  Export contact list ","lastModifiedDate":"2021-11-08"},{"lineNumber":1347,"author":{"gitId":"cookiedan42"},"content":"    1. Prerequisites: List all contacts using the `list` command.","lastModifiedDate":"2021-11-08"},{"lineNumber":1348,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1349,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `mailingList`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1350,"author":{"gitId":"cookiedan42"},"content":"       Expected: Generate CSV file with name, phone and email of all contacts displayed in the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":1351,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1352,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `mailingList b/ a/`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1353,"author":{"gitId":"cookiedan42"},"content":"       Expected: Generate CSV file with name, birthday and address of all contacts displayed in the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":1354,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1355,"author":{"gitId":"Justinhoejj"},"content":"    1. Test case: `mailingList k/`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1356,"author":{"gitId":"cookiedan42"},"content":"       Expected: No changes made. Error details are shown in the status message.","lastModifiedDate":"2021-11-08"},{"lineNumber":1357,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1358,"author":{"gitId":"cookiedan42"},"content":"1. Export Filtered contact list","lastModifiedDate":"2021-11-08"},{"lineNumber":1359,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1360,"author":{"gitId":"cookiedan42"},"content":"    1. Prerequisites: Filter contacts using the `find` command.","lastModifiedDate":"2021-11-08"},{"lineNumber":1361,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1362,"author":{"gitId":"cookiedan42"},"content":"    1. Test case: `mailingList` as above\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1363,"author":{"gitId":"cookiedan42"},"content":"        Expected: Same result as exporting full contact list, but with only the contacts in the filtered list","lastModifiedDate":"2021-11-08"},{"lineNumber":1364,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1365,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":1368,"author":{"gitId":"Justinhoejj"},"content":"    1. Prerequisite: Have some contacts saved in `[JAR file location]/data/CONNECTIONS.json`.","lastModifiedDate":"2021-11-07"},{"lineNumber":1369,"author":{"gitId":"yucheng11122017"},"content":"   ","lastModifiedDate":"2021-11-06"},{"lineNumber":1370,"author":{"gitId":"yucheng11122017"},"content":"    1. Test Case: edit the first contact name to `Alice Lee` and launch CONNECTIONS\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1371,"author":{"gitId":"Justinhoejj"},"content":"        Expected: CONNECTIONS launches successfully. The first contact\u0027s name is changed to `Alice Lee`.","lastModifiedDate":"2021-11-07"},{"lineNumber":1372,"author":{"gitId":"yucheng11122017"},"content":"       ","lastModifiedDate":"2021-11-06"},{"lineNumber":1373,"author":{"gitId":"yucheng11122017"},"content":"    1. Test Case: edit the first contact email to `hellogmail` and launch CONNECTIONS\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1374,"author":{"gitId":"leezhixuan"},"content":"        Expected: CONNECTIONS launches successfully with 0 contacts. ","lastModifiedDate":"2021-11-07"},{"lineNumber":1375,"author":{"gitId":"-"},"content":"       ","lastModifiedDate":"2020-05-23"},{"lineNumber":1376,"author":{"gitId":"cookiedan42"},"content":"    1. Other incorrect formatting of data or invalid fields: birthday to `00000000`, phone to `mynumber`, `...`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1377,"author":{"gitId":"cookiedan42"},"content":"        Expected: CONNECTIONS launches successfully with 0 contacts.","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Jiwei99":128,"cookiedan42":168,"Justinhoejj":167,"yucheng11122017":400,"leezhixuan":229,"-":285}},{"path":"docs/Documentation.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Documentation guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"**Setting up and maintaining the project website:**","lastModifiedDate":"2020-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* The `docs/` folder is used for documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html).","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Note these points when adapting the documentation to a different project/product:","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * The \u0027Site-wide settings\u0027 section of the page linked above has information on how to update site-wide elements such as the top navigation bar.","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"  * :bulb: In addition to updating content files, you might have to update the config files `docs\\_config.yml` and `docs\\_sass\\minima\\_base.scss` (which contains a reference to `CONNECTIONS` that comes into play when converting documentation pages to PDF format).","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are using Intellij for editing documentation files, you can consider enabling \u0027soft wrapping\u0027 for `*.md` files, as explained in [_[se-edu/guides] **Intellij IDEA: Useful settings**_](https://se-education.org/guides/tutorials/intellijUsefulSettings.html#enabling-soft-wrapping)","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Style guidance:**","lastModifiedDate":"2020-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style).","lastModifiedDate":"2020-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)","lastModifiedDate":"2020-06-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**Diagrams:**","lastModifiedDate":"2020-06-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)","lastModifiedDate":"2020-06-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"**Converting a document to the PDF format:**","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)","lastModifiedDate":"2020-06-07"}],"authorContributionMap":{"cookiedan42":1,"-":28}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   1. Run the `seedu.address.Main` and try a few commands.","lastModifiedDate":"2020-06-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [CONNECTIONS’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"yucheng11122017":1,"-":47}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"CONNECTIONS is a **desktop app for managing contacts and keeping tracks of birthdays, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CONNECTIONS can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"* [Features](#features)","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"  * [Upcoming birthdays](#upcoming-birthdays)","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"  * [Command Assistant](#command-assistant)","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"  * [Command History](#command-history)","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"  * [Commands](#commands)","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    * [Viewing help : `help`](#viewing-help--help)","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"    * [Adding a contact: `add`](#adding-a-contact-add)","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    * [Listing all contacts : `list`](#listing-all-contacts--list)","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    * [Editing a contact : `edit`](#editing-a-contact--edit)","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    * [Adding Tags : `tag`](#adding-tags--tag)","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"    * [Removing Tags : `untag`](#removing-tags--untag)","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"    * [Locating contacts by name and tag(s): `find`](#locating-contacts-by-names-and-tags-find)","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"    * [Locating contacts by name or tag(s): `findAny`](#locating-contacts-by-names-or-tags-findany)","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"    * [Pinning a contact: `pin`](#pinning-a-contact--pin)","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    * [Unpinning a contact: `unpin`](#unpinning-a-contact--unpin)","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"    * [Deleting a contact : `delete`](#deleting-a-contact--delete)","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    * [Deleting multiple contact : `deletem`](#deleting-multiple-contacts--deletem)","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"    * [Exporting a mailing list of contacts: `mailingList`](#exporting-a-mailing-list-of-contacts--mailinglist)","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    * [Clearing all entries : `clear`](#clearing-all-entries--clear)","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"    * [Exiting the program : `exit`](#exiting-the-program--exit)","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"* [FAQ](#faq)","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"* [Command Summary](#command-summary)","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"1. Ensure you have Java `11` or above installed on your computer.","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"1. Download the latest `CONNECTIONS.jar` from [here](https://github.com/AY2122S1-CS2103-F09-4/tp/releases).","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"1. Copy the file to the folder you want to use as the _home directory_ for your CONNECTIONS.","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will show a list of commands that CONNECTIONS supports.\u003cbr\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"   Click [here](#command-summary) for a summary of example commands you can try!","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-09-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"  e.g. `list 123` will be interpreted as `list`.","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"* Phone numbers can be of any length, but can only contain numerical digits.","lastModifiedDate":"2021-11-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"* Command words are case-sensitive. e.g. `findany` will not be interpreted as `findAny`.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"### Upcoming Birthdays","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"The vertical tab provides upcoming birthdays at a glance. Having this means that you will never miss a birthday.","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"It sorts all birthdays amongst all contacts in CONNECTIONS **chronologically**, with the **nearest** upcoming birthday at the **top**.","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"* Contacts color-coded in **GREEN** are celebrating their birthdays **today**.","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"* Contacts color-coded in **BLUE** will be celebrating their birthdays in **a week or less**.","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"* The rest of the entries will not be color-coded.  ","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"  ![BirthdayColors](images/BirthdayColors.png)  ","lastModifiedDate":"2021-11-06"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"Justinhoejj"},"content":"### Command Assistant","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"Justinhoejj"},"content":"Shows command format and example as the command is entered for a smoother learning curve.","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Justinhoejj"},"content":"#### Sample Usage:","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"Justinhoejj"},"content":"* `edit` is entered in the command box.","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"Justinhoejj"},"content":"  * CONNECTIONS shows command format and sample for `edit`.","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"Justinhoejj"},"content":"    ![Tag_Command_Assistant](images/commandAssistantEdit.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"* `tag` is entered in the command box.","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"Justinhoejj"},"content":"  * CONNECTIONS shows command format and sample for `tag`.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"  ![Tag_Command_Assistant](images/commandAssistantTag.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"### Command History","lastModifiedDate":"2021-11-07"},{"lineNumber":111,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":112,"author":{"gitId":"Justinhoejj"},"content":"View and use previously called commands to minimize typing of repeated commands.","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"Justinhoejj"},"content":"Notes:","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"* Only commands that have been used in the current program run can be viewed. Commands used in previous runs are not stored.","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"Justinhoejj"},"content":"#### Sample Usage:","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"Justinhoejj"},"content":"* Up Arrow","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"  * Shows the previous command called in the command box.","lastModifiedDate":"2021-11-07"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"  * If there are no previous commands, an empty command box is shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"  * If the earliest command is shown, earliest command will continue to be shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"Justinhoejj"},"content":"* Down Arrow","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"  * Shows the next command called in the command box.","lastModifiedDate":"2021-11-07"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"  * If there are no later commands, an empty command box is shown.","lastModifiedDate":"2021-11-07"},{"lineNumber":125,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"## Commands","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"Shows a help message that explains the purpose and method of usage for each command for a smoother learning curve.","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"* `help` - List out all available commands.","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"* `help COMMAND` - Shows help message for the command specified.","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"* Use the command `help more` to open a link to the documentation.","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"* `help`","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"  * Shows all available commands.","lastModifiedDate":"2021-11-02"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"  ![help](images/helpMessage.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"* `help add`","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"  * Shows help message for `add`.","lastModifiedDate":"2021-11-02"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"  ![help_with_command](images/helpWithCommand.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"Jiwei99"},"content":"* `help more`","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"  * Opens a link to the documentation.","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"  ![help link](images/helpLink.png)","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"yucheng11122017"},"content":"### Adding a contact: `add`","lastModifiedDate":"2021-11-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"Adds a contact to CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":163,"author":{"gitId":"Jiwei99"},"content":"* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":166,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":167,"author":{"gitId":"Jiwei99"},"content":":bulb: **Tip:**","lastModifiedDate":"2021-09-23"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"A contact can have any number of tags (including 0).","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":171,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":172,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":173,"author":{"gitId":"Jiwei99"},"content":":bulb: **Tip:**","lastModifiedDate":"2021-09-23"},{"lineNumber":174,"author":{"gitId":"Jiwei99"},"content":"Format birthday as `ddMMyyyy`.","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"Jiwei99"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"Justinhoejj"},"content":"Notes:","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"* Phone numbers must be unique and must contain only numbers.","lastModifiedDate":"2021-11-07"},{"lineNumber":179,"author":{"gitId":"yucheng11122017"},"content":"* Emails must contain @. (Valid emails that violate convention are accepted as well)","lastModifiedDate":"2021-11-05"},{"lineNumber":180,"author":{"gitId":"cookiedan42"},"content":"* Birthdays are optional and can be added to existing contacts using the `edit` command.","lastModifiedDate":"2021-11-06"},{"lineNumber":181,"author":{"gitId":"cookiedan42"},"content":"* Future dates are not allowed as birthdays.","lastModifiedDate":"2021-11-06"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"* Tag names are limited to 60 characters.","lastModifiedDate":"2021-11-07"},{"lineNumber":183,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":184,"author":{"gitId":"Justinhoejj"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-28"},{"lineNumber":185,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2021-10-28"},{"lineNumber":186,"author":{"gitId":"Justinhoejj"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison b/25121999 p/1234567 t/criminal`","lastModifiedDate":"2021-10-28"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":188,"author":{"gitId":"yucheng11122017"},"content":"### Listing all contacts : `list`","lastModifiedDate":"2021-11-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"leezhixuan"},"content":"Shows a list of all contacts in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":193,"author":{"gitId":"Jiwei99"},"content":"* `list`","lastModifiedDate":"2021-09-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":197,"author":{"gitId":"yucheng11122017"},"content":"### Editing a contact : `edit`","lastModifiedDate":"2021-11-06"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"leezhixuan"},"content":"Edits an existing contact in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":202,"author":{"gitId":"Jiwei99"},"content":"* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`","lastModifiedDate":"2021-09-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":205,"author":{"gitId":"yucheng11122017"},"content":"* Edits the contact at the specified `INDEX`. The index refers to the index number shown in the displayed contact list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-11-06"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"* There must be at least one of the optional fields provided alongside the edit command.","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"leezhixuan"},"content":"* The existing set of tags that belongs to a contact will be updated to the new set of tags inputted. i.e. The edits made to a set of tags are not cumulative.","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"leezhixuan"},"content":"* You can remove all tags of a particular contact using `edit INDEX t/` (without providing anything after `t/`).","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":213,"author":{"gitId":"Jiwei99"},"content":"* `edit 1 p/91234567 e/johndoe@example.com`","lastModifiedDate":"2021-09-23"},{"lineNumber":214,"author":{"gitId":"yucheng11122017"},"content":"  * Edits the phone number and email address of the 1st contact in the displayed contact list to be `91234567` and `johndoe@example.com`, respectively.","lastModifiedDate":"2021-11-07"},{"lineNumber":215,"author":{"gitId":"Jiwei99"},"content":"* `edit 2 n/Betsy Crower t/`","lastModifiedDate":"2021-09-23"},{"lineNumber":216,"author":{"gitId":"yucheng11122017"},"content":"  * Edits the name of the 2nd contact in the displayed contact list to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":218,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":219,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":220,"author":{"gitId":"Jiwei99"},"content":"### Adding Tags : `tag`","lastModifiedDate":"2021-09-23"},{"lineNumber":221,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":222,"author":{"gitId":"Justinhoejj"},"content":"Adds one or more tags to an existing contact in CONNECTIONS. This facilitates the organization of contacts into groups.","lastModifiedDate":"2021-11-08"},{"lineNumber":223,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":224,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":225,"author":{"gitId":"Jiwei99"},"content":"* `tag INDEX t/TAG [t/MORE_TAGS]…​`","lastModifiedDate":"2021-11-02"},{"lineNumber":226,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":227,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":228,"author":{"gitId":"leezhixuan"},"content":"* Adds tag(s) to the contact at the specified `INDEX`. The index refers to the index number shown in the displayed contact list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-11-07"},{"lineNumber":229,"author":{"gitId":"leezhixuan"},"content":"* New tags are added on top of existing tags i.e., tags added are cumulative.","lastModifiedDate":"2021-11-07"},{"lineNumber":230,"author":{"gitId":"yucheng11122017"},"content":"* Adding new tags which already exist will succeed with a warning letting you know that the contact already had those tags.","lastModifiedDate":"2021-11-06"},{"lineNumber":231,"author":{"gitId":"yucheng11122017"},"content":"* Tags have a character limit of 60.","lastModifiedDate":"2021-11-04"},{"lineNumber":232,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":233,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":234,"author":{"gitId":"Jiwei99"},"content":"* `tag 2 t/friend t/NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":235,"author":{"gitId":"yucheng11122017"},"content":"    * Adds the tags `friend` and `NUS` to the 2nd contact.","lastModifiedDate":"2021-11-06"},{"lineNumber":236,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":237,"author":{"gitId":"Jiwei99"},"content":"### Removing Tags : `untag`","lastModifiedDate":"2021-09-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":239,"author":{"gitId":"leezhixuan"},"content":"Removes one or more existing tags from an existing contact in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":241,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":242,"author":{"gitId":"Jiwei99"},"content":"* `untag INDEX t/TAG [t/MORE_TAGS]…​`","lastModifiedDate":"2021-11-02"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":244,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":245,"author":{"gitId":"yucheng11122017"},"content":"* Remove tags from the contact at the specified `INDEX`. The index refers to the index number shown in the displayed contact list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-11-06"},{"lineNumber":246,"author":{"gitId":"Jiwei99"},"content":"* Only tags that exist will be removed.","lastModifiedDate":"2021-09-23"},{"lineNumber":247,"author":{"gitId":"leezhixuan"},"content":"* CONNECTIONS displays a warning and will not remove any tags if the user tries to remove a non-existent tag.","lastModifiedDate":"2021-11-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":249,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":250,"author":{"gitId":"Jiwei99"},"content":"* `untag 2 t/friend t/NUS`","lastModifiedDate":"2021-09-23"},{"lineNumber":251,"author":{"gitId":"yucheng11122017"},"content":"    * Removes the tags `friend` and `NUS` from the 2nd contact.","lastModifiedDate":"2021-11-06"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":255,"author":{"gitId":"yucheng11122017"},"content":"### Locating contacts by name(s) and tag(s): `find`","lastModifiedDate":"2021-11-07"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"yucheng11122017"},"content":"Finds all contacts who match **ALL** name and tag keywords provided.","lastModifiedDate":"2021-11-06"},{"lineNumber":258,"author":{"gitId":"Justinhoejj"},"content":"This narrows your search so that you will be able to filter contacts with greater specificity.","lastModifiedDate":"2021-11-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"cookiedan42"},"content":"The commands `find` and `findAny` will filter the displayed contacts and only display the matching results.  ","lastModifiedDate":"2021-11-08"},{"lineNumber":261,"author":{"gitId":"cookiedan42"},"content":"![result for `find n/alex t/football t/classmate`](images/findAlexfootballclassmatesResult.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":263,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":264,"author":{"gitId":"leezhixuan"},"content":"* `find [c/] [n/NAME] …​ [t/TAG] …​`","lastModifiedDate":"2021-11-05"},{"lineNumber":265,"author":{"gitId":"leezhixuan"},"content":"  * Note that `find` must have at least one `[n/NAME]` or `[t/TAG]`.","lastModifiedDate":"2021-11-02"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"Jiwei99"},"content":"Notes:  ","lastModifiedDate":"2021-09-23"},{"lineNumber":268,"author":{"gitId":"leezhixuan"},"content":"* `find` is case-insensitive for names. e.g. `find n/hans` will match contacts named `Hans`.  ","lastModifiedDate":"2021-11-07"},{"lineNumber":269,"author":{"gitId":"cookiedan42"},"content":"* `find` is case-insensitive for tags by default. e.g. `find t/friend` will match a contact with tags `Friend` or `friend`.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":270,"author":{"gitId":"cookiedan42"},"content":"  * Adding the `c/` flag **after** the command word will make tag matching case-sensitive.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":271,"author":{"gitId":"cookiedan42"},"content":"    e.g. `find c/ t/friend` will match a contact with tag `friend` but not `Friend`.","lastModifiedDate":"2021-11-04"},{"lineNumber":272,"author":{"gitId":"cookiedan42"},"content":"* The order of the keywords does not matter. e.g. `find n/Hans t/football` will return the same result as `find  t/football n/Hans`.","lastModifiedDate":"2021-11-05"},{"lineNumber":273,"author":{"gitId":"cookiedan42"},"content":"* Only full words will be matched for names and tags.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":274,"author":{"gitId":"cookiedan42"},"content":"  * `find n/an` will not return `Hans`, but will return `Jing An`.  ","lastModifiedDate":"2021-11-05"},{"lineNumber":275,"author":{"gitId":"leezhixuan"},"content":"* Only contacts that matched all keywords provided will be returned as search results (i.e. `AND` search).  ","lastModifiedDate":"2021-11-07"},{"lineNumber":276,"author":{"gitId":"leezhixuan"},"content":"  e.g. `find n/Hans t/Friend` will return all contacts with names containing the word `Hans` and are tagged with `Friend`.","lastModifiedDate":"2021-11-07"},{"lineNumber":277,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":278,"author":{"gitId":"leezhixuan"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-27"},{"lineNumber":279,"author":{"gitId":"leezhixuan"},"content":"* `find n/John`","lastModifiedDate":"2021-10-27"},{"lineNumber":280,"author":{"gitId":"Jiwei99"},"content":"  * returns `john` and `John Doe`.","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"leezhixuan"},"content":"* `find n/alex t/football t/classmate`","lastModifiedDate":"2021-10-27"},{"lineNumber":282,"author":{"gitId":"Jiwei99"},"content":"  * returns `Alex Yeoh`, who has both `football` and `classmates` tag.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"leezhixuan"},"content":"* `find c/ t/FRIENDS`","lastModifiedDate":"2021-10-27"},{"lineNumber":284,"author":{"gitId":"Jiwei99"},"content":"  * returns `Shin`, who is tagged with `FRIENDS`.","lastModifiedDate":"2021-11-02"},{"lineNumber":285,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":286,"author":{"gitId":"yucheng11122017"},"content":"### Locating contacts by name(s) or tag(s): `findAny`","lastModifiedDate":"2021-11-07"},{"lineNumber":287,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":288,"author":{"gitId":"yucheng11122017"},"content":"Finds all contacts who match **ANY** name and tag keywords provided. ","lastModifiedDate":"2021-11-06"},{"lineNumber":289,"author":{"gitId":"Justinhoejj"},"content":"This broadens your search so that you will be able to filter contacts with greater flexibility.","lastModifiedDate":"2021-11-08"},{"lineNumber":290,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":291,"author":{"gitId":"leezhixuan"},"content":"#### Format:","lastModifiedDate":"2021-10-27"},{"lineNumber":292,"author":{"gitId":"leezhixuan"},"content":"* `findAny [c/] [n/NAME] …​ [t/TAG] …​`","lastModifiedDate":"2021-11-05"},{"lineNumber":293,"author":{"gitId":"cookiedan42"},"content":"  * Note that `findAny` must have at least one `[n/NAME]` or `[t/TAG]`.","lastModifiedDate":"2021-11-04"},{"lineNumber":294,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":295,"author":{"gitId":"leezhixuan"},"content":"Notes:","lastModifiedDate":"2021-10-27"},{"lineNumber":296,"author":{"gitId":"leezhixuan"},"content":"* `findAny` is case-insensitive for names. e.g. `findAny n/hans` will match contacts named `Hans`.","lastModifiedDate":"2021-11-07"},{"lineNumber":297,"author":{"gitId":"cookiedan42"},"content":"* `findAny` is case-insensitive for tags by default. e.g. `findAny t/friend` will match a contact with tags `Friend` or `friend`.","lastModifiedDate":"2021-11-05"},{"lineNumber":298,"author":{"gitId":"cookiedan42"},"content":"  * Adding the `c/` flag **after** the command word will make tag matching case-sensitive.  ","lastModifiedDate":"2021-11-04"},{"lineNumber":299,"author":{"gitId":"cookiedan42"},"content":"    e.g. `findAny c/ t/friend` will match a contact with tag `friend` but not `Friend`.","lastModifiedDate":"2021-11-05"},{"lineNumber":300,"author":{"gitId":"cookiedan42"},"content":"* The order of the keywords does not matter. e.g. `findAny n/Hans t/football` will return the same result as `findAny t/football n/Hans`.","lastModifiedDate":"2021-11-05"},{"lineNumber":301,"author":{"gitId":"cookiedan42"},"content":"* Only full words will be matched for names and tags.","lastModifiedDate":"2021-11-04"},{"lineNumber":302,"author":{"gitId":"cookiedan42"},"content":"  * `findAny n/an` will not return `Hans`, but will return `Jing An`.","lastModifiedDate":"2021-11-05"},{"lineNumber":303,"author":{"gitId":"leezhixuan"},"content":"* Only contacts that match at least one of the keywords provided will be returned as search results (i.e., `OR` search)","lastModifiedDate":"2021-11-07"},{"lineNumber":304,"author":{"gitId":"leezhixuan"},"content":"  e.g. `findAny n/Hans t/Friend` will return all contacts with names containing the word `Hans` or are tagged with `Friend`.","lastModifiedDate":"2021-11-07"},{"lineNumber":305,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":308,"author":{"gitId":"leezhixuan"},"content":"* `findAny n/John`","lastModifiedDate":"2021-10-27"},{"lineNumber":309,"author":{"gitId":"Jiwei99"},"content":"  * returns `john` and `John Doe`.","lastModifiedDate":"2021-11-02"},{"lineNumber":310,"author":{"gitId":"leezhixuan"},"content":"* `findAny n/alex n/irfan t/chef`","lastModifiedDate":"2021-10-27"},{"lineNumber":311,"author":{"gitId":"Jiwei99"},"content":"  * returns `Alex Yeoh`, `Irfan Ibrahim`, `Carol` who is tagged with `chef`.\u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":312,"author":{"gitId":"leezhixuan"},"content":"* `findAny c/ n/Shin t/FRIENDS t/chef`","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"Jiwei99"},"content":"  * returns `Shin` who is tagged with `FRIENDS`, as well as `Carol` who is tagged with `chef`.","lastModifiedDate":"2021-11-02"},{"lineNumber":314,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":315,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":316,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":317,"author":{"gitId":"yucheng11122017"},"content":"### Pinning a contact : `pin`","lastModifiedDate":"2021-11-06"},{"lineNumber":318,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"Justinhoejj"},"content":"Pins a contact to the top of the contact list. This makes it easier to refer to the details of frequent contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":320,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":321,"author":{"gitId":"cookiedan42"},"content":"Pinned contacts will appear at the top of the unfiltered list  ","lastModifiedDate":"2021-11-08"},{"lineNumber":322,"author":{"gitId":"cookiedan42"},"content":"![two pinned contacts](images/pinUiDouble.jpg)  ","lastModifiedDate":"2021-11-08"},{"lineNumber":323,"author":{"gitId":"Jiwei99"},"content":"#### Format: ","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"yucheng11122017"},"content":"* `pin INDEX`","lastModifiedDate":"2021-10-27"},{"lineNumber":325,"author":{"gitId":"yucheng11122017"},"content":"  ","lastModifiedDate":"2021-10-27"},{"lineNumber":326,"author":{"gitId":"yucheng11122017"},"content":"Notes:","lastModifiedDate":"2021-10-27"},{"lineNumber":327,"author":{"gitId":"yucheng11122017"},"content":"* Pins the contact at the specified `INDEX`.","lastModifiedDate":"2021-11-06"},{"lineNumber":328,"author":{"gitId":"yucheng11122017"},"content":"* The index refers to the index number shown in the displayed contact list.","lastModifiedDate":"2021-11-06"},{"lineNumber":329,"author":{"gitId":"yucheng11122017"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":331,"author":{"gitId":"yucheng11122017"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-27"},{"lineNumber":332,"author":{"gitId":"yucheng11122017"},"content":"* `list` followed by `pin 2`","lastModifiedDate":"2021-10-27"},{"lineNumber":333,"author":{"gitId":"leezhixuan"},"content":"  * pins the 2nd contact in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":334,"author":{"gitId":"Jiwei99"},"content":"* `find n/Betsy` followed by `pin 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":335,"author":{"gitId":"yucheng11122017"},"content":"  * pins the 1st contact in the results of the `find` command.","lastModifiedDate":"2021-11-06"},{"lineNumber":336,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":337,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":338,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":339,"author":{"gitId":"yucheng11122017"},"content":"### Unpinning a contact : `unpin`","lastModifiedDate":"2021-11-06"},{"lineNumber":340,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":341,"author":{"gitId":"yucheng11122017"},"content":"Unpins a contact.","lastModifiedDate":"2021-11-07"},{"lineNumber":342,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":343,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-11-02"},{"lineNumber":344,"author":{"gitId":"yucheng11122017"},"content":"* `unpin INDEX`","lastModifiedDate":"2021-10-27"},{"lineNumber":345,"author":{"gitId":"yucheng11122017"},"content":"  ","lastModifiedDate":"2021-10-27"},{"lineNumber":346,"author":{"gitId":"yucheng11122017"},"content":"Notes:","lastModifiedDate":"2021-10-27"},{"lineNumber":347,"author":{"gitId":"yucheng11122017"},"content":"* Unpins the contact at the specified `INDEX`.","lastModifiedDate":"2021-11-06"},{"lineNumber":348,"author":{"gitId":"yucheng11122017"},"content":"* The index refers to the index number shown in the displayed contact list.","lastModifiedDate":"2021-11-06"},{"lineNumber":349,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-27"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":351,"author":{"gitId":"yucheng11122017"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-27"},{"lineNumber":352,"author":{"gitId":"yucheng11122017"},"content":"* `list` followed by `unpin 2`","lastModifiedDate":"2021-10-27"},{"lineNumber":353,"author":{"gitId":"leezhixuan"},"content":"  * unpins the 2nd contact in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":354,"author":{"gitId":"Jiwei99"},"content":"* `find n/Betsy` followed by `unpin 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":355,"author":{"gitId":"yucheng11122017"},"content":"  * unpins the 1st contact in the results of the `find` command.","lastModifiedDate":"2021-11-06"},{"lineNumber":356,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":357,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":358,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":359,"author":{"gitId":"yucheng11122017"},"content":"### Deleting a contact : `delete`","lastModifiedDate":"2021-11-06"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"yucheng11122017"},"content":"Deletes the specified contact from the address book.","lastModifiedDate":"2021-11-06"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":364,"author":{"gitId":"Jiwei99"},"content":"* `delete INDEX`","lastModifiedDate":"2021-09-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"Jiwei99"},"content":"Notes:","lastModifiedDate":"2021-09-23"},{"lineNumber":367,"author":{"gitId":"yucheng11122017"},"content":"* Deletes the contact at the specified `INDEX`.","lastModifiedDate":"2021-11-06"},{"lineNumber":368,"author":{"gitId":"yucheng11122017"},"content":"* The index refers to the index number shown in the displayed contact list.","lastModifiedDate":"2021-11-06"},{"lineNumber":369,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"Jiwei99"},"content":"**Sample Usage:**","lastModifiedDate":"2021-09-23"},{"lineNumber":372,"author":{"gitId":"Jiwei99"},"content":"* `list` followed by `delete 2`","lastModifiedDate":"2021-09-23"},{"lineNumber":373,"author":{"gitId":"leezhixuan"},"content":"  * deletes the 2nd contact in CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":374,"author":{"gitId":"Jiwei99"},"content":"* `find n/Betsy` followed by `delete 1`","lastModifiedDate":"2021-11-02"},{"lineNumber":375,"author":{"gitId":"yucheng11122017"},"content":"  * deletes the 1st contact in the results of the `find` command.","lastModifiedDate":"2021-11-06"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"yucheng11122017"},"content":"### Deleting multiple contacts : `deletem`","lastModifiedDate":"2021-11-06"},{"lineNumber":378,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":379,"author":{"gitId":"Justinhoejj"},"content":"Deletes the contacts within the range from CONNECTIONS. This makes the removal of multiple contacts easy.","lastModifiedDate":"2021-11-08"},{"lineNumber":380,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":381,"author":{"gitId":"yucheng11122017"},"content":"#### Format:","lastModifiedDate":"2021-10-14"},{"lineNumber":382,"author":{"gitId":"Jiwei99"},"content":"* `deletem START_INDEX - END_INDEX`","lastModifiedDate":"2021-10-28"},{"lineNumber":383,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":384,"author":{"gitId":"yucheng11122017"},"content":"Notes:","lastModifiedDate":"2021-10-14"},{"lineNumber":385,"author":{"gitId":"yucheng11122017"},"content":"* Deletes the contacts within the specified range from `START_INDEX to END_INDEX`.","lastModifiedDate":"2021-11-06"},{"lineNumber":386,"author":{"gitId":"leezhixuan"},"content":"* The indexes refer to index numbers shown in the displayed contact list.","lastModifiedDate":"2021-11-07"},{"lineNumber":387,"author":{"gitId":"yucheng11122017"},"content":"* The indexes **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-10-14"},{"lineNumber":388,"author":{"gitId":"leezhixuan"},"content":"* `END_INDEX` must be greater than or equal to `START_INDEX`.","lastModifiedDate":"2021-11-07"},{"lineNumber":389,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":390,"author":{"gitId":"yucheng11122017"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-14"},{"lineNumber":391,"author":{"gitId":"Jiwei99"},"content":"* `list` followed by `deletem 2 - 3`","lastModifiedDate":"2021-10-28"},{"lineNumber":392,"author":{"gitId":"yucheng11122017"},"content":"  * deletes the 2nd and 3rd contacts in the CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":393,"author":{"gitId":"Jiwei99"},"content":"* `find n/Betsy` followed by `deletem 1 - 5`","lastModifiedDate":"2021-11-02"},{"lineNumber":394,"author":{"gitId":"yucheng11122017"},"content":"  * deletes the 1st to 5th contacts in the results of the `find` command.","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":396,"author":{"gitId":"cookiedan42"},"content":"### Exporting a mailing list of contacts : `mailingList`","lastModifiedDate":"2021-10-29"},{"lineNumber":397,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":398,"author":{"gitId":"Justinhoejj"},"content":"Exports a CSV file of the current view containing specified fields. This helps you to make external notes when organizing birthday parties.","lastModifiedDate":"2021-11-08"},{"lineNumber":399,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":400,"author":{"gitId":"cookiedan42"},"content":"#### Format:","lastModifiedDate":"2021-10-29"},{"lineNumber":401,"author":{"gitId":"cookiedan42"},"content":"* `mailingList [p/] [e/] [a/] [b/] [t/]`","lastModifiedDate":"2021-10-29"},{"lineNumber":402,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":403,"author":{"gitId":"cookiedan42"},"content":"Notes:","lastModifiedDate":"2021-10-29"},{"lineNumber":404,"author":{"gitId":"Jiwei99"},"content":"* Name is always the first column in the CSV file.","lastModifiedDate":"2021-11-02"},{"lineNumber":405,"author":{"gitId":"yucheng11122017"},"content":"* Including any of the arguments will include that field in the exported CSV file. ","lastModifiedDate":"2021-11-06"},{"lineNumber":406,"author":{"gitId":"yucheng11122017"},"content":"* Each argument represents: ","lastModifiedDate":"2021-11-06"},{"lineNumber":407,"author":{"gitId":"yucheng11122017"},"content":"  * `p/` phone number","lastModifiedDate":"2021-11-06"},{"lineNumber":408,"author":{"gitId":"yucheng11122017"},"content":"  * `e/` email","lastModifiedDate":"2021-11-06"},{"lineNumber":409,"author":{"gitId":"yucheng11122017"},"content":"  * `a/` address","lastModifiedDate":"2021-11-06"},{"lineNumber":410,"author":{"gitId":"yucheng11122017"},"content":"  * `b/` birthday","lastModifiedDate":"2021-11-06"},{"lineNumber":411,"author":{"gitId":"yucheng11122017"},"content":"  * `t/` tags","lastModifiedDate":"2021-11-06"},{"lineNumber":412,"author":{"gitId":"Jiwei99"},"content":"* The default exported fields are name, phone, email.","lastModifiedDate":"2021-11-02"},{"lineNumber":413,"author":{"gitId":"Jiwei99"},"content":"* Opens a file selector for you to pick the export location and file name.","lastModifiedDate":"2021-11-02"},{"lineNumber":414,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":415,"author":{"gitId":"cookiedan42"},"content":"**Sample Usage:**","lastModifiedDate":"2021-10-29"},{"lineNumber":416,"author":{"gitId":"cookiedan42"},"content":"* `mailingList`","lastModifiedDate":"2021-10-29"},{"lineNumber":417,"author":{"gitId":"Jiwei99"},"content":"  * Prepares a CSV of the current view containing Name, Phone and Email as the fields.","lastModifiedDate":"2021-11-02"},{"lineNumber":418,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":419,"author":{"gitId":"cookiedan42"},"content":"* `mailingList p/`","lastModifiedDate":"2021-10-29"},{"lineNumber":420,"author":{"gitId":"Jiwei99"},"content":"  * Prepares a CSV of the current view containing Name and Phone as the fields.","lastModifiedDate":"2021-11-02"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":422,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"leezhixuan"},"content":"Clears all entries from CONNECTIONS.","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":427,"author":{"gitId":"Jiwei99"},"content":"* `clear`","lastModifiedDate":"2021-09-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":430,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"Jiwei99"},"content":"#### Format:","lastModifiedDate":"2021-09-23"},{"lineNumber":435,"author":{"gitId":"Jiwei99"},"content":"* `exit`","lastModifiedDate":"2021-09-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"Jiwei99"},"content":"CONNECTIONS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-09-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":443,"author":{"gitId":"yucheng11122017"},"content":"CONNECTIONS data are saved as a JSON file `[JAR file location]/data/CONNECTIONS.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-11-04"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":445,"author":{"gitId":"Jiwei99"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2021-09-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":447,"author":{"gitId":"Jiwei99"},"content":":exclamation: **Caution:**","lastModifiedDate":"2021-09-23"},{"lineNumber":448,"author":{"gitId":"yucheng11122017"},"content":"If your changes to the data file makes its format invalid, CONNECTIONS will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-11-04"},{"lineNumber":449,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":451,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"yucheng11122017"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CONNECTIONS home folder.","lastModifiedDate":"2021-11-07"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-before: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":461,"author":{"gitId":"Jiwei99"},"content":"## Command Summary","lastModifiedDate":"2021-09-23"},{"lineNumber":462,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":463,"author":{"gitId":"Jiwei99"},"content":"Action | Summary | Format, Examples","lastModifiedDate":"2021-09-23"},{"lineNumber":464,"author":{"gitId":"Jiwei99"},"content":"--------|--------|----------------","lastModifiedDate":"2021-09-23"},{"lineNumber":465,"author":{"gitId":"yucheng11122017"},"content":"**Help** | Displays help information | `help [COMMAND]`\u003cbr\u003e e.g., `help`, `help add`, `help more`","lastModifiedDate":"2021-11-06"},{"lineNumber":466,"author":{"gitId":"yucheng11122017"},"content":"**Add** | Adds a contact | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/23062001 t/friend t/colleague`","lastModifiedDate":"2021-11-06"},{"lineNumber":467,"author":{"gitId":"yucheng11122017"},"content":"**List** | Lists all contacts | `list`","lastModifiedDate":"2021-11-06"},{"lineNumber":468,"author":{"gitId":"yucheng11122017"},"content":"**Edit** | Edits a contact | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com b/30012000` \u003cbr\u003e At least one argument must be present","lastModifiedDate":"2021-11-07"},{"lineNumber":469,"author":{"gitId":"yucheng11122017"},"content":"**Tag** | Tags a contact | `tag INDEX t/TAG [t/MORE_TAGS]…​`\u003cbr\u003e e.g., `tag 2 t/friend t/NUS`","lastModifiedDate":"2021-11-06"},{"lineNumber":470,"author":{"gitId":"yucheng11122017"},"content":"**Untag** | Untags a contact | `untag INDEX t/TAG [t/MORE_TAGS]…​`\u003cbr\u003e e.g., `untag 2 t/colleague`","lastModifiedDate":"2021-11-06"},{"lineNumber":471,"author":{"gitId":"yucheng11122017"},"content":"**Find** | Locates contacts by name and tags (Results fulfill all search terms)| `find [c/] [n/NAME]... [t/TAG]...` \u003cbr\u003e e.g., `find n/James t/friends` \u003cbr\u003e At least one argument must be present","lastModifiedDate":"2021-11-06"},{"lineNumber":472,"author":{"gitId":"yucheng11122017"},"content":"**FindAny** | Locates contacts by name and tags (Results fulfill at least one search term)| `findAny [c/] [n/NAME]... [t/TAG]...`\u003cbr\u003e e.g., `findAny n/James t/NUS` \u003cbr\u003e At least one argument must be present","lastModifiedDate":"2021-11-06"},{"lineNumber":473,"author":{"gitId":"yucheng11122017"},"content":"**Pin** | Pins a contact | `pin INDEX`\u003cbr\u003e e.g., `pin 1`","lastModifiedDate":"2021-11-06"},{"lineNumber":474,"author":{"gitId":"yucheng11122017"},"content":"**Unpin** | Unpins a contact | `unpin INDEX`\u003cbr\u003e e.g., `unpin 1`","lastModifiedDate":"2021-11-06"},{"lineNumber":475,"author":{"gitId":"yucheng11122017"},"content":"**Delete** | Deletes a contact | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2021-11-06"},{"lineNumber":476,"author":{"gitId":"yucheng11122017"},"content":"**Deletem** | Deletes multiple contacts within the range | `deletem START_INDEX - END_INDEX`\u003cbr\u003e e.g., `deletem 3 - 5`","lastModifiedDate":"2021-11-06"},{"lineNumber":477,"author":{"gitId":"yucheng11122017"},"content":"**MailingList**| Exports a mailing list | `mailingList [p/] [e/] [a/] [b/] [t/]` \u003cbr\u003e e.g., `mailingList [p/] [e/] [b/]`","lastModifiedDate":"2021-11-06"},{"lineNumber":478,"author":{"gitId":"yucheng11122017"},"content":"**Clear** | Clears all entries | `clear`","lastModifiedDate":"2021-11-06"},{"lineNumber":479,"author":{"gitId":"yucheng11122017"},"content":"**Exit** | Exits the program | `exit`","lastModifiedDate":"2021-11-06"},{"lineNumber":480,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":481,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":482,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":483,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":484,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"Jiwei99":108,"cookiedan42":59,"Justinhoejj":44,"yucheng11122017":109,"leezhixuan":49,"-":115}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"cookiedan42"},"content":"    content: \"CONNECTIONS\";","lastModifiedDate":"2021-11-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"cookiedan42":1,"-":294}},{"path":"docs/diagrams/BirthdayReminderSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"!include style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"participant \":AddCommand\" as AddCommand LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"participant \"r:CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"participant \":ModelManager\" as ModelManager MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"participant \"birthdayReminders:ObservableList\u003cPerson\u003e\" as BirthdayReminders MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"[-\u003e AddCommand : execute()","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"activate AddCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"AddCommand -\u003e ModelManager : addPerson(p)","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"activate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e AddressBook : addPerson(p)","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"activate AddressBook","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"AddressBook --\u003e ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"deactivate AddressBook","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e ModelManager : updateFilteredPersonList(unused -\u003e true)","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"activate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"ModelManager --\u003e ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"deactivate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e ModelManager : addToBirthdayReminderList(p)","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"activate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e BirthdayReminders : clear()","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"activate BirthdayReminders","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"BirthdayReminders --\u003e ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"deactivate BirthdayReminders","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e ModelManager : generateBirthdayReminderList()","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"activate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"ModelManager --\u003e ModelManager : updatedList","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"deactivate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"ModelManager -\u003e BirthdayReminders : addAll(updatedList)","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"activate BirthdayReminders","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"BirthdayReminders --\u003e ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"deactivate BirthdayReminders","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"ModelManager --\u003e ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"deactivate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"ModelManager --\u003e AddCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"deactivate ModelManager","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"create CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"AddCommand -\u003e CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"activate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"CommandResult --\u003e AddCommand : r","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"[\u003c-- AddCommand : r","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"deactivate AddCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"[\u003c-[hidden]- AddCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"destroy AddCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Justinhoejj":72}},{"path":"docs/diagrams/CommandHistoryActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"start","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":":UI receives keystroke;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"switch()","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"case ([keystroke `UP`])","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"  :Attempts to retrieves previous command;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"  if () then ([has command history])","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"    if () then ([has previous command])","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"      :Displays previous command;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"    else ([no previous command])","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"      :Displays last command in history;","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    endif","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"  else ([no command history])","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"    :Displays nothing;","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"  endif","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"case ([keystroke `DOWN`])","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"  :Attempts to retrieves next command;","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"  if () then ([has command history])","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"    if () then ([has next command])","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"      :Displays next command;","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"    else ([no next command])","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"      :Displays nothing;","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    endif","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"  else ([no command history])","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    :Displays nothing;","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"  endif","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"case ([other keystrokes])","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"  :Retrieves Command Assistant;","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"endswitch","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"stop","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Jiwei99":36}},{"path":"docs/diagrams/DeleteActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"Justin, [8/11/21 20:36]","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"start","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":":User enters command: delete \u003cindex\u003e;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"switch()","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"case ([\u003cindex\u003e is positive])","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"  :Compares if \u003cindex\u003e is greater than number of contacts displayed;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"  if () then ([\u003cindex\u003e smaller than or equals to number of contacts displayed])","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"    :Delete contact at \u003cindex\u003e;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"  else ([\u003cindex\u003e greater than the number of contacts displayed]])","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"    :Displays error message: \"The contact index provided is out of range!\";","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"  endif","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"case ([\u003cindex\u003e is non-positive])","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"  :Displays error message: \"Invalid command format\";","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"endswitch","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"stop","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"leezhixuan":22}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"DeleteCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e Model : deletePerson(1)","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"DeleteCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"destroy DeleteCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Justinhoejj":3,"-":69}},{"path":"docs/diagrams/FindAnySequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"!include style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"participant \":FindAnyCommandParser\" as FindAnyCommandParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"participant \"fAP:FindAnyPredicate\" as FindAnyPredicate LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"participant \"fA:FindAnyCommand\" as FindAnyCommand LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"[-\u003e LogicManager : execute(\"findAny n/Roy\")","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"activate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"findAny n/Roy\")","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"activate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"create FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser -\u003e FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"activate FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"deactivate FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser -\u003e FindAnyCommandParser : parse(\"n/Roy\")","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"activate FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"create FindAnyPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommandParser -\u003e FindAnyPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"activate FindAnyPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"FindAnyPredicate --\u003e FindAnyCommandParser : fAP","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"deactivate FindAnyPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"create FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommandParser -\u003e FindAnyCommand : fAP","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"activate FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommand --\u003e FindAnyCommandParser : fA","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"deactivate FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommandParser --\u003e AddressBookParser : fA","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"deactivate FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"destroy FindAnyCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser --\u003e LogicManager : fA","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"LogicManager -\u003e FindAnyCommand : execute()","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"activate FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommand -\u003e Model : updateFilteredPersonList(fAP)","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"activate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"Model --\u003e FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"deactivate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"create CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommand -\u003e CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"activate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"CommandResult --\u003e FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommand --\u003e LogicManager : result","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"deactivate FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"FindAnyCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"destroy FindAnyPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"destroy FindAnyCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"leezhixuan":81}},{"path":"docs/diagrams/FindSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"!include style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"participant \"fP:FindPredicate\" as FindPredicate LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"participant \"f:FindCommand\" as FindCommand LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"[-\u003e LogicManager : execute(\"find n/Alex\")","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"activate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"find n/Alex\")","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"activate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"create FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser -\u003e FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"activate FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"FindCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser -\u003e FindCommandParser : parse(\"n/Alex\")","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"activate FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"create FindPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"FindCommandParser -\u003e FindPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"activate FindPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"FindPredicate --\u003e FindCommandParser : fP","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"deactivate FindPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"create FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"FindCommandParser -\u003e FindCommand : fP","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"activate FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"FindCommand --\u003e FindCommandParser : f","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"deactivate FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"FindCommandParser --\u003e AddressBookParser : f","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"FindCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"destroy FindCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"AddressBookParser --\u003e LogicManager : f","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"LogicManager -\u003e FindCommand : execute()","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"activate FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"FindCommand -\u003e Model : updateFilteredPersonList(fP)","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"activate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"Model --\u003e FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"deactivate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"create CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"FindCommand -\u003e CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"activate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"CommandResult --\u003e FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"FindCommand --\u003e LogicManager : result","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"deactivate FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"FindCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"destroy FindPredicate","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"destroy FindCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"leezhixuan":81}},{"path":"docs/diagrams/HelpCommandDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"!include style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"box UI UI_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"participant \"UI\" as UI UI_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"participant \":HelpCommandParser\" as HelpCommandParser LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"participant \"h:HelpCommand\" as HelpCommand LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"UI -\u003e LogicManager : execute(\"help add\")","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"activate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"help add\")","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"activate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"create HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"AddressBookParser -\u003e HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"activate HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"HelpCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"deactivate HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"AddressBookParser -\u003e HelpCommandParser : parse(\"add\")","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"activate HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"create HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"HelpCommandParser -\u003e HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"activate HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"HelpCommand --\u003e HelpCommandParser : h","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"deactivate HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"HelpCommandParser --\u003e AddressBookParser  : h","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"deactivate HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"HelpCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"destroy HelpCommandParser","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"AddressBookParser --\u003e LogicManager  : h","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"LogicManager -\u003e HelpCommand : execute()","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"activate HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"create CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"HelpCommand -\u003e CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"activate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"CommandResult -\u003e HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"HelpCommand --\u003e LogicManager : result","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"deactivate HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"UI \u003c--LogicManager: result","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"HelpCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"destroy HelpCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Jiwei99":69}},{"path":"docs/diagrams/MailingListSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"@startuml","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"!include style.puml","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"box UI UI_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"skinparam minClassWidth 120","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"participant \"UI\" as UI UI_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"end box","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"participant \":MailingListCommandParser\" as MailingListCommandParser LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"participant \"d:MailingListCommnad\" as MailingListCommand LOGIC_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"end box","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"end box","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"UI -\u003e LogicManager : execute( \"mailingList\")","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"activate LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"mailingList\")","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"activate AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"create MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"AddressBookParser -\u003e MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"activate MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"MailingListCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"deactivate MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"AddressBookParser -\u003e MailingListCommandParser : parse(\"mailingList\")","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"activate MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"create MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"MailingListCommandParser -\u003e MailingListCommand : MailingListCommand(DEFAULT_PREFIXES)","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"activate MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"MailingListCommand --\u003e Model : SetPrefixes","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"activate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"Model --\u003e MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"deactivate Model","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"MailingListCommand --\u003e MailingListCommandParser : d","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"deactivate MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"MailingListCommandParser --\u003e AddressBookParser  : d","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"deactivate MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"MailingListCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"destroy MailingListCommandParser","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"AddressBookParser --\u003e LogicManager  : d","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"LogicManager -\u003e MailingListCommand : execute()","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"activate MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"MailingListCommand --\u003e LogicManager : CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"deactivate MailingListCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"UI \u003c--LogicManager: CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"MailingListCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"destroy MailingListCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"@enduml","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"cookiedan42":67,"Justinhoejj":3}},{"path":"docs/diagrams/MainWindowMailingListActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"!include style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"(*) --\u003e \"UI receives commandResult\"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"if \"isChooseFile()\"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"    --\u003e [True] \"User chooses download name and location\"","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"endif","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"if \"user string ends with .csv\"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"    --\u003e [True] \"download path found\"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"else","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"    --\u003e [False] \"append .csv to filename\"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"endif","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"\"append .csv to filename\" -\u003e \"download path found\"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"\"download path found\" --\u003e \"get list of Person Objects to export\"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"\"get list of Person Objects to export\" --\u003e \"get Prefixes of fields to export\"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"\"get Prefixes of fields to export\" --\u003e \"Write CSV using CsvUtil\"","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"\"Write CSV using CsvUtil\" --\u003e (*)","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"cookiedan42":20}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"Class Birthday","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"Class Pin","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"Person *--\u003e Birthday","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"Person *--\u003e Pin","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"yucheng11122017":4,"-":54}},{"path":"docs/diagrams/PinActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"start","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":":User enters command: pin \u003cindex\u003e;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"switch()","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"case ([Contact at specified index exists])","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"  :CONNECTIONS retrieves contact at specified index;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"  -CONNECTIONS checks if contact is already pinned","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"  if () then ([Contact not yet pinned])","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"    :CONNECTIONS pin contact to top of contact list;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    -CONNECTIONS displays success message with contact details","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"  else ([Contact already pinned])","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    :CONNECTIONS displays message: \"Contact is already pinned!\";","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"  endif","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"case ([No contact at specified index])","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"  :CONNECTIONS displays error message: \"The contact index provided is out of range.\";","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"endswitch","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"stop","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Justinhoejj":23}},{"path":"docs/diagrams/PinSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"!include style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"box UI UI_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"participant \"UI\" as UI UI_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"participant \":PinCommandParser\" as PinCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"participant \"d:PinCommand\" as PinCommand LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"UI -\u003e LogicManager : execute(\"pin 1\")","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"activate LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"pin 1\")","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"create PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"AddressBookParser -\u003e PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"activate PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"PinCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"deactivate PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"AddressBookParser -\u003e PinCommandParser : parse(\"1\")","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"activate PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"create PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"PinCommandParser -\u003e PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"activate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"PinCommand --\u003e PinCommandParser : d","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"deactivate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"PinCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"deactivate PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"PinCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"destroy PinCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"LogicManager -\u003e PinCommand : execute()","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"activate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"PinCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"activate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"Model --\u003e PinCommand : filteredPersonList","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"deactivate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"PinCommand -\u003e PinCommand : createPinnedPerson(personToPin)","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"activate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"PinCommand --\u003e PinCommand : pinnedPerson","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"deactivate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"create CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"PinCommand -\u003e CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"activate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"CommandResult --\u003e PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"PinCommand -\u003e Model : setPerson(originalPerson, pinnedPerson)","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"activate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"Model --\u003e PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"deactivate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"PinCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"deactivate PinCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"PinCommand -[hidden]-\u003e LogicManager","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"Justinhoejj"},"content":"destroy PinCommand","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"UI \u003c--LogicManager: result","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"Justinhoejj":3,"yucheng11122017":82}},{"path":"docs/diagrams/PinUniquePersonListState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"!include style.puml","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"show field","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"hide empty field","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"title UniquePersonList","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"package People {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person1:Person__\" as person1","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person2:Person__\" as person2","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person3:Person__\" as person3","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin1:Pin__\" as pin1 {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d true","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin2:Pin__\" as pin2 {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin3:Pin__\" as pin3 {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"person1 --\u003epin1","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"person2 --\u003epin2","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"person3 --\u003epin3","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"person1 -[hidden]right-\u003e person2","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"person2 -[hidden]right-\u003e person3","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"hide person3","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"hide pin3","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"@end","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"yucheng11122017":38}},{"path":"docs/diagrams/PinUniquePersonListState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"!include style.puml","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"show field","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"hide empty field","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"title UniquePersonList","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"package People {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person1:Person__\" as person1","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person2:Person__\" as person2","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person3:Person__\" as person3","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin1:Pin__\" as pin1 {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d true","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin2:Pin__\" as pin2 {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin3:Pin__\" as pin3 {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"person1 --\u003epin1","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"person2 --\u003epin2","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"person3 --\u003epin3","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"person1 -[hidden]right-\u003e person2","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"person2 -[hidden]right-\u003e person3","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"@end","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"yucheng11122017":35}},{"path":"docs/diagrams/PinUniquePersonListState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"!include style.puml","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"show field","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"hide empty field","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"title UniquePersonList","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"package People {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person1:Person__\" as person1","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person2:Person__\" as person2","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person3:Person__\" as person3","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin1:Pin__\" as pin1 {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d true","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin2:Pin__\" as pin2 {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin3:Pin__\" as pin3 {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d true","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"person1 --\u003epin1","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"person2 --\u003epin2","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"person3 --\u003epin3","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"person1 -[hidden]right-\u003e person3","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"person3 -[hidden]right-\u003e person2","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"@end","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"yucheng11122017":35}},{"path":"docs/diagrams/PinUniquePersonListState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"@startuml","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"!include style.puml","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"show field","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"hide empty field","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"title UniquePersonList","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"package People {","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person1:Person__\" as person1","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person2:Person__\" as person2","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"    object \"__person3:Person__\" as person3","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin1:Pin__\" as pin1 {","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d true","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin2:Pin__\" as pin2 {","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"object \"__pin3:Pin__\" as pin3 {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    boolean isPinned \u003d false","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"person1 --\u003epin1","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"person2 --\u003epin2","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"person3 --\u003epin3","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"person1 -[hidden]right-\u003e person3","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"person3 -[hidden]right-\u003e person2","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"@end","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"yucheng11122017":35}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"Class PinnedPersonCard","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"Class BirthdayReminderListPanel","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"Class BirthdayReminderCard","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"MainWindow *-down-\u003e \"1\" BirthdayReminderListPanel","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"BirthdayReminderListPanel -down-\u003e \"*\" BirthdayReminderCard","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"PersonListPanel -down-\u003e \"*\" PinnedPersonCard","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"PinnedPersonCard --|\u003e UiPart","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"PinnedPersonCard ..\u003e Model","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"BirthdayReminderCard ..\u003e Model","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"yucheng11122017":9,"-":60}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"title: CONNECTIONS","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103-F09-4/tp/branch/master/graph/badge.svg?token\u003dGXI6LDV6WE)](https://codecov.io/gh/AY2122S1-CS2103-F09-4/tp)","lastModifiedDate":"2021-09-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"**CONNECTIONS is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"* If you are interested in using CONNECTIONS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"* If you are interested about developing CONNECTIONS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jiwei99":4,"-":15}},{"path":"docs/team/cookiedan42.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"title: Daniel Tan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"CONNECTIONS is a desktop app adapted from [AddressBook - Level 3](https://se-education.org/addressbook-level3/) for managing contacts and keeping track of birthdays.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI) that is created with JavaFX.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"It is written in Java and has about 10 KLOC.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dcookiedan42\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"* **New Feature** Added the ability to add tags to a contact without replacement","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"  * What it does: allows the user to add a tag to a contact without typing in all the existing tags","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"  * Justification: This feature improves the product significantly because a user will often want to add a new tag to an existing contact and should not need to input all the existing tags that contact previously had to do this action.","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"* **New Feature** Added the ability for users to export their current view as a mailing list","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"  * What it does: allows the user to construct a mailing list to contact multiple people based on their filtered address book","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"  * Justification: inviting people to events would require contacting multiple people with the same message, instead of sending individual messages, the user can just export all the contacts at once and use that to contact them","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"  * Credits: Uses [OpenCSV](http://opencsv.sourceforge.net/) to create the CSV files","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"  * Credits: Inspired by LUMINUS allowing Instructors to export CSV file of students details","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"  ","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"* **Testing**","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"  * Wrote test cases for handling `tag` command","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"  * Wrote test cases for handling `mailingList` command","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"  * Wrote test cases for handling `Tag` command","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"  * User Guide:","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"    * Did cosmetic and grammatical tweaks to existing documentation of features: [\\#192](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/192)","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    * Added user stories for versions 1.1 and 1.2 (Pull requests [\\#13](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/13), [\\#35](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/35))","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    * Product scope for version 1.2 (Pull request [#39](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/39))","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"    * Added implementation details of the `mailingList` feature.","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"  * Typesetting:","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    * Typesetted User guide, developer guide and profile pages for PDF conversion [\\#213](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/213)","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"* **Tools**:","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"  * Integrated a third party library (OpenCSV) to the project ([\\#91](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/91), ","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"  * Improved `TestUtils` by adding the ability to create different AddressBook states for testing ([\\#52](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/52))","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"  ","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"* **Community**:","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"  * Reported bugs and suggestions for other teams in the class ([1](https://github.com/cookiedan42/ped/issues/6), [2](https://github.com/cookiedan42/ped/issues/7), [3](https://github.com/cookiedan42/ped/issues/9))","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#42](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/42), [\\#53](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/53)","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"cookiedan42":48,"Justinhoejj":3}},{"path":"docs/team/jiwei99.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"layout: page","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"title: Lim Ji Wei\u0027s Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"CONNECTIONS is a desktop app adapted from [AddressBook - Level 3](https://se-education.org/addressbook-level3/) for managing contacts and keeping track of birthdays.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI) that is created with JavaFX.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"It is written in Java and has about 10 KLOC.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"* **New Feature**: Added the ability to untag tags from contacts.","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"  * What it does: allows the user to remove one or multiple tags from a contact.","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"  * Justification: This feature improves the product because the user can now remove individual tags from a list of tags that the contact has, instead of having to rebuild the whole list of remaining tags.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"  * Highlights: This enhancement improves usability of CONNECTIONS. Untag also informs the user if a tag to be removed from a contact is not found in the contact.","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"* **New Feature**: Added the ability to retrieve previous commands using `UP` and `DOWN` keys.","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"  * What it does: allows the user to retrieve and use previously entered commands using the `UP` and `DOWN` keys. Allows users to retrieve and use frequently used commands easily.","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"  * Justification: This feature improves the product because the user can trace back previously used commands to check what changes have been made, and also reuse previous commands without having to retype the whole command again.","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"  * Highlights: Changes in code has to be made for CONNECTIONS to read and process keystrokes. Future extensions include adding Command History to storage to allow users to retrieve commands used in previous program runs.","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"* **New Feature**: Added command assistant to assist users in forming commands.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"  * What it does: allows the user to look at the command parameters and examples while the user is keying in the command.","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"  * Justification: This feature improves the product because users can now double-check to make sure that the command keyed is in the right format. It reduces the need for users to re-enter commands due to errors in the command.","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"  * Highlights: This enhancement provides a rudimentary version of input validation. As this function works using keystroke validation, steps have to be taken to exclude certain keystrokes, e.g. `ENTER`, so that it does not affect the current functionalities. A separate type of command, which is initiated by the `System` instead of `User` input, has to be created. Future extensions include showing users exactly what parameters are missing or entered wrongly.","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dJiwei99\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"* **Project management**:","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"  * Managed release `v1.3` on GitHub.","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"  * Created, managed and closed issues and milestones on GitHub to track todos and project progress.","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"  * Managed issues and milestones for `v1.3` and `v1.3b`.","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"  ","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"* **Enhancements to existing feature**: Improved `Help` command usability.","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"  * Added functionality to allow `Help` to take in additional parameters so that users can easily obtain support for usage of commands. For example, users can now use `help` to obtain a list of available commands, and `help COMMAND` to get help for a specific command.","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"  * Refactored help messages for all commands to improve quality of help messages.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"* **Enhancements to existing feature**: Added unit test for functions.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"  * Added unit tests to for new and existing features to increase test coverage.","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"  * Features include `Help`, `Untag` and `Command History`.","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":" ","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":" ","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"* **Documentation**:","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"  * User Guide:","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"    * Updated and refactored User Guide to align with features of CONNECTIONS ([\\#20](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/20))","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    * Added documentation for BIRTHDAY parameter ([\\#20](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/20))","lastModifiedDate":"2021-11-05"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"    * Added documentation for the `Tag`, `Untag` and `Help` commands ([\\#20](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/20), [\\#112](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/112))","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"    * Added documentation for `Command History` and `Command Assistant` features ([\\#112](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/112))","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"  * Developer Guide:","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"    * Added implementation for features `Tags`and `Help` ([\\#94](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/94))","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"    * Added use case for `Help` feature ([\\#94](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/94))","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"  * Index:","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"    * Refactored Index file for CONNECTIONS ([\\#71](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/71))","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"  ","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"    ","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"* **Community**:","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#177](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/177), [\\#183](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/183)","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"  * Reported bugs and suggestions for other teams in the class: [Bug Report](https://github.com/Jiwei99/ped)","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"Jiwei99":63,"Justinhoejj":3}},{"path":"docs/team/justinhoejj.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"---","lastModifiedDate":"2021-09-24"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"layout: page","lastModifiedDate":"2021-09-24"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"title: Justin Hoe\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-24"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"---","lastModifiedDate":"2021-09-24"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"CONNECTIONS is a desktop app adapted from [AddressBook - Level 3](https://se-education.org/addressbook-level3/) for managing contacts and keeping track of birthdays.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI) that is created with JavaFX.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"It is written in Java and has about 10 KLOC. ","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-24"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"* **New Feature**: Added a Birthday Reminder List","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    * The list displays contacts sorted by birthdays in ascending order, starting with the","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"      nearest upcoming birthday all the way through the latest birthday and then looping back","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"      to the earliest birthday.","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"    * The list is responsive to changes in contact details be it using add, delete or edit command. The list","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"      reorders contacts where appropriate to ensure it stays sorted as described above.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"    * Birthday at present day and upcoming birthdays within 7 days are color coded and provided with personalised message.","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    * This feature would allow our target user, a person who loves birthday celebrations, always wish contacts on","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    their birthday.","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    * Account for birthdays that fall on leap days by ensuring they are brought forward to 28th Feb on non leap years.","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"* **New Feature**: Added Delete Multiple Command","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"    * Delete Multiple Command allows the user to delete multiple contacts with a single command by providing","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"      a start and end index.","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"    * This feature will allow our target user to delete contacts of the same group. Groups are usually identifiable","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"      with find by tags, upon filtering contacts of the same group the user can selectively delete those contacts.","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dJustinhoejj\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"* **Project management**:","lastModifiedDate":"2021-09-24"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"    * Create and configure team repo with git hub actions, code cov and branch protection rules.","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"    * Create labels and milestones for tracking issues and managing deadlines.","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-24"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"    * Implement additional test cases for Birthday attribute [\\#51](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/51).","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"    * Implement an additional panel in UI to contain the birthday reminder list [\\#81](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/81).","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"    * Increase size of result display box minimum width of application [\\#175](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/175).","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-24"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"    * User Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"        * Specify Birthday field is optional [\\#116](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/116).","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"  * Developer Guide:","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"    * Describe implementation details of birthday reminder list [\\#93](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/93).","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"    * Add instructions for manual testing of all commands [\\#204](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/204).","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"    * Fix UML sequence diagrams [\\#206](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/206).","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-09-24"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"* **Community**:","lastModifiedDate":"2021-09-24"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#74](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/74), [\\#86](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/86), [\\#87](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/87).","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"    * Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2122S1/forum/issues/91), [2](https://github.com/nus-cs2103-AY2122S1/forum/issues/221), [3](https://github.com/nus-cs2103-AY2122S1/forum/issues/328)).","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    * Reported [bugs and suggestions](https://github.com/Justinhoejj/ped/issues) for other teams in the class.","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"cookiedan42":1,"Justinhoejj":53}},{"path":"docs/team/leezhixuan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"title: Lee Zhi Xuan\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-09-24"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"CONNECTIONS is a desktop app adapted from [AddressBook - Level 3](https://se-education.org/addressbook-level3/) for managing contacts and keeping track of birthdays.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI) that is created with JavaFX.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"It is written in Java and has about 10 KLOC.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"* **New Feature**: FindAny","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"  * What it does:","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    * FindAny is a command that allows users to apply an \u0027OR\u0027 filter with the search terms they have provided.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"  * Justification:","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"    * \"OR\" search retrieves records that include either terms searched for. Using OR broadens a search and thus returns more results.","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"      This way, users will be able to filter contacts with greater flexibility.","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"      \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"* **New Attribute**: Birthday","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"  * What it does:","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"    * The birthday attribute records the date of birth of a contact.","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"  * Justification:","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"    * Our target audience is people who love celebrating birthdays. It is natural for them to want to keep a","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"      record of the birthdays of their contacts. This way, they will never miss a birthday.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"      \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dleezhixuan\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"  * Set up Github Pages.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"  * Created and assigned issues for milestone `v1.3`.","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"  * Redefine equality amongst contacts.","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    * Previously, equality between two contacts hinged on the fact that they had the same name. Since people","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"      can have friends with the same name but unique phone numbers, I changed CONNECTIONS to check for phone","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"      numbers instead to raise possible duplicate contacts.","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"  * Revamp Find","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"    * Find (\u0027AND\u0027-search) and FindAny (\u0027OR\u0027-search) can be applied names and/or tags.","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"    * Case Sensitivity to search (Find/FindAny).","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"      * Users can now opt for case-sensitive searches on Tags using the `c/` flag.","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"  * Wrote unit and integration tests for existing features.","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"    * Increase coverage from 72.15% to 72.59% (+0.43%). (Pull request [\\#49](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/49))","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    * Increase coverage from 75.01% to 72.14% (+0.14%). (Pull request [\\#69](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/69))","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"    * Increase coverage from 73.69% to 74.31% (+0.62%). (Pull request [\\#86](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/86))","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"    * Increase coverage from 74.31% to 74.52% (+0.20%). (Pull request [\\#101](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/101))","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"    * Increase coverage from 70.83% to 71.15% (+0.32%). (Pull request [\\#201](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/201))","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"      \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"  * User Guide:","lastModifiedDate":"2021-11-05"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    * Documented `Upcoming Birthdays`, `find` as well as `findAny`. (Pull request [\\#95](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/95), [\\#173](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/173))","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"    * Documented `Use Cases`, `Non-functional requirements` and `Glossary`. (Pull request [\\#19](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/19))","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"    * Documented `find` and `findAny`. (Pull request [\\#101](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/101))","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"    * Added sequence diagrams for `find` and `findAny`. (Pull request [\\#223](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/223))","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"    * Added activity diagram for `delete`. (Pull request [\\#223](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/223))","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"  * Polished User \u0026 Developer Guide. (Pull request [\\#205](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/205))","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"  * Reported 37 bugs and suggestions for other teams in class.","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"    * You can find the entire log [here](https://github.com/leezhixuan/ped)","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"  * Contributed to forum [discussion].(https://github.com/nus-cs2103-AY2122S1/forum/issues/135):","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"  * PRs reviewed with non-trivial comments: (Some examples: [1](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/42),","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"    [2](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/94), [3](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/119))","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"cookiedan42":2,"Justinhoejj":3,"leezhixuan":63}},{"path":"docs/team/yucheng11122017.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"layout: page","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"title: Chan Yu Cheng\u0027s Project Portfolio Page","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"---","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"### Project: CONNECTIONS","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"CONNECTIONS is a desktop app adapted from [AddressBook - Level 3](https://se-education.org/addressbook-level3/) for managing contacts and keeping track of birthdays.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI) that is created with JavaFX.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"It is written in Java and has about 10 KLOC.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"* **New Feature**: Added the ability to pin and unpin contacts","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"  * What it does: Allows users to pin and unpin contacts. Pinning contacts will put them at the top of list of contacts, while unpinning contacts will move them behind the pinned contacts.","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"  * Justification: This feature improves the user experience significantly because a user can view frequently contacted contacts quickly, reducing the time needed to search for them.","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"  * Highlights: Dealing with GUI was difficult as pinned contacts have an additional pin but was essentially the same as other contacts. Major changes to the ordering in which contacts were stored were needed as well to allow for pinned contacts to be displayed on top.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dyucheng11122017\u0026tabRepo\u003dAY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"* **Project Management**:","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"  * Created and assigned issues for milestone `v1.2b` on GitHub","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"  * Released `v1.2.1` on Github","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"  * Wrote integration tests for existing features to increase coverge from 75.14% to 75.36% (Pull request [\\#74](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/74))","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"  * Updated help command to include help for `pin`, `unpin`, `find` and `findAny` (Pull request [\\#105](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/105))","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"* **Documentation**:","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    * User guide","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        * Added documentation for features `pin`, `unpin` and updated commmand summary (Pull request [\\#105](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/105))","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    * Developer guide","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"        * Updated Model Component and UI Component (Pull request [\\#174](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/174))","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        * Added a table of contents (Pull request [\\#183](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/183))","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        * Updated user stories based on current implementation, remove repeated ones and repharsed them to be better understood (Pull request [\\#183](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/183))","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        * Added implementation for features `pin`, `unpin` (Pull requests [\\#109](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/109), [\\#90](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/90))","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"        * Improved implementation for features `find`, `findAny`, `birthday reminder`, `mailing list` (Pull request [\\#174](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/174))","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        * Added use cases for generation of mailing list, deleting multiple contacts, viewing command prompts and viewing previous commands (Pull request [\\#183](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/183))","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"* **Community**:","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#19](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/19), [\\#53](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/53), [\\#49](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/49), [\\#67](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/67), [\\#68](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/68), [\\#79](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/79), [\\#81](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/81), [\\#86](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/86), [\\#95](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/95), [\\#96](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/96), [\\#102](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/102), [\\#173](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/173), [\\#175](https://github.com/AY2122S1-CS2103-F09-4/tp/pull/175)","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"  * Contributed to forum discussions: (Examples: [1](https://github.com/nus-cs2103-AY2122S1/forum/issues/185), [2](https://github.com/nus-cs2103-AY2122S1/forum/issues/81#issuecomment-905234382), [3](https://github.com/nus-cs2103-AY2122S1/forum/issues/133#issuecomment-908359221))","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"  * Reported bugs and suggestions for other teams in the class (Examples: [1](https://github.com/yucheng11122017/ped/issues/19), [2](https://github.com/yucheng11122017/ped/issues/18), [3](https://github.com/yucheng11122017/ped/issues/12))","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Justinhoejj":3,"yucheng11122017":40}},{"path":"src/main/java/seedu/address/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2019-02-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Locale;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"     * Runs application in english","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        Locale.setDefault(Locale.ENGLISH);","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"Justinhoejj":6,"-":25}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CONNECTIONS ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"cookiedan42"},"content":"        logger.info(\"Starting CONNECTIONS \" + MainApp.VERSION);","lastModifiedDate":"2021-11-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"cookiedan42"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CONNECTIONS ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-11-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cookiedan42":3,"yucheng11122017":1,"-":179}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    private static final String LOG_FILE \u003d \"CONNECTIONS.log\";","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yucheng11122017":1,"-":111}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The contact index provided is out of range.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d contact(s) listed!\";","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":1,"leezhixuan":1,"-":11}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index must be a positive integer.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Justinhoejj":1,"-":54}},{"path":"src/main/java/seedu/address/commons/util/CsvUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Map.entry;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import java.io.File;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"import java.util.Map;","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import com.opencsv.CSVWriter;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"public class CsvUtil {","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"     * Sequence that exported fields should take","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"    static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d List.of(","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_BIRTHDAY, PREFIX_TAG);","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"     * Mapping between the prefix and the function that returns that field","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    static final Map\u003cPrefix, Function\u003cPerson, String\u003e\u003e PREFIX_TO_DATA_FUNC \u003d Map.ofEntries(","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_NAME, (p)-\u003ep.getName().toString()),","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_PHONE, (p)-\u003ep.getPhone().toString()),","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_EMAIL, (p)-\u003ep.getEmail().toString()),","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_ADDRESS, (p)-\u003ep.getAddress().toString()),","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_BIRTHDAY, (p)-\u003ep.getBirthday().map(x-\u003ex.toString()).orElse(\"\")),","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_TAG, (p)-\u003e p.getTags().isEmpty()","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"                    ? \"\"","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"                    : p.getTags().stream().map(x-\u003ex.toString()).collect(Collectors.joining(\",\"))","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"            )","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"    );","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"     * Mapping between the prefix and the name of that field","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    static final Map\u003cPrefix, String\u003e PREFIX_TO_NAME \u003d Map.ofEntries(","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_NAME, \"Name\"),","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_PHONE, \"Phone\"),","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_EMAIL, \"Email\"),","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_ADDRESS, \"Address\"),","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_BIRTHDAY, \"Birthday\"),","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"            entry(PREFIX_TAG, \"Tags\")","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    );","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"     * Writes a List of Person objects as a csv file.","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"     * @param personList List of Person objects to write","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"     * @param path file path for csv","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"     * @param exportPrefixes Prefixes for the fields to be included in the csv","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"     * @throws IOException","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"    public static void modelToCsv(List\u003cPerson\u003e personList, Path path,","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"                                  Collection\u003cPrefix\u003e exportPrefixes) throws IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        File file \u003d new File(path.toString());","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        CSVWriter csvWriter \u003d new CSVWriter(fileWriter);","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"        csvWriter.writeNext(getPersonHeadersAsStringArray(exportPrefixes));","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        for (Person person: personList) {","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"            csvWriter.writeNext(getPersonAsStringArray(person, exportPrefixes));","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        csvWriter.close();","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"     * Gets the field for a person, prefix combination.","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"     * @param prefix","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"     * @param person","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"     * @return String data for the person,prefix combination","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"    private static String getField(Prefix prefix, Person person) {","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        return PREFIX_TO_DATA_FUNC.get(prefix).apply(person);","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"     * Gets the field name for a prefix.","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"     * @param prefix","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"     * @return String data for the person,prefix combination","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"    private static String getName(Prefix prefix) {","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        return PREFIX_TO_NAME.get(prefix);","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"     * Serializes a {@code Person} into an array of Strings.","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"     * First member is always Name, rest of array is filled based on exportPrefixes.","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"     * @param person Person object to serialize","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"     * @param prefixes List of prefixes that the array should contain the information of","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"     * @return String Array containing Name, followed by other data","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"    private static String[] getPersonAsStringArray(Person person, Collection\u003cPrefix\u003e prefixes) {","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"        List\u003cString\u003e csvLine \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"        csvLine.add(getField(PREFIX_NAME, person));","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"        List\u003cString\u003e csvFields \u003d OPTIONAL_PREFIXES.stream()","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"                .filter(prefix-\u003eprefixes.contains(prefix))","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"                .map(prefix-\u003egetField(prefix, person))","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"        csvLine.addAll(csvFields);","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"        return csvLine.toArray(String[]::new);","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"     * Creates a header row when provided a series of Prefixes.","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"     * @param prefixes List of prefixes to add","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"     * @return String Array of the headers","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"    private static String[] getPersonHeadersAsStringArray(Collection\u003cPrefix\u003e prefixes) {","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"        List\u003cString\u003e csvHeaders \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"        csvHeaders.add(\"Name\");","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"cookiedan42"},"content":"        List\u003cString\u003e csvFields \u003d OPTIONAL_PREFIXES.stream()","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"cookiedan42"},"content":"                .filter(prefix-\u003e prefixes.contains(prefix))","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"cookiedan42"},"content":"                .map(prefix-\u003egetName(prefix))","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"cookiedan42"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"cookiedan42"},"content":"        csvHeaders.addAll(csvFields);","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"        return csvHeaders.toArray(String[]::new);","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"cookiedan42":146}},{"path":"src/main/java/seedu/address/commons/util/EditUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"public class EditUtil {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"        private Name name;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"        private Phone phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"        private Email email;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"        private Address address;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"        private Birthday birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"        private Pin pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"            setBirthday(toCopy.birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"            setPin(toCopy.pin);","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"            this.email \u003d email;","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"            this.address \u003d address;","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        public void setBirthday(Birthday birthday) {","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"            this.birthday \u003d birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"            return Optional.ofNullable(birthday);","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"        public void setPin(Pin pin) {","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"            this.pin \u003d pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"        public Optional\u003cPin\u003e getPin() {","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"            return Optional.ofNullable(pin);","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"                return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"                return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"            // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"cookiedan42"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday());","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"cookiedan42":132,"yucheng11122017":12}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static boolean isContainsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yucheng11122017":1,"-":67}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"    CommandResult systemExecute(String commandText);","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    /** Returns an unmodifiable view of the filtered list of people */","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"     * Returns the set of {@code Prefix} stored by the model.","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"     * @return Set of Prefixes","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    Set\u003cPrefix\u003e getPrefixStore();","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"     * Returns an unmodifiable list of upcoming birthdays","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"    ObservableList\u003cPerson\u003e getBirthdayReminderList();","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Jiwei99":2,"cookiedan42":9,"Justinhoejj":5,"yucheng11122017":1,"-":49}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.SystemCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"    public CommandResult systemExecute(String commandText) {","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"        CommandResult commandResult \u003d SystemCommand.execute(commandText);","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        return commandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"    public ObservableList\u003cPerson\u003e getBirthdayReminderList() {","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"        return model.getBirthdayReminderList();","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"    public Set\u003cPrefix\u003e getPrefixStore() {","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"        return Set.copyOf(model.getPrefixes());","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jiwei99":7,"cookiedan42":7,"Justinhoejj":5,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Adds a contact to the address book.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: \"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"            + PREFIX_TAG + \"owesMoney \"","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"            + PREFIX_BIRTHDAY + \"04071999\";","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New contact added: %1$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book.\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"              + \"Reason: duplicate phone number.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"     * Creates an {@code AddCommand} to add the specified {@code Person}.","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * @param person Person to be added.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code AddCommand} which adds the {@code Person}.","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code AddCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"     * @throws CommandException If person is already within the contact list.","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":4,"cookiedan42":2,"Justinhoejj":1,"yucheng11122017":18,"leezhixuan":2,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Clears all entries from the address book.\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code ClearCommand} which clears all contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code ClearCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"        model.clearBirthdayReminderList();","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":3,"Justinhoejj":1,"yucheng11122017":6,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     * @return feedback message of the operation result for display.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"     * Special Commands that UI has to treat in different ways.","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"    public enum ResultType {","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"        NORMAL,","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"        SHOW_HELP,","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"        EXIT,","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"        EXPORT_CSV","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"    private final ResultType resultType;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"     * Constructs a {@code CommandResult} with the specified specialType.","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * @param feedbackToUser Message that is shown to user.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     * @param specialType The type of message.","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult (String feedbackToUser, ResultType specialType) {","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"        this.resultType \u003d specialType;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @param feedbackToUser Message that is shown to user.","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"     * @param showHelp boolean indicating if user indicated for help.","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     * @param exit boolean indicating if user indicated an exit.","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     * @param exportCsv boolean indicating if user indicating to export contacts to Csv.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean exportCsv) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"        if (showHelp) {","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"            this.resultType \u003d ResultType.SHOW_HELP;","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        } else if (exit) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"            this.resultType \u003d ResultType.EXIT;","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        } else if (exportCsv) {","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"            this.resultType \u003d ResultType.EXPORT_CSV;","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"            this.resultType \u003d ResultType.NORMAL;","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        this(feedbackToUser, showHelp, exit, false);","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"        this(feedbackToUser, ResultType.NORMAL);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code this} is a {@code ResultType.SHOW_HELP}.","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"     * @return if {@code this} is a {@code ResultType.SHOW_HELP}.","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        return resultType.equals(ResultType.SHOW_HELP);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code this} is a {@code ResultType.EXIT}.","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"     * @return if {@code this} is a {@code ResultType.EXIT}.","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        return resultType.equals(ResultType.EXIT);","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code this} is a {@code ResultType.EXPORT_CSV}.","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"     * @return if {@code this} is a {@code ResultType.EXPORT_CSV}.","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"    public boolean isChooseFile() {","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"        return resultType.equals(ResultType.EXPORT_CSV);","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"                \u0026\u0026 resultType.equals(otherCommandResult.resultType);","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"        return Objects.hash(feedbackToUser, resultType);","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"cookiedan42":44,"yucheng11122017":29,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":" * Deletes a contact identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Deletes the contact identified by the index number used \"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"            + \"in the displayed person list.\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted contact: %1$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code DeleteCommand} that deletes contact at {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * @param targetIndex the index of the contact that is to be deleted.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code DeleteCommand} which deletes contact at {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code DeleteCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":4,"yucheng11122017":21,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMultipleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.util.List;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"/**","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":" * Deletes multiple contacts identified using the displayed index range from the address book.","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":" */","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommand extends Command {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"    public static final String COMMAND_WORD \u003d \"deletem\";","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    public static final String INDEX_SPLITTER \u003d \"-\";","lastModifiedDate":"2021-10-15"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Deletes a range of contacts identified \"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"            + \"by the index numbers ( Both inclusive ) \"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"            + \"in the displayed person list.\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: START_INDEX - END_INDEX \\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"            + \"Example: \" + COMMAND_WORD + \" 8 \" + INDEX_SPLITTER + \" 14\";","lastModifiedDate":"2021-10-15"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS \u003d \"Deleted contacts: \";","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"START_INDEX cannot be larger than END_INDEX \\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d Index.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"    private final Index startIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    private final Index endIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * Deletes multiple contacts between the range of start index and end index both inclusive.","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     * @param startIndex displayed index of first contact to be deleted.","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @param endIndex displayed index of last contact to be deleted.","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"    public DeleteMultipleCommand(Index startIndex, Index endIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"        requireAllNonNull(startIndex, endIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(areValidIndexes(startIndex, endIndex), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        this.startIndex \u003d startIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"        this.endIndex \u003d endIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code startIndex} and {@endIndex} are valid indexes.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * @param startIndex The index of the first person to delete.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @param endIndex The index of the last person to delete.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * @return if {@code startIndex} and {@endIndex} are valid indexes.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean areValidIndexes(Index startIndex, Index endIndex) {","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        requireAllNonNull(startIndex, endIndex);","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        return startIndex.getZeroBased() \u003c\u003d endIndex.getZeroBased();","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"    private boolean haveEqualIndexes(DeleteMultipleCommand other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"        return startIndex.equals(other.startIndex)","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"                \u0026\u0026 endIndex.equals(other.endIndex);","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * Executes {@code DeleteMultipleCommand} which deletes the contacts from {@code startIndex} to {@code endIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code DeleteMultipleCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"     * @throws CommandException If invalid indexes are provided.","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"        if (startIndex.getZeroBased() \u003e\u003d lastShownList.size()","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"                || endIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"Justinhoejj"},"content":"        StringBuilder result \u003d new StringBuilder(MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS);","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"Justinhoejj"},"content":"        for (int i \u003d startIndex.getZeroBased(); i \u003c\u003d endIndex.getZeroBased(); i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"Justinhoejj"},"content":"            Person personToDelete \u003d lastShownList.get(startIndex.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"Justinhoejj"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"Justinhoejj"},"content":"            result.append(String.format(\"\\n%1$s\", personToDelete));","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"Justinhoejj"},"content":"        return new CommandResult(result.toString());","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"Justinhoejj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"Justinhoejj"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"Justinhoejj"},"content":"                || (other instanceof DeleteMultipleCommand // instanceof handles nulls","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"Justinhoejj"},"content":"                    \u0026\u0026 haveEqualIndexes((DeleteMultipleCommand) other)); // both indexes are equal","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Jiwei99":2,"Justinhoejj":71,"yucheng11122017":29}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":" * Edits the details of an existing contact in the address book.","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Edits the details of the contact identified \"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"            + \"Existing values will be overwritten by the input values.\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \"","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited contact: %1$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_NO_CHANGES \u003d \"Provided data is same as existing data,\"","lastModifiedDate":"2021-11-04"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"            + \" no changes to the contact were made.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book.\\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"            + \"Reason: duplicate phone number.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     * Creates an {@code EditCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     * @param index of the contact in the filtered person list to edit.","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * @param editPersonDescriptor details to edit the person with.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"    public Index getIndex() {","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        return index;","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    public EditPersonDescriptor getEditPersonDescriptor() {","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        return editPersonDescriptor;","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code EditCommand} which edits the contact at the {@code index}.","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code EditCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"     * @throws CommandException If invalid indexes are provided,","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"     *  if there are duplicate contacts or if there are no changes.","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        if (personToEdit.equals(editedPerson)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(MESSAGE_NO_CHANGES);","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday().orElse(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"        Pin updatedPin \u003d personToEdit.getPin();","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"                updatedTags, updatedBirthday, updatedPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":139,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Jiwei99":14,"cookiedan42":6,"Justinhoejj":1,"yucheng11122017":26,"leezhixuan":2,"-":112}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Exits the program.\\n\";","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code ExitCommand} which exits CONNECTIONS.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code ExitCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Jiwei99":5,"yucheng11122017":6,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/FindAnyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" * Finds and lists all contacts in address book whose name contains ANY of the argument keywords provided.","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    public static final String COMMAND_WORD \u003d \"findAny\";","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Finds all contacts whose names contain ANY of \"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\";","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: n/[name] ... t/[tag] ...\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"            + \"Note that Users can opt for case-sensitive search on Tags by including the \u0027c/\u0027 flag \"","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"            + \"after the command word\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice n/bob t/friends t/colleagues\";","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"    public static final String CASE_SENSITIVE_FLAG_FORMAT_MESSAGE \u003d \"The case-sensitive flag `c/` must come \"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"            + \"right after the \" + \"command word!\\n\" + \"For example, rather than \u0027findAny n/NAME c/ t/TAG\u0027 or \"","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"            + \"\u0027findAny n/NAME t/TAG c/\u0027, it should be \u0027findAny c/ n/NAME t/TAG\u0027 instead.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"    private final FindAnyPredicate findAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code FindAnyCommand} which searches for contacts that fulfill the {@findAnyPredicate}.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     * @param findAnyPredicate the predicate that tests if contacts fulfill the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"    public FindAnyCommand(FindAnyPredicate findAnyPredicate) {","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"        this.findAnyPredicate \u003d findAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code FindAnyCommand} which searches for contacts that fulfill the {@findAnyPredicate}.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code FindAnyCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        model.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"                || ((other instanceof FindAnyCommand) // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 findAnyPredicate.equals(((FindAnyCommand) other).findAnyPredicate)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"Jiwei99":2,"yucheng11122017":22,"leezhixuan":42}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":" * Finds and lists all contacts in address book whose details contain ALL of the argument keywords provided.","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Finds all contacts whose names contain ALL of \"","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\";","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: n/[name] ... t/[tag] ...\\n\"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"            + \"Note that users can opt for case-sensitive search on Tags by including the \u0027c/\u0027 flag \"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"            + \"after the command word\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/alice n/bob t/friends t/colleagues\";","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"    public static final String CASE_SENSITIVE_FLAG_FORMAT_MESSAGE \u003d \"The case-sensitive flag `c/` must come \"","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"            + \"right after the \" + \"command word!\\n\" + \"For example, rather than \u0027find n/NAME c/ t/TAG\u0027 or \"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"            + \"\u0027find n/NAME t/TAG c/\u0027, it should be \u0027find c/ n/NAME t/TAG\u0027 instead.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"    private final FindPredicate findPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code FindCommand} which searches for contacts that fulfill the {@findPredicate}.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * @param findPredicate the predicate that tests if contacts fulfill the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    public FindCommand(FindPredicate findPredicate) {","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        this.findPredicate \u003d findPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code FindCommand} which searches for contacts that fulfill the {@findPredicate}.","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code FindCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        model.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"                || ((other instanceof FindCommand) // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 findPredicate.equals(((FindCommand) other).findPredicate)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Jiwei99":2,"yucheng11122017":22,"leezhixuan":13,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"    public static final String MORE \u003d \"more\";","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    public static final String EMPTY \u003d \"\";","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Shows program usage instructions.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: \"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"            + \"[COMMAND] \\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"            + \"Example: \" + COMMAND_WORD + \"; \"","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"            + COMMAND_WORD + \" \" + AddCommand.COMMAND_WORD + \"; \"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"            + COMMAND_WORD + \" \" + MORE;","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"    public static final String SPACE \u003d \"            \";","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    public static final String HELP_MESSAGE \u003d \"Usage: help \u003ccommand\u003e\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"            + \"\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"            + \"Commands:\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"            + AddCommand.COMMAND_WORD + SPACE + AddCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"            + EditCommand.COMMAND_WORD + SPACE + EditCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"            + TagCommand.COMMAND_WORD + SPACE + TagCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"            + UntagCommand.COMMAND_WORD + SPACE + UntagCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"            + ListCommand.COMMAND_WORD + SPACE + ListCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"            + FindCommand.COMMAND_WORD + SPACE + FindCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"            + FindAnyCommand.COMMAND_WORD + SPACE + FindAnyCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"            + PinCommand.COMMAND_WORD + SPACE + PinCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"            + UnpinCommand.COMMAND_WORD + SPACE + UnpinCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"            + MailingListCommand.COMMAND_WORD + SPACE + MailingListCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"            + DeleteCommand.COMMAND_WORD + SPACE + DeleteCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"            + DeleteMultipleCommand.COMMAND_WORD + SPACE + DeleteMultipleCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"            + ClearCommand.COMMAND_WORD + SPACE + ClearCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"            + ExitCommand.COMMAND_WORD + SPACE + ExitCommand.COMMAND_DESCRIPTION","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"            + \"For more information, enter \u003chelp more\u003e.\";","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"    private final String commandWord;","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code HelpCommand} which returns help for the command provided.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * @param commandWord the command for which help is requested.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    public HelpCommand(String commandWord) {","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"        this.commandWord \u003d commandWord;","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code HelpCommand} which provides help messages to user.","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code HelpCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        case EMPTY:","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(HELP_MESSAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"        case MORE:","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(AddCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(EditCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"        case UntagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(UntagCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(TagCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(DeleteCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        case DeleteMultipleCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(DeleteMultipleCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ClearCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(FindCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        case FindAnyCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"            return new CommandResult(FindAnyCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ListCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ExitCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(HelpCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"        case PinCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"            return new CommandResult(PinCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"        case UnpinCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"            return new CommandResult(UnpinCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"        case MailingListCommand.COMMAND_WORD:","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(MailingListCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"        default:","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"            String message \u003d MESSAGE_UNKNOWN_COMMAND + \": \" + commandWord + \"\\n\" + HELP_MESSAGE;","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(message);","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":132,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"Jiwei99"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"Jiwei99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"            return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        if (!(other instanceof HelpCommand)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"            return false;","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"        // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand e \u003d (HelpCommand) other;","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"        return commandWord.equals(e.commandWord);","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":101,"yucheng11122017":25,"leezhixuan":3,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":" * Lists all contacts in the address book to the user.","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all contacts\";","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Shows a list of all contacts in the address book.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code ListCommand} which lists all contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code ListCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":2,"yucheng11122017":10,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/MailingListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":" * Exports the current view as a mailing list in the csv file format.","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"public class MailingListCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"    public static final String COMMAND_WORD \u003d \"mailingList\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Exports the current view as a mailing list.\\n\";","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: \"","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"            + \"[\" + PREFIX_PHONE + \"] \"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"            + \"[\" + PREFIX_EMAIL + \"] \"","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"            + \"[\" + PREFIX_ADDRESS + \"] \"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"] \"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_TAG + \"] \\n\"","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"            + \"Default export is Phone numbers and Email addresses.\\n\"","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PHONE + \" \" + PREFIX_EMAIL;","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-11-04"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_EXTRA_ARGUMENTS_FAILURE \u003d \"Invalid fields selected.\\n\" + COMMAND_EXAMPLE;","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_EMPTY_PERSON_LIST \u003d \"Trying to export an empty mailing list does not make sense\";","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Exporting current view as a CSV file\";","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    private final Set\u003cPrefix\u003e prefixToWrite;","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code MailingListCommand} which generates a csv file of contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     * @param prefixToWrite Set of Prefixes to write into the csv file.","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"    public MailingListCommand(Set\u003cPrefix\u003e prefixToWrite) {","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"        this.prefixToWrite \u003d Collections.unmodifiableSet(prefixToWrite);","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code MailingListCommand} which generates a csv file of contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code MailingListCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"        model.setPrefixes(prefixToWrite);","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        if (model.getFilteredPersonList().isEmpty()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(MESSAGE_EMPTY_PERSON_LIST);","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"            return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        if (!(other instanceof MailingListCommand)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"            return false;","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        MailingListCommand e \u003d (MailingListCommand) other;","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"        return prefixToWrite.equals(e.prefixToWrite);","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"Jiwei99":6,"cookiedan42":63,"yucheng11122017":17}},{"path":"src/main/java/seedu/address/logic/commands/PinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":" * Pins a contact identified using it\u0027s displayed index from the contact list.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"public class PinCommand extends Command {","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_WORD \u003d \"pin\";","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Pins the contact identified by the index number \"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"            + \"used in the displayed contact list.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_EXAMPLE \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"            \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_PINNED_PERSON_SUCCESS \u003d \"Pinned contact: %1$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_PERSON_ALREADY_PINNED_FAILURE \u003d \"Contact is already pinned!\";","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code PinCommand} that pins contact at {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"     * @param targetIndex the index of the contact that is to be pinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    public PinCommand(Index targetIndex) {","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code PinCommand} which pins the contact at the {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code PinCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     * @throws CommandException If index is invalid or contact is already pinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        if (personToPin.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"            throw new CommandException(MESSAGE_PERSON_ALREADY_PINNED_FAILURE);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d createPinnedPerson(personToPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        model.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"        return new CommandResult(String.format(MESSAGE_PINNED_PERSON_SUCCESS, personToPin));","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"                || (other instanceof PinCommand // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 targetIndex.equals(((PinCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"    private Person createPinnedPerson(Person personToPin) {","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(personToPin);","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"        assert !personToPin.isPinned() : \"Person is already pinned!\";","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"        Name updatedName \u003d personToPin.getName();","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"        Phone updatedPhone \u003d personToPin.getPhone();","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"        Email updatedEmail \u003d personToPin.getEmail();","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"        Address updatedAddress \u003d personToPin.getAddress();","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToPin.getTags();","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"        Birthday updatedBirthday \u003d personToPin.getBirthday().orElse(null);","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        Pin updatedPin \u003d personToPin.getPin().togglePin();","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail,","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"                updatedAddress, updatedTags, updatedBirthday, updatedPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":105}},{"path":"src/main/java/seedu/address/logic/commands/SystemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"/** Displays help message when user is typing. */","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"public class SystemCommand {","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"     * Executes help message when user is typing.","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"     * @param userInput input of user.","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"     * @return feedback message of the operation result for display.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"    public static CommandResult execute(String userInput) {","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"        String[] parsedInput \u003d userInput.split(\" \");","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"        String commandWord \u003d parsedInput[0];","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"        case (AddCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(AddCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"        case (DeleteCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(DeleteCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"        case (DeleteMultipleCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(DeleteMultipleCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"        case (EditCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(EditCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        case (FindAnyCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(FindAnyCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"        case (FindCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(FindCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"        case (PinCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(PinCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"        case (TagCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(TagCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"        case (UnpinCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(UnpinCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        case (UntagCommand.COMMAND_WORD):","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(UntagCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"        case (ListCommand.COMMAND_WORD):","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ListCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        case (MailingListCommand.COMMAND_WORD):","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(MailingListCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        case (ClearCommand.COMMAND_WORD):","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ClearCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"        case (HelpCommand.COMMAND_WORD):","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(HelpCommand.HELP_MESSAGE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"        case (ExitCommand.COMMAND_WORD):","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(ExitCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        default:","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"            return new CommandResult(\"\", false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"Jiwei99":46,"yucheng11122017":4}},{"path":"src/main/java/seedu/address/logic/commands/TagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import java.util.List;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":" * Adds one or more new {@code Tag} objects to the details of an existing {@code Person} in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"public class TagCommand extends Command {","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Adds one or more Tags to the details of the contact \"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"            + \"identified by the index number used in the displayed contact list.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"            + PREFIX_TAG + \"TAG \"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"            + \"[\" + PREFIX_TAG + \"EXTRA_TAG]...\\n\"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \"ExampleTag\";","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_TAG_ADD_SUCCESS \u003d \"Contact %1$s now has tags: %2$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_TAG_ADD_EXISTS \u003d \"Contact %1$s already had tags: %2$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"    private final Index index;","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code TagCommand} which tags the contact at the index.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * @param index of the {@code Person} in the filtered person list to edit.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @param editPersonDescriptor details the tags to add to the {@code Person}.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    public TagCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code TagCommand} which tags the contact at the index.","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code TagCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        assert personToEdit.isSamePerson(editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e oldTags \u003d personToEdit.getTags();","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        Predicate\u003cTag\u003e tagInOldTags \u003d testTag -\u003e oldTags.contains(testTag);","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e overlapTags \u003d editPersonDescriptor.getTags().orElse(new HashSet\u003c\u003e()).stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"                .filter(tagInOldTags).collect(Collectors.toSet());","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        String successMessage \u003d String.format(MESSAGE_TAG_ADD_SUCCESS, editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        String existsMessage \u003d !overlapTags.isEmpty()","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"                ? \u0027\\n\u0027 + String.format(MESSAGE_TAG_ADD_EXISTS, editedPerson.getName(), overlapTags)","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"                : \"\";","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        return new CommandResult(successMessage + existsMessage);","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"     * with added tags from {@code editPersonDescriptor}.","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(personToEdit);","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"        Name unchangedName \u003d personToEdit.getName();","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        Phone unchangedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"        Email unchangedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        Address unchangedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        Birthday unchangedBirthday \u003d personToEdit.getBirthday().orElse(null);","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"        Pin unchangedPin \u003d personToEdit.getPin();","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e existingTags \u003d personToEdit.getTags();","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"        Set\u003cTag\u003e addedTags \u003d editPersonDescriptor.getTags().orElse(new HashSet\u003c\u003e());","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"        updatedTags.addAll(existingTags);","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"        updatedTags.addAll(addedTags);","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"        return new Person(unchangedName, unchangedPhone, unchangedEmail, unchangedAddress,","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"                updatedTags,","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"                unchangedBirthday, unchangedPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"            return true;","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-06"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"        if (!(other instanceof TagCommand)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"            return false;","lastModifiedDate":"2021-10-06"},{"lineNumber":138,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"cookiedan42"},"content":"        // state check","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"cookiedan42"},"content":"        TagCommand e \u003d (TagCommand) other;","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"cookiedan42"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-06"},{"lineNumber":143,"author":{"gitId":"cookiedan42"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":145,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"Jiwei99":3,"cookiedan42":118,"yucheng11122017":23,"leezhixuan":2}},{"path":"src/main/java/seedu/address/logic/commands/UnpinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":" * Unpins a contact identified using it\u0027s displayed index from the contact list.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"public class UnpinCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_WORD \u003d \"unpin\";","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Unpins the contact identified by the index number \"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"            + \"used in the displayed contact list.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_EXAMPLE \u003d","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"            \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"                    + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_UNPINNED_PERSON_SUCCESS \u003d \"Unpinned contact: %1$s\";","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_PERSON_NOT_PINNED_FAILURE \u003d \"Contact is not pinned!\";","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code UnpinCommand} that unpins contact at {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     * @param targetIndex the index of the contact that is to be unpinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"    public UnpinCommand(Index targetIndex) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code UnpinCommand} which unpins the contact at the {@code targetIndex}.","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code UnpinCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     * @throws CommandException If index is invalid or contact is not pinned.","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        if (!personToPin.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_PINNED_FAILURE);","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d createUnpinnedPerson(personToPin);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"        model.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        return new CommandResult(String.format(MESSAGE_UNPINNED_PERSON_SUCCESS, personToPin));","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"                || (other instanceof UnpinCommand // instanceof handles nulls","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 targetIndex.equals(((UnpinCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"    private Person createUnpinnedPerson(Person personToPin) {","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"        assert personToPin !\u003d null;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"        assert personToPin.isPinned() : \"Person is not pinned!\";","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"        Name updatedName \u003d personToPin.getName();","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"        Phone updatedPhone \u003d personToPin.getPhone();","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"        Email updatedEmail \u003d personToPin.getEmail();","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"        Address updatedAddress \u003d personToPin.getAddress();","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToPin.getTags();","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        Birthday updatedBirthday \u003d personToPin.getBirthday().orElse(null);","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"        Pin updatedPin \u003d personToPin.getPin().togglePin();","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail,","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"                updatedAddress, updatedTags, updatedBirthday, updatedPin);","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"yucheng11122017":106}},{"path":"src/main/java/seedu/address/logic/commands/UntagCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":" * Removes an existing {@code Tag} from an existing {@code Person} in the address book.","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommand extends Command {","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_WORD \u003d \"untag\";","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"Removes a tag from the details of the contact \"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"            + \"identified by the index number used in the displayed contact list.\\n\";","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"    public static final String COMMAND_EXAMPLE \u003d \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"            + PREFIX_TAG + \"friend\";","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \" + COMMAND_DESCRIPTION + COMMAND_EXAMPLE;","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_REMOVE_TAG_SUCCESS \u003d \"Removed tag(s) from %1$s: %2$s\";","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_NOT_REMOVED \u003d \"At least one tag to be removed must be provided.\";","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"    public static final String MESSAGE_TAG_NOT_IN_PERSON \u003d \"%s does not have the following tags: %s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UntagCommand.class);","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"    private final Index index;","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     * Creates an {@code UntagCommand} which untags the contact at the index.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"    public UntagCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"     * Executes the {@code UntagCommand} which untags the contact at the index.","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code CommandResult} regarding the status of the {@code UntagCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-07"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"        Person personToUntag \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d createEditedPerson(personToUntag, editPersonDescriptor);","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"        if (!personToUntag.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"        model.setPerson(personToUntag, editedPerson);","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_TAG_SUCCESS, editedPerson.getName(),","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"                getRemovedTags(editPersonDescriptor)));","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToUntag}","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"    private static Person createEditedPerson(Person personToUntag, EditPersonDescriptor editPersonDescriptor)","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"        assert personToUntag !\u003d null;","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getTags().isPresent();","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getName().isEmpty();","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getPhone().isEmpty();","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getEmail().isEmpty();","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getAddress().isEmpty();","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"        assert editPersonDescriptor.getBirthday().isEmpty();","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"        Name originalName \u003d personToUntag.getName();","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        Phone originalPhone \u003d personToUntag.getPhone();","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"        Email originalEmail \u003d personToUntag.getEmail();","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"        Address originalAddress \u003d personToUntag.getAddress();","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"        Birthday originalBirthday \u003d personToUntag.getBirthday().orElse(null);","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"        Pin originalPin \u003d personToUntag.getPin();","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"        Set\u003cTag\u003e removedTags \u003d editPersonDescriptor.getTags().orElse(new HashSet\u003c\u003e());","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(personToUntag.getTags());","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"        if (!updatedTags.containsAll(removedTags)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_IN_PERSON, originalName,","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"                    getNotFoundTags(updatedTags, removedTags)));","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"        updatedTags.removeAll(removedTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"        logger.info(String.format(\"%s contains the following tags: %s ; removed the following tags: %s\",","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"                originalName, updatedTags.stream().map(tag -\u003e tag.tagName).collect(Collectors.joining(\", \")),","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"                getRemovedTags(editPersonDescriptor)));","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(originalName, originalPhone, originalEmail,","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"                originalAddress, updatedTags, originalBirthday, originalPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"Jiwei99"},"content":"     * Retrieves tags that user wants to remove, but are not present in the contact.","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"Jiwei99"},"content":"     * @param originalTags Tags that contact are tagged with","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"     * @param removedTags Tags to be removed","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"     * @return String containing tags that are not found","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"    public static String getNotFoundTags(Set\u003cTag\u003e originalTags, Set\u003cTag\u003e removedTags) {","lastModifiedDate":"2021-10-08"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        // filters out tags that are not found in original tags","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"        // map to abstract out tagNames and join them into a string","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"        return removedTags.stream().filter(x -\u003e !originalTags.contains(x)).map(x -\u003e x.tagName)","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"                .collect(Collectors.joining(\", \"));","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"     * Retrieves tags that are removed.","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"     * @return String containing tags that are removed","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"    public static String getRemovedTags(EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"        return editPersonDescriptor.getTags().orElse(new HashSet\u003c\u003e()).stream()","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.joining(\", \"));","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":159,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":160,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":161,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":162,"author":{"gitId":"Jiwei99"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":163,"author":{"gitId":"Jiwei99"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"Jiwei99"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"Jiwei99"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"Jiwei99"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":169,"author":{"gitId":"Jiwei99"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":170,"author":{"gitId":"Jiwei99"},"content":"        if (!(other instanceof UntagCommand)) {","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"Jiwei99"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":172,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":173,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":174,"author":{"gitId":"Jiwei99"},"content":"        // state check","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand e \u003d (UntagCommand) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"Jiwei99"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"Jiwei99"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":179,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":155,"cookiedan42":1,"yucheng11122017":21,"leezhixuan":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code AddCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code AddCommand} that adds contact to contact list.","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"                        PREFIX_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"        Birthday possibleBirthday \u003d ParserUtil.parseBirthday((argMultimap.getValue(PREFIX_BIRTHDAY).orElse(null)));","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        Pin defaultPin \u003d new Pin(false);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, possibleBirthday, defaultPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Justinhoejj":1,"yucheng11122017":8,"leezhixuan":4,"-":56}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.logic.commands.FindAnyCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.MailingListCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        case MailingListCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"            return new MailingListCommandParser().parse(arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        case UntagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"            return new UntagCommandParser().parse(arguments);","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        case TagCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"            return new TagCommandParser().parse(arguments);","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"        case DeleteMultipleCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"            return new DeleteMultipleCommandParser().parse(arguments);","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"        case FindAnyCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"            return new FindAnyCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"            return new HelpCommandParser().parse(arguments);","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"        case PinCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"            return new PinCommandParser().parse(arguments);","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"        case UnpinCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"            return new UnpinCommandParser().parse(arguments);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jiwei99":5,"cookiedan42":8,"Justinhoejj":4,"yucheng11122017":7,"leezhixuan":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"    public static final Prefix PREFIX_CASE_SENSITIVE \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"    public static final List\u003cPrefix\u003e PREFIX_LIST \u003d List.of(","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_NAME,","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_PHONE,","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_EMAIL,","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_ADDRESS,","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_TAG,","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_BIRTHDAY","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"    );","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"cookiedan42":10,"leezhixuan":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code DeleteCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code DeleteCommand} which deletes the contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"yucheng11122017":5,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMultipleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.DeleteMultipleCommand.INDEX_SPLITTER;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code DeleteMultipleCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandParser implements Parser\u003cDeleteMultipleCommand\u003e {","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMultipleCommand","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"     * and returns a DeleteMultipleCommand object for execution.","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code DeleteMultipleCommand} which deletes the contact at the specific indexes.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    public DeleteMultipleCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"            int indexOfDash \u003d ParserUtil.getIndexOfSubstring(args, INDEX_SPLITTER);","lastModifiedDate":"2021-10-15"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"            Index indexStart \u003d ParserUtil.parseIndex(args.substring(0, indexOfDash));","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"            Index indexEnd \u003d ParserUtil.parseIndex(args.substring(indexOfDash + 1));","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"            validateIndexes(indexStart, indexEnd);","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"            return new DeleteMultipleCommand(indexStart, indexEnd);","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, pe.getMessage()), pe);","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"    private void validateIndexes(Index indexStart, Index indexEnd) throws ParseException {","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"        if (!DeleteMultipleCommand.areValidIndexes(indexStart, indexEnd)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(DeleteMultipleCommand.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":32,"yucheng11122017":8}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code EditCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code EditCommand} which edits the contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"                        PREFIX_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday((argMultimap.getValue(PREFIX_BIRTHDAY).get())));","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"cookiedan42":1,"yucheng11122017":4,"leezhixuan":6,"-":79}},{"path":"src/main/java/seedu/address/logic/parser/FindAnyCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CASE_SENSITIVE;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.logic.commands.FindAnyCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code FindAnyCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyCommandParser implements Parser\u003cFindAnyCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code FindAnyCommand}","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     * and returns a {@code FindAnyCommand} object for execution.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code FindAnyCommand} which searches for contacts that fulfill the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"    public FindAnyCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAnyCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        if (extractSearchTerms(args).contains(\"c/\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"            String caseSensitiveFlagFormatMessage \u003d \"The case-sensitive flag `c/` must come right after the \"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"                    + \"command word!\\n\" + \"For example, rather than \u0027findAny n/NAME c/ t/TAG\u0027 or \"","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"                    + \"\u0027findAny n/NAME t/TAG c/\u0027, \" + \"it should be \u0027findAny c/ n/NAME t/TAG\u0027 instead.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(caseSensitiveFlagFormatMessage);","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        boolean isCaseSensitive \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"        if (trimmedArgs.contains(PREFIX_CASE_SENSITIVE.toString())) {","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"            isCaseSensitive \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TAG))) {","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAnyCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d argMultimap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"        if (areBlanksPresent(nameStringList)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameKeywords;","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"            nameKeywords \u003d nameStringList.stream().map(Name::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"            tagList \u003d tagStringList.stream().map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameKeywords, tagList, isCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        return new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    private static boolean areBlanksPresent(List\u003cString\u003e stringList) {","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"        for (String s : stringList) {","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"            if (s.contains(\" \")) {","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"                return true;","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"        return false;","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"    private static String extractSearchTerms(String args) {","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"        int indexOfN \u003d args.indexOf(\"n/\");","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        int indexOfT \u003d args.indexOf(\"t/\");","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        int finalIndex;","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        if (indexOfN \u003d\u003d -1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d indexOfT;","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"        } else if (indexOfT \u003d\u003d -1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d indexOfN;","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d Math.min(indexOfN, indexOfT);","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        return args.substring(finalIndex);","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":7,"leezhixuan":103}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CASE_SENSITIVE;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code FindCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code FindCommand}","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     * and returns a {@code FindCommand} object for execution.","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code FindCommand} which searches for contacts that fulfill the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        if (extractSearchTerms(args).contains(\"c/\")) {","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        boolean isCaseSensitive \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        if (trimmedArgs.contains(PREFIX_CASE_SENSITIVE.toString())) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"            isCaseSensitive \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TAG))) {","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d argMultimap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        if (areBlanksPresent(nameStringList)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"            String nameFormatRequirementMessage \u003d \"There should not be any blanks in name.\\n\" + \"For example, \"","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"                    + \"if you are \" + \"searching for \" + \"\u0027n/John Doe\u0027, split them into \u0027n/John\u0027 \"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"                    + \"and \u0027n/Doe\u0027 instead.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(nameFormatRequirementMessage);","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameKeywords;","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"            nameKeywords \u003d nameStringList.stream().map(Name::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"            tagList \u003d tagStringList.stream().map(Tag::new).collect(Collectors.toList());","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findpredicate \u003d new FindPredicate(nameKeywords, tagList, isCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"        return new FindCommand(findpredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"    private static boolean areBlanksPresent(List\u003cString\u003e stringList) {","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        for (String s : stringList) {","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"            if (s.contains(\" \")) {","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"                return true;","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        return false;","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"    private static String extractSearchTerms(String args) {","lastModifiedDate":"2021-11-06"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        int indexOfN \u003d args.indexOf(\"n/\");","lastModifiedDate":"2021-11-06"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"        int indexOfT \u003d args.indexOf(\"t/\");","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        int finalIndex;","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        if (indexOfN \u003d\u003d -1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d indexOfT;","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        } else if (indexOfT \u003d\u003d -1) {","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d indexOfN;","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"            finalIndex \u003d Math.min(indexOfN, indexOfT);","lastModifiedDate":"2021-11-06"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"        return args.substring(finalIndex);","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"yucheng11122017":7,"leezhixuan":75,"-":26}},{"path":"src/main/java/seedu/address/logic/parser/HelpCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-24"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code HelpCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code HelpCommand}.","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     * @return HelpCommand object.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"    public HelpCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"        String helpCommandWord \u003d argMultimap.getPreamble();","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"        return new HelpCommand(helpCommandWord);","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"Jiwei99":17,"yucheng11122017":8,"leezhixuan":1}},{"path":"src/main/java/seedu/address/logic/parser/MailingListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.MailingListCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code MailingListCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"public class MailingListCommandParser implements Parser\u003cMailingListCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"    public static final Set\u003cPrefix\u003e DEFAULT_PREFIXES \u003d Set.of(PREFIX_PHONE, PREFIX_EMAIL);","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"    public static final Set\u003cPrefix\u003e ALL_PREFIXES \u003d Set.of(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"            PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY);","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"     * Parses the given {@code String} of arguments in the context of the MailingListCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"     * and returns a MailingListCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code MailingListCommand} which generates a csv file with displayed contacts.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    public MailingListCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ALL_PREFIXES.toArray(Prefix[]::new));","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        Predicate\u003cPrefix\u003e prefixIsPresent \u003d prefix -\u003e argMultimap.getValue(prefix).isPresent();","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e providedPrefixes \u003d ALL_PREFIXES.stream().filter(prefixIsPresent).collect(Collectors.toSet());","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"        // check that only valid Prefix are provided","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        if (hasExtraArguments(argMultimap, providedPrefixes)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(MailingListCommand.MESSAGE_EXTRA_ARGUMENTS_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"        // set defaults","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        if (providedPrefixes.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"            providedPrefixes.addAll(DEFAULT_PREFIXES);","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        return new MailingListCommand(providedPrefixes);","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"    private boolean hasExtraArguments(ArgumentMultimap argMultimap, Set\u003cPrefix\u003e providedPrefixes) {","lastModifiedDate":"2021-11-04"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        // check for preamble","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"        if (!argMultimap.getPreamble().equals(\"\")) {","lastModifiedDate":"2021-11-04"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"            return true;","lastModifiedDate":"2021-11-04"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        // check for data after a prefix","lastModifiedDate":"2021-11-04"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        boolean hasExtraArguments \u003d providedPrefixes.stream()","lastModifiedDate":"2021-11-04"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"                .map(p -\u003e argMultimap.getValue(p).get())","lastModifiedDate":"2021-11-04"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"                .anyMatch(p -\u003e !p.equals(\"\"));","lastModifiedDate":"2021-11-04"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        if (hasExtraArguments) {","lastModifiedDate":"2021-11-04"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"            return true;","lastModifiedDate":"2021-11-04"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"        return false;","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"cookiedan42":67,"yucheng11122017":6}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(Index.MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"        if (!Tag.isWithinCharLimit(trimmedTag)) {","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(Tag.MESSAGE_TAG_LENGTH_EXCEEDED);","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"     * Parses {@code String birthday} into a {@code Birthday}.","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":133,"author":{"gitId":"Justinhoejj"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"            return null;","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"        String trimmedBirthday \u003d birthday.trim();","lastModifiedDate":"2021-10-07"},{"lineNumber":137,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidFormat(trimmedBirthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidDate(trimmedBirthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":141,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(Birthday.MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":142,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"Justinhoejj"},"content":"        if (Birthday.isFutureDate(trimmedBirthday)) {","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(Birthday.MESSAGE_BIRTHDAY_IN_FUTURE);","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"yucheng11122017"},"content":"        if (Birthday.isYear0000(trimmedBirthday)) {","lastModifiedDate":"2021-11-04"},{"lineNumber":147,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(Birthday.MESSAGE_INVALID_YEAR_0000);","lastModifiedDate":"2021-11-04"},{"lineNumber":148,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        return new Birthday(trimmedBirthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"Justinhoejj"},"content":"     * Parses {@code String} of arguments to retrieve index of start of {@code String} of substring.","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"Justinhoejj"},"content":"     * @throws ParseException if the given {@code substring} is not found in {@code args}.","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"Justinhoejj"},"content":"    public static int getIndexOfSubstring(String args, String substring) throws ParseException {","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"Justinhoejj"},"content":"        requireAllNonNull(args, substring);","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"Justinhoejj"},"content":"        int indexOfStartOfSubstring \u003d args.indexOf(substring);","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"Justinhoejj"},"content":"        if (indexOfStartOfSubstring \u003d\u003d -1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"Justinhoejj"},"content":"            throw new ParseException(DeleteMultipleCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"Justinhoejj"},"content":"        return indexOfStartOfSubstring;","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Justinhoejj":31,"yucheng11122017":3,"leezhixuan":10,"-":121}},{"path":"src/main/java/seedu/address/logic/parser/PinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code PinCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"public class PinCommandParser implements Parser\u003cPinCommand\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code PinCommand}","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"     * and returns a {@code PinCommand} object for execution.","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code PinCommand} which pins a contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"    public PinCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"            return new PinCommand(index);","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":32}},{"path":"src/main/java/seedu/address/logic/parser/TagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code TagCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code TagCommand}","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"     * and returns a {@code TagCommand} object for execution.","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code TagCommand} which tags a contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"    public TagCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"        Index index;","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"        try {","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        parseTagsForAppend(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"        assert editPersonDescriptor.isAnyFieldEdited();","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        return new TagCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForAppend(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        return Optional.of(ParserUtil.parseTags(tags));","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":52,"yucheng11122017":6}},{"path":"src/main/java/seedu/address/logic/parser/UnpinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code UnpinCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"public class UnpinCommandParser implements Parser\u003cUnpinCommand\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code UnpinCommand}","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"     * and returns a {@code UnpinCommand} object for execution.","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code UnpinCommand} which unpins a contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"    public UnpinCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"            return new UnpinCommand(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"yucheng11122017":31}},{"path":"src/main/java/seedu/address/logic/parser/UntagCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_NOT_REMOVED;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":" * Parses input arguments and creates a new {@code UntagCommand} object.","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code UntagCommand}","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * and returns an {@code UntagCommand} object for execution.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"     * @param args user input.","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code UntagCommand} which untags a contact at the specific index.","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    public UntagCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);","lastModifiedDate":"2021-10-07"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        Index index;","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        try {","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(MESSAGE_NOT_REMOVED);","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        return new UntagCommand(index, editPersonDescriptor);","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     * @throws ParseException if tags contain empty string.","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-10-07"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-10-07"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"            return Optional.empty();","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        if (tags.contains(\"\")) {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"            throw new ParseException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        return Optional.of(ParserUtil.parseTags(tags));","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":61,"cookiedan42":1,"yucheng11122017":9}},{"path":"src/main/java/seedu/address/model/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.model;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"public class CommandHistory {","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"    private static final List\u003cString\u003e commandHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"    private static final int DEFAULT_INDEX \u003d -1;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"    private static final String EMPTY_COMMAND \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    private static int index \u003d DEFAULT_INDEX;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"    private CommandHistory() {}","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"     * Adds the last {@code Command} executed into the command history.","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"     * @param command Last command executed","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"    public static void addCommand(String command) {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        commandHistory.add(0, command);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"        logger.info(\"[HISTORY] Added command to history\");","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"        resetIndex();","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"     * Returns the previous {@code Command} executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"     * @return Previous command executed","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    public static String getPreviousCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        logger.info(\"[HISTORY] Toggle previous command in history\");","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"        if (hasNoHistory()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"            return EMPTY_COMMAND;","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        if (hasPreviousCommand()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"            index++;","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        return commandHistory.get(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"     * Returns the next {@code Command} executed.","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"     * @return Next command executed","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"    public static String getNextCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"        logger.info(\"[HISTORY] Toggle next command in history\");","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"        if (hasNoHistory()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"            return EMPTY_COMMAND;","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        if (!hasNextCommand()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"            resetIndex();","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"            return EMPTY_COMMAND;","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"        index--;","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"        return commandHistory.get(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"    public static void clear() {","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        commandHistory.clear();","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"    private static void resetIndex() {","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        index \u003d DEFAULT_INDEX;","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"    private static boolean hasPreviousCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"        return index + 1 \u003c commandHistory.size();","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"    private static boolean hasNextCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        return index - 1 \u003e DEFAULT_INDEX;","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"    private static boolean hasNoHistory() {","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"        return commandHistory.isEmpty();","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"Jiwei99":84}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"     * Sets the {@code Prefix} store value.","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"     * @param prefixes Collection of {@code Prefix} to keep track of","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"    void setPrefixes(Collection\u003cPrefix\u003e prefixes);","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"     * Returns the stored Collection of prefixes as a Set.","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"     * @return Set of Prefixes","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"    Set\u003cPrefix\u003e getPrefixes();","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"Justinhoejj"},"content":"    /** Returns an unmodifiable view of person sorted by with upcoming birthday at the top list */","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"    ObservableList\u003cPerson\u003e getBirthdayReminderList();","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"    /** Removes all entries from Birthday Reminder List*/","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"    void clearBirthdayReminderList();","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"cookiedan42":18,"Justinhoejj":5,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.time.MonthDay;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.util.PersonBirthdayComparator;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    private Set\u003cPrefix\u003e prefixStore;","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"    private final ObservableList\u003cPerson\u003e birthdayReminders;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        this.prefixStore \u003d Set.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"        this.birthdayReminders \u003d generateBirthdayReminderList(addressBook);","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminders.remove(target);","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"Justinhoejj"},"content":"        addToBirthdayReminderList(person);","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"        // Insert edited person in correct order","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminders.remove(target);","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"        addToBirthdayReminderList(editedPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":152,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"cookiedan42"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Prefix Set Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"cookiedan42"},"content":"    public void setPrefixes(Collection\u003cPrefix\u003e prefixes) {","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"cookiedan42"},"content":"        this.prefixStore \u003d Set.copyOf(prefixes);","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"cookiedan42"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"cookiedan42"},"content":"    public Set\u003cPrefix\u003e getPrefixes() {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"cookiedan42"},"content":"        return Set.copyOf(this.prefixStore);","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"Justinhoejj"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Birthday Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"Justinhoejj"},"content":"    private static ObservableList\u003cPerson\u003e generateBirthdayReminderList(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"Justinhoejj"},"content":"        // Retrieves birthdays that have yet to pass","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"        CompletableFuture\u003cStream\u003cPerson\u003e\u003e beforeCurrentDay \u003d CompletableFuture.supplyAsync(() -\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"Justinhoejj"},"content":"            addressBook","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"Justinhoejj"},"content":"                .getPersonList()","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"Justinhoejj"},"content":"                .stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"Justinhoejj"},"content":"                .filter(p -\u003e p.getBirthday().isPresent() \u0026\u0026 !haveBirthdayAfterCurrentDay(p))","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"Justinhoejj"},"content":"                .sorted(new PersonBirthdayComparator())","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"Justinhoejj"},"content":"        );","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"Justinhoejj"},"content":"        // Retrieves birthdays that have passed","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"Justinhoejj"},"content":"        CompletableFuture\u003cStream\u003cPerson\u003e\u003e currentDayOnwards \u003d CompletableFuture.supplyAsync(() -\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"Justinhoejj"},"content":"            addressBook","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"Justinhoejj"},"content":"                .getPersonList()","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"Justinhoejj"},"content":"                .stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"Justinhoejj"},"content":"                .filter(p -\u003e p.getBirthday().isPresent() \u0026\u0026 haveBirthdayAfterCurrentDay(p))","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"Justinhoejj"},"content":"                .sorted(new PersonBirthdayComparator())","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"Justinhoejj"},"content":"        );","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"Justinhoejj"},"content":"        Stream\u003cPerson\u003e concatStream \u003d Stream.concat(beforeCurrentDay.join(), currentDayOnwards.join());","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"Justinhoejj"},"content":"        return concatStream.collect(Collectors.toCollection(FXCollections::observableArrayList));","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":188,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":189,"author":{"gitId":"Justinhoejj"},"content":"    private static boolean haveBirthdayAfterCurrentDay(Person p) {","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e possibleBirthday \u003d p.getBirthday();","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"Justinhoejj"},"content":"        return possibleBirthday","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"Justinhoejj"},"content":"            .map(ModelManager::isAfterCurrentMonthday)","lastModifiedDate":"2021-10-28"},{"lineNumber":193,"author":{"gitId":"Justinhoejj"},"content":"            .orElse(false);","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":195,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"Justinhoejj"},"content":"    private static boolean isAfterCurrentMonthday(Birthday birthday) {","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"Justinhoejj"},"content":"        requireNonNull(birthday);","lastModifiedDate":"2021-10-22"},{"lineNumber":198,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay currentMonthDay \u003d MonthDay.now();","lastModifiedDate":"2021-10-22"},{"lineNumber":199,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay birthdateInMonthDay \u003d MonthDay.from((birthday.birthdate));","lastModifiedDate":"2021-10-22"},{"lineNumber":200,"author":{"gitId":"Justinhoejj"},"content":"        return currentMonthDay.isAfter(birthdateInMonthDay);","lastModifiedDate":"2021-10-22"},{"lineNumber":201,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":202,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":203,"author":{"gitId":"Justinhoejj"},"content":"    private void addToBirthdayReminderList(Person personToAdd) {","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminders.clear();","lastModifiedDate":"2021-10-29"},{"lineNumber":205,"author":{"gitId":"Justinhoejj"},"content":"        ObservableList\u003cPerson\u003e updatedList \u003d generateBirthdayReminderList(this.addressBook);","lastModifiedDate":"2021-10-29"},{"lineNumber":206,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminders.addAll(updatedList);","lastModifiedDate":"2021-10-29"},{"lineNumber":207,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":210,"author":{"gitId":"Justinhoejj"},"content":"    public ObservableList\u003cPerson\u003e getBirthdayReminderList() {","lastModifiedDate":"2021-10-19"},{"lineNumber":211,"author":{"gitId":"Justinhoejj"},"content":"        return new FilteredList\u003c\u003e(birthdayReminders);","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":215,"author":{"gitId":"Justinhoejj"},"content":"    public void clearBirthdayReminderList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminders.clear();","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":235,"author":{"gitId":"cookiedan42"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"cookiedan42"},"content":"                \u0026\u0026 prefixStore.equals(other.prefixStore)","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"Justinhoejj"},"content":"                \u0026\u0026 birthdayReminders.equals(other.birthdayReminders);","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cookiedan42":19,"Justinhoejj":72,"-":149}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"CONNECTIONS.json\");","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yucheng11122017":1,"-":86}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"     * otherwize \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if input is valid address.","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * @param test input that is to be checked if it is a valid address.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid address.","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":11,"-":55}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-08"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":" * Represents a Person\u0027s birthday in the address book.","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidFormat(String)}","lastModifiedDate":"2021-10-08"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"public class Birthday {","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Birthdays should come in the form of ddMMyyyy\";","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"    public static final String MESSAGE_BIRTHDAY_IN_FUTURE \u003d \"Birthday should not be a future date\";","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"Birthday is not a valid date. \" + MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_INVALID_YEAR_0000 \u003d \"Year 0000 does not exist.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}\";","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    private static final DateTimeFormatter BIRTHDATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"ddMMuuuu\");","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    public final LocalDate birthdate;","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"     * Constructs an {@code Birthday}.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"     * @param birthdate A valid date value.","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"    public Birthday(String birthdate) {","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        requireNonNull(birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(isValidFormat(birthdate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(isValidDate(birthdate), MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        checkArgument(!isFutureDate(birthdate), MESSAGE_BIRTHDAY_IN_FUTURE);","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        checkArgument(!isYear0000(birthdate), MESSAGE_INVALID_YEAR_0000);","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"        this.birthdate \u003d LocalDate.parse(birthdate, BIRTHDATE_FORMATTER);","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is a date in the future.","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"     * @param birthday input that is to be checked if it is a future date.","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a date in the future.","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isFutureDate(String birthday) {","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"        LocalDate givenDate \u003d LocalDate.parse(birthday, BIRTHDATE_FORMATTER);","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"        return givenDate.isAfter(LocalDate.now());","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid birthday format.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     * @param birthday input that is to be checked if it is a valid birthday format.","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid birthday format.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isValidFormat(String birthday) {","lastModifiedDate":"2021-10-08"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        return birthday.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid date.","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     * @param birthday input that is to be checked if it is a valid date.","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid date.","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isValidDate(String birthday) {","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"        try {","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"            LocalDate.parse(birthday, BIRTHDATE_FORMATTER.withResolverStyle(ResolverStyle.STRICT));","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"            return true;","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"            return false;","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in year 0000 (which does not exist).","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"     * @param birthday input that is to be checked if it is year 0000.","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is in year 0000.","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"    public static boolean isYear0000(String birthday) {","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"        String yearString \u003d birthday.substring(birthday.length() - 4);","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"        return yearString.equals(\"0000\");","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    public String toString() {","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"Justinhoejj"},"content":"        return BIRTHDATE_FORMATTER.format(this.birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-07"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-07"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"                || (other instanceof Birthday // instanceof handles nulls","lastModifiedDate":"2021-10-07"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"                \u0026\u0026 birthdate.equals(((Birthday) other).birthdate)); // state check","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":104,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"     * Returns string for Ui display.","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"     * @return format for Ui display as dd MMM yyyy.","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"    public String display() {","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"        return DateTimeFormatter.ofPattern(\"dd MMM yyyy\").format(this.birthdate);","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Justinhoejj":42,"yucheng11122017":35,"leezhixuan":35}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid email.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * @param test input that is to be checked if it is a valid email.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid email.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":11,"-":69}},{"path":"src/main/java/seedu/address/model/person/FindAnyPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":" * Tests that a {@code Person}\u0027s {@code Name} OR {@code Tag} matches ANY of the keywords given.","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"    private final List\u003cName\u003e nameList;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    private final List\u003cTag\u003e tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"    private final boolean isCaseSensitive;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a FindAnyPredicate.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * @param nameList refers to the list of Names to be searched for.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     * @param tagList refers to the list of Tags to be searched for.","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"    public FindAnyPredicate(List\u003cName\u003e nameList, List\u003cTag\u003e tagList, boolean isCaseSensitive) {","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"        this.nameList \u003d nameList;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"        this.isCaseSensitive \u003d isCaseSensitive;","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     * Tests if {@code person} fulfills the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     * @param person person that is to be test.","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * @return if person fulfills the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"        Tag[] arrayTags \u003d new Tag[person.getTags().toArray().length];","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        if (!nameList.isEmpty()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"            return nameList.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"                    .anyMatch(name -\u003e StringUtil.isContainsWordIgnoreCase(person.getName().fullName, name.fullName))","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"                            || tagList.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"                            .anyMatch(tag -\u003e Arrays.stream(person.getTags().toArray(arrayTags))","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"                                    .anyMatch(personTag -\u003e personTag.compareTag(tag, isCaseSensitive)));","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"            return tagList.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"                            .anyMatch(tag -\u003e Arrays.stream(person.getTags().toArray(arrayTags))","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"                                    .anyMatch(personTag -\u003e personTag.compareTag(tag, isCaseSensitive)));","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"                || (other instanceof FindAnyPredicate) // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 (nameList.equals(((FindAnyPredicate) other).nameList)","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 tagList.equals(((FindAnyPredicate) other).tagList)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":16,"leezhixuan":50}},{"path":"src/main/java/seedu/address/model/person/FindPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":" * Tests that a {@code Person}\u0027s {@code Name} AND {@code Tag} matches ALL of the keywords given.","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"public class FindPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    private final List\u003cName\u003e nameList;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"    private final List\u003cTag\u003e tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"    private final boolean isCaseSensitive;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a FindPredicate.","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     * @param nameList refers to the list of Names to be searched for.","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * @param tagList refers to the list of Tags to be searched for.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"    public FindPredicate(List\u003cName\u003e nameList, List\u003cTag\u003e tagList, boolean isCaseSensitive) {","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"        this.nameList \u003d nameList;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"        this.isCaseSensitive \u003d isCaseSensitive;","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * Tests if {@code person} fulfills the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * @param person person that is to be test.","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * @return if person fulfills the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        Tag[] arrayTags \u003d new Tag[person.getTags().toArray().length];","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"        return nameList.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"                .allMatch(name -\u003e StringUtil.isContainsWordIgnoreCase(person.getName().fullName, name.fullName))","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 tagList.stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"                .allMatch(tag -\u003e Arrays.stream(person.getTags().toArray(arrayTags))","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"                        .anyMatch(personTag-\u003e personTag.compareTag(tag, isCaseSensitive)));","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"                || (other instanceof FindPredicate) // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 (nameList.equals(((FindPredicate) other).nameList)","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 tagList.equals(((FindPredicate) other).tagList)); // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":16,"leezhixuan":45}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}.","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid name.","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     * @param test input that is to be checked if it is a valid name.","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid name.","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":11,"-":57}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     * Constructs a {@code NameContainsKeywordsPredicate} which checks if a contact\u0027s name contains these keywords.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"     * @param keywords to be checked against the person\u0027s name.","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * Tests if {@code person} name contains keywords.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     * @param person person that is to be test.","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     * @return if person fulfills the criteria.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"                .anyMatch(keyword -\u003e StringUtil.isContainsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"yucheng11122017":18,"-":30}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"public class Person implements Comparable\u003cPerson\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"    private final Birthday birthday;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"    private final Pin pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a person.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"    public Person(Name name, Phone phone, Email email, Address address,","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"                  Set\u003cTag\u003e tags, Birthday birthday, Pin pin) {","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        requireAllNonNull(name, phone, email, address, tags, pin);","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"        this.pin \u003d pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"    public String getFullName() {","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"        return name.fullName;","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    public String getPhoneNumber() {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"        return phone.value;","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"    public Pin getPin() {","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        return pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"    public boolean isPinned() {","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        return pin.isPinned();","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"    public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2021-10-09"},{"lineNumber":87,"author":{"gitId":"Justinhoejj"},"content":"        return Optional.ofNullable(this.birthday);","lastModifiedDate":"2021-10-09"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"     * Returns true if both persons have the same phone number.","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"     * @param otherPerson the person to be tested against.","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"     * @return if {@code otherPerson} is the same as {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone());","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday())","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 otherPerson.getPin().equals(getPin());","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"    public int compareTo(Person otherPerson) {","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"        if (otherPerson.isPinned() \u0026\u0026 this.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"            return 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"        if (otherPerson.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"            return 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"yucheng11122017"},"content":"        if (this.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"yucheng11122017"},"content":"            return -1;","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"yucheng11122017"},"content":"        return 0;","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"        return Objects.hash(name, phone, email, address, tags, birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":166,"author":{"gitId":"Justinhoejj"},"content":"        if (getBirthday().isPresent()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"            builder.append(\"; Birthday: \")","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"                    .append(getBirthday().get());","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Justinhoejj":15,"yucheng11122017":31,"leezhixuan":9,"-":118}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid phone.","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"     * @param test input that is to be checked if it is a valid phone.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid phone.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":10,"-":52}},{"path":"src/main/java/seedu/address/model/person/Pin.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"/** Represents a Person\u0027s pin status. */","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"public class Pin {","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Pin status should be either true or false\";","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"    public static final String PINNED_STRING \u003d \"true\";","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"    public static final String NOT_PINNED_STRING \u003d \"false\";","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"    private final boolean isPinned;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"     * Constructs a pin.","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"     * @param isPinned if pinned or not.","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    public Pin(boolean isPinned) {","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"     * Constructs a pin based on the pin status.","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * Used for {@code JsonAdaptedPerson}.","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * @param pinString string indicating if pinned or not.","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public Pin(String pinString) {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"        assert(isValidPinStatus(pinString)) : \"Invalid pin status used\";","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"        isPinned \u003d pinString.equals(PINNED_STRING);","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    public boolean isPinned() {","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        return isPinned;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if given string is in valid pin status.","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"     * Used for {@code JsonAdaptedPerson}.","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"     * @param pinStatus input that is to be checked if it is a valid pin status.","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     * @return if a given string is a valid pin status.","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    public static boolean isValidPinStatus(String pinStatus) {","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"        return pinStatus.equals(PINNED_STRING) || pinStatus.equals(NOT_PINNED_STRING);","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        if (!(other instanceof Pin)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"            return false;","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        Pin otherPin \u003d (Pin) other;","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"        return otherPin.isPinned \u003d\u003d this.isPinned;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"     * Returns a pin, whose pin status is opposite of current pin status.","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"     * Eg. If {@this} {@code isPinned} is {@code false}, will return a pin whose {@code isPinned} is {@code true}.","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"     * @return pin whose pin status is opposite of current pin status.","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    public Pin togglePin() {","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        return new Pin(!isPinned);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    public String toString() {","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        return isPinned","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"                ? PINNED_STRING","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"                : NOT_PINNED_STRING;","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":77}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        internalList.sort(Person::compareTo);","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        internalList.sort(Person::compareTo);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"        internalList.sort(Person::compareTo);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        internalList.sort(Person::compareTo);","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"     * Checks if {@code other} is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"     * @param other the object to check if it is equal to {@code this}.","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"     * @return {@code boolean} indicating if it is equal.","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yucheng11122017":10,"-":136}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"        super(\"Operation would result in duplicate contacts\");","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"yucheng11122017":1,"-":10}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"    public static final int MAX_TAG_LENGTH \u003d 60;","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MESSAGE_TAG_LENGTH_EXCEEDED \u003d \"Tag length should be not more than \"","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"            + MAX_TAG_LENGTH + \" characters\";","lastModifiedDate":"2021-11-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 Tag.isWithinCharLimit(test);","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"     * Returns true if a given string is within the character limit.","lastModifiedDate":"2021-11-04"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"    public static boolean isWithinCharLimit(String trimmedTag) {","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"        return trimmedTag.length() \u003c\u003d MAX_TAG_LENGTH;","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"     * Compares this tag with other tag with case sensitivity and case insensitivity","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"     * @param otherTag other tag to be compared to this tag","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * @param isCaseSensitive if case sensitivity is wanted","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     * @return boolean that indicates if this and other tag are equal","lastModifiedDate":"2021-10-07"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    public boolean compareTag(Tag otherTag, boolean isCaseSensitive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        if (isCaseSensitive) {","lastModifiedDate":"2021-10-07"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"            return this.equals(otherTag);","lastModifiedDate":"2021-10-07"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"            return this.tagName.equalsIgnoreCase(otherTag.tagName);","lastModifiedDate":"2021-10-07"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"            return true;","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        if (other instanceof Tag) {","lastModifiedDate":"2021-10-07"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"            Tag otherTag \u003d (Tag) other;","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"            return tagName.equals(otherTag.tagName);","lastModifiedDate":"2021-10-07"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        } else {","lastModifiedDate":"2021-10-07"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"            return false;","lastModifiedDate":"2021-10-07"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Justinhoejj":3,"yucheng11122017":30,"-":52}},{"path":"src/main/java/seedu/address/model/util/PersonBirthdayComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.model.util;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import java.time.MonthDay;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":" * Comparator for comparing people by birthday. When used with sorter, person with earlier birthdays comes","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":" * before person with later birthdays.","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"public class PersonBirthdayComparator implements Comparator\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    public int compare(Person o1, Person o2) {","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e o1Birthday \u003d o1.getBirthday();","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e o2Birthday \u003d o2.getBirthday();","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"        assert (o1Birthday.isPresent() \u0026\u0026 o2Birthday.isPresent());","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay md1 \u003d MonthDay.from(o1Birthday.get().birthdate);","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay md2 \u003d MonthDay.from(o2Birthday.get().birthdate);","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"        return md1.compareTo(md2);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Justinhoejj":24}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"friends\"), new Birthday(\"01021997\"), new Pin(false)),","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"colleagues\", \"friends\"), null, new Pin(false)),","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"neighbours\"), null, new Pin(false)),","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"family\"), null, new Pin(false)),","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"classmates\"), new Birthday(\"20111998\"), new Pin(false)),","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"                getTagSet(\"colleagues\"), new Birthday(\"15092001\"), new Pin(false))","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"yucheng11122017":7,"leezhixuan":1,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"    private final String birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"    private final String pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"            @JsonProperty(\"birthday\") String birthday, @JsonProperty(\"pin\") String pin) {","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        this.pin \u003d pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"        birthday \u003d source.getBirthday().map(Birthday::toString).orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        pin \u003d source.getPin().toString();","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"            Tag currentTag \u003d tag.toModelType();","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"            personTags.add(currentTag);","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"        if (pin \u003d\u003d null) {","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Pin.class.getSimpleName()));","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"        if (!Pin.isValidPinStatus(pin)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(Pin.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"        final Pin modelPin \u003d new Pin(pin);","lastModifiedDate":"2021-11-08"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2021-10-07"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"            return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, null, modelPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"        }","lastModifiedDate":"2021-10-07"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"        if (!Birthday.isValidFormat(birthday)) {","lastModifiedDate":"2021-10-08"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-11-04"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"        if (!Birthday.isValidDate(birthday)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-11-04"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":137,"author":{"gitId":"yucheng11122017"},"content":"        if (Birthday.isFutureDate(birthday)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-11-04"},{"lineNumber":139,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":140,"author":{"gitId":"yucheng11122017"},"content":"        if (Birthday.isYear0000(birthday)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":141,"author":{"gitId":"yucheng11122017"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":144,"author":{"gitId":"yucheng11122017"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelBirthday, modelPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":4,"yucheng11122017":35,"leezhixuan":7,"-":103}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-11-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"     * @throws IllegalValueException if tagName is not valid.","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2021-11-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"yucheng11122017":1,"-":46}},{"path":"src/main/java/seedu/address/ui/BirthdayReminderCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import java.time.MonthDay;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import java.time.Year;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import java.time.YearMonth;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"public class BirthdayReminderCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"    private static final String FXML \u003d \"BirthdayReminderListCard.fxml\";","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"    private static final String MONTH_DAY_STRING_FORMAT \u003d \"dd MMM\";","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"    private static final String BIRTHDAY_MESSAGE_DEFAULT \u003d \"Turns %d on %s!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    private static final String BIRTHDAY_MESSAGE_THIS_WEEK \u003d \"Turns %d in %d days on %s!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    private static final String BIRTHDAY_MESSAGE_TODAY \u003d \"Turns %d TODAY!\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    private static final String WELL_WISHES_PROMPT_MESSAGE \u003d \"Send your well wishes to %s.\";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"    private static final String STYLE_CARD_BIRTHDAY_TODAY \u003d \"-fx-background-color: #6F9C51; \"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"            + \"-fx-border-width: 0.5px; \"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"            + \"-fx-border-color: #1d1d1d\";","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"    private static final String STYLE_CARD_BIRTHDAY_THIS_WEEK \u003d \"-fx-background-color: #345597; \"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"            + \"-fx-border-width: 0.5px; \"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"            + \"-fx-border-color: #1d1d1d\";","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"     *","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"    public final Person person;","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"    @FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    private Label name;","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    @FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"    private Label reminderMessage;","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"    @FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"    private Label wellWishesPrompt;","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    public BirthdayReminderCard(Person person) {","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"        super(FXML);","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"        name.setText(person.getFullName());","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e possibleBirthday \u003d person.getBirthday();","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"        assert possibleBirthday.isPresent();","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"        Birthday birthday \u003d possibleBirthday.orElse(null);","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"        String phoneNumber \u003d person.getPhoneNumber();","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"        reminderMessage.setText(generateBirthdayReminderMessage(birthday));","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"        wellWishesPrompt.setText(generateSendWellWishesPrompt(phoneNumber));","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    private String generateBirthdayReminderMessage(Birthday birthday) {","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"        assert birthday !\u003d null;","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"        LocalDate birthdate \u003d birthday.birthdate;","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay birthMonthDay \u003d accountForLeapDay(MonthDay.from(birthdate));","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"        String birthMonthDayAsString \u003d birthMonthDay.format(DateTimeFormatter.ofPattern(MONTH_DAY_STRING_FORMAT));","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"        Year birthYear \u003d Year.from(birthdate);","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"        LocalDate birthdateInCurrentYear \u003d birthMonthDay.atYear(YearMonth.now().getYear());","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"        long age \u003d ChronoUnit.YEARS.between(birthYear, Year.now());","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"        long daysToBirthday \u003d ChronoUnit.DAYS.between(LocalDate.now(), birthdateInCurrentYear);","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"        if (daysToBirthday \u003d\u003d 0) {","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"            cardPane.setStyle(STYLE_CARD_BIRTHDAY_TODAY);","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"            return String.format(BIRTHDAY_MESSAGE_TODAY, age);","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"Justinhoejj"},"content":"        if (daysToBirthday \u003e 0 \u0026\u0026 daysToBirthday \u003c\u003d 7) {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"Justinhoejj"},"content":"            cardPane.setStyle(STYLE_CARD_BIRTHDAY_THIS_WEEK);","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"Justinhoejj"},"content":"            return String.format(BIRTHDAY_MESSAGE_THIS_WEEK, age, daysToBirthday, birthMonthDayAsString);","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"Justinhoejj"},"content":"        if (daysToBirthday \u003c 0) {","lastModifiedDate":"2021-11-06"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"            // birthday has passed increment age for displaying next year\u0027s age","lastModifiedDate":"2021-11-06"},{"lineNumber":87,"author":{"gitId":"Justinhoejj"},"content":"            return String.format(BIRTHDAY_MESSAGE_DEFAULT, age + 1, birthMonthDayAsString);","lastModifiedDate":"2021-11-06"},{"lineNumber":88,"author":{"gitId":"Justinhoejj"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":89,"author":{"gitId":"Justinhoejj"},"content":"            return String.format(BIRTHDAY_MESSAGE_DEFAULT, age, birthMonthDayAsString);","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":92,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"Justinhoejj"},"content":"    private MonthDay accountForLeapDay(MonthDay birthMonthDay) {","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"Justinhoejj"},"content":"        boolean isLeapDay \u003d birthMonthDay.equals(MonthDay.of(2, 29));","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"Justinhoejj"},"content":"        boolean hasPassedThisYear \u003d birthMonthDay.isAfter(MonthDay.now());","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"Justinhoejj"},"content":"        int thisYear \u003d Year.now().getValue();","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"Justinhoejj"},"content":"        if (!hasPassedThisYear \u0026\u0026 isLeapDay \u0026\u0026 !Year.now().isLeap()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"Justinhoejj"},"content":"            // Leap day birthday yet to pass and currently leap year","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"Justinhoejj"},"content":"            return birthMonthDay.withDayOfMonth(28);","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"Justinhoejj"},"content":"        } else if (hasPassedThisYear \u0026\u0026 isLeapDay \u0026\u0026 !Year.of(thisYear + 1).isLeap()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"            // Leap day birthday passed and next year is leap year","lastModifiedDate":"2021-11-03"},{"lineNumber":102,"author":{"gitId":"Justinhoejj"},"content":"            return birthMonthDay.withDayOfMonth(28);","lastModifiedDate":"2021-11-03"},{"lineNumber":103,"author":{"gitId":"Justinhoejj"},"content":"        } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":104,"author":{"gitId":"Justinhoejj"},"content":"            return birthMonthDay;","lastModifiedDate":"2021-11-03"},{"lineNumber":105,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":107,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"    private String generateSendWellWishesPrompt(String phoneNumber) {","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"        return String.format(WELL_WISHES_PROMPT_MESSAGE, phoneNumber);","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"Justinhoejj"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"Justinhoejj"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"Justinhoejj"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"Justinhoejj"},"content":"            return true;","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"Justinhoejj"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"Justinhoejj"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"Justinhoejj"},"content":"            return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"Justinhoejj"},"content":"        // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"Justinhoejj"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"        return person.equals(card.person);","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Justinhoejj":128}},{"path":"src/main/java/seedu/address/ui/BirthdayReminderListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"public class BirthdayReminderListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"    private static final String FXML \u003d \"BirthdayReminderListPanel.fxml\";","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(BirthdayReminderListPanel.class);","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    private ListView\u003cPerson\u003e birthdayReminderListView;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"     * Creates a {@code BirthdayReminderListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    public BirthdayReminderListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"        super(FXML);","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminderListView.setItems(personList);","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminderListView.setCellFactory(listView -\u003e new BirthdayReminderListViewCell());","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"     * Custom {@code ListCell} that displays the birthday reminder for a {@code Person}","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"     * using a {@code BirthdayReminderCard}.","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    class BirthdayReminderListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"        @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"                setText(null);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"            } else {","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"                setGraphic(new BirthdayReminderCard(person).getRoot());","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"            }","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Justinhoejj":46}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.CommandHistory;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"    private final CommandExecutor systemExecutor;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"    public CommandBox(CommandExecutor commandExecutor, CommandExecutor systemExecutor) {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        this.systemExecutor \u003d systemExecutor;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"            CommandHistory.addCommand(commandText);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"     * Handles the keystroke pressed event.","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"    private void handleKeyStroke(KeyEvent event) {","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        if (event.getCode().equals(KeyCode.UP)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"            commandTextField.setText(CommandHistory.getPreviousCommand());","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"            commandTextField.end();","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        } else if (event.getCode().equals(KeyCode.DOWN)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"            commandTextField.setText(CommandHistory.getNextCommand());","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"            commandTextField.end();","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        } else if (event.getCode().equals(KeyCode.ENTER)) {","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"            event.consume();","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"            return;","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"            String commandText \u003d commandTextField.getText();","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"            if (commandText.equals(\"\")) {","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"                event.consume();","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"                return;","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"            try {","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"                systemExecutor.execute(commandText);","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"            } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"                setStyleToIndicateCommandFailure();","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        event.consume();","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"Jiwei99":33,"yucheng11122017":3,"-":84}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103-f09-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Jiwei99":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import java.io.File;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import javafx.stage.FileChooser;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.util.CsvUtil;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    private FileChooser fileChooser;","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    private BirthdayReminderListPanel birthdayReminderListPanel;","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"    @FXML","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"    private StackPane birthdayReminderListPanelPlaceholder;","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        this.fileChooser \u003d new FileChooser();","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        FileChooser.ExtensionFilter filter \u003d new FileChooser.ExtensionFilter(\"csv\", \"*.csv\");","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        fileChooser.getExtensionFilters().addAll(filter);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        fileChooser.setInitialDirectory(new File(\"./\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        fileChooser.setSelectedExtensionFilter(filter);","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand, this::executeSystemCommand);","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminderListPanel \u003d new BirthdayReminderListPanel(logic.getBirthdayReminderList());","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"Justinhoejj"},"content":"        birthdayReminderListPanelPlaceholder.getChildren().add(birthdayReminderListPanel.getRoot());","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":190,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"cookiedan42"},"content":"     * Handles the exporting of mailing list.","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"cookiedan42"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"cookiedan42"},"content":"    private void handleMailingList() throws CommandException {","lastModifiedDate":"2021-11-04"},{"lineNumber":195,"author":{"gitId":"cookiedan42"},"content":"        File file \u003d fileChooser.showSaveDialog(primaryStage);","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":197,"author":{"gitId":"cookiedan42"},"content":"        if (file \u003d\u003d null) {","lastModifiedDate":"2021-11-04"},{"lineNumber":198,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(\"No save location was selected.\");","lastModifiedDate":"2021-11-04"},{"lineNumber":199,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":200,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":201,"author":{"gitId":"cookiedan42"},"content":"        String pathStr \u003d file.getPath();","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"cookiedan42"},"content":"        if (!pathStr.endsWith(\".csv\")) {","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"cookiedan42"},"content":"            pathStr +\u003d \".csv\";","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"cookiedan42"},"content":"        Path path \u003d Path.of(pathStr);","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"cookiedan42"},"content":"        List\u003cPerson\u003e personList \u003d logic.getFilteredPersonList();","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixSet \u003d logic.getPrefixStore();","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"cookiedan42"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"cookiedan42"},"content":"            CsvUtil.modelToCsv(personList, path, prefixSet);","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"cookiedan42"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"cookiedan42"},"content":"            throw new CommandException(\"Writing csv failed: \" + e.getMessage());","lastModifiedDate":"2021-11-04"},{"lineNumber":213,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"cookiedan42"},"content":"            if (commandResult.isChooseFile()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"cookiedan42"},"content":"                handleMailingList();","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"cookiedan42"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":250,"author":{"gitId":"Jiwei99"},"content":"    private CommandResult executeSystemCommand(String commandText) {","lastModifiedDate":"2021-10-27"},{"lineNumber":251,"author":{"gitId":"Jiwei99"},"content":"        CommandResult commandResult \u003d logic.systemExecute(commandText);","lastModifiedDate":"2021-10-27"},{"lineNumber":252,"author":{"gitId":"Jiwei99"},"content":"        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-27"},{"lineNumber":253,"author":{"gitId":"Jiwei99"},"content":"        return commandResult;","lastModifiedDate":"2021-10-27"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Jiwei99":6,"cookiedan42":48,"Justinhoejj":7,"-":194}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"    @FXML","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    private Label birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"        Optional\u003cBirthday\u003e possibleBirthday \u003d person.getBirthday();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"        birthday.setText(possibleBirthday.map(Birthday::display).orElse(\"\"));","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Justinhoejj":4,"leezhixuan":2,"-":77}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"            } else if (!person.isPinned()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"            } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"                setGraphic(new PinnedPersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yucheng11122017":3,"-":47}},{"path":"src/main/java/seedu/address/ui/PinnedPersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"public class PinnedPersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    private static final String FXML \u003d \"PinnedPersonListCard.fxml\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"     *","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    public final Person person;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"    private Label name;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"    private Label id;","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    private Label phone;","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    private Label address;","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    private Label email;","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    private Label birthday;","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    public PinnedPersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"        super(FXML);","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"        person.getTags().stream()","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        Optional\u003cBirthday\u003e possibleBirthday \u003d person.getBirthday();","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        birthday.setText(possibleBirthday.map(Birthday::display).orElse(\"\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"    @Override","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"            return true;","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"        if (!(other instanceof PinnedPersonCard)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"            return false;","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        // state check","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        PinnedPersonCard card \u003d (PinnedPersonCard) other;","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":83}},{"path":"src/main/resources/view/BirthdayReminderListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"            \u003cLabel fx:id\u003d\"reminderMessage\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reminderMessage\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"            \u003cLabel fx:id\u003d\"wellWishesPrompt\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$wellWishesPrompt\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Justinhoejj":26}},{"path":"src/main/resources/view/BirthdayReminderListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"  \u003cListView fx:id\u003d\"birthdayReminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"Justinhoejj":8}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyStroke\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"Jiwei99":1,"-":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"         title\u003d\"CONNECTIONS\" minWidth\u003d\"1000\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\"/\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"                   minHeight\u003d\"140\" prefHeight\u003d\"100\" maxHeight\u003d\"140\"\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\" dividerPositions\u003d\"0.66\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"         \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"360\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"          \u003cVBox fx:id\u003d\"birthdayReminderList\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"550\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"            \u003cStackPane fx:id\u003d\"birthdayReminderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Justinhoejj":11,"-":59}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e","lastModifiedDate":"2021-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"leezhixuan":1,"-":36}},{"path":"src/main/resources/view/PinnedPersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        \u003cImageView\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"          \u003cImage url\u003d\"@/images/pin.png\" requestedHeight\u003d\"20\" requestedWidth\u003d\"20\"/\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":42}},{"path":"src/test/java/seedu/address/commons/util/EditUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"class EditUtilTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"    public void copy_isEqual() {","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor base \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor test \u003d new EditPersonDescriptor(base);","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(base, test);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    public void isAnyFieldEdited_true() {","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"        testTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setTags(testTags);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        editPersonDescriptor.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(editPersonDescriptor.isAnyFieldEdited());","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"    public void isAnyFieldEdited_false() {","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor test \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(test.isAnyFieldEdited());","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    public void equals_emptyDescriptor() {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor left \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor right \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(left, right);","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"    public void equals_filledDescriptor() {","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor left \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor right \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"        left.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"        left.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        left.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"        left.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e leftTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        leftTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"        left.setTags(leftTags);","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"        left.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"        right.setAddress(new Address(VALID_ADDRESS_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"        right.setBirthday(new Birthday(VALID_BIRTHDAY_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"        right.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        right.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e rightTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        rightTags.add(new Tag(VALID_TAG_FRIEND));","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"        right.setTags(rightTags);","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        right.setPhone(new Phone(VALID_PHONE_AMY));","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(left, right);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"cookiedan42":109}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.isContainsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"            -\u003e StringUtil.isContainsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"            -\u003e StringUtil.isContainsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.isContainsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(StringUtil.isContainsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(StringUtil.isContainsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(StringUtil.isContainsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(StringUtil.isContainsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(StringUtil.isContainsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"yucheng11122017":14,"-":129}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"CONNECTIONS.json\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"    public void systemExecute_validCommandWord() {","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        CommandResult result \u003d logic.systemExecute(addCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(AddCommand.COMMAND_EXAMPLE, result.getFeedbackToUser());","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"    public void systemExecute_validCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        String tagCommand \u003d TagCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getZeroBased() + TAG_DESC_STUDENT;","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"        CommandResult result \u003d logic.systemExecute(tagCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(TagCommand.COMMAND_EXAMPLE, result.getFeedbackToUser());","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"    public void systemExecute_invalidCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"        String command \u003d \"addd\";","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"        CommandResult result \u003d logic.systemExecute(command);","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(\"\", result.getFeedbackToUser());","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"    public void systemExecute_invalidCommandWord() {","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"        String command \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"        CommandResult result \u003d logic.systemExecute(command);","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(\"\", result.getFeedbackToUser());","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"    public void getBirthdayReminderList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getBirthdayReminderList().remove(0));","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jiwei99":31,"Justinhoejj":5,"yucheng11122017":1,"leezhixuan":2,"-":160}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import java.util.Collection;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"cookiedan42"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"cookiedan42"},"content":"        public void setPrefixes(Collection\u003cPrefix\u003e prefixes) {","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"cookiedan42"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"cookiedan42"},"content":"        @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"cookiedan42"},"content":"        public Set\u003cPrefix\u003e getPrefixes() {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"cookiedan42"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"Justinhoejj"},"content":"        public ObservableList\u003cPerson\u003e getBirthdayReminderList() {","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"Justinhoejj"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"Justinhoejj"},"content":"        public void clearBirthdayReminderList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"Justinhoejj"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"cookiedan42":14,"Justinhoejj":8,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.clearBirthdayReminderList();","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Justinhoejj":1,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_WIFE \u003d \"wife\";","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_STUDENT \u003d \"student\";","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_TEACHING_ASSISTANT \u003d \"teachingassistant\";","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"    public static final String VALID_TAG_TEACHING_ASSISTANT_CAMEL \u003d \"TeachingAssistant\";","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"05061999\";","lastModifiedDate":"2021-10-08"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"02011988\";","lastModifiedDate":"2021-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_WIFE \u003d \" \" + PREFIX_TAG + VALID_TAG_WIFE;","lastModifiedDate":"2021-10-08"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;","lastModifiedDate":"2021-10-08"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_TEACHING_ASSISTANT \u003d \" \" + PREFIX_TAG + VALID_TAG_TEACHING_ASSISTANT;","lastModifiedDate":"2021-10-08"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"    public static final String TAG_DESC_TEACHING_ASSISTANT_CAMEL \u003d \" \" + PREFIX_TAG","lastModifiedDate":"2021-10-08"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"            + VALID_TAG_TEACHING_ASSISTANT_CAMEL;","lastModifiedDate":"2021-10-08"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"    public static final String INVALID_BIRTHDAY_FORMAT_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"2020-Jan-12\"; // only numbers","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"    public static final String NONEXISTENT_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"50031997\";","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"    public static final String LEAP_DAY_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"29022000\";","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"    public static final EditPersonDescriptor DESC_BOB_NO_BIRTHDAY;","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"    public static final EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"    public static final EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"        DESC_BOB_NO_BIRTHDAY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"Justinhoejj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person between and including given","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"Justinhoejj"},"content":"     * {@code targetIndex} in the {@code model}\u0027s address book.","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"Justinhoejj"},"content":"    public static void showPersonBetweenIndex(Model model, Index startIndex, Index endIndex) {","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(startIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(endIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"Justinhoejj"},"content":"        // Determine persons to display within and including given indexes.","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"Justinhoejj"},"content":"        ArrayList\u003cPerson\u003e personsToDisplay \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"Justinhoejj"},"content":"        for (int i \u003d startIndex.getZeroBased(); i \u003c\u003d endIndex.getZeroBased(); i++) {","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"Justinhoejj"},"content":"            Person person \u003d model.getFilteredPersonList().get(i);","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"Justinhoejj"},"content":"            personsToDisplay.add(person);","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"Justinhoejj"},"content":"        model.updateFilteredPersonList(person -\u003e personsToDisplay.contains(person));","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(endIndex.getOneBased() - startIndex.getOneBased() + 1, model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"cookiedan42":12,"Justinhoejj":21,"leezhixuan":10,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMultipleCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonBetweenIndex;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINETH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_TENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_validIndexEightToElevenUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(INDEX_EIGHTH_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_ELEVENTH_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        Person eighth \u003d model.getFilteredPersonList().get(INDEX_EIGHTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"        Person nineth \u003d model.getFilteredPersonList().get(INDEX_NINETH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"        Person tenth \u003d model.getFilteredPersonList().get(INDEX_TENTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"        Person eleventh \u003d model.getFilteredPersonList().get(INDEX_ELEVENTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"        String expectedMessage \u003d new StringBuilder(DeleteMultipleCommand.MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS)","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", eighth))","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", nineth))","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", tenth))","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"                .append(String.format(\"\\n%1$s\", eleventh))","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"                .toString();","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"Justinhoejj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(eighth);","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(nineth);","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(tenth);","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(eleventh);","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandSuccess(deleteMultipleCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        Index validIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteMultipleCommand \u003d new DeleteMultipleCommand(validIndex, outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandFailure(deleteMultipleCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_validIndexFilteredListDeleteThreePersons_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"        showPersonBetweenIndex(model, INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"        Person personFirstToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"        Person personSecondToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"Justinhoejj"},"content":"        Person personThirdToDelete \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteCommand \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON, INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"Justinhoejj"},"content":"        String expectedMessage \u003d String.format(DeleteMultipleCommand.MESSAGE_DELETE_MULTIPLE_PERSON_SUCCESS","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"                + \"\\n%1$s\\n%2$s\\n%3$s\", personFirstToDelete, personSecondToDelete, personThirdToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"Justinhoejj"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personFirstToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personSecondToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"Justinhoejj"},"content":"        expectedModel.deletePerson(personThirdToDelete);","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"Justinhoejj"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"Justinhoejj"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"Justinhoejj"},"content":"        showPersonBetweenIndex(model, INDEX_FIRST_PERSON, INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"Justinhoejj"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"Justinhoejj"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"Justinhoejj"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"Justinhoejj"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"Justinhoejj"},"content":"    public void equals() {","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteFirstToThird \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteThirdToEighth \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"Justinhoejj"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(deleteFirstToThird.equals(deleteFirstToThird));","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"Justinhoejj"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"Justinhoejj"},"content":"        DeleteMultipleCommand deleteFirstToThirdCopy \u003d new DeleteMultipleCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"Justinhoejj"},"content":"                INDEX_THIRD_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(deleteFirstToThird.equals(deleteFirstToThirdCopy));","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"Justinhoejj"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(1));","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"Justinhoejj"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"Justinhoejj"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(deleteFirstToThird.equals(deleteThirdToEighth));","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"Justinhoejj"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":131}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    public void execute_newPersonSameAsOldPerson_failure() {","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"        Person originalPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2021-11-04"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(originalPerson).build();","lastModifiedDate":"2021-11-04"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2021-11-04"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-11-04"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_NO_CHANGES);","lastModifiedDate":"2021-11-04"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        Person editedPerson \u003d new PersonBuilder().withPin(true).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"    //contains different combinations of having some fields specified","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyNameSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyPhoneSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"        Person editedPerson \u003d personInList.withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyEmailSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"        Person editedPerson \u003d personInList.withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyAddressSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"leezhixuan"},"content":"        Person editedPerson \u003d personInList.withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyOneTagSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"        Person editedPersonOneTag \u003d personInList.withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptorOneTag \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommandOneTag \u003d new EditCommand(indexLastPerson, descriptorOneTag);","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessageOneTag \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPersonOneTag);","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPersonOneTag);","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommandOneTag, model, expectedMessageOneTag, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"    public void execute_multipleTagSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"        Person editedPersonMultipleTags \u003d personInList.withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptorMultipleTags \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommandMultipleTags \u003d new EditCommand(indexLastPerson, descriptorMultipleTags);","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessageMultipleTags \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"                editedPersonMultipleTags);","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPersonMultipleTags);","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommandMultipleTags, model, expectedMessageMultipleTags, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"leezhixuan"},"content":"    public void execute_onlyBirthdaySpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"leezhixuan"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"leezhixuan"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"leezhixuan"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"leezhixuan"},"content":"        Person editedPerson \u003d personInList.withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":198,"author":{"gitId":"leezhixuan"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"leezhixuan"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":202,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":203,"author":{"gitId":"leezhixuan"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":209,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":232,"author":{"gitId":"cookiedan42"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {","lastModifiedDate":"2021-11-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":236,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_NO_CHANGES);","lastModifiedDate":"2021-11-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":288,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":289,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"cookiedan42":14,"yucheng11122017":1,"leezhixuan":148,"-":165}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cookiedan42":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/FindAnyCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH_NO_BIRTHDAY;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(CARL.getFullName()));","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FOOTBALL\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e secondNameList \u003d List.of(new Name(ELLE.getFullName()));","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e secondTagList \u003d List.of(new Tag(\"colleaGues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate secondPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(secondNameList, secondTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate secondPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(secondNameList, secondTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findFirstCommandCaseInsensitive \u003d new FindAnyCommand(firstPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findSecondCommandCaseInsensitive \u003d new FindAnyCommand(secondPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findFirstCommandCaseSensitive \u003d new FindAnyCommand(firstPredicateCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findSecondCommandCaseSensitive \u003d new FindAnyCommand(secondPredicateCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseInsensitive.equals(findFirstCommandCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseSensitive.equals(findFirstCommandCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findFirstCommandCaseInsensitiveCopy \u003d new FindAnyCommand(firstPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseInsensitiveCopy.equals(findFirstCommandCaseInsensitiveCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand findFirstCommandCaseSensitiveCopy \u003d new FindAnyCommand(firstPredicateCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseSensitiveCopy.equals(findFirstCommandCaseSensitiveCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseSensitive.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseSensitive.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(findSecondCommandCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseSensitive.equals(findSecondCommandCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentName_noPersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"zeke\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentName_onePersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentName_twoPersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"hannah\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(HANNAH, HANNAH_NO_BIRTHDAY), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"    public void execute_twoExistentName_twoPersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"alice\"), new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentTagCaseInsensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"Chef\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentTagCaseSensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"CHEF\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseInsensitive_onePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"Football\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseSensitive_onePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"football\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseInsensitive_multiplePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friENds\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseSensitive_zeroPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friENds\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findAnyPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"leezhixuan"},"content":"    public void execute_multipleExistentTagCaseInsensitive_multiplePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"owesmoney\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"leezhixuan"},"content":"    public void execute_multipleExistentTagCaseSensitive_multiplePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"owesMoney\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findPredicate \u003d new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(findPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nameAndTagCaseInsensitive_onePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":228,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"best\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FOOTBALL\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":232,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nameAndTagCaseSensitive_onePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"best\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"football\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":248,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"leezhixuan"},"content":"    public void execute_namesAndTagsCaseSensitive_multiplePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-26"},{"lineNumber":253,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"carl\"), new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FRIENDS\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":258,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":259,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON, CARL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":260,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":261,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":263,"author":{"gitId":"leezhixuan"},"content":"    public void execute_namesAndTagsCaseInsensitive_multiplePersonsFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":264,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);","lastModifiedDate":"2021-10-21"},{"lineNumber":265,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"cArL\"), new Name(\"bEnsOn\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":266,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friENDs\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":267,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":268,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d new FindAnyCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":270,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":271,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":273,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"leezhixuan":273}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH_NO_BIRTHDAY;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(CARL.getFullName()));","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"football\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e secondNameList \u003d List.of(new Name(ELLE.getFullName()));","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e secondTagList \u003d List.of(new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate firstPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate secondPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(secondNameList, secondTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate firstPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate secondPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(secondNameList, secondTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findFirstCommandCaseInsensitive \u003d new FindCommand(firstPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findSecondCommandCaseInsensitive \u003d new FindCommand(secondPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findFirstCommandCaseSensitive \u003d new FindCommand(firstPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findSecondCommandCaseSensitive \u003d new FindCommand(secondPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseInsensitive.equals(findFirstCommandCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findFirstCommandCaseInsensitiveCopy \u003d new FindCommand(firstPredicateCaseInsensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseInsensitive.equals(findFirstCommandCaseInsensitiveCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        FindCommand findFirstCommandCaseSensitiveCopy \u003d new FindCommand(firstPredicateCaseSensitive);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(findFirstCommandCaseSensitive.equals(findFirstCommandCaseSensitiveCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseInsensitive.equals(findSecondCommandCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(findFirstCommandCaseSensitive.equals(findSecondCommandCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentName_noPersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"zeke\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentName_onePersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentName_twoPersonsFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"hannah\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(HANNAH, HANNAH_NO_BIRTHDAY), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"    public void execute_twoExistentName_noPersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"alice\"), new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentTagCaseInsensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"Chef\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nonExistentTagCaseSensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"Chef\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseInsensitive_onePersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FOOtball\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseSensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"Football\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseInsensitive_multiplePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"leezhixuan"},"content":"    public void execute_oneExistentTagCaseSensitive_noPersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FRIENDS\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":198,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"leezhixuan"},"content":"    public void execute_multipleExistentTagCaseInsensitive_multiplePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"owesmoney\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"leezhixuan"},"content":"    public void execute_multipleExistentTagCaseSensitive_multiplePersonsFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"owesMoney\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(findPredicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nameAndTagCaseSensitive_noPersonFound() {","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"benson\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"FRIENDS\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":229,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":233,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":236,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"leezhixuan"},"content":"    public void execute_nameAndTagCaseInsensitive_onePersonFound() {","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"leezhixuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"bEnSon\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"fRiENds\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"leezhixuan"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"leezhixuan"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"leezhixuan":190,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    private final String invalidCommand \u003d \"abc\";","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"    public void execute_noCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(HelpCommand.EMPTY);","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.HELP_MESSAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"    public void execute_moreHelp_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(HelpCommand.MORE);","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE,","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"                true, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"    public void execute_addCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(AddCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(AddCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"    public void execute_editCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(EditCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(EditCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"    public void execute_untagCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(UntagCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(UntagCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"    public void execute_tagCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(TagCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(TagCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"    public void execute_deleteCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(DeleteCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(DeleteCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"                false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    public void execute_deletemCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(DeleteMultipleCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(DeleteMultipleCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"                false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"    public void execute_clearCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ClearCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ClearCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"    public void execute_findCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(FindCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(FindCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"    public void execute_findAnyCommand_success() {","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(FindAnyCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(FindAnyCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"    public void execute_listCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ListCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"    public void execute_exitCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(ExitCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"    public void execute_helpCommand_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(HelpCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.MESSAGE_USAGE, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_pinCommand_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(PinCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(PinCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"                false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_unpinCommand_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(UnpinCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(UnpinCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"                false, false);","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"    public void execute_mailingListCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(MailingListCommand.COMMAND_WORD);","lastModifiedDate":"2021-11-04"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MailingListCommand.MESSAGE_USAGE,","lastModifiedDate":"2021-11-04"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"                false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-11-04"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"    public void execute_invalidCommand_failure() {","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(invalidCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"        String message \u003d MESSAGE_UNKNOWN_COMMAND + \": \" + invalidCommand + \"\\n\" + HelpCommand.HELP_MESSAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(helpCommand, model, message);","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"    public void execute_invalidCommandExtended_failure() {","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"        String commandPhrase \u003d invalidCommand + NAME_DESC_AMY;","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand helpCommand \u003d new HelpCommand(commandPhrase);","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"Jiwei99"},"content":"        String message \u003d MESSAGE_UNKNOWN_COMMAND + \": \" + commandPhrase + \"\\n\" + HelpCommand.HELP_MESSAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(helpCommand, model, message);","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Jiwei99":124,"yucheng11122017":16,"leezhixuan":3,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/MailingListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.MailingListCommandParser;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"class MailingListCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"    public void execute_defaultPrefix_success() throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixes \u003d MailingListCommandParser.DEFAULT_PREFIXES;","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"                new MailingListCommand(prefixes).execute(model),","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"                new CommandResult(MailingListCommand.MESSAGE_SUCCESS, CommandResult.ResultType.EXPORT_CSV));","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"    public void execute_somePrefix_success() throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixes \u003d Set.of(PREFIX_PHONE);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"                new MailingListCommand(prefixes).execute(model),","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"                new CommandResult(MailingListCommand.MESSAGE_SUCCESS, CommandResult.ResultType.EXPORT_CSV));","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_emptyMailingList_failure() {","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"        model.updateFilteredPersonList(person -\u003e false);","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(new MailingListCommand(MailingListCommandParser.DEFAULT_PREFIXES), model,","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"                MailingListCommand.MESSAGE_EMPTY_PERSON_LIST);","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"cookiedan42":39,"yucheng11122017":8}},{"path":"src/test/java/seedu/address/logic/commands/PinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":" * {@code PinCommand}.","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"public class PinCommandTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_EIGHTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PINNED_PERSON_SUCCESS, personToPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d createPinnnedPerson(personToPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexUnfilteredListPersonAlreadyPinned_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PERSON_ALREADY_PINNED_FAILURE, personToPin);","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PINNED_PERSON_SUCCESS, personToPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d createPinnnedPerson(personToPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(expectedModel, INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexFilteredListPersonAlreadyPinned_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PERSON_ALREADY_PINNED_FAILURE, personToPin);","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"    public void equals() {","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinFirstCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinSecondCommand \u003d new PinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommand));","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand pinFirstCommandCopy \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommandCopy));","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(pinSecondCommand));","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"    private Person createPinnnedPerson(Person personToPin) {","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToPin).withPin(true).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"        return pinnedPerson;","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":121}},{"path":"src/test/java/seedu/address/logic/commands/SystemCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"public class SystemCommandTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"    public void execute_addCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(AddCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(AddCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"    public void execute_deleteCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(DeleteCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(DeleteCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"    public void execute_deletemCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(DeleteMultipleCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(DeleteMultipleCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"    public void execute_editCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(EditCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(EditCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"    public void execute_findAnyCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(FindAnyCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(FindAnyCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"    public void execute_findCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(FindCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(FindCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"    public void execute_pinCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(PinCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(PinCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"    public void execute_tagCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(TagCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(TagCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"    public void execute_unpinCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(UnpinCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(UnpinCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"    public void execute_untagCommand_success() {","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(UntagCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(UntagCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"    public void execute_listCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ListCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(ListCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"    public void execute_mailingListCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MailingListCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(MailingListCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-11-04"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"    public void execute_clearCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ClearCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(ClearCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-11-04"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"    public void execute_helpCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.HELP_MESSAGE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(HelpCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-11-04"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"    public void execute_exitCommand_success() {","lastModifiedDate":"2021-11-04"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.COMMAND_EXAMPLE, false, false);","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(ExitCommand.COMMAND_WORD, expectedCommandResult);","lastModifiedDate":"2021-11-04"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"    public void execute_invalidCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(\"\", false, false);","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"        assertSystemCommandSuccess(\"\", expectedCommandResult);","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"    public static void assertSystemCommandSuccess(String commandWord, CommandResult expectedCommandResult) {","lastModifiedDate":"2021-10-28"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"        CommandResult result \u003d SystemCommand.execute(commandWord);","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(expectedCommandResult, result);","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"Jiwei99":110}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-14"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-14"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-14"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-14"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WIFE;","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-14"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-14"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.getNoTagTypicalAddressBook;","lastModifiedDate":"2021-10-14"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.getTaggedTypicalAddressBook;","lastModifiedDate":"2021-10-14"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-14"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-14"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.parser.TagCommandParser;","lastModifiedDate":"2021-10-14"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-14"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-14"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-14"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":" * Integration test with TagCommand, TagCommandParser, Model and CommandResult.","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-14"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"public class TagCommandIntegrationTest {","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();","lastModifiedDate":"2021-10-14"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"    private EditPersonDescriptor descriptorAddFriend \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    private EditPersonDescriptor descriptorAddHusband \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"            .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    private EditPersonDescriptor descriptorAddBoth \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-14"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"    private Model generateNoTagModel() {","lastModifiedDate":"2021-10-14"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"        return new ModelManager(getNoTagTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"    private Model generateDefaultTagModel() {","lastModifiedDate":"2021-10-14"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_WIFE), new UserPrefs());","lastModifiedDate":"2021-10-14"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_singleTagNoExistingUnfilteredList_returnCommandResultEditPersonSuccess() {","lastModifiedDate":"2021-10-15"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"            Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-14"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"            TagCommand tagCommand \u003d","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"                    parser.parse(INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult parserResult \u003d tagCommand.execute(model);","lastModifiedDate":"2021-10-14"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"            Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"            Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"            String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"                    editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult expectedResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"            assertEquals(expectedResult, parserResult);","lastModifiedDate":"2021-10-14"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_singleTagPreExistingTagUnfilteredList_returnCommandResultEditPersonSuccess() {","lastModifiedDate":"2021-10-15"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-14"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"            TagCommand tagCommand \u003d parser.parse(INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG_WIFE","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"                    + \" \" + PREFIX_TAG + VALID_TAG_FRIEND);","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult parserResult \u003d tagCommand.execute(model);","lastModifiedDate":"2021-10-14"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"            Set\u003cTag\u003e overlapTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"            overlapTags.add(new Tag(VALID_TAG_WIFE));","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"            String expectedSuccessMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"                    editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-14"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"            String expectedOverlapMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_EXISTS,","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"                    editedPerson.getName(), overlapTags);","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"            String expectedMessage \u003d expectedSuccessMessage + \"\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"                    + expectedOverlapMessage;","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult expectedResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"            assertEquals(expectedResult, parserResult);","lastModifiedDate":"2021-10-14"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-14"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_multipleTagPreExistingTagUnfilteredList_returnCommandResultEditPersonSuccess() {","lastModifiedDate":"2021-10-15"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-14"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-14"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst)","lastModifiedDate":"2021-10-14"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"                .withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        try {","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"            TagCommand tagCommand \u003d parser.parse(INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_TAG + VALID_TAG_WIFE","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"                    + \" \" + PREFIX_TAG + VALID_TAG_FRIEND + \" \" + PREFIX_TAG + VALID_TAG_HUSBAND);","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult parserCommandResult \u003d tagCommand.execute(model);","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"            Set\u003cTag\u003e overlapTags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"            overlapTags.add(new Tag(VALID_TAG_WIFE));","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"            String expectedSuccessMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"                    editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-14"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"            String expectedOverlapMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_EXISTS,","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"                    editedPerson.getName(), overlapTags);","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"            String expectedMessage \u003d expectedSuccessMessage + \"\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"                    + expectedOverlapMessage;","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-14"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"            CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"            assertEquals(expectedCommandResult, parserCommandResult);","lastModifiedDate":"2021-10-14"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"            assert false;","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"        }","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-14"}],"authorContributionMap":{"cookiedan42":21,"yucheng11122017":110}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WIFE;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalPersons.getNoTagTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalPersons.getTaggedTypicalAddressBook;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"/**","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":" * Contains integration tests (interaction with the Model) and unit tests for TagCommand.","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":" */","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"class TagCommandTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddFriend \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddHusband \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddWife \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddFriendHusband \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    private EditPersonDescriptor descriptorAddFriendWife \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"            .withTags(VALID_TAG_FRIEND, VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"    private Model generateNoTagModel() {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        return new ModelManager(getNoTagTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"     * Generates model with everyone tagged with only {@code VALID_TAG_WIFE}","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"     * @return","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"    private Model generateDefaultTagModel() {","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_WIFE), new UserPrefs());","lastModifiedDate":"2021-10-08"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"    public void execute_singleTagNoExistingUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"    public void execute_singleTagPreExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"    public void execute_multipleTagNoExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriendHusband);","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"    public void execute_multipleTagPreExistingTagUnfilteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst)","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriendHusband);","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":138,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"cookiedan42"},"content":"                new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build());","lastModifiedDate":"2021-10-06"},{"lineNumber":141,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":142,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-08"},{"lineNumber":143,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-08"},{"lineNumber":144,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":145,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-06"},{"lineNumber":147,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":148,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-06"},{"lineNumber":149,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":150,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":151,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"cookiedan42"},"content":"    public void execute_personWithSameExistingTags_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst)","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddWife);","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e overlapTags \u003d Set.of(new Tag(VALID_TAG_WIFE));","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":162,"author":{"gitId":"cookiedan42"},"content":"        String expectedSuccessMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-19"},{"lineNumber":163,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"cookiedan42"},"content":"        String expectedOverlapMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_EXISTS,","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), overlapTags);","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d expectedSuccessMessage + \"\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"cookiedan42"},"content":"                + expectedOverlapMessage;","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"cookiedan42"},"content":"    public void execute_personWithDifferentExistingTags_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst)","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_WIFE, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriendWife);","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e overlapTags \u003d Set.of(new Tag(VALID_TAG_WIFE));","lastModifiedDate":"2021-10-27"},{"lineNumber":185,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"cookiedan42"},"content":"        String expectedSuccessMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-19"},{"lineNumber":187,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-19"},{"lineNumber":188,"author":{"gitId":"cookiedan42"},"content":"        String expectedOverlapMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_EXISTS,","lastModifiedDate":"2021-10-19"},{"lineNumber":189,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), overlapTags);","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d expectedSuccessMessage + \"\\n\"","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"cookiedan42"},"content":"                + expectedOverlapMessage;","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":193,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-19"},{"lineNumber":195,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":197,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":198,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":199,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":200,"author":{"gitId":"cookiedan42"},"content":"    public void execute_personWithIdenticalAddedTags_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":201,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-27"},{"lineNumber":202,"author":{"gitId":"cookiedan42"},"content":"        Person defaultFirst \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-27"},{"lineNumber":203,"author":{"gitId":"cookiedan42"},"content":"        Person editedPerson \u003d new PersonBuilder(defaultFirst).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":204,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":205,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddWife);","lastModifiedDate":"2021-10-27"},{"lineNumber":206,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":207,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cTag\u003e overlapTags \u003d Set.of(new Tag(VALID_TAG_WIFE));","lastModifiedDate":"2021-10-27"},{"lineNumber":208,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":209,"author":{"gitId":"cookiedan42"},"content":"        String expectedSuccessMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_SUCCESS,","lastModifiedDate":"2021-10-27"},{"lineNumber":210,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), editedPerson.getTags());","lastModifiedDate":"2021-10-27"},{"lineNumber":211,"author":{"gitId":"cookiedan42"},"content":"        String expectedOverlapMessage \u003d String.format(TagCommand.MESSAGE_TAG_ADD_EXISTS,","lastModifiedDate":"2021-10-27"},{"lineNumber":212,"author":{"gitId":"cookiedan42"},"content":"                editedPerson.getName(), overlapTags);","lastModifiedDate":"2021-10-27"},{"lineNumber":213,"author":{"gitId":"cookiedan42"},"content":"        String expectedMessage \u003d expectedSuccessMessage + \"\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":214,"author":{"gitId":"cookiedan42"},"content":"                + expectedOverlapMessage;","lastModifiedDate":"2021-10-27"},{"lineNumber":215,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":216,"author":{"gitId":"cookiedan42"},"content":"        Model expectedModel \u003d generateDefaultTagModel();","lastModifiedDate":"2021-10-27"},{"lineNumber":217,"author":{"gitId":"cookiedan42"},"content":"        expectedModel.setPerson(defaultFirst, editedPerson);","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"cookiedan42"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":221,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":222,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":223,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":224,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":225,"author":{"gitId":"cookiedan42"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":226,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":227,"author":{"gitId":"cookiedan42"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-06"},{"lineNumber":228,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":229,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":230,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":231,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":232,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":233,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":234,"author":{"gitId":"cookiedan42"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-06"},{"lineNumber":235,"author":{"gitId":"cookiedan42"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-06"},{"lineNumber":236,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":237,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":238,"author":{"gitId":"cookiedan42"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":239,"author":{"gitId":"cookiedan42"},"content":"        Model model \u003d generateNoTagModel();","lastModifiedDate":"2021-10-06"},{"lineNumber":240,"author":{"gitId":"cookiedan42"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-06"},{"lineNumber":241,"author":{"gitId":"cookiedan42"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":242,"author":{"gitId":"cookiedan42"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-06"},{"lineNumber":243,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-06"},{"lineNumber":244,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":245,"author":{"gitId":"cookiedan42"},"content":"        TagCommand tagCommand \u003d new TagCommand(outOfBoundIndex, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":246,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":247,"author":{"gitId":"cookiedan42"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-06"},{"lineNumber":248,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":249,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":250,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":251,"author":{"gitId":"cookiedan42"},"content":"    public void equals() {","lastModifiedDate":"2021-10-06"},{"lineNumber":252,"author":{"gitId":"cookiedan42"},"content":"        final TagCommand standardCommand \u003d new TagCommand(INDEX_FIRST_PERSON, descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":253,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":254,"author":{"gitId":"cookiedan42"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":255,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(descriptorAddFriend);","lastModifiedDate":"2021-10-06"},{"lineNumber":256,"author":{"gitId":"cookiedan42"},"content":"        TagCommand commandWithSameValues \u003d new TagCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":257,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-06"},{"lineNumber":258,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":259,"author":{"gitId":"cookiedan42"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-06"},{"lineNumber":260,"author":{"gitId":"cookiedan42"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-06"},{"lineNumber":261,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":262,"author":{"gitId":"cookiedan42"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":263,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-06"},{"lineNumber":264,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":265,"author":{"gitId":"cookiedan42"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":266,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-06"},{"lineNumber":267,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":268,"author":{"gitId":"cookiedan42"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":269,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new TagCommand(INDEX_SECOND_PERSON, descriptorAddFriend)));","lastModifiedDate":"2021-10-06"},{"lineNumber":270,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":271,"author":{"gitId":"cookiedan42"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-06"},{"lineNumber":272,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, descriptorAddHusband)));","lastModifiedDate":"2021-10-06"},{"lineNumber":273,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":274,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":274}},{"path":"src/test/java/seedu/address/logic/commands/UnpinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":" * {@code UnpinCommand}.","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"public class UnpinCommandTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        Person personToUnpin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_UNPINNED_PERSON_SUCCESS, personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"        Person unpinnedPerson \u003d createUnpinnnedPerson(personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.setPerson(personToUnpin, unpinnedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexUnfilteredListPersonNotPinned_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"        Person personToUnpin \u003d model.getFilteredPersonList().get(INDEX_EIGHTH_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinCommand \u003d new UnpinCommand(INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_PERSON_NOT_PINNED_FAILURE, personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(unpinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"        Person personToUnpin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_UNPINNED_PERSON_SUCCESS, personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        Person unpinnedPerson \u003d createUnpinnnedPerson(personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"        expectedModel.setPerson(personToUnpin, unpinnedPerson);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_validIndexFilteredListPersonAlreadyPinned_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_EIGHTH_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        Person personToUnpin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_PERSON_NOT_PINNED_FAILURE, personToUnpin);","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, expectedMessage);","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinCommand \u003d new UnpinCommand(outOfBoundIndex);","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"yucheng11122017"},"content":"    public void equals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinFirstCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinSecondCommand \u003d new UnpinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommand));","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand pinFirstCommandCopy \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommandCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(pinFirstCommand.equals(pinSecondCommand));","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"    private Person createUnpinnnedPerson(Person personToUnpin) {","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToUnpin).withPin(false).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"        return pinnedPerson;","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"yucheng11122017":122}},{"path":"src/test/java/seedu/address/logic/commands/UntagCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-09"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-09"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-09"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-09"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;","lastModifiedDate":"2021-10-09"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEACHING_ASSISTANT;","lastModifiedDate":"2021-10-09"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WIFE;","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_REMOVE_TAG_SUCCESS;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.MESSAGE_TAG_NOT_IN_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.getNotFoundTags;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.UntagCommand.getRemovedTags;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-09"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalPersons.getTaggedTypicalAddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-10-09"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-10-09"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-10-09"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-09"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-09"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-09"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"class UntagCommandTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendAndHusbandTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND, VALID_TAG_HUSBAND), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"    private Model generateFriendHusbandTeachingAssistantStudentTaggedModel() {","lastModifiedDate":"2021-10-09"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"        return new ModelManager(getTaggedTypicalAddressBook(VALID_TAG_FRIEND, VALID_TAG_HUSBAND,","lastModifiedDate":"2021-10-09"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"                VALID_TAG_TEACHING_ASSISTANT, VALID_TAG_STUDENT), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"    void execute_singleTagNoRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(firstPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"    void execute_singleTagWithRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(firstPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(firstPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"    void execute_multipleTagsNoRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(secondPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags().build();","lastModifiedDate":"2021-10-09"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":113,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"    void execute_multipleTagsWithRemainingTagsUnfilteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendHusbandTeachingAssistantStudentTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(thirdPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_STUDENT, VALID_TAG_TEACHING_ASSISTANT).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_THIRD_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":130,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":132,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(thirdPerson, editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":133,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":134,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":135,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":136,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":137,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":138,"author":{"gitId":"Jiwei99"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-09"},{"lineNumber":139,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":140,"author":{"gitId":"Jiwei99"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-09"},{"lineNumber":141,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":142,"author":{"gitId":"Jiwei99"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":143,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":144,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":145,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":147,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":148,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":149,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":150,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":152,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-09"},{"lineNumber":153,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-09"},{"lineNumber":154,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":155,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-09"},{"lineNumber":156,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":157,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":158,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"Jiwei99"},"content":"    public void execute_noTagsSupplied_success() {","lastModifiedDate":"2021-10-16"},{"lineNumber":160,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendAndHusbandTaggedModel();","lastModifiedDate":"2021-10-16"},{"lineNumber":161,"author":{"gitId":"Jiwei99"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-16"},{"lineNumber":162,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":163,"author":{"gitId":"Jiwei99"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(secondPerson);","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"Jiwei99"},"content":"        Person editedPerson \u003d personInList.withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-16"},{"lineNumber":165,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":166,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"Jiwei99"},"content":"                .withTags().build();","lastModifiedDate":"2021-10-16"},{"lineNumber":168,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2021-10-16"},{"lineNumber":169,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":170,"author":{"gitId":"Jiwei99"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMOVE_TAG_SUCCESS,","lastModifiedDate":"2021-10-16"},{"lineNumber":171,"author":{"gitId":"Jiwei99"},"content":"                editedPerson.getName(), getRemovedTags(descriptor));","lastModifiedDate":"2021-10-16"},{"lineNumber":172,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":173,"author":{"gitId":"Jiwei99"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-16"},{"lineNumber":174,"author":{"gitId":"Jiwei99"},"content":"        expectedModel.setPerson(secondPerson, editedPerson);","lastModifiedDate":"2021-10-16"},{"lineNumber":175,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":176,"author":{"gitId":"Jiwei99"},"content":"        assertCommandSuccess(untagCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-16"},{"lineNumber":177,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":178,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":179,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":180,"author":{"gitId":"Jiwei99"},"content":"    public void execute_personNotTagged_failure() {","lastModifiedDate":"2021-10-09"},{"lineNumber":181,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-09"},{"lineNumber":182,"author":{"gitId":"Jiwei99"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-09"},{"lineNumber":183,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_STUDENT).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":185,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2021-10-16"},{"lineNumber":186,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":187,"author":{"gitId":"Jiwei99"},"content":"        String tagsNotFound \u003d getNotFoundTags(firstPerson.getTags(),","lastModifiedDate":"2021-10-10"},{"lineNumber":188,"author":{"gitId":"Jiwei99"},"content":"                descriptor.getTags().orElse(new HashSet\u003cTag\u003e()));","lastModifiedDate":"2021-10-09"},{"lineNumber":189,"author":{"gitId":"Jiwei99"},"content":"        String message \u003d String.format(MESSAGE_TAG_NOT_IN_PERSON, firstPerson.getName(),","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"Jiwei99"},"content":"                tagsNotFound);","lastModifiedDate":"2021-10-09"},{"lineNumber":191,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(untagCommand, model, message);","lastModifiedDate":"2021-10-16"},{"lineNumber":192,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":193,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":194,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"Jiwei99"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-16"},{"lineNumber":196,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-16"},{"lineNumber":197,"author":{"gitId":"Jiwei99"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-10-16"},{"lineNumber":198,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-16"},{"lineNumber":199,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-16"},{"lineNumber":200,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":201,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(untagCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-16"},{"lineNumber":202,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":203,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":204,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":205,"author":{"gitId":"Jiwei99"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-16"},{"lineNumber":206,"author":{"gitId":"Jiwei99"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-16"},{"lineNumber":207,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":208,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-16"},{"lineNumber":209,"author":{"gitId":"Jiwei99"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-10-16"},{"lineNumber":210,"author":{"gitId":"Jiwei99"},"content":"        Model model \u003d generateFriendTaggedModel();","lastModifiedDate":"2021-10-16"},{"lineNumber":211,"author":{"gitId":"Jiwei99"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-16"},{"lineNumber":212,"author":{"gitId":"Jiwei99"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-16"},{"lineNumber":213,"author":{"gitId":"Jiwei99"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-16"},{"lineNumber":214,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2021-10-16"},{"lineNumber":215,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":216,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand untagCommand \u003d new UntagCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-16"},{"lineNumber":217,"author":{"gitId":"Jiwei99"},"content":"                new EditPersonDescriptorBuilder().withTags(VALID_TAG_WIFE).build());","lastModifiedDate":"2021-10-16"},{"lineNumber":218,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":219,"author":{"gitId":"Jiwei99"},"content":"        assertCommandFailure(untagCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-16"},{"lineNumber":220,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":221,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":222,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":223,"author":{"gitId":"Jiwei99"},"content":"    void testEquals() {","lastModifiedDate":"2021-10-08"},{"lineNumber":224,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor removeFriendDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":225,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":226,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor removeWifeDescriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-10"},{"lineNumber":227,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_WIFE).build();","lastModifiedDate":"2021-10-09"},{"lineNumber":228,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":229,"author":{"gitId":"Jiwei99"},"content":"        final UntagCommand standardCommand \u003d new UntagCommand(INDEX_THIRD_PERSON, removeFriendDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":230,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":231,"author":{"gitId":"Jiwei99"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":232,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(removeFriendDescriptor);","lastModifiedDate":"2021-10-10"},{"lineNumber":233,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand commandWithSameValues \u003d new UntagCommand(INDEX_THIRD_PERSON, copyDescriptor);","lastModifiedDate":"2021-10-09"},{"lineNumber":234,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-09"},{"lineNumber":235,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":236,"author":{"gitId":"Jiwei99"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-09"},{"lineNumber":237,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-09"},{"lineNumber":238,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":239,"author":{"gitId":"Jiwei99"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":240,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":241,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":242,"author":{"gitId":"Jiwei99"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":243,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-09"},{"lineNumber":244,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":245,"author":{"gitId":"Jiwei99"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":246,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new UntagCommand(INDEX_SECOND_PERSON, removeFriendDescriptor)));","lastModifiedDate":"2021-10-09"},{"lineNumber":247,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":248,"author":{"gitId":"Jiwei99"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-09"},{"lineNumber":249,"author":{"gitId":"Jiwei99"},"content":"        assertFalse(standardCommand.equals(new UntagCommand(INDEX_THIRD_PERSON, removeWifeDescriptor)));","lastModifiedDate":"2021-10-09"},{"lineNumber":250,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":251,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":250,"cookiedan42":1}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_FORMAT_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NONEXISTENT_BIRTHDAY_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2021-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        Person expectedPersonNoTags \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"                        + BIRTHDAY_DESC_AMY, new AddCommand(expectedPersonNoTags));","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"        // zero birthdays","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        Person expectedPersonNoBirthday \u003d PersonBuilder.ofNoBirthday().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"                .build();","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, new AddCommand(expectedPersonNoBirthday));","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        // missing both tags and birthday","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        Person expectedPersonNoBirthdayNoTags \u003d PersonBuilder.ofNoBirthday().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"                new AddCommand(expectedPersonNoBirthdayNoTags));","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_BIRTHDAY_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"                expectedMessage);","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"        // missing birthday prefix","lastModifiedDate":"2021-10-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"\",","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + BIRTHDAY_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"        // invalid birthday format","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-07"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_FRIEND + VALID_TAG_FRIEND + INVALID_BIRTHDAY_FORMAT_DESC, Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        // non-existent birthday","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"                + TAG_DESC_FRIEND + VALID_TAG_FRIEND + NONEXISTENT_BIRTHDAY_DESC, Birthday.MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2021-10-07"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"                        + BIRTHDAY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB,","lastModifiedDate":"2021-10-07"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"leezhixuan":53,"-":120}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.DeleteMultipleCommand.INDEX_SPLITTER;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.logic.commands.FindAnyCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.MailingListCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"    public void parseCommand_mailingListNoArg() throws Exception {","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        MailingListCommand command \u003d (MailingListCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"                MailingListCommand.COMMAND_WORD + \" \");","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(new MailingListCommand(MailingListCommandParser.DEFAULT_PREFIXES), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"    public void parseCommand_mailingListArg() throws Exception {","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"        MailingListCommand command \u003d (MailingListCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"                MailingListCommand.COMMAND_WORD + \" \" + PREFIX_PHONE.getPrefix());","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(new MailingListCommand(Set.of(PREFIX_PHONE)), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-15"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"    public void parseCommand_deleteM() throws Exception {","lastModifiedDate":"2021-10-15"},{"lineNumber":91,"author":{"gitId":"yucheng11122017"},"content":"        DeleteMultipleCommand command \u003d (DeleteMultipleCommand) parser.parseCommand(","lastModifiedDate":"2021-10-15"},{"lineNumber":92,"author":{"gitId":"yucheng11122017"},"content":"                DeleteMultipleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2021-10-15"},{"lineNumber":93,"author":{"gitId":"yucheng11122017"},"content":"                        + INDEX_SPLITTER + INDEX_EIGHTH_PERSON.getOneBased());","lastModifiedDate":"2021-10-15"},{"lineNumber":94,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(new DeleteMultipleCommand(INDEX_FIRST_PERSON, INDEX_EIGHTH_PERSON), command);","lastModifiedDate":"2021-10-15"},{"lineNumber":95,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-15"},{"lineNumber":96,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"    public void parseCommand_pin() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"yucheng11122017"},"content":"        PinCommand command \u003d (PinCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"yucheng11122017"},"content":"                PinCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(new PinCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"yucheng11122017"},"content":"    public void parseCommand_unpin() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"yucheng11122017"},"content":"        UnpinCommand command \u003d (UnpinCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"                UnpinCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(new UnpinCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"    public void parseCommand_unTag() throws Exception {","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand command \u003d (UntagCommand) parser.parseCommand(UntagCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"Jiwei99"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(new UntagCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"cookiedan42"},"content":"    public void parseCommand_addTag() throws Exception {","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"cookiedan42"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"cookiedan42"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"cookiedan42"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-10-06"},{"lineNumber":135,"author":{"gitId":"cookiedan42"},"content":"        assertEquals(new TagCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-10-06"},{"lineNumber":136,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findOnlyNames() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindCommand(findPredicate), command);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findOnlyTagsCaseInsensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"football\", \"friends\");","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"football\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindCommand(findPredicate), command);","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findOnlyTagsCaseSensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"Football\", \"friEnds\");","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"Football\"), new Tag(\"friEnds\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(nameList, tagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.COMMAND_WORD + \" c/ \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindCommand(findPredicate), command);","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findNamesAndTagsCaseInsensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"football\", \"friends\");","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"football\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":194,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindCommand(findPredicate), command);","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":200,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findNamesAndTagsCaseSensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"footBall\", \"friENDs\");","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"footBall\"), new Tag(\"friENDs\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate findPredicate \u003d new FindPredicate(nameList, tagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.COMMAND_WORD + \" /c  \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindCommand(findPredicate), command);","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findAnyOnlyNames() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d (FindAnyCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindAnyCommand(findAnyPredicate), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findAnyOnlyTagsCaseInsensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"football\", \"friends\");","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"football\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d (FindAnyCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindAnyCommand(findAnyPredicate), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findAnyOnlyTagsCaseSensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"FOOTball\", \"FRIends\");","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"FOOTball\"), new Tag(\"FRIends\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":248,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameList, tagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":249,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d (FindAnyCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":250,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.COMMAND_WORD + \" /c \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-26"},{"lineNumber":251,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-26"},{"lineNumber":252,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-26"},{"lineNumber":253,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindAnyCommand(findAnyPredicate), command);","lastModifiedDate":"2021-10-26"},{"lineNumber":254,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":255,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":256,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":257,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findAnyNamesAndTagsCaseInsensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":258,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-21"},{"lineNumber":259,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"football\", \"friends\");","lastModifiedDate":"2021-10-21"},{"lineNumber":260,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":261,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"football\"), new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameList, tagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d (FindAnyCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.COMMAND_WORD + \" \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-21"},{"lineNumber":266,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-21"},{"lineNumber":267,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindAnyCommand(findAnyPredicate), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":269,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":270,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":271,"author":{"gitId":"leezhixuan"},"content":"    public void parseCommand_findAnyNamesAndTagsCaseSensitive() throws Exception {","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e nameStringList \u003d List.of(\"Alan\", \"Bob\", \"Chris\");","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"leezhixuan"},"content":"        List\u003cString\u003e tagStringList \u003d List.of(\"fooTBall\", \"frIEnds\");","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alan\"), new Name(\"Bob\"), new Name(\"Chris\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"fooTBall\"), new Tag(\"frIEnds\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate findAnyPredicate \u003d new FindAnyPredicate(nameList, tagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand command \u003d (FindAnyCommand) parser.parseCommand(","lastModifiedDate":"2021-10-26"},{"lineNumber":278,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.COMMAND_WORD + \" /c \" + nameStringList.stream().map(x -\u003e PREFIX_NAME + x)","lastModifiedDate":"2021-10-26"},{"lineNumber":279,"author":{"gitId":"leezhixuan"},"content":"                        .collect(Collectors.joining(\" \"))","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"leezhixuan"},"content":"                        + \" \" + tagStringList.stream().map(x -\u003e PREFIX_TAG + x).collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(new FindAnyCommand(findAnyPredicate), command);","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":287,"author":{"gitId":"Jiwei99"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + HelpCommand.MORE) instanceof HelpCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":297,"author":{"gitId":"yucheng11122017"},"content":"    public void parseCommand_unrecognizedInput_throwsParseException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Jiwei99":11,"cookiedan42":29,"yucheng11122017":27,"leezhixuan":143,"-":96}},{"path":"src/test/java/seedu/address/logic/parser/DeleteMultipleCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.commands.DeleteMultipleCommand.INDEX_SPLITTER;","lastModifiedDate":"2021-10-15"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVENTH_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.logic.commands.DeleteMultipleCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"public class DeleteMultipleCommandParserTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    private DeleteMultipleCommandParser parser \u003d new DeleteMultipleCommandParser();","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"8\" + INDEX_SPLITTER + \"11\",","lastModifiedDate":"2021-10-15"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"                new DeleteMultipleCommand(INDEX_EIGHTH_PERSON, INDEX_ELEVENTH_PERSON));","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"8 \" + INDEX_SPLITTER + \" 8\",","lastModifiedDate":"2021-10-15"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"                new DeleteMultipleCommand(INDEX_EIGHTH_PERSON, INDEX_EIGHTH_PERSON));","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"14 -- 18\",","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_INVALID_INDEX));","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        assertParseFailure(parser, \"9 -1 3\",","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMultipleCommand.MESSAGE_INVALID_INDEX));","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Justinhoejj":32,"yucheng11122017":3}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_FORMAT_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NONEXISTENT_BIRTHDAY_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"        // invalid birthday format","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_FORMAT_DESC, Birthday.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"        // non-existent birthday","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"1\" + NONEXISTENT_BIRTHDAY_DESC, Birthday.MESSAGE_INVALID_DATE);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"        // birthday","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"cookiedan42":1,"leezhixuan":21,"-":208}},{"path":"src/test/java/seedu/address/logic/parser/FindAnyCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.logic.commands.FindAnyCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindAnyPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"    private FindAnyCommandParser parser \u003d new FindAnyCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"findAny n/John c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"findAny t/Friends c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterNameBeforeTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"findAny n/John c/ t/Friends\",","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTagBeforeName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"findAny t/Friends c/ n/John\",","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterNameAndTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find n/John t/Friends c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTagAndName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find t/Friends n/Friends c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"                FindAnyCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneNameCase_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t  \\t\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNames_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice n/Bob\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t n/Bob  \\t\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneTagCaseInsensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" t/friends\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n \\n \\t  \\t t/friends\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneTagCaseSensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"frIEnds\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ t/frIEnds\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n \\n \\t  \\t t/frIEnds\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleTagsCaseInsensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" t/friends t/colleagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n t/friends \\n \\t  \\t t/colleagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleTagsCaseSensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"frienDS\"), new Tag(\"coLLeagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ t/frienDS t/coLLeagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ \\n t/frienDS \\n \\t  \\t t/coLLeagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneNameAndTagCaseInsensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice t/friends\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t  \\t t/friends\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneNameAndTagCaseSensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"FRIENDs\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \"c/ n/Alice t/FRIENDs\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n n/Alice \\n \\t  \\t t/FRIENDs\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNamesAndTagsCaseInsensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice n/Bob t/friends t/colleagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t n/Bob  \\t t/friends t/colleagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNamesAndTagsCaseSensitive_returnsFindAnyCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"fRIends\"), new Tag(\"colLEagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"        FindAnyCommand expectedFindAnyCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyCommand(new FindAnyPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ n/Alice n/Bob t/fRIends t/colLEagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ \\n n/Alice \\n \\t n/Bob  \\t t/fRIends t/colLEagues\", expectedFindAnyCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":181,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"leezhixuan":183}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.FindPredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find n/John c/\", FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find t/Friends c/\", FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterNameBeforeTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find n/John c/ t/Friends\",","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTagBeforeName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find t/Friends c/ n/John\",","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterNameAndTag_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find n/John t/Friends c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"    public void parse_caseSensitiveFlagAfterTagAndName_throwsParseException() {","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"find t/Friends n/Friends c/\",","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"                FindCommand.CASE_SENSITIVE_FLAG_FORMAT_MESSAGE);","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneName_returnsFindCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t  \\t\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNames_returnsFindCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice n/Bob\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t n/Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneTagCaseInsensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" t/friends\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n \\n \\t  \\t t/friends\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneTagCaseSensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"frIends\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ t/frIends\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n \\n \\t  \\t t/frIends\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleTagsCaseInsensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" t/friends t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n \\n \\t  t/friends \\t t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleTagsCaseSensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of();","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friENds\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ t/friENds t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n \\n \\t  t/friENds \\t t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneNamesAndTagCaseInsensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice t/friends\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t  \\t t/friends\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"leezhixuan"},"content":"    public void parse_oneNamesAndTagCaseSensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":147,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":148,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"FRIENDS\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":149,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ n/Alice t/FRIENDS\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n n/Alice \\n \\t  \\t t/FRIENDS\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNamesAndTagsCaseInsensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":162,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, false));","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" n/Alice n/Bob t/friends t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t n/Bob  \\t t/friends t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleNamesAndTagsCaseSensitive_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e nameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e tagList \u003d List.of(new Tag(\"FRiends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"leezhixuan"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"                new FindCommand(new FindPredicate(nameList, tagList, true));","lastModifiedDate":"2021-10-26"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/ n/Alice n/Bob t/FRiends t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":177,"author":{"gitId":"leezhixuan"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":178,"author":{"gitId":"leezhixuan"},"content":"        assertParseSuccess(parser, \" c/\\n n/Alice \\n \\t n/Bob  \\t t/FRiends t/colleagues\", expectedFindCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":179,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"leezhixuan":146,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"public class HelpCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"    private HelpCommandParser parser \u003d new HelpCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"    public void parse_noPreamble_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand expectedCommand \u003d new HelpCommand(\"\");","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"    public void parse_validPreamble_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d AddCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        HelpCommand expectedCommand \u003d new HelpCommand(AddCommand.COMMAND_WORD);","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"Jiwei99":27}},{"path":"src/test/java/seedu/address/logic/parser/MailingListCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-04"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.MailingListCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"class MailingListCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"    private static final String INVALID_PREFIX \u003d \"k/\";","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"    private MailingListCommandParser parser \u003d new MailingListCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"    public void parse_emptyArg_defaultArgs() {","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"        MailingListCommand expectedCommand \u003d new MailingListCommand(MailingListCommandParser.DEFAULT_PREFIXES);","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, \"\", expectedCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"    public void parse_emptyArg_oneArg() {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixes \u003d Set.of(PREFIX_PHONE);","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"        MailingListCommand expectedCommand \u003d new MailingListCommand(prefixes);","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_PHONE.getPrefix(), expectedCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"    public void parse_preambleExists_failure() {","lastModifiedDate":"2021-11-04"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, \"preamble \" + PREFIX_PHONE.getPrefix(),","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"                MailingListCommand.MESSAGE_EXTRA_ARGUMENTS_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"cookiedan42"},"content":"    public void parse_extraDataExists_failure() {","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, INVALID_PREFIX + \" \" + PREFIX_PHONE.getPrefix(),","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"                MailingListCommand.MESSAGE_EXTRA_ARGUMENTS_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, PREFIX_PHONE.getPrefix() + \" \" + INVALID_PREFIX,","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"                MailingListCommand.MESSAGE_EXTRA_ARGUMENTS_FAILURE);","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"cookiedan42":37,"yucheng11122017":6}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"    private static final String INVALID_BIRTHDAY_FORMAT \u003d \"20-01-1997\";","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    private static final String INVALID_BIRTHDAY_DATE \u003d \"12345678\";","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"    private static final String INVALID_BIRTHDAY_IN_FUTURE_DATE \u003d \"12122111\";","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"    private static final String INVALID_SUBSTRING \u003d \"..\";","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"    private static final String VALID_BIRTHDAY \u003d \"14091999\";","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"    private static final String VALID_BIRTHDAY_LEAP_DAY \u003d \"29022000\";","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_STRING \u003d \"substring\";","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_SUBSTRING \u003d \"sub\";","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"leezhixuan"},"content":"    public void parseBirthday_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"leezhixuan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":209,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"leezhixuan"},"content":"    public void parseBirthday_invalidFormat_throwsParseException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"leezhixuan"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY_FORMAT));","lastModifiedDate":"2021-10-13"},{"lineNumber":213,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":216,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_futureDate_throwsParseException() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":217,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY_IN_FUTURE_DATE));","lastModifiedDate":"2021-10-27"},{"lineNumber":218,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":219,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":221,"author":{"gitId":"leezhixuan"},"content":"    public void parseBirthday_validBirthday_returnsBirthday() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"leezhixuan"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":223,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));","lastModifiedDate":"2021-10-12"},{"lineNumber":224,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":225,"author":{"gitId":"leezhixuan"},"content":"        Birthday expectedBirthdayLeapDay \u003d new Birthday(VALID_BIRTHDAY_LEAP_DAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":226,"author":{"gitId":"leezhixuan"},"content":"        assertEquals(expectedBirthdayLeapDay, ParserUtil.parseBirthday(VALID_BIRTHDAY_LEAP_DAY));","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":228,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":229,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":230,"author":{"gitId":"leezhixuan"},"content":"    public void parseBirthday_null_returnsNull() throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":231,"author":{"gitId":"leezhixuan"},"content":"        assertNull(ParserUtil.parseBirthday((String) null));","lastModifiedDate":"2021-10-13"},{"lineNumber":232,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_validValue_returnsBirthday() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"Justinhoejj"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":237,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));","lastModifiedDate":"2021-10-12"},{"lineNumber":238,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":239,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":240,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":241,"author":{"gitId":"Justinhoejj"},"content":"    public void parseBirthday_validValueWithWhitespace_returnsTrimmedBirthday() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":242,"author":{"gitId":"Justinhoejj"},"content":"        String birthdayWithWhitespace \u003d WHITESPACE + VALID_BIRTHDAY + WHITESPACE;","lastModifiedDate":"2021-10-12"},{"lineNumber":243,"author":{"gitId":"Justinhoejj"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);","lastModifiedDate":"2021-10-12"},{"lineNumber":244,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(birthdayWithWhitespace));","lastModifiedDate":"2021-10-12"},{"lineNumber":245,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":246,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":247,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":248,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":249,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(null, null));","lastModifiedDate":"2021-10-12"},{"lineNumber":250,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_STRING, null));","lastModifiedDate":"2021-10-12"},{"lineNumber":251,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.getIndexOfSubstring(null, VALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":252,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":253,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":254,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":255,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_invalidValues_throwsParseException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":256,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_STRING, INVALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":257,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.getIndexOfSubstring(VALID_SUBSTRING, VALID_STRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":258,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":260,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":261,"author":{"gitId":"Justinhoejj"},"content":"    public void getIndexOfSubstring_validValue_returnsIndex() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"Justinhoejj"},"content":"        int expectedIndex \u003d VALID_STRING.indexOf(VALID_SUBSTRING);","lastModifiedDate":"2021-10-12"},{"lineNumber":263,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedIndex, ParserUtil.getIndexOfSubstring(VALID_STRING, VALID_SUBSTRING));","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"Justinhoejj":47,"leezhixuan":25,"-":193}},{"path":"src/test/java/seedu/address/logic/parser/PinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":" * outside of the PinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":" * same path through the PinCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"public class PinCommandParserTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"    private PinCommandParser parser \u003d new PinCommandParser();","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"1\", new PinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":33}},{"path":"src/test/java/seedu/address/logic/parser/TagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cookiedan42"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-06"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":11,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-06"},{"lineNumber":12,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-06"},{"lineNumber":13,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":16,"author":{"gitId":"cookiedan42"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"class TagCommandParserTest {","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"cookiedan42"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2021-10-06"},{"lineNumber":26,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":27,"author":{"gitId":"cookiedan42"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"cookiedan42"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"cookiedan42"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"cookiedan42"},"content":"        // no index specified","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"        // no prefix specified","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"1\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"cookiedan42"},"content":"        // no field specified","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        // no index, no prefix and no field specified","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"cookiedan42"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"cookiedan42"},"content":"        // negative index","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"-5\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"cookiedan42"},"content":"        // zero index","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"0\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"cookiedan42"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"cookiedan42"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"cookiedan42"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"cookiedan42"},"content":"        // invalid tag alone","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"cookiedan42"},"content":"        // valid tag followed by invalid tag","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"cookiedan42"},"content":"        // invalid tag followed by valid tag","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"cookiedan42"},"content":"        // adding an empty tag is always invalid","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"cookiedan42"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"cookiedan42"},"content":"    public void parse_oneTag_success() {","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"    public void parse_multipleTags_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":94,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"    public void parse_multipleRepeatedTags_acceptsUnique() {","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"                .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        TagCommand expectedCommand \u003d new TagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"}","lastModifiedDate":"2021-10-06"}],"authorContributionMap":{"cookiedan42":110,"leezhixuan":5}},{"path":"src/test/java/seedu/address/logic/parser/UnpinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":" * outside of the UnpinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":" * same path through the UnpinCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"public class UnpinCommandParserTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    private UnpinCommandParser parser \u003d new UnpinCommandParser();","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"        assertParseSuccess(parser, \"1\", new UnpinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"yucheng11122017":32}},{"path":"src/test/java/seedu/address/logic/parser/UntagCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-10-08"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2021-10-08"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-08"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_WIFE;","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-08"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-08"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-08"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-08"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-08"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-10-08"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.UntagCommand;","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-08"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"public class UntagCommandParserTest {","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"    private UntagCommandParser parser \u003d new UntagCommandParser();","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"        // no index specified","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        // no prefix specified","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"        assertParseFailure(parser, \"1\" + VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        // name prefix specified instead of tag","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"        // phone prefix specified instead of tag","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"Jiwei99"},"content":"        // email prefix specified instead of tag","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + EMAIL_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"Jiwei99"},"content":"        // address prefix specified instead of tag","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + ADDRESS_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"Jiwei99"},"content":"        // birthday prefix specified instead of tag","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + BIRTHDAY_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"Jiwei99"},"content":"        // invalid prefix followed by tag prefix","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + BIRTHDAY_DESC_AMY + TAG_DESC_WIFE, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"Jiwei99"},"content":"        // no field specified","lastModifiedDate":"2021-10-08"},{"lineNumber":65,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\", UntagCommand.MESSAGE_NOT_REMOVED);","lastModifiedDate":"2021-10-08"},{"lineNumber":66,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":67,"author":{"gitId":"Jiwei99"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-08"},{"lineNumber":68,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":69,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":70,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":71,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":72,"author":{"gitId":"Jiwei99"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":73,"author":{"gitId":"Jiwei99"},"content":"        // negative index","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"-5\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":75,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":76,"author":{"gitId":"Jiwei99"},"content":"        // zero index","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"0\" + TAG_DESC_FRIEND, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":78,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":79,"author":{"gitId":"Jiwei99"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-08"},{"lineNumber":80,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":81,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":82,"author":{"gitId":"Jiwei99"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-08"},{"lineNumber":83,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-08"},{"lineNumber":84,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":85,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":86,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":87,"author":{"gitId":"Jiwei99"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-08"},{"lineNumber":88,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":89,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":90,"author":{"gitId":"Jiwei99"},"content":"        // invalid tag followed by valid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":91,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + TAG_DESC_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":92,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":93,"author":{"gitId":"Jiwei99"},"content":"        // valid tag followed by invalid tag","lastModifiedDate":"2021-10-08"},{"lineNumber":94,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_HUSBAND + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":95,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":96,"author":{"gitId":"Jiwei99"},"content":"        // valid tag followed by invalid prefix","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_HUSBAND + NAME_DESC_AMY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"Jiwei99"},"content":"        // empty tag","lastModifiedDate":"2021-10-08"},{"lineNumber":100,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":101,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"Jiwei99"},"content":"        // parsing {@code PREFIX_TAG} together with a valid tag results in error.","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"Jiwei99"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"Jiwei99"},"content":"    public void parse_singleTagSpecified_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"Jiwei99"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand expectedCommand \u003d new UntagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"Jiwei99"},"content":"    public void parse_multipleTagsSpecified_success() {","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"Jiwei99"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"Jiwei99"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"Jiwei99"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"Jiwei99"},"content":"        UntagCommand expectedCommand \u003d new UntagCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"Jiwei99"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":131,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Jiwei99":125,"cookiedan42":3,"leezhixuan":3}},{"path":"src/test/java/seedu/address/model/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.model;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.CommandHistory.getNextCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.CommandHistory.getPreviousCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.SAMPLE_COMMAND_1;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.SAMPLE_COMMAND_2;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.SAMPLE_COMMAND_3;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.SAMPLE_COMMAND_4;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.emptyHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.CommandHistoryBuilder.validHistory;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"public class CommandHistoryTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"    public void validHistory_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"        validHistory();","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), SAMPLE_COMMAND_4);","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), SAMPLE_COMMAND_3);","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), SAMPLE_COMMAND_2);","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), SAMPLE_COMMAND_1);","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), SAMPLE_COMMAND_1);","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getNextCommand(), SAMPLE_COMMAND_2);","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getNextCommand(), SAMPLE_COMMAND_3);","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getNextCommand(), SAMPLE_COMMAND_4);","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getNextCommand(), \"\");","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"    public void emptyHistory_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"        emptyHistory();","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getPreviousCommand(), \"\");","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"        assertEquals(getNextCommand(), \"\");","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"Jiwei99":38}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"cookiedan42"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON_NO_BIRTHDAY;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH_NO_BIRTHDAY;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"import java.time.MonthDay;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"cookiedan42"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"cookiedan42"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"cookiedan42"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"    public void setPrefixStore_modifySet_differentSet() {","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        prefixSet.add(PREFIX_NAME);","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"        modelManager.setPrefixes(prefixSet);","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"        prefixSet.add(PREFIX_PHONE);","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"        assertNotEquals(modelManager.getPrefixes(), prefixSet);","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"    public void getPrefixStore_modifySet_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getPrefixes().add(PREFIX_PHONE));","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"Justinhoejj"},"content":"    public void birthdayReminderList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getBirthdayReminderList().remove(0));","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"Justinhoejj"},"content":"    public void addPerson_personWithoutBirthday_birthdayReminderListRemainsUnchanged() {","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(modelManager.getBirthdayReminderList().isEmpty());","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"    public void addPerson_personWithBirthday_birthdayReminderListRemainSorted() {","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(CARL); // Earliest birthday","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON); // Latest birthday","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"Justinhoejj"},"content":"        // Person sorted by birthday in this order: CARL -- ALICE -- BENSON.","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"Justinhoejj"},"content":"        // List starts from x read rightwards.","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay currentMonthDay \u003d MonthDay.now();","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"Justinhoejj"},"content":"        ArrayList\u003cPerson\u003e expectedBirthdayReminderList \u003d new ArrayList\u003c\u003e(3);","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay aliceMonthDay \u003d MonthDay.from(ALICE.getBirthday().get().birthdate);","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay bensonMonthDay \u003d MonthDay.from(BENSON.getBirthday().get().birthdate);","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"Justinhoejj"},"content":"        MonthDay carlMonthDay \u003d MonthDay.from(CARL.getBirthday().get().birthdate);","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"Justinhoejj"},"content":"        if (currentMonthDay.isBefore(carlMonthDay)","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"Justinhoejj"},"content":"                || (currentMonthDay.isAfter(bensonMonthDay)","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"Justinhoejj"},"content":"                        \u0026\u0026 !currentMonthDay.equals(bensonMonthDay))) {","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"Justinhoejj"},"content":"            // x CARL -- ALICE -- BENSON x","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(CARL);","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"Justinhoejj"},"content":"        } else if (currentMonthDay.isBefore(aliceMonthDay)) {","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"Justinhoejj"},"content":"            // CARL -x- ALICE -- BENSON","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(CARL);","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"Justinhoejj"},"content":"        } else {","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"Justinhoejj"},"content":"            // CARL -- ALICE -x- BENSON","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(CARL);","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"Justinhoejj"},"content":"            expectedBirthdayReminderList.add(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthdayReminderList.get(0), modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthdayReminderList.get(1), modelManager.getBirthdayReminderList().get(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(expectedBirthdayReminderList.get(2), modelManager.getBirthdayReminderList().get(2));","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"Justinhoejj"},"content":"    public void setPerson_personWithNoBirthdayToPersonWithNoBirthday_birthdayReminderListUnchanged() {","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"Justinhoejj"},"content":"        // Only ALICE in birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getBirthdayReminderList().size(), 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(ALICE, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.setPerson(BENSON_NO_BIRTHDAY, HANNAH_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"Justinhoejj"},"content":"        // Only ALICE and HANNAH in filtered person list","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getFilteredPersonList().size(), 2);","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(modelManager.getFilteredPersonList().contains(ALICE));","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(modelManager.getFilteredPersonList().contains(HANNAH_NO_BIRTHDAY));","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"Justinhoejj"},"content":"        // Only ALICE in birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getBirthdayReminderList().size(), 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(ALICE, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"Justinhoejj"},"content":"    public void setPerson_modifyPersonDetails_birthdayReminderListReplacesTargetWithEditedPerson() {","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"Justinhoejj"},"content":"        // Only ALICE in birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getBirthdayReminderList().size(), 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(ALICE, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.setPerson(ALICE, BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"Justinhoejj"},"content":"        // Only BENSON in birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getBirthdayReminderList().size(), 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(BENSON, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"Justinhoejj"},"content":"    public void setPerson_initiallyNoBirthdayToEditedWithBirthday_birthdayReminderListIncludesEditedPerson() {","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"Justinhoejj"},"content":"        // Birthday reminder list is empty","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(modelManager.getBirthdayReminderList().isEmpty());","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.setPerson(BENSON_NO_BIRTHDAY, BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":211,"author":{"gitId":"Justinhoejj"},"content":"        // BENSON added to birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(modelManager.getBirthdayReminderList().size(), 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(BENSON, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"Justinhoejj"},"content":"    public void deletePerson_personWithBirthday_personRemovedFromBirthdayReminderList() {","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"Justinhoejj"},"content":"        // Benson added to birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(BENSON, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.deletePerson(BENSON);","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(modelManager.getBirthdayReminderList().isEmpty());","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"Justinhoejj"},"content":"    public void deletePerson_personWithNoBirthday_birthdayReminderListUnchanged() {","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.addPerson(BENSON_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"Justinhoejj"},"content":"        // ALICE is the only person in the birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(modelManager.getBirthdayReminderList().isEmpty());","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(ALICE, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"Justinhoejj"},"content":"        modelManager.deletePerson(BENSON_NO_BIRTHDAY);","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"Justinhoejj"},"content":"        // ALICE remains in birthday reminder list","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(modelManager.getBirthdayReminderList().isEmpty());","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(ALICE, modelManager.getBirthdayReminderList().get(0));","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":271,"author":{"gitId":"cookiedan42"},"content":"        // different prefixStore -\u003e return false","lastModifiedDate":"2021-10-26"},{"lineNumber":272,"author":{"gitId":"cookiedan42"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-10-26"},{"lineNumber":273,"author":{"gitId":"cookiedan42"},"content":"        Set\u003cPrefix\u003e prefixSet \u003d Set.of(PREFIX_NAME);","lastModifiedDate":"2021-10-26"},{"lineNumber":274,"author":{"gitId":"cookiedan42"},"content":"        modelManager.setPrefixes(prefixSet);","lastModifiedDate":"2021-10-26"},{"lineNumber":275,"author":{"gitId":"cookiedan42"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2021-10-26"},{"lineNumber":276,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":279,"author":{"gitId":"cookiedan42"},"content":"        modelManager.setPrefixes(Set.of());","lastModifiedDate":"2021-10-26"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"cookiedan42":28,"Justinhoejj":126,"-":132}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Justinhoejj"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-07"},{"lineNumber":2,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":3,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-08"},{"lineNumber":4,"author":{"gitId":"Justinhoejj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"Justinhoejj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"Justinhoejj"},"content":"public class BirthdayTest {","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"Justinhoejj"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"Justinhoejj"},"content":"        String invalidBirthday \u003d \"\";","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":23,"author":{"gitId":"Justinhoejj"},"content":"    public void isValidBirthday() {","lastModifiedDate":"2021-10-07"},{"lineNumber":24,"author":{"gitId":"Justinhoejj"},"content":"        // null address","lastModifiedDate":"2021-10-07"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidFormat(null));","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"Justinhoejj"},"content":"        // blank birthday","lastModifiedDate":"2021-10-08"},{"lineNumber":28,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2021-10-08"},{"lineNumber":29,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2021-10-08"},{"lineNumber":30,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":31,"author":{"gitId":"Justinhoejj"},"content":"        // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":32,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidFormat(\"31-12-2011\")); // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":33,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidFormat(\"2021-11-12\")); // invalid format","lastModifiedDate":"2021-10-08"},{"lineNumber":34,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"12122012 \")); // white space at end","lastModifiedDate":"2021-10-08"},{"lineNumber":35,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\" 12122012\")); // white space at the start","lastModifiedDate":"2021-10-08"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"        // invalid dates","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"32022011\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"12345678\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"        assertFalse(Birthday.isValidDate(\"00000000\")); // invalid date","lastModifiedDate":"2021-10-08"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"        // valid birthday","lastModifiedDate":"2021-10-07"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(Birthday.isValidFormat(\"19011999\")); // valid date","lastModifiedDate":"2021-10-08"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"        assertTrue(Birthday.isValidFormat(\"31121999\")); // 31st December 1999","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(Birthday.isValidFormat(\"29022012\")); // 29th February leap year","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"}","lastModifiedDate":"2021-10-07"}],"authorContributionMap":{"Justinhoejj":46,"leezhixuan":1}},{"path":"src/test/java/seedu/address/model/person/FindAnyPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"public class FindAnyPredicateTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e secondNameList \u003d List.of(new Name(\"Carl\"), new Name(\"Denzel\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e secondTagList \u003d List.of(new Tag(\"classmates\"), new Tag(\"project\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate secondPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(secondNameList, secondTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate secondPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(secondNameList, secondTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseInsensitive.equals(firstPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseSensitive.equals(firstPredicateCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseInsensitiveCopy \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseInsensitive.equals(firstPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(secondPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseSensitive.equals(secondPredicateCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingName_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Alice\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneNonMatchingName_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Alice\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"    public void test_multipleMatchingName_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Alice\"), new Name(\"Bob\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"    public void test_multipleNonMatchingName_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Alice\"), new Name(\"Bob\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Carol Denise\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingNameAndOneMatchingTag_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"friends\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingNameAndOneNonMatchingTag_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"chef\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        predicate \u003d new FindAnyPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"                true);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        // returns true because only name or tag needs to match","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"chef\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneNonMatchingNameAndOneMatchingTag_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"        predicate \u003d new FindAnyPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"                true);","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneNonMatchingNameAndOneMatchingTag_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate predicate \u003d new FindAnyPredicate(List.of(new Name(\"Bob\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"                List.of(new Tag(\"FRIEND\")), true);","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"leezhixuan":120}},{"path":"src/test/java/seedu/address/model/person/FindPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"leezhixuan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"leezhixuan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import java.util.List;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"leezhixuan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"leezhixuan"},"content":"public class FindPredicateTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"leezhixuan"},"content":"    public void equals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e firstNameList \u003d List.of(new Name(\"Alice\"), new Name(\"Bob\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e firstTagList \u003d List.of(new Tag(\"friends\"), new Tag(\"colleagues\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"leezhixuan"},"content":"        List\u003cName\u003e secondNameList \u003d List.of(new Name(\"Carl\"), new Name(\"Denzel\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"leezhixuan"},"content":"        List\u003cTag\u003e secondTagList \u003d List.of(new Tag(\"classmates\"), new Tag(\"project\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate firstPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate secondPredicateCaseInsensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(secondNameList, secondTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate firstPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(firstNameList, firstTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate secondPredicateCaseSensitive \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(secondNameList, secondTagList, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseInsensitive.equals(firstPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseSensitive.equals(firstPredicateCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"leezhixuan"},"content":"        FindAnyPredicate firstPredicateCaseInsensitiveCopy \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"                new FindAnyPredicate(firstNameList, firstTagList, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(firstPredicateCaseInsensitive.equals(firstPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"leezhixuan"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(1));","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseInsensitive.equals(secondPredicateCaseInsensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(firstPredicateCaseSensitive.equals(secondPredicateCaseSensitive));","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingName_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Alice\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneNonMatchingName_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Alice\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"leezhixuan"},"content":"    public void test_multipleMatchingName_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Alice\"), new Name(\"Bob\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"    public void test_multipleNonMatchingName_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Alice\"), new Name(\"Bob\")), List.of(), false);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingNameAndOneMatchingTag_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friends\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"friends\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneMatchingNameAndOneNonMatchingTag_returnsFalse() {","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"chef\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"        predicate \u003d new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"                true);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"leezhixuan"},"content":"        // returns false because both name or tag needs to match","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"bob\").withTags(\"chef\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"leezhixuan"},"content":"    public void test_oneNonMatchingNameAndOneMatchingTag_returnsTrue() {","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"leezhixuan"},"content":"        FindPredicate predicate \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"                new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"                        false);","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"leezhixuan"},"content":"        predicate \u003d new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"FRIEND\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"leezhixuan"},"content":"                true);","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"        predicate \u003d new FindPredicate(List.of(new Name(\"Bob\")), List.of(new Tag(\"friend\")),","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"                true);","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Charlie\").withTags(\"friend\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"leezhixuan":117}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.INDIGO;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"leezhixuan"},"content":"        // same name, all other attributes different -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"leezhixuan"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"leezhixuan"},"content":"                .build();","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"leezhixuan"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"leezhixuan"},"content":"        // different name, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"leezhixuan"},"content":"        // all attributes, except for phone number, are different -\u003e returns true","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"leezhixuan"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"leezhixuan"},"content":"                .build();","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"leezhixuan"},"content":"        // all attributes remain the same except for phone number -\u003e returns false","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"leezhixuan"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"leezhixuan"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":64,"author":{"gitId":"leezhixuan"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"    public void comparePerson() {","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        // Both are unpinned","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(BOB.compareTo(ALICE) \u003d\u003d 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"        // Both are pinned","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(HANNAH.compareTo(INDIGO) \u003d\u003d 0);","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"        // First is pinned","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(HANNAH.compareTo(BOB) \u003d\u003d -1);","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"yucheng11122017"},"content":"        // Second is pinned","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(ALICE.compareTo(INDIGO) \u003d\u003d 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"yucheng11122017"},"content":"    public void correctIsPinned() {","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"yucheng11122017"},"content":"        // Bob is not pinned","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(!BOB.isPinned());","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"yucheng11122017"},"content":"        // Hannah is pinned","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(HANNAH.isPinned());","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"yucheng11122017":26,"leezhixuan":20,"-":84}},{"path":"src/test/java/seedu/address/model/person/PinTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yucheng11122017"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"yucheng11122017"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"public class PinTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Pin(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    public void constructor_invalidPin_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"        String invalidPin \u003d \"\";","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(AssertionError.class, () -\u003e new Pin(invalidPin));","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public void isValidPinStatus() {","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"yucheng11122017"},"content":"        // null address","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"yucheng11122017"},"content":"        // invalid addresses","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(Pin.isValidPinStatus(\"\")); // empty string","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"        assertFalse(Pin.isValidPinStatus(\" \")); // spaces only","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"        // valid addresses","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(Pin.isValidPinStatus(\"true\"));","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"yucheng11122017"},"content":"        assertTrue(Pin.isValidPinStatus(\"false\")); // one character","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"yucheng11122017"},"content":"    public void equals() {","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"yucheng11122017"},"content":"        Pin firstPin \u003d new Pin(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"        Pin secondPin \u003d new Pin(false);","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(firstPin, firstPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"yucheng11122017"},"content":"        assertNotEquals(firstPin, secondPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"yucheng11122017"},"content":"        Pin firstPinCopy \u003d new Pin(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(firstPinCopy, firstPin);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"yucheng11122017"},"content":"    public void unPinTest() {","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"yucheng11122017"},"content":"        Pin firstPin \u003d new Pin(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"yucheng11122017"},"content":"        Pin secondPin \u003d new Pin(false);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(firstPin, secondPin.togglePin());","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(secondPin, firstPin.togglePin());","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"}","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"yucheng11122017":59}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.HANNAH;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import static seedu.address.testutil.TypicalPersons.INDIGO;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"import com.sun.javafx.collections.ImmutableObservableList;","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    public void add_pinnedPersonPinnedPersonIsPutInFront_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(HANNAH);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"        ObservableList\u003cPerson\u003e expectedPersonList \u003d new ImmutableObservableList\u003c\u003e(HANNAH, ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), expectedPersonList);","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"    public void setPerson_editedPeronIsPinned_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"        Person pinnedAlice \u003d new PersonBuilder(ALICE).withPin(true).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.setPerson(ALICE, pinnedAlice);","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"        ObservableList\u003cPerson\u003e expectedPersonList \u003d new ImmutableObservableList\u003c\u003e(pinnedAlice, BOB);","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), expectedPersonList);","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"    public void setPerson_editedPeronIsUnpinned_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(HANNAH);","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.add(INDIGO);","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"yucheng11122017"},"content":"        Person unpinnedHannah \u003d new PersonBuilder(HANNAH).withPin(false).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"yucheng11122017"},"content":"        uniquePersonList.setPerson(HANNAH, unpinnedHannah);","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"yucheng11122017"},"content":"        ObservableList\u003cPerson\u003e expectedPersonList \u003d new ImmutableObservableList\u003c\u003e(INDIGO, unpinnedHannah);","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"yucheng11122017"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), expectedPersonList);","lastModifiedDate":"2021-10-26"},{"lineNumber":143,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"yucheng11122017":33,"-":170}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2017-12-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-11-04"},{"lineNumber":21,"author":{"gitId":"yucheng11122017"},"content":"    public void constructor_tooLongTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"        String tooLongTagName \u003d \"1234567890123456789012345678901234567890123456789012345678901\";","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"yucheng11122017"},"content":"        assert tooLongTagName.length() \u003e 60;","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(tooLongTagName));","lastModifiedDate":"2021-11-04"},{"lineNumber":25,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"yucheng11122017":7,"-":26}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"yucheng11122017"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"Justinhoejj"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON_NO_BIRTHDAY;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"leezhixuan"},"content":"    private static final String INVALID_BIRTHDAY_FORMAT \u003d \"19-06-2001\";","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"    private static final String INVALID_DATE \u003d \"30022001\";","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"    private static final String INVALID_PIN \u003d \"tRue\";","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().map(Birthday::toString).orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"yucheng11122017"},"content":"    private static final String VALID_NOT_PIN \u003d Pin.NOT_PINNED_STRING;","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"yucheng11122017"},"content":"    private static final String VALID_PIN \u003d Pin.PINNED_STRING;","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"Justinhoejj"},"content":"    @Test","lastModifiedDate":"2021-10-09"},{"lineNumber":52,"author":{"gitId":"Justinhoejj"},"content":"    public void toModelType_withoutBirthday_returnsPerson() throws Exception {","lastModifiedDate":"2021-10-09"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-09"},{"lineNumber":54,"author":{"gitId":"Justinhoejj"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-09"},{"lineNumber":55,"author":{"gitId":"yucheng11122017"},"content":"                        null, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"Justinhoejj"},"content":"        assertEquals(BENSON_NO_BIRTHDAY, person.toModelType());","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"yucheng11122017"},"content":"    public void toModelType_differentPinStatus_returns() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"yucheng11122017"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"yucheng11122017"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"yucheng11122017"},"content":"                        null, VALID_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"yucheng11122017"},"content":"        assertNotEquals(BENSON_NO_BIRTHDAY, person.toModelType());","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"    public void toModelType_invalidPinStatus_returns() {","lastModifiedDate":"2021-11-04"},{"lineNumber":69,"author":{"gitId":"yucheng11122017"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"yucheng11122017"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, INVALID_PIN);","lastModifiedDate":"2021-11-04"},{"lineNumber":72,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d Pin.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-11-04"},{"lineNumber":73,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-11-04"},{"lineNumber":74,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":80,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":88,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":89,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":106,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":107,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":124,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-07"},{"lineNumber":142,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":143,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-11-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":153,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,","lastModifiedDate":"2021-10-07"},{"lineNumber":154,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, VALID_NOT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2021-11-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":158,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-07"},{"lineNumber":159,"author":{"gitId":"yucheng11122017"},"content":"    public void toModelType_invalidBirthdayFormat_returnsPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":160,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson personWrongBirthdayFormat \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-07"},{"lineNumber":162,"author":{"gitId":"yucheng11122017"},"content":"                        INVALID_BIRTHDAY_FORMAT, VALID_NOT_PIN);","lastModifiedDate":"2021-11-04"},{"lineNumber":163,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-11-04"},{"lineNumber":164,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, personWrongBirthdayFormat::toModelType);","lastModifiedDate":"2021-11-04"},{"lineNumber":165,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"leezhixuan"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"yucheng11122017"},"content":"    public void toModelType_invalidBirthdayDate_returnsPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":169,"author":{"gitId":"leezhixuan"},"content":"        JsonAdaptedPerson personInvalidDate \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"leezhixuan"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"yucheng11122017"},"content":"                        INVALID_DATE, VALID_NOT_PIN);","lastModifiedDate":"2021-11-04"},{"lineNumber":172,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-11-04"},{"lineNumber":173,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, personInvalidDate::toModelType);","lastModifiedDate":"2021-11-04"},{"lineNumber":174,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":175,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":176,"author":{"gitId":"yucheng11122017"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"yucheng11122017"},"content":"    public void toModelType_nullPin_returnsPerson() {","lastModifiedDate":"2021-11-04"},{"lineNumber":178,"author":{"gitId":"yucheng11122017"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"yucheng11122017"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"yucheng11122017"},"content":"                        VALID_BIRTHDAY, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"yucheng11122017"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Pin.class.getSimpleName());","lastModifiedDate":"2021-11-04"},{"lineNumber":182,"author":{"gitId":"yucheng11122017"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Justinhoejj":9,"yucheng11122017":48,"leezhixuan":26,"-":101}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"yucheng11122017"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"CONNECTIONS.json\"));","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yucheng11122017":1,"-":122}},{"path":"src/test/java/seedu/address/testutil/CommandHistoryBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jiwei99"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.CommandHistory.addCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.model.CommandHistory.clear;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"Jiwei99"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"Jiwei99"},"content":"import seedu.address.logic.commands.TagCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"Jiwei99"},"content":"public class CommandHistoryBuilder {","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"Jiwei99"},"content":"    public static final String SAMPLE_COMMAND_1 \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"Jiwei99"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"Jiwei99"},"content":"    public static final String SAMPLE_COMMAND_2 \u003d EditCommand.COMMAND_WORD + INDEX_FIRST_PERSON.getZeroBased()","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"Jiwei99"},"content":"            + EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"Jiwei99"},"content":"    public static final String SAMPLE_COMMAND_3 \u003d TagCommand.COMMAND_WORD + INDEX_THIRD_PERSON.getZeroBased()","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"Jiwei99"},"content":"            + TAG_DESC_FRIEND + TAG_DESC_STUDENT;","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"Jiwei99"},"content":"    public static final String SAMPLE_COMMAND_4 \u003d FindCommand.COMMAND_WORD + NAME_DESC_BOB;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"Jiwei99"},"content":"     * Creates an empty {@code CommandHistory}.","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"Jiwei99"},"content":"    public static void emptyHistory() {","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"Jiwei99"},"content":"        clear();","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"Jiwei99"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"Jiwei99"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"Jiwei99"},"content":"     * Creates a valid {@code CommandHistory} with sample commands.","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"Jiwei99"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"Jiwei99"},"content":"    public static void validHistory() {","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"Jiwei99"},"content":"        clear();","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"Jiwei99"},"content":"        addCommand(SAMPLE_COMMAND_1);","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"Jiwei99"},"content":"        addCommand(SAMPLE_COMMAND_2);","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"Jiwei99"},"content":"        addCommand(SAMPLE_COMMAND_3);","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"Jiwei99"},"content":"        addCommand(SAMPLE_COMMAND_4);","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"Jiwei99"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"Jiwei99"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"Jiwei99":49}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        descriptor.setBirthday(person.getBirthday().orElse(null));","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"yucheng11122017"},"content":"        descriptor.setPin(person.getPin());","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":89,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":90,"author":{"gitId":"leezhixuan"},"content":"     * Parses the {@code birthday} into a {@code EditPersonDescriptor} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-10-07"},{"lineNumber":91,"author":{"gitId":"leezhixuan"},"content":"     * that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":92,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":93,"author":{"gitId":"leezhixuan"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-10-07"},{"lineNumber":94,"author":{"gitId":"leezhixuan"},"content":"        descriptor.setBirthday(new Birthday(birthday));","lastModifiedDate":"2021-10-07"},{"lineNumber":95,"author":{"gitId":"leezhixuan"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":96,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":97,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":98,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"yucheng11122017"},"content":"     * Sets the {@code pin} and set it to the {@code EditPersonDescriptor} that we are building","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"yucheng11122017"},"content":"    public EditPersonDescriptorBuilder withPin(boolean isPinned) {","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"yucheng11122017"},"content":"        descriptor.setPin(new Pin(isPinned));","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"yucheng11122017"},"content":"        return this;","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cookiedan42":2,"Justinhoejj":1,"yucheng11122017":10,"leezhixuan":10,"-":86}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"leezhixuan"},"content":"import seedu.address.model.person.Birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"yucheng11122017"},"content":"import seedu.address.model.person.Pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"Justinhoejj"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"05061999\";","lastModifiedDate":"2021-10-08"},{"lineNumber":26,"author":{"gitId":"yucheng11122017"},"content":"    public static final String DEFAULT_PIN \u003d Pin.NOT_PINNED_STRING;","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"leezhixuan"},"content":"    private Birthday birthday;","lastModifiedDate":"2021-10-07"},{"lineNumber":34,"author":{"gitId":"yucheng11122017"},"content":"    private Pin pin;","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"leezhixuan"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);","lastModifiedDate":"2021-10-07"},{"lineNumber":46,"author":{"gitId":"yucheng11122017"},"content":"        pin \u003d new Pin(DEFAULT_PIN);","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"        birthday \u003d personToCopy.getBirthday().orElse(null);","lastModifiedDate":"2021-10-09"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"        pin \u003d personToCopy.getPin();","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"Justinhoejj"},"content":"     * Creates a {@code PersonBuilder} with null birthday.","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"Justinhoejj"},"content":"    public static PersonBuilder ofNoBirthday() {","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"        PersonBuilder person \u003d new PersonBuilder();","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"Justinhoejj"},"content":"        person.birthday \u003d null;","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"Justinhoejj"},"content":"        return person;","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":111,"author":{"gitId":"leezhixuan"},"content":"    /**","lastModifiedDate":"2021-10-07"},{"lineNumber":112,"author":{"gitId":"leezhixuan"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-07"},{"lineNumber":113,"author":{"gitId":"leezhixuan"},"content":"     */","lastModifiedDate":"2021-10-07"},{"lineNumber":114,"author":{"gitId":"leezhixuan"},"content":"    public PersonBuilder withBirthday(String birthday) {","lastModifiedDate":"2021-10-07"},{"lineNumber":115,"author":{"gitId":"leezhixuan"},"content":"        this.birthday \u003d new Birthday(birthday);","lastModifiedDate":"2021-10-07"},{"lineNumber":116,"author":{"gitId":"leezhixuan"},"content":"        return this;","lastModifiedDate":"2021-10-07"},{"lineNumber":117,"author":{"gitId":"leezhixuan"},"content":"    }","lastModifiedDate":"2021-10-07"},{"lineNumber":118,"author":{"gitId":"leezhixuan"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":119,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"yucheng11122017"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building to be null.","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"yucheng11122017"},"content":"    public PersonBuilder withNoBirthday() {","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"yucheng11122017"},"content":"        this.birthday \u003d null;","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"yucheng11122017"},"content":"        return this;","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"yucheng11122017"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"yucheng11122017"},"content":"     * Sets the {@code Pin} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"yucheng11122017"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"yucheng11122017"},"content":"    public PersonBuilder withPin(boolean isPinned) {","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"yucheng11122017"},"content":"        pin \u003d new Pin(isPinned);","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"yucheng11122017"},"content":"        return this;","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"yucheng11122017"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"yucheng11122017"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":136,"author":{"gitId":"yucheng11122017"},"content":"        return new Person(name, phone, email, address, tags, birthday, pin);","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Justinhoejj":9,"yucheng11122017":22,"leezhixuan":11,"-":97}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"cookiedan42"},"content":"import static seedu.address.commons.util.EditUtil.EditPersonDescriptor;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"        if (person.getBirthday().isPresent()) {","lastModifiedDate":"2021-10-09"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"            sb.append(PREFIX_BIRTHDAY + person.getBirthday().map(x -\u003e x.toString()).get());","lastModifiedDate":"2021-10-09"},{"lineNumber":43,"author":{"gitId":"Justinhoejj"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-10-07"},{"lineNumber":59,"author":{"gitId":"leezhixuan"},"content":"                sb.append(PREFIX_TAG).append(\" \");","lastModifiedDate":"2021-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday));","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"cookiedan42":1,"Justinhoejj":4,"leezhixuan":2,"-":60}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_EIGHTH_PERSON \u003d Index.fromOneBased(8);","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_NINETH_PERSON \u003d Index.fromOneBased(9);","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_TENTH_PERSON \u003d Index.fromOneBased(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"Justinhoejj"},"content":"    public static final Index INDEX_ELEVENTH_PERSON \u003d Index.fromOneBased(11);","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"Justinhoejj":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":5,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":6,"author":{"gitId":"leezhixuan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2021-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"leezhixuan"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2021-10-07"},{"lineNumber":32,"author":{"gitId":"yucheng11122017"},"content":"            .withBirthday(\"05021999\").build();","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"Justinhoejj"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-10-08"},{"lineNumber":37,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"16042000\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":38,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person BENSON_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday().withName(\"Benson Meier\")","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"Justinhoejj"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"Justinhoejj"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"Justinhoejj"},"content":"            .build();","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"25011997\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\", \"owesMoney\")","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"08091990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")","lastModifiedDate":"2021-10-07"},{"lineNumber":50,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"12101990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"07111990\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")","lastModifiedDate":"2021-10-07"},{"lineNumber":56,"author":{"gitId":"yucheng11122017"},"content":"            .withBirthday(\"12041990\").withTags(\"football\").withPin(true).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person HANNAH \u003d new PersonBuilder().withName(\"Hannah Worst\").withPhone(\"1234567\")","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"hhhhannah@example.com\").withAddress(\"12th street\")","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"yucheng11122017"},"content":"            .withBirthday(\"31011990\").withPin(true).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person HANNAH_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday()","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"leezhixuan"},"content":"            .withName(\"Hannah No Birthday Worst\").withPhone(\"12334567\")","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"hhhhannah@example.com\").withAddress(\"12th street\").build();","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"leezhixuan"},"content":"    public static final Person INDIGO \u003d new PersonBuilder().withName(\"Indigo Color\").withPhone(\"24422984\")","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"Justinhoejj"},"content":"            .withEmail(\"color@rainbow.com\").withAddress(\"big tokyo\")","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"yucheng11122017"},"content":"            .withBirthday(\"11101995\").withPin(true).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"Justinhoejj"},"content":"    public static final Person INDIGO_NO_BIRTHDAY \u003d PersonBuilder.ofNoBirthday()","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"leezhixuan"},"content":"            .withName(\"Indigo No Birthday Color\").withPhone(\"17263722\")","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"yucheng11122017"},"content":"            .withEmail(\"color@rainbow.com\").withAddress(\"big tokyo\").withPin(true).build();","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")","lastModifiedDate":"2021-10-07"},{"lineNumber":73,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"01102003\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")","lastModifiedDate":"2021-10-07"},{"lineNumber":76,"author":{"gitId":"Justinhoejj"},"content":"            .withBirthday(\"17121998\").build();","lastModifiedDate":"2021-10-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"leezhixuan"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)","lastModifiedDate":"2021-10-07"},{"lineNumber":81,"author":{"gitId":"leezhixuan"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":84,"author":{"gitId":"leezhixuan"},"content":"            .withBirthday(VALID_BIRTHDAY_BOB).build();","lastModifiedDate":"2021-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":101,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":102,"author":{"gitId":"cookiedan42"},"content":"     * Returns an {@code AddressBook} based on {@code getTypicalPersons()} but which has no tags.","lastModifiedDate":"2021-10-08"},{"lineNumber":103,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":104,"author":{"gitId":"cookiedan42"},"content":"     * @return Model containing tag-free contacts","lastModifiedDate":"2021-10-08"},{"lineNumber":105,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":106,"author":{"gitId":"cookiedan42"},"content":"    public static AddressBook getNoTagTypicalAddressBook() {","lastModifiedDate":"2021-10-08"},{"lineNumber":107,"author":{"gitId":"cookiedan42"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-08"},{"lineNumber":108,"author":{"gitId":"cookiedan42"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":109,"author":{"gitId":"cookiedan42"},"content":"            person \u003d new PersonBuilder(person).withTags().build();","lastModifiedDate":"2021-10-08"},{"lineNumber":110,"author":{"gitId":"cookiedan42"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-08"},{"lineNumber":111,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":112,"author":{"gitId":"cookiedan42"},"content":"        return ab;","lastModifiedDate":"2021-10-08"},{"lineNumber":113,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":114,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":115,"author":{"gitId":"cookiedan42"},"content":"    /**","lastModifiedDate":"2021-10-08"},{"lineNumber":116,"author":{"gitId":"cookiedan42"},"content":"     * Returns an {@code AddressBook} based on {@code getTypicalPersons()} but with the specified tags.","lastModifiedDate":"2021-10-08"},{"lineNumber":117,"author":{"gitId":"cookiedan42"},"content":"     *","lastModifiedDate":"2021-10-08"},{"lineNumber":118,"author":{"gitId":"cookiedan42"},"content":"     * @param tags tags to give every contact in the model","lastModifiedDate":"2021-10-08"},{"lineNumber":119,"author":{"gitId":"cookiedan42"},"content":"     * @return Model containing all contacts with the specified tags","lastModifiedDate":"2021-10-08"},{"lineNumber":120,"author":{"gitId":"cookiedan42"},"content":"     */","lastModifiedDate":"2021-10-08"},{"lineNumber":121,"author":{"gitId":"cookiedan42"},"content":"    public static AddressBook getTaggedTypicalAddressBook(String ... tags) {","lastModifiedDate":"2021-10-08"},{"lineNumber":122,"author":{"gitId":"cookiedan42"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-08"},{"lineNumber":123,"author":{"gitId":"cookiedan42"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2021-10-08"},{"lineNumber":124,"author":{"gitId":"cookiedan42"},"content":"            person \u003d new PersonBuilder(person).withTags(tags).build();","lastModifiedDate":"2021-10-08"},{"lineNumber":125,"author":{"gitId":"cookiedan42"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-08"},{"lineNumber":126,"author":{"gitId":"cookiedan42"},"content":"        }","lastModifiedDate":"2021-10-08"},{"lineNumber":127,"author":{"gitId":"cookiedan42"},"content":"        return ab;","lastModifiedDate":"2021-10-08"},{"lineNumber":128,"author":{"gitId":"cookiedan42"},"content":"    }","lastModifiedDate":"2021-10-08"},{"lineNumber":129,"author":{"gitId":"cookiedan42"},"content":"","lastModifiedDate":"2021-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"Justinhoejj"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"Justinhoejj"},"content":"                ALICE,","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"Justinhoejj"},"content":"                BENSON,","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"Justinhoejj"},"content":"                CARL,","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"Justinhoejj"},"content":"                DANIEL,","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"Justinhoejj"},"content":"                ELLE,","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"Justinhoejj"},"content":"                FIONA,","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"Justinhoejj"},"content":"                GEORGE,","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"Justinhoejj"},"content":"                HANNAH,","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"Justinhoejj"},"content":"                HANNAH_NO_BIRTHDAY,","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"Justinhoejj"},"content":"                INDIGO,","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"Justinhoejj"},"content":"                INDIGO_NO_BIRTHDAY","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"Justinhoejj"},"content":"        ));","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"cookiedan42":29,"Justinhoejj":32,"yucheng11122017":5,"leezhixuan":15,"-":64}}]
