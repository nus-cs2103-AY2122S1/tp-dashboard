[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions)","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SafeFor(H)All can get your hall management tasks done faster than traditional GUI apps. \u003cbr\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"-":3,"jaredlhf":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"mainClassName \u003d \u0027safeforhall.Main\u0027","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    archiveName \u003d \u0027safeforhall.jar\u0027","lastModifiedDate":"2021-10-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"run {","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    enableAssertions(true);","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":70,"VimuthM":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"### Project advisor: [Prof. Damith Rajapakshe](http://www.comp.nus.edu.sg/~damithch)","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"### Vimuth Mendis","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"\u003cimg src\u003d\"images/vimuthm.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"[[github](https://github.com/VimuthM)]","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"[[portfolio](team/vimuthm.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"### Lim Hern Fong, Jared","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"\u003cimg src\u003d\"images/jaredlhf.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"[[github](http://github.com/jaredlhf)]","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"[[portfolio](team/jaredlhf.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"* Role: Developer","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"### Lim Zi Yang","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"\u003cimg src\u003d\"images/gordonlzy.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"[[github](https://github.com/gordonlzy)] [[portfolio](team/gordonlzy.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"### Chong Jun Wei","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"\u003cimg src\u003d\"images/chongjunwei.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"[[github](http://github.com/chongjunwei)]","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"[[portfolio](team/chongjunwei.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"### Rebecca Lau","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"\u003cimg src\u003d\"images/rebeccalaujx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"[[github](http://github.com/rebeccalaujx)]","lastModifiedDate":"2021-09-22"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"[[portfolio](team/rebeccalaujx.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rebeccalaujx":4,"gordonlzy":3,"chongjunwei":4,"-":37,"VimuthM":6,"jaredlhf":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"### IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"This command adds multiple residents to an event by referencing the `Event` by its `Index` and the `Person` to add by their `Name` or `Room` through the `AddressBook#findPerson()` method.","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"The following activity diagram illustrates how the `AddressBook#findPerson()` method works:","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"![FindPersonActivityDiagram](images/logic/commands/includecommand/FindPersonActivityDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"The command extends the `Command` class and implements `IncludeCommand#execute()` to execute the command. A `ResidentList` which contains a list of `Person` to add to an `Event`, is a field added to an `Event`.","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"When `Event#addResidentsToEvent()` is called, it calls `ResidentList#addResidentList()` to create a new String `newResidents` that consists of current `Person` in the `Event` and append all the `Person` in `toAdd` to this String while making sure that there is no duplicate.","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"The following sequence diagram demonstrates what happens when the `IncludeCommand` is executed:","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"![IncludeCommandSequenceDiagram](images/logic/commands/includecommand/IncludeCommandSequenceDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"The following activity diagram summarizes what happens when the `IncludeCommand` is executed:","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"![IncludeCommandActivityDiagram](images/logic/commands/includecommand/IncludeCommandActivityDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"**Aspect: How to reference event in the CLI:**","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"* **Alternative 1 (current choice):** Reference by `Index`.","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"    * Pros: Easy to reference and no need to type out the whole `eventName`, `Index` is also unique.","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"    * Cons: Need to find the `Index` of the `Event` in the UI to know what `Index` the `Event` has if the number of `Event` is large.","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"* **Alternative 2:** Reference by `eventName`.","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"  itself.","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"    * Pros: Do not need to have the `Index` in UI to know what `Event` it is, can just reference it by its name.","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"    * Cons: Hard to type when the `eventName` is long, `eventName` not being unique will also cause issues .","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":280,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":281,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":282,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":283,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"gordonlzy"},"content":"* administrator of on-campus halls and residences","lastModifiedDate":"2021-09-22"},{"lineNumber":294,"author":{"gitId":"gordonlzy"},"content":"* has a need to manage a large amount of resident information","lastModifiedDate":"2021-09-22"},{"lineNumber":295,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":298,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"VimuthM"},"content":"**Value proposition**: Manage residents\u0027 information faster than a typical mouse/GUI driven app and allow easy enforcement of Covid-19 restrictions","lastModifiedDate":"2021-09-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"| Priority | As a â€¦â€‹                                 | I want to â€¦â€‹                                                                                       | So that I canâ€¦â€‹                                                                                                                    |","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"rebeccalaujx"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2021-09-25"},{"lineNumber":309,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add a residentâ€™s information into the database                                                        | keep track of the residents\u0027 data                                                                                                     |","lastModifiedDate":"2021-09-25"},{"lineNumber":310,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete a residentâ€™s information from the database                                                     | remove the data of a resident who has moved out                                                                                       |","lastModifiedDate":"2021-09-25"},{"lineNumber":311,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete many residents in a single command                                                             | save a lot of time when deleting multiple residents                                                                                   |","lastModifiedDate":"2021-09-25"},{"lineNumber":312,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | edit each residentâ€™s details                                                                          | update and reflect any changes in the residentsâ€™ details                                                                              |","lastModifiedDate":"2021-09-25"},{"lineNumber":313,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | edit the particulars of many residents in a single command                                            | save a lot of time when editing the details of multiple residents                                                                     |","lastModifiedDate":"2021-09-25"},{"lineNumber":314,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view the residentsâ€™ information                                                                       | see all the information of the current residents                                                                                      |","lastModifiedDate":"2021-09-25"},{"lineNumber":315,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | search for the residents by their name, room, email, phone number                                     | find a resident based on the information given                                                                                        |","lastModifiedDate":"2021-09-25"},{"lineNumber":316,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve a list of residents in a certain faculty                                                     | easily disseminate faculty-specific information to the residents                                                                      |","lastModifiedDate":"2021-09-25"},{"lineNumber":317,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | filter the residents by their vaccination status                                                      | use the information to disseminate information or guidelines that may be different for vaccinated and unvaccinated individuals        |","lastModifiedDate":"2021-09-25"},{"lineNumber":318,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve all residents whose FETs that are due within a given date                                    | ensure residents do not miss their FET deadlines by reminding them to do their FETs                                                   |","lastModifiedDate":"2021-09-25"},{"lineNumber":319,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve a resident\u0027s test kit collection deadlines                                                   | ensure residents do not miss their test kit collections by reminding them to collect their kits on time                               |","lastModifiedDate":"2021-09-25"},{"lineNumber":320,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add a resident\u0027s last FET date                                                                        | track and be aware of the new residentsâ€™ FET progress                                                                                 |","lastModifiedDate":"2021-09-25"},{"lineNumber":321,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | edit a resident\u0027s last FET date                                                                       | update the current residentsâ€™ last FET dates when they take a new FET                                                                 |","lastModifiedDate":"2021-09-25"},{"lineNumber":322,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add a new event                                                                                       | keep track of current and upcoming events happening in the hall/ residence                                                            |","lastModifiedDate":"2021-09-25"},{"lineNumber":323,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add residents to an event                                                                             | keep track of the residents attending an event and their information                                                                  |","lastModifiedDate":"2021-09-25"},{"lineNumber":324,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view a list of residents who were present at an event                                                 | identify who is at risk if someone in the group catches COVID                                                                         |","lastModifiedDate":"2021-09-25"},{"lineNumber":325,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | check the date of the events                                                                          | identify who was in contact with the infected person on the day of the event                                                          |","lastModifiedDate":"2021-09-25"},{"lineNumber":326,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view the help guide whenever I need to                                                                | refresh my memory on how to use the app                                                                                               |","lastModifiedDate":"2021-09-25"},{"lineNumber":327,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | immediately see residents who have missed their FET deadlines                                         | disseminate a reminder to these residents to take a new FET test                                                                      |","lastModifiedDate":"2021-09-25"},{"lineNumber":328,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | retrieve the event venues and its maximum capacity and the number of residents attending an event     | ensure that the number of residents attending the event will not exceed the capacity of the event venue                               |","lastModifiedDate":"2021-09-25"},{"lineNumber":329,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | retrieve the vaccination statuses of the residents attending an event                                 | ensure that COVID restrictions are adhered to and everyone attending the event is vaccinated                                          |","lastModifiedDate":"2021-09-25"},{"lineNumber":330,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | delete an event                                                                                       | remove an event that has been cancelled                                                                                               |","lastModifiedDate":"2021-09-25"},{"lineNumber":331,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | filter the residents by block and level                                                               | easily contact a group of students in order to disseminate group-specific information                                                 |","lastModifiedDate":"2021-09-25"},{"lineNumber":332,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | import user data from a CSV file                                                                      | input multiple residents\u0027 information into the system at once without having to add each resident\u0027s information line-by-line          |","lastModifiedDate":"2021-09-25"},{"lineNumber":333,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | output the emails of the residents whose FET/collection are due soon into a file                      | disseminate information to the residents more easily                                                                                  |","lastModifiedDate":"2021-09-25"},{"lineNumber":334,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | edit an event                                                                                         | edit an eventâ€™s details if there are any changes                                                                                      |","lastModifiedDate":"2021-09-25"},{"lineNumber":335,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | check which CCA booked a certain facility                                                             | find out which CCA is responsible in case trouble arises                                                                              |","lastModifiedDate":"2021-09-25"},{"lineNumber":336,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | check a residentâ€™s prior activities (events/ CCAs)                                                    | find out which group has come into contact with the infected person                                                                   |","lastModifiedDate":"2021-09-25"},{"lineNumber":337,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | new user of the app                        | view a detailed guide on how to use basic functions                                                   | learn how to navigate within the app and use the commands                                                                             |","lastModifiedDate":"2021-09-25"},{"lineNumber":338,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | ensure there is no duplication among the residentsâ€™ names and rooms                                   | avoid having multiple entries of the same resident                                                                                    |","lastModifiedDate":"2021-09-25"},{"lineNumber":339,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | retrieve a list of residents in a certain CCA                                                         | easily disseminate CCA-specific information to the residents                                                                          |","lastModifiedDate":"2021-09-25"},{"lineNumber":340,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | easily carry out contact tracing                                                                      | quarantine can be done quickly in the case where one person in the group catches COVID                                                |","lastModifiedDate":"2021-09-25"},{"lineNumber":341,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | see a pop-up of the format of the command once I type it                                              | input the data in the correct format correctly on my first try                                                                        |","lastModifiedDate":"2021-09-25"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"jaredlhf"},"content":"(For all use cases below, the **System** is the `SafeFor(H)All app` and the **Actor** is the `Hall admin`, unless specified otherwise)","lastModifiedDate":"2021-09-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC01 - Delete a resident**","lastModifiedDate":"2021-09-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"jaredlhf"},"content":"1.  Actor requests to list residents","lastModifiedDate":"2021-09-29"},{"lineNumber":354,"author":{"gitId":"jaredlhf"},"content":"2.  System shows a list of residents","lastModifiedDate":"2021-09-29"},{"lineNumber":355,"author":{"gitId":"jaredlhf"},"content":"3.  Actor requests to delete a specific resident in the list","lastModifiedDate":"2021-09-29"},{"lineNumber":356,"author":{"gitId":"jaredlhf"},"content":"4.  System deletes the resident","lastModifiedDate":"2021-09-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"jaredlhf"},"content":"    * 3a1. System shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC02 - Remind residents to take FET**","lastModifiedDate":"2021-09-29"},{"lineNumber":373,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":374,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":375,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":376,"author":{"gitId":"jaredlhf"},"content":"1. Actor filters residents, specifying desired FET due date.","lastModifiedDate":"2021-09-29"},{"lineNumber":377,"author":{"gitId":"jaredlhf"},"content":"2. System shows the list of residents filtered.","lastModifiedDate":"2021-09-29"},{"lineNumber":378,"author":{"gitId":"jaredlhf"},"content":"3. Actor requests for a list of the email addresses of the residents shown.","lastModifiedDate":"2021-09-29"},{"lineNumber":379,"author":{"gitId":"jaredlhf"},"content":"4. System outputs the list email addresses.","lastModifiedDate":"2021-09-29"},{"lineNumber":380,"author":{"gitId":"jaredlhf"},"content":"5. Actor sends an email to these residents to remind them to take their FET soon.","lastModifiedDate":"2021-09-29"},{"lineNumber":381,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":382,"author":{"gitId":"jaredlhf"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":383,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":384,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":385,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":386,"author":{"gitId":"jaredlhf"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":387,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":388,"author":{"gitId":"jaredlhf"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":389,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":390,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC03 - View residents involved in an event**","lastModifiedDate":"2021-09-29"},{"lineNumber":391,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":392,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":393,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":394,"author":{"gitId":"jaredlhf"},"content":"1. Actor navigates to the `events` tab of the application.","lastModifiedDate":"2021-09-29"},{"lineNumber":395,"author":{"gitId":"jaredlhf"},"content":"2. Actor requests to view an event.","lastModifiedDate":"2021-09-29"},{"lineNumber":396,"author":{"gitId":"jaredlhf"},"content":"3. System shows the list of residents involved in the event and their relevant personal information.","lastModifiedDate":"2021-09-29"},{"lineNumber":397,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":398,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":399,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":400,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":401,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":402,"author":{"gitId":"jaredlhf"},"content":"* 3a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":403,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":404,"author":{"gitId":"jaredlhf"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":405,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":406,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC04 - View any unvaccinated residents involved in an event**","lastModifiedDate":"2021-09-29"},{"lineNumber":407,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":408,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":409,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":410,"author":{"gitId":"jaredlhf"},"content":"1. Actor \u003cu\u003eviews residents involved in an event (UC03)\u003c/u\u003e","lastModifiedDate":"2021-09-29"},{"lineNumber":411,"author":{"gitId":"jaredlhf"},"content":"2. Actor filters for unvaccinated residents.","lastModifiedDate":"2021-09-29"},{"lineNumber":412,"author":{"gitId":"jaredlhf"},"content":"3. System shows the list of unvaccinated residents.","lastModifiedDate":"2021-09-29"},{"lineNumber":413,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":414,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":415,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":416,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":417,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":418,"author":{"gitId":"jaredlhf"},"content":"* 3a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":419,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":420,"author":{"gitId":"jaredlhf"},"content":"  Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":421,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":422,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"VimuthM"},"content":"4.  Should be targeted towards a single user and not multi-users.","lastModifiedDate":"2021-09-23"},{"lineNumber":430,"author":{"gitId":"VimuthM"},"content":"5.  Data stored locally should be in a human editable text file.","lastModifiedDate":"2021-09-23"},{"lineNumber":431,"author":{"gitId":"VimuthM"},"content":"6.  Do not make use of a DBMS to manage data.","lastModifiedDate":"2021-09-23"},{"lineNumber":432,"author":{"gitId":"VimuthM"},"content":"7.  Final software should be platform-independent.","lastModifiedDate":"2021-09-23"},{"lineNumber":433,"author":{"gitId":"VimuthM"},"content":"8.  The software shouldn\u0027t depend on our own remote server.","lastModifiedDate":"2021-09-23"},{"lineNumber":434,"author":{"gitId":"VimuthM"},"content":"9.  Application is to be packaged into a single JAR file.","lastModifiedDate":"2021-09-23"},{"lineNumber":435,"author":{"gitId":"VimuthM"},"content":"10. JAR file size to be limited to 100MB and documents to 15MB/file.","lastModifiedDate":"2021-09-23"},{"lineNumber":436,"author":{"gitId":"VimuthM"},"content":"11. UG and DG are to be pdf-friendly.","lastModifiedDate":"2021-09-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rebeccalaujx":34,"gordonlzy":35,"-":359,"VimuthM":9,"jaredlhf":57}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"   1. Run the `safeforhall.Main` and try a few commands.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBookâ€™s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"-":54,"VimuthM":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"   e.g. `safeforhall.commons.StringUtilTest`","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"   e.g. `StorageManagerTest`","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"   e.g. `LogicManagerTest`","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"-":33,"VimuthM":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"Are you a hall administrator in-charge of managing residents in NUS? Do you have to fumble through multiple different excel sheets just to look for a resident\u0027s information? Are you worried residents might be subject to the dangers of the pandemic? Well look no further as SafeFor(H)All is the application you need!","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a **desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SafeFor(H)All can get your hall management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"1. Download the latest `safeforhall.jar` from [here](https://www.youtube.com/watch?v\u003ddQw4w9WgXcQ).","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your SafeFor(H)All Application.","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"   * **`view`** : Lists all contacts.","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"   * **`add`**`n/John Doe r/A100 v/true f/SoC` : Adds a resident named `John Doe` to the application.","lastModifiedDate":"2021-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"   * **`delete`**`3` : Deletes the 3rd resident shown in the current list.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"  e.g `view [INDEX]` can be used as `view` or as `view 100`.","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"  e.g. if the command specifies `n/NAME f/FACULTY`, `f/FACULTY n/NAME` is also acceptable.","lastModifiedDate":"2021-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"  e.g. if you specify `v/t v/f` only `v/t` will be taken.","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"Make changes -\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"### Adding a residentâ€™s information : `add`","lastModifiedDate":"2021-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"Adds a resident and their information to the application.","lastModifiedDate":"2021-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL r/ROOM v/VACCINATION_STATUS f/FACULTY [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]`","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"* `NAME` has to be unique","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"* `ROOM` is of the form `BLOCK` + `LEVEL` + `NUMBER`, where `BLOCK` is an alphabet, `LEVEL` and `NUMBER` make up 3 digits. e.g. `A100`","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"* `VACCINATION_STATUS` can be `T` or `F` (case insensitive)","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"* `FACULTY` has to be a single alphabetical word","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"* The dates inputted for `LAST_FET_DATE` and `LAST_COLLECTION_DATE` has to be in dd-mm-yyyy format","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com r/A100 v/t f/SoC`","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"* `add n/Betsy Crowe e/betsyc@example.com v/F r/B400 p/1234567 f/FASS fd/20-10-2021 cd/23-10-2021`","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"### Viewing residentsâ€™ information : `view`","lastModifiedDate":"2021-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"Shows a numbered list of all the residents in the address book.","lastModifiedDate":"2021-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"The optional argument [INDEX] will show the details of the","lastModifiedDate":"2021-09-22"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"resident at the specified index.","lastModifiedDate":"2021-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"The index of the resident is the corresponding number in the list","lastModifiedDate":"2021-09-22"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"shown when `view` (without the [INDEX] parameter) is called.","lastModifiedDate":"2021-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"Format: `view [INDEX]`","lastModifiedDate":"2021-09-22"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"* For an index i, 1 \u0026leq; i \u0026leq; n, where n is the number of residents in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"Examples:","lastModifiedDate":"2021-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"* `view` shows a list of all the residents","lastModifiedDate":"2021-09-22"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"* `view 30` shows the details of the resident at index 30","lastModifiedDate":"2021-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"### List of residents whose fet or test kit collection deadline is over or due soon: `list`","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"Lists residents whose ART collection or FET tests are due within the range of the given date or the range of the 2 dates given.","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"Format: `list k/KEYWORD d1/DATE1 d2/DATE2` or `list k/LATE_KEYWORD d1/DATE1`","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"* Normal keywords are `f` for fet and `c` for collection","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"* Late keywords are `lf` for late fet and `lc` for late collection","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"* The date inputted has to be in `dd-mm-yyyy` format  ","lastModifiedDate":"2021-09-21"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"* When a normal keyword is given, both date1 and date2 have to be inputted","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"* The given Date2 must be a date later than the given Date1","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"* `date1` is the start date and `date2` is the last date inclusive  ","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"* When a late keyword is given, only date1 should be given","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"* Anyone whose fet and collection is due before but not on `date1` is outputted  ","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"* `list k/f d1/10-10-2021 d2/12-10-2021` retrieves a list of residents whose `FET` is due between `10 Oct 2021` and `12 Oct 2021`, inclusive","lastModifiedDate":"2021-10-20"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"* `list k/f d1/15-10-2021 d2/20-10-2021` retrieves a list of residents whose `Test Kit Collection` is due some day between `15 Oct 2021` and `20 Oct 2021`, inclusive","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"* `list k/lf d1/11-10-2021` retrieves a list of residents whose `FET` is due before `11 Oct 2021`","lastModifiedDate":"2021-10-20"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"* `list k/lc d1/12-10-2021` retrieves a list of residents whose `Test Kit Collection` is due before `12 Oct 2021`","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"### Searching by resident information: `search`","lastModifiedDate":"2021-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"Filters for residents by the provided keywords for each available parameter.","lastModifiedDate":"2021-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"Format: `search n/KEYWORD [MORE_KEYWORDS] [FLAG/KEYWORD]...`","lastModifiedDate":"2021-09-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`, `True` will match `true`","lastModifiedDate":"2021-09-22"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"* The order of the keywords provided for the name does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2021-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"* Residents matching at least one keyword for the name will be returned (i.e. `OR` search).","lastModifiedDate":"2021-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"* `search n/John` returns `john` and `John Doe`","lastModifiedDate":"2021-09-22"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"* `search n/alex david v/true` returns vaccinated residents, `Alex Yeoh` and `David Li`","lastModifiedDate":"2021-09-22"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"* `search v/false f/soc` returns un-vaccinated residents from SoC \u003cbr\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"### Editing a resident : `edit`","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"Edits the details of existing residents in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"Format: `edit INDEXâ€¦ [n/NAME] [r/ROOM] [p/PHONE] [e/EMAIL] [v/VACCINATION_STATUS] [f/FACULTY] [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]`","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"* Edit the residents at the specified `INDEXES`. ","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"* Each index refers to the index number shown in the displayed resident list. ","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"* The indexes **must be positive integers** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-09-25"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-09-25"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"* Edit multiple residents in a single command by inputting multiple indexes, each separated by a space.","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-25"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"*  `edit 1 e/johndoe@example.com r/A101` Edits the email address and room number of the 1st resident to be `johndoe@example.com` and `A101` respectively.","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"*  `edit 1 2 3 v/true fd/20-10-2021` Sets the vaccination status of the 1st, 2nd, and 3rd resident as vaccinated, and sets their last FET dates to 20-10-2021.","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"### Deleting a resident : `delete`","lastModifiedDate":"2021-09-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"Deletes specified residents from the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"Format: `delete INDEXâ€¦`","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"* Delete the residents at the specified `INDEXES`.","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"* Each index refers to the index number shown in the displayed resident list.","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"* The indexes **must be positive integers** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"* Delete multiple residents in a single command by inputting multiple indexes, each separated by a space.","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"Examples:","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"* `view` followed by `delete 1 2 3` deletes the first 3 residents in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"* `find n/Anne` followed by `delete 1` deletes the 1st resident named Anne in the results of the `find` command.","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"### Editing an event : `edit`","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"Edits an existing event in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"Format: `edit INDEX [n/EVENT_NAME] [d/EVENT_DATE] [l/VENUE] [c/CAPACITY]`","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"* Edits the event at the specified `INDEX`.","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"* The index refers to the index number shown in the displayed event list.","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"*  `edit 1 n/Football Training l/Field c/50` Edits the name, venue, and capacity of the 1st event in the event list to be `Football Training`, `Field`, and `50` respectively.","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"### Add residents to an Event: `include`","lastModifiedDate":"2021-10-20"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"Add multiple residents to an event based on the information given(name or room number), a resident is only expected to be given one piece of information.","lastModifiedDate":"2021-10-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"Format: `include INDEX r/INFORMATION [, MORE INFORMATION]`","lastModifiedDate":"2021-10-20"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":198,"author":{"gitId":"gordonlzy"},"content":"* Resident information can be given in the form of name or room, but all has to be all rooms or all names","lastModifiedDate":"2021-10-20"},{"lineNumber":199,"author":{"gitId":"gordonlzy"},"content":"* When adding multiple residents, each piece of information is separated by a comma","lastModifiedDate":"2021-10-20"},{"lineNumber":200,"author":{"gitId":"gordonlzy"},"content":"* The information inputted is case-insensitive","lastModifiedDate":"2021-10-20"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"* If one or more of the given information is invalid, an error message is outputted and none of the residents are added to the event","lastModifiedDate":"2021-10-20"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"Examples:","lastModifiedDate":"2021-10-20"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"* `include 1 r/A101` adds the resident who stays in room A101 to the first event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"* `include 2 r/A101, A102, A103` adds the residents who stay in rooms A101, A102 and A103 to the second event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"* `include 3 r/John Doe` adds John Doe to the third event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"* `include 4 r/John Doe, Jane Doe` adds John Doe and Jane Doe to the fourth event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":209,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"jaredlhf"},"content":"**Add** |  `add n/NAME p/PHONE_NUMBER e/EMAIL r/ROOM v/VACCINATION_STATUS f/FACULTY [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]` \u003cbr\u003e e.g. `add n/Betsy Crowe e/betsyc@example.com v/F r/B400 p/1234567 f/FASS fd/20-10-2021 cd/23-10-2021`","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"VimuthM"},"content":"**View** | `view [INDEX]` \u003cbr\u003e e.g. `view 30`","lastModifiedDate":"2021-09-22"},{"lineNumber":229,"author":{"gitId":"gordonlzy"},"content":"**List** | `list k/KEYWORD d1/DATE1 d2/DATE` \u003cbr\u003e e.g. `list k/f 15-8-2021 20-08-2021`","lastModifiedDate":"2021-10-20"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"**Search** | `search n/KEYWORD [MORE_KEYWORDS] [FLAG/KEYWORD]â€¦` \u003cbr\u003e e.g. `search n/john alex v/false f/fass` ","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"**Edit** | **Resident:** \u003cbr\u003e `edit INDEXâ€¦ [FLAG/UPDATED_PARTICULARS]â€¦`\u003cbr\u003e e.g., `edit 1 2 3 v/true fd/20-10-2021` \u003cbr\u003e\u003cbr\u003e **Event:** \u003cbr\u003e `edit INDEX [FLAG/UPDATED_PARTICULARS]â€¦`\u003cbr\u003e e.g., `edit 1 n/Football Training l/Field`","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"**Delete** | **Resident:** \u003cbr\u003e `delete INDEXâ€¦` \u003cbr\u003e e.g. `delete 1 2 3`","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"gordonlzy"},"content":"**Include** | `include INDEX r/INFORMATION [,MORE_INFORMATION]` \u003cbr\u003e e.g. `include 1 r/A102, E416`","lastModifiedDate":"2021-10-20"},{"lineNumber":234,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"VimuthM"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"rebeccalaujx":32,"chongjunwei":9,"gordonlzy":32,"-":125,"VimuthM":23,"jaredlhf":14}},{"path":"docs/diagrams/logic/commands/includecommand/FindPersonActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"start","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":":findPerson(information) method gets called;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"if () then ([valid Room])","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    :Find a person whose room match information;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    if () then ([Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"        :Return person;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    else ([Not Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"        :Return Empty;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    endif","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"else([invalid Room])","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"if () then ([valid Name])","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    :Find a person whose name match information;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    if () then ([Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        :Return person;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    else ([Not Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        :Return Empty;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    endif","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"else ([invalid Name])","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"stop","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":27}},{"path":"docs/diagrams/logic/commands/includecommand/IncludeCommandActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"start","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":":User executes command;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"if () then ([command addResidentsToEvent])","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    :Create new String of old and new Residents;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    :Create a new edited Event;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    :Save editedEvent to addressBook;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    :Update filteredEventList;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"else ([else])","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"stop","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":16}},{"path":"docs/diagrams/logic/commands/includecommand/IncludeCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"!include ../../../style.puml","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"participant \"i:IncludeCommand\" as IncludeCommand LOGIC_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"end box","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"participant \"current:Event\" as currEvent MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"participant \"edited:Event\" as editedEvent MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"end box","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"[-\u003e LogicManager : execute(include)","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"activate LogicManager","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(include)","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"create IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"AddressBookParser -\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"activate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand --\u003e AddressBookParser","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"deactivate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"AddressBookParser --\u003e LogicManager : i","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"LogicManager -\u003e IncludeCommand : execute()","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"activate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : getFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"Model -\u003e AddressBook : getFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"activate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"AddressBook --\u003e Model :","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand : eventList","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"create currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e currEvent : eventList.get(Index)","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"activate currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"currEvent --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"deactivate currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : toPersonList()","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"loop for all person(names or rooms) in list","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"Model -\u003e AddressBook : findPerson(person)","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"activate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"AddressBook --\u003e Model :","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand : toAdd","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : getCurrentEventResidents()","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"loop for all person(names) in list","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"Model -\u003e AddressBook : findPerson(person)","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"activate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"AddressBook --\u003e Model :","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"end","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand : currentResidents","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e currEvent : addResidentsToEvent(toAdd, currentResidents)","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"activate currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"currEvent --\u003e IncludeCommand : newResidents","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"deactivate currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"create editedEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e editedEvent : Class(newResidents)","lastModifiedDate":"2021-10-21"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"activate editedEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"editedEvent --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"deactivate editedEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : setEvent(current, edited)","lastModifiedDate":"2021-10-21"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"Model -\u003e AddressBook : setEvent(current, edited)","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"activate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"AddressBook --\u003e Model","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : updateFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"Model -\u003e AddressBook : updateFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"activate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"AddressBook --\u003e Model","lastModifiedDate":"2021-10-21"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"deactivate AddressBook","lastModifiedDate":"2021-10-21"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-21"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"deactivate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2021-10-21"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"destroy IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":126}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"title: SafeFor(H)All app","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg?token\u003dALPAMIBNHM)](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp)","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"**SafeFor(H)All is a desktop application for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"* If you are interested in using SafeFor(H)All, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"* If you are interested about developing SafeFor(H)All, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":6,"-":14}},{"path":"docs/team/chongjunwei.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"title: Jun Wei\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"## (To be updated)","lastModifiedDate":"2021-09-22"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-22"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-22"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-22"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-22"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-22"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"* **Project management**:","lastModifiedDate":"2021-09-22"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-22"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-22"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-22"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-22"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-22"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-22"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"* **Tools**:","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-22"}],"authorContributionMap":{"chongjunwei":47}},{"path":"docs/team/gordonlzy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"title: Zi Yang\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-07-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"gordonlzy":1,"-":45}},{"path":"docs/team/jaredlhf.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"layout: page","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"title: Jared\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"## (To be updated)","lastModifiedDate":"2021-09-21"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-21"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-21"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-21"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-21"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-21"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-21"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"* **Project management**:","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-21"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-21"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"  * User Guide:","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-21"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-21"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"* **Community**:","lastModifiedDate":"2021-09-21"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-21"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-21"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-21"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-21"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"* **Tools**:","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"jaredlhf":47}},{"path":"docs/team/rebeccalaujx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"title: Rebecca\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"## (To be updated)","lastModifiedDate":"2021-09-23"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-23"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-23"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-23"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-23"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-23"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-23"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"* **Project management**:","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-23"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-23"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-23"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-23"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"    * User Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-23"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-23"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-23"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"* **Community**:","lastModifiedDate":"2021-09-23"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-23"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"* **Tools**:","lastModifiedDate":"2021-09-23"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-23"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"gordonlzy":47}},{"path":"docs/team/vimuthm.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"title: John Doe\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-20"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"## (To be updated)","lastModifiedDate":"2021-09-20"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-09-20"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-20"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2021-09-20"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2021-09-20"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"* **Project management**:","lastModifiedDate":"2021-09-20"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2021-09-20"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-20"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-09-20"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2021-09-20"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-20"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    * User Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2021-09-20"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2021-09-20"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2021-09-20"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"* **Community**:","lastModifiedDate":"2021-09-20"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-09-20"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-09-20"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-09-20"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-09-20"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"* **Tools**:","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2021-09-20"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2021-09-20"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2021-09-20"}],"authorContributionMap":{"VimuthM":47}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"import static CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the personâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"Simply add the following to [`PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-10-04"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"Thatâ€™s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBookâ€™s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Letâ€™s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":398,"VimuthM":3}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Letâ€™s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"The `address` field in `Person` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Letâ€™s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":111,"VimuthM":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. â€¦â€‹\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEAâ€™s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `Logic`.","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"A quick look at the `Logic` (an extract given below) confirms that this indeed might be what weâ€™re looking for.","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what weâ€™re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now letâ€™s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so letâ€™s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Letâ€™s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Letâ€™s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Letâ€™s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Letâ€™s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":299,"VimuthM":2}},{"path":"src/main/java/safeforhall/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.FileUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"VimuthM":3,"-":61}},{"path":"src/main/java/safeforhall/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"VimuthM":1,"-":24}},{"path":"src/main/java/safeforhall/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Version;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.ConfigUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.LogicManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.AddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.Storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.StorageManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.UserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.ui.Ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.ui.UiManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SafeFor(H)All ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Data file not found. Will be starting with a sample SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"Starting SafeFor(H)All \" + MainApp.VERSION);","lastModifiedDate":"2021-10-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SafeFor(H)All ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":31,"-":152}},{"path":"src/main/java/safeforhall/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":62}},{"path":"src/main/java/safeforhall/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":78}},{"path":"src/main/java/safeforhall/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    private static final String LOG_FILE \u003d \"safeforhall.log\";","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":110}},{"path":"src/main/java/safeforhall/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":1,"VimuthM":1,"-":11}},{"path":"src/main/java/safeforhall/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":115}},{"path":"src/main/java/safeforhall/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core.index;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"VimuthM":1,"-":53}},{"path":"src/main/java/safeforhall/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":10}},{"path":"src/main/java/safeforhall/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":1,"-":20}},{"path":"src/main/java/safeforhall/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":2,"-":40}},{"path":"src/main/java/safeforhall/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":1,"-":34}},{"path":"src/main/java/safeforhall/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":3,"-":20}},{"path":"src/main/java/safeforhall/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":82}},{"path":"src/main/java/safeforhall/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":140}},{"path":"src/main/java/safeforhall/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":66}},{"path":"src/main/java/safeforhall/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"     * @param isResidentTab","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    CommandResult execute(String commandText, Boolean isResidentTab) throws CommandException, ParseException;","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    /** Returns an unmodifiable view of the filtered list of events */","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"chongjunwei":4,"VimuthM":11,"-":41}},{"path":"src/main/java/safeforhall/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.AddressBookParser;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.Storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    public CommandResult execute(String commandText, Boolean isResidentTab) throws CommandException, ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText, isResidentTab);","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        return model.getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"chongjunwei":6,"VimuthM":14,"-":67}},{"path":"src/main/java/safeforhall/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":3,"-":20}},{"path":"src/main/java/safeforhall/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":3,"-":17}},{"path":"src/main/java/safeforhall/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":1,"-":70}},{"path":"src/main/java/safeforhall/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"VimuthM":2,"-":17}},{"path":"src/main/java/safeforhall/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.RoomValidCheckPredicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":" * Finds and lists all persons in address book whose parameters matched any of the provided argument keywords.","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all residents whose parameters match any of \"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            + \"the provided keywords for different options (case-insensitive) and displays them as a \"","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            + \"list with index numbers.\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            + \"Note that room can searched for by block (A), level (1), and block-level (A1) as well. \"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_ROOM + \"ROOM] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_FACULTY + \"FACULTY] \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_NAME + \"david li \"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"T \"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_FACULTY + \"SoC\";","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Matching residents listed.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_NOT_FILTERED \u003d \"At least one field to filter be must be provided.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    private final FindCompositePredicate predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    public FindCommand(FindCompositePredicate predicate) {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"     * Stores the predicates to search the address book with. Each non-empty field value will be used for filtering.","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"    public static class FindCompositePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPerson\u003e name;","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPerson\u003e room;","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPhone\u003e phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cEmail\u003e email;","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cVaccStatus\u003e vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cFaculty\u003e faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        // For equality checks","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        private Name eName;","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        private String eRoom;","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        private Phone ePhone;","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        private Email eEmail;","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        private VaccStatus eVaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        private Faculty eFaculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"        public FindCompositePredicate() {}","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"        public FindCompositePredicate(FindCompositePredicate toCopy) {","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"            this.name \u003d toCopy.name;","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"            this.room \u003d toCopy.room;","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"            this.phone \u003d toCopy.phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"            this.email \u003d toCopy.email;","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d toCopy.vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"            this.faculty \u003d toCopy.faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"            this.eName \u003d toCopy.eName;","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"            this.eRoom \u003d toCopy.eRoom;","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            this.ePhone \u003d toCopy.ePhone;","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"            this.eEmail \u003d toCopy.eEmail;","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"            this.eVaccStatus \u003d toCopy.eVaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            this.eFaculty \u003d toCopy.eFaculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"         * Returns true if at least one field is to be filtered with.","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        public boolean isAnyFieldFiltered() {","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"            return CollectionUtil.isAnyNonNull(name, room, phone, email, vaccStatus, faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"            this.eName \u003d new Name(String.join(\" \", name.fullName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"            this.name \u003d new NameContainsKeywordsPredicate(Arrays.asList(name.fullName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        public void setRoom(String room) {","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"            this.eRoom \u003d room;","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            this.room \u003d new RoomValidCheckPredicate(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            this.ePhone \u003d phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            this.phone \u003d phone::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"            this.eEmail \u003d email;","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"            this.email \u003d email::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        public void setVaccStatus(VaccStatus vaccStatus) {","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"            this.eVaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d vaccStatus::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        public void setFaculty(Faculty faculty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"            this.eFaculty \u003d faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"            this.faculty \u003d faculty::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cPerson\u003e\u003e getName() {","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cPerson\u003e\u003e getRoom() {","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(room);","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cPhone\u003e\u003e getPhone() {","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cEmail\u003e\u003e getEmail() {","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cVaccStatus\u003e\u003e getVaccStatus() {","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cFaculty\u003e\u003e getFaculty() {","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"         * Tests if the provided person matches all the available criteria.","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"         *","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"         * @param person The Person object to test","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"         * @return True if matches all the preset criteria","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        public boolean test(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"            List\u003cPredicate\u003cPerson\u003e\u003e allPredicates \u003d Arrays.asList(","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getName().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getRoom().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-17"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getPhone().orElse(x -\u003e true).test(p.getPhone()),","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getEmail().orElse(x -\u003e true).test(p.getEmail()),","lastModifiedDate":"2021-10-11"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getVaccStatus().orElse(x -\u003e true).test(p.getVaccStatus()),","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getFaculty().orElse(x -\u003e true).test(p.getFaculty()));","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"            return allPredicates","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"                    .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"                    .reduce(p -\u003e true, Predicate::and)","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"                    .test(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"VimuthM"},"content":"                return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"            if (!(other instanceof FindCompositePredicate)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"                return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"            // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate e \u003d (FindCompositePredicate) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"            return Objects.equals(eName, e.eName)","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eRoom, e.eRoom)","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(ePhone, e.ePhone)","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eEmail, e.eEmail)","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eVaccStatus, e.eVaccStatus)","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eFaculty, e.eFaculty);","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"VimuthM":186,"-":31}},{"path":"src/main/java/safeforhall/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":2,"-":19}},{"path":"src/main/java/safeforhall/logic/commands/IncludeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":" * Adds a resident to an event.","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"include\";","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds residents to the given event. \"","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"            + \"INDEX \"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"ROOM/NAME \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            + \"1 \"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"A101, A102, A103\";","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Residents (%s) added to event %s\";","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private final Index index;","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    private final ResidentList residentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"     * Creates an IncludeCommand to add the specified {@code EventName} and {@code InformationList}","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    public IncludeCommand(Index index, ResidentList residentList) {","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        this.residentList \u003d residentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     * Checks if there are any person from {@code toAdd} who is already in {@code currentResidents}","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    public void checkForDuplicates(ArrayList\u003cPerson\u003e toAdd, ArrayList\u003cPerson\u003e currentResidents)","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        int foundDuplicate \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder names \u003d new StringBuilder();","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        for (Person p : toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"            if (currentResidents.contains(p)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"                if (foundDuplicate \u003d\u003d 0) {","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"                    names.append(p.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                    names.append(\", \").append(p.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"                foundDuplicate++;","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        if (foundDuplicate \u003d\u003d 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(names.toString() + \" is already in this event\");","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        } else if (foundDuplicate \u003e 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(names.toString() + \" are already in this event\");","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        Event event;","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"            event \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"Index given is invalid\");","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e currentResidents \u003d model.getCurrentEventResidents(event.getResidents());","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        checkForDuplicates(toAdd, currentResidents);","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        String newResidents \u003d event.addResidentsToEvent(currentResidents, toAdd);","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d new Event(event.getEventName(), event.getEventDate(), event.getVenue(),","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"                event.getCapacity(), new ResidentList(newResidents));","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        model.setEvent(event, editedEvent);","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        String resultMsg \u003d String.format(MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"                .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(), event.getEventName());","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        return new CommandResult(resultMsg);","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof IncludeCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 index.equals(((IncludeCommand) other).index));","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":102}},{"path":"src/main/java/safeforhall/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameMissedDeadlinePredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameNearLastDatePredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":" * Lists all persons whose ART Collection or FET tests are due on the given date if one day is given or due within a","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":" * range of 2 dates if 2 dates are given.","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists residents whose ART collection or\"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"            + \"FET tests are due within the range of the given date or the range of the 2 dates given. \"","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"KEYWORD \"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"DATE \"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE2 + \"DATE \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"f \"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"30-09-2021 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE2 + \"05-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE_LATE \u003d COMMAND_WORD + \": Lists residents whose ART collection or\"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            + \"FET tests are due before the given date. \"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"KEYWORD \"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"DATE \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"lf \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"30-09-2021 \";","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_ART \u003d \"Listed all residents whose ART collections are due on the \"","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"            + \"given range of dates\";","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_FET \u003d \"Listed all residents whose FET are due on the given range of \"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"            + \"dates\";","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_MISSED_ART \u003d \"Listed all residents whose ART collections are due \"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"            + \"before the given date\";","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_MISSED_FET \u003d \"Listed all residents whose FET are due before the \"","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"            + \"given date\";","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SECOND_DATE_EARLIER_THAN_FIRST \u003d \"The second date inputted is earlier than \"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"            + \"the first\";","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_WRONG_KEYWORD \u003d \"Wrong keyword parsed\";","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    public static final String ART_KEYWORD \u003d \"c\";","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public static final String FET_KEYWORD \u003d \"f\";","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    public static final String LATE_ART_KEYWORD \u003d \"lc\";","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    public static final String LATE_FET_KEYWORD \u003d \"lf\";","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"     * Creates an ListCommand to add the specified {@code String}","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    public ListCommand(String keyword, LastDate date1) {","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(keyword);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(\"lf\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameMissedDeadlinePredicate(FET_KEYWORD, date1);","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        } else if (keyword.equals(\"lc\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameMissedDeadlinePredicate(ART_KEYWORD, date1);","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameNearLastDatePredicate(keyword, date1);","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"     * Creates an ListCommand to add the specified {@code String, LastDate}","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    public ListCommand(String keyword, LastDate date1, LastDate date2) {","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(keyword);","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date1);","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date2);","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        this.predicate \u003d new NameNearLastDatePredicate(keyword, date1, date2);","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        long period \u003d ChronoUnit.DAYS.between(date1.toLocalDate(), date2.toLocalDate());","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        if (period \u003c 0) {","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_SECOND_DATE_EARLIER_THAN_FIRST);","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"        switch (keyword) {","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        case ART_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ART);","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        case FET_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_FET);","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        case LATE_ART_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_MISSED_ART);","lastModifiedDate":"2021-10-11"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        case LATE_FET_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_MISSED_FET);","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        default:","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_WRONG_KEYWORD);","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof ListCommand // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date1.equals(((ListCommand) other).date1)","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date2.equals(((ListCommand) other).date2)); // state check","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":106,"VimuthM":2,"-":16}},{"path":"src/main/java/safeforhall/logic/commands/add/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_DATE + \"DATE \"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_VENUE + \"VENUE \"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"CAPACITY \"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_NAME + \"Football \"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_DATE + \"03-01-2021 \"","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_VENUE + \"NUS field \"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"5 \";","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    private final Event toAdd;","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        toAdd \u003d event;","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        if (model.hasEvent(toAdd)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        model.addEvent(toAdd);","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":50,"VimuthM":9}},{"path":"src/main/java/safeforhall/logic/commands/add/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resident to the address book. \"","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_ROOM + \"ROOM \"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS \"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FACULTY + \"FACULTY \"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FETDATE + \"LAST FET DATE \"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_COLLECTIONDATE + \"LAST COLLECTION DATE \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_ROOM + \"A100 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"T \"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FACULTY + \"SoC \"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FETDATE + \"20-10-2021 \"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_COLLECTIONDATE + \"23-10-2021 \";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New resident added: %1$s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident already exists in the address book\";","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public AddPersonCommand(Person person) {","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":20,"-":38,"jaredlhf":13}},{"path":"src/main/java/safeforhall/logic/commands/delete/DeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeleteEventCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"            + \": Deletes the events identified by the index number used in the displayed event list.\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space)\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Events: \\n%1$s\";","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexArray;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    public DeleteEventCommand(ArrayList\u003cIndex\u003e targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        this.targetIndexArray \u003d targetIndexArray;","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e targetEventsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        String deletedEvents \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        for (Index targetIndex : targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"            Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"            targetEventsArray.add(eventToDelete);","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        for (Event eventToDelete : targetEventsArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"            deletedEvents +\u003d ((count + 1) + \".\\t\" + eventToDelete.getEventName() + \"\\n\");","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"            model.deleteEvent(eventToDelete);","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"            count++;","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, deletedEvents));","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 targetIndexArray.equals(((DeleteEventCommand) other).targetIndexArray)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":63}},{"path":"src/main/java/safeforhall/logic/commands/delete/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"            + \": Deletes the people identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space)\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Residents: \\n%1$s\";","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    public DeletePersonCommand(ArrayList\u003cIndex\u003e targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndexArray \u003d targetIndexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cPerson\u003e targetResidentsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResidents \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index targetIndex : targetIndexArray) {","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            targetResidentsArray.add(personToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        for (Person personToDelete : targetResidentsArray) {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"            deletedResidents +\u003d ((count + 1) + \".\\t\" + personToDelete.getName() + \"\\n\");","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"            count++;","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedResidents));","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 targetIndexArray.equals(((DeletePersonCommand) other).targetIndexArray)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":20,"chongjunwei":7,"-":35,"VimuthM":5}},{"path":"src/main/java/safeforhall/logic/commands/edit/EditEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":" * Edits the details of an existing event in the address book.","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \"","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"            + \"by the index number used in the displayed events list. \"","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEX (positive integers only) \"","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_VENUE + \"VENUE] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_CAPACITY + \"CAPACITY] \\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"            + CliSyntax.PREFIX_DATE + \"20-01-2021 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"50\";","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Events: \\n%1$s\";","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book.\";","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    private final EditEventDescriptor editEventDescriptor;","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"     * @param targetIndex Index of Event in the filtered event list to edit","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"     * @param editEventDescriptor details to edit the event with","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand(Index targetIndex, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"        if (!eventToEdit.equals(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        model.setEvent(eventToEdit, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates and returns a {@code Event} with the details of {@code eventToEdit}","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"     * edited with {@code editEventDescriptor}.","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        assert eventToEdit !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        EventName updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getEventName());","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"        EventDate updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getEventDate());","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        Venue updatedVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        Capacity updatedCapacity \u003d editEventDescriptor.getCapacity().orElse(eventToEdit.getCapacity());","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        ResidentList updatedResidentList \u003d editEventDescriptor.getResidentList()","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"                .orElse(eventToEdit.getResidents());","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        return new Event(updatedName, updatedDate, updatedVenue, updatedCapacity, updatedResidentList);","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof EditEventCommand)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand e \u003d (EditEventCommand) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"        return targetIndex.equals(e.targetIndex)","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"     * Stores the details to edit the event with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"     * corresponding field value of the event.","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"    public static class EditEventDescriptor {","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        private EventName name;","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        private EventDate date;","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        private Venue venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        private Capacity capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        private ResidentList residentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"        public EditEventDescriptor() {}","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        /**","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-17"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"         */","lastModifiedDate":"2021-10-17"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {","lastModifiedDate":"2021-10-17"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-10-17"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2021-10-17"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"            setVenue(toCopy.venue);","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"            setCapacity(toCopy.capacity);","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"            setResidentList(toCopy.residentList);","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        /**","lastModifiedDate":"2021-10-17"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-17"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"         */","lastModifiedDate":"2021-10-17"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-17"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"            return CollectionUtil.isAnyNonNull(name, date, venue, capacity);","lastModifiedDate":"2021-10-17"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"        public void setName(EventName name) {","lastModifiedDate":"2021-10-17"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-10-17"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cEventName\u003e getName() {","lastModifiedDate":"2021-10-17"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-17"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"        public void setDate(EventDate date) {","lastModifiedDate":"2021-10-17"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"            this.date \u003d date;","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cEventDate\u003e getDate() {","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        public void setVenue(Venue venue) {","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"            this.venue \u003d venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cVenue\u003e getVenue() {","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(venue);","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"        public void setCapacity(Capacity capacity) {","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"            this.capacity \u003d capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cCapacity\u003e getCapacity() {","lastModifiedDate":"2021-10-17"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(capacity);","lastModifiedDate":"2021-10-17"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"        public void setResidentList(ResidentList residentList) {","lastModifiedDate":"2021-10-20"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"            this.residentList \u003d residentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"        public Optional\u003cResidentList\u003e getResidentList() {","lastModifiedDate":"2021-10-20"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"            return Optional.ofNullable(residentList);","lastModifiedDate":"2021-10-20"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-17"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"                return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"            if (!(other instanceof EditEventDescriptor)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"                return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"            // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"rebeccalaujx"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getVenue().equals(e.getVenue())","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getCapacity().equals(e.getCapacity());","lastModifiedDate":"2021-10-17"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":208,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"rebeccalaujx":197,"gordonlzy":14}},{"path":"src/main/java/safeforhall/logic/commands/edit/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the residents identified \"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"            + \"by the index numbers used in the displayed resident list. \"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space) \"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"            + \"[\" + CliSyntax.PREFIX_ROOM + \"ROOM] \"","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"            + \"[\" + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS] \"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_FACULTY + \"FACULTY] \"","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_FETDATE + \"LAST FET DATE] \"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_COLLECTIONDATE + \"LAST COLLECTION DATE] \\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2021-10-04"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2021-10-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Residents: \\n%1$s\";","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident already exists in the address book.\";","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"    private final ArrayList\u003cIndex\u003e indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"     * @param indexArray Array of people in the filtered person list to edit","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonCommand(ArrayList\u003cIndex\u003e indexArray, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index index : indexArray) {","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        this.indexArray \u003d indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d \"\";","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index targetIndex : indexArray) {","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"            Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"            editedResidents +\u003d ((count + 1) + \".\\t\" + personToEdit.getName() + \"\\n\");","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"            count++;","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedResidents));","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        Room updatedRoom \u003d editPersonDescriptor.getRoom().orElse(personToEdit.getRoom());","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        VaccStatus updatedVaccStatus \u003d editPersonDescriptor.getVaccStatus().orElse(personToEdit.getVaccStatus());","lastModifiedDate":"2021-10-11"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        Faculty updatedFaculty \u003d editPersonDescriptor.getFaculty().orElse(personToEdit.getFaculty());","lastModifiedDate":"2021-10-11"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        LastDate updatedLastFetDate \u003d editPersonDescriptor.getLastFetDate().orElse(personToEdit.getLastFetDate());","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"        LastDate updatedLastCollectionDate \u003d editPersonDescriptor.getLastCollectionDate()","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"                .orElse(personToEdit.getLastCollectionDate());","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        // Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        return new Person(updatedName, updatedRoom, updatedPhone, updatedEmail, updatedVaccStatus, updatedFaculty,","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"                updatedLastFetDate, updatedLastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof EditPersonCommand)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        return indexArray.equals(e.indexArray)","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        private Room room;","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"        private VaccStatus vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"        private Faculty faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"        private LastDate lastFetDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        private LastDate lastCollectionDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"            setRoom(toCopy.room);","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"            setVaccStatus(toCopy.vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"            setFaculty(toCopy.faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"            setLastFetDate(toCopy.lastFetDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"            setLastCollectionDate(toCopy.lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, room, vaccStatus, faculty,","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"                    lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"        public void setRoom(Room room) {","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"            this.room \u003d room;","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cRoom\u003e getRoom() {","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(room);","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"        public void setVaccStatus(VaccStatus vaccStatus) {","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"            this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cVaccStatus\u003e getVaccStatus() {","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"        public void setFaculty(Faculty faculty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":213,"author":{"gitId":"rebeccalaujx"},"content":"            this.faculty \u003d faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cFaculty\u003e getFaculty() {","lastModifiedDate":"2021-10-11"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"rebeccalaujx"},"content":"        public void setLastFetDate(LastDate lastFetDate) {","lastModifiedDate":"2021-10-12"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"            this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cLastDate\u003e getLastFetDate() {","lastModifiedDate":"2021-10-12"},{"lineNumber":225,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(lastFetDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":226,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":227,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":228,"author":{"gitId":"rebeccalaujx"},"content":"        public void setLastCollectionDate(LastDate lastCollectionDate) {","lastModifiedDate":"2021-10-12"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"            this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cLastDate\u003e getLastCollectionDate() {","lastModifiedDate":"2021-10-12"},{"lineNumber":233,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":234,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":235,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":253,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-13"},{"lineNumber":254,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getRoom().equals(e.getRoom())","lastModifiedDate":"2021-10-13"},{"lineNumber":255,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getVaccStatus().equals(e.getVaccStatus())","lastModifiedDate":"2021-10-13"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getFaculty().equals(e.getFaculty())","lastModifiedDate":"2021-10-13"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getLastFetDate().equals(e.getLastFetDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getLastCollectionDate().equals(e.getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"rebeccalaujx":99,"-":147,"VimuthM":13,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"VimuthM":1,"-":16}},{"path":"src/main/java/safeforhall/logic/commands/view/ViewEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"public class ViewEventCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All events shown\";","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"jaredlhf":26}},{"path":"src/main/java/safeforhall/logic/commands/view/ViewPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-20"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"public class ViewPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All residents shown\";","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"chongjunwei":2,"-":18,"VimuthM":2,"jaredlhf":4}},{"path":"src/main/java/safeforhall/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.FindCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.ListCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeleteEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.add.AddEventCommandParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.add.AddPersonCommandParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.delete.DeleteEventCommandParser;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.delete.DeletePersonCommandParser;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.edit.EditEventCommandParser;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.edit.EditPersonCommandParser;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"     * @param isResidentTab indicates if the active tab is Resident or Model","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    public Command parseCommand(String userInput, Boolean isResidentTab) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"            if (isResidentTab) {","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                return parseResidentCommand(commandWord, arguments);","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"            } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                return parseEventCommand(commandWord, arguments);","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"     * Parses commands that have been input while the Resident tab is active.","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"     * @param commandWord the main command word","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"     * @param arguments the provided arguments","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    private Command parseResidentCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        case AddPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"            return new AddPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"        case EditPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"            return new EditPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"        case DeletePersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"            return new DeletePersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"            return new ListCommandParser().parse(arguments);","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"        case ViewPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"            return new ViewPersonCommand();","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"     * Parses commands that have been input while the Event tab is active.","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"     * @param commandWord the main command word","lastModifiedDate":"2021-10-16"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"     * @param arguments the provided arguments","lastModifiedDate":"2021-10-16"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-16"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"    private Command parseEventCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"        case DeleteEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"            return new DeleteEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"        case EditEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"            return new EditEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"        case ViewEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"            return new ViewEventCommand();","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        case IncludeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"            return new IncludeCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":11,"chongjunwei":16,"gordonlzy":5,"VimuthM":60,"-":47,"jaredlhf":6}},{"path":"src/main/java/safeforhall/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"VimuthM":1,"-":59}},{"path":"src/main/java/safeforhall/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"VimuthM":1,"-":147}},{"path":"src/main/java/safeforhall/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_DATE1 \u003d new Prefix(\"d1/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_DATE2 \u003d new Prefix(\"d2/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_VACCSTATUS \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_FETDATE \u003d new Prefix(\"fd/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_COLLECTIONDATE \u003d new Prefix(\"cd/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"l/\");","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_RESIDENTS \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"gordonlzy":5,"chongjunwei":3,"VimuthM":1,"-":11,"jaredlhf":5}},{"path":"src/main/java/safeforhall/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ROOM,","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"                        CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_VACCSTATUS,","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"                        CliSyntax.PREFIX_FACULTY);","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate findCompositePredicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ROOM).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setRoom(ParserUtil.parseRoomForFind(argMultimap.getValue(CliSyntax.PREFIX_ROOM)","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE)","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL)","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_VACCSTATUS).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setVaccStatus(ParserUtil.parseVaccStatus(argMultimap","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"                    .getValue(CliSyntax.PREFIX_VACCSTATUS).get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FACULTY).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(CliSyntax.PREFIX_FACULTY)","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        if (!findCompositePredicate.isAnyFieldFiltered()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(FindCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        return new FindCommand(findCompositePredicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"VimuthM":42,"-":23}},{"path":"src/main/java/safeforhall/logic/parser/IncludeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_RESIDENTS;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":" * Parses input arguments and creates a new IncludeCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandParser implements Parser\u003cIncludeCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"     * Parses the given {@code String} of arguments in the context of the IncludeCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"     * and returns an IncludeCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public IncludeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESIDENTS)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        Index index;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            String preamble \u003d argMultimap.getPreamble();","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            index \u003d ParserUtil.parseIndex(preamble);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + IncludeCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        // Required fields","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        ResidentList list \u003d ParserUtil.parseResidents(argMultimap.getValue(PREFIX_RESIDENTS).get());","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        return new IncludeCommand(index, list);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":54}},{"path":"src/main/java/safeforhall/logic/parser/ListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ListCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    public ListCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_KEYWORD, CliSyntax.PREFIX_DATE1,","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"                        CliSyntax.PREFIX_DATE2);","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_KEYWORD, CliSyntax.PREFIX_DATE1)","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        String keyword \u003d argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        if (!isKeywordValid(argMultimap, keyword)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE_LATE));","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DATE2).isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            LastDate date \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE1).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            return new ListCommand(keyword, date);","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"            LastDate date1 \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE1).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            LastDate date2 \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE2).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            return new ListCommand(keyword, date1, date2);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    private static boolean isKeywordValid(ArgumentMultimap argumentMultimap, String keyword) {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        boolean normalKeywords \u003d keyword.equals(\"c\") || keyword.equals(\"f\");","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        boolean lateKeywords \u003d keyword.equals(\"lc\") || keyword.equals(\"lf\");","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        boolean emptyDate2 \u003d argumentMultimap.getValue(CliSyntax.PREFIX_DATE2).isEmpty();","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        return normalKeywords || (lateKeywords \u0026\u0026 emptyDate2);","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":59}},{"path":"src/main/java/safeforhall/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"VimuthM":3,"-":13}},{"path":"src/main/java/safeforhall/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses {@code indexes} into their relevant {@code Index} and returns it.","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    @SafeVarargs","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    public static ArrayList\u003cIndex\u003e parseIndexes(String... indexes) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        for (String i : indexes) {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(i)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"                throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"            indexArray.add(Index.fromOneBased(Integer.parseInt(i)));","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        return indexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String room} into a {@code Room}.","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code room} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"    public static Room parseRoom(String room) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"        String trimmedRoom \u003d room.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"        if (!Room.isValidRoom(trimmedRoom)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"        return new Room(trimmedRoom);","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"     * Parses a {@code String room} into a {@code Room}.","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the given {@code room} is invalid.","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"    public static String parseRoomForFind(String room) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        String trimmedRoom \u003d room.trim();","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        if (!Room.isValidRoomForFind(trimmedRoom)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        return trimmedRoom;","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String vaccStatus} into a {@code VaccStatus}.","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code vaccStatus} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"    public static VaccStatus parseVaccStatus(String vaccStatus) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(vaccStatus);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"jaredlhf"},"content":"        String trimmedVaccStatus \u003d vaccStatus.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"        if (!VaccStatus.isValidVaccStatus(trimmedVaccStatus)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(VaccStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"jaredlhf"},"content":"        return new VaccStatus(trimmedVaccStatus);","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String faculty} into a {@code Faculty}.","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code faculty} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"    public static Faculty parseFaculty(String faculty) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(faculty);","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"        String trimmedFaculty \u003d faculty.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"jaredlhf"},"content":"        if (!Faculty.isValidFaculty(trimmedFaculty)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":161,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":163,"author":{"gitId":"jaredlhf"},"content":"        return new Faculty(trimmedFaculty);","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"     * Parses a {@code String date} into a {@code LastDate}.","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"    public static LastDate parseDate(String date) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-10"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(trimmedDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"        return new LastDate(trimmedDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":181,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String eventName} into a {@code EventName}.","lastModifiedDate":"2021-10-13"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code eventName} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"    public static EventName parseEventName(String eventName) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"        String trimmedEventName \u003d eventName.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"        if (!EventName.isValidEventName(trimmedEventName)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"chongjunwei"},"content":"        return new EventName(trimmedEventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String eventDate} into a {@code EventDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code eventDate} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"chongjunwei"},"content":"    public static EventDate parseEventDate(String eventDate) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":204,"author":{"gitId":"chongjunwei"},"content":"        String trimmedEventDate \u003d eventDate.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":205,"author":{"gitId":"chongjunwei"},"content":"        if (!EventDate.isValidEventDate(trimmedEventDate)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":206,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"        return new EventDate(trimmedEventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":210,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String venue} into a {@code Venue}.","lastModifiedDate":"2021-10-13"},{"lineNumber":213,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":214,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":215,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code venue} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":216,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"chongjunwei"},"content":"    public static Venue parseVenue(String venue) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":218,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":219,"author":{"gitId":"chongjunwei"},"content":"        String trimmedVenue \u003d venue.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"chongjunwei"},"content":"        if (!Venue.isValidVenue(trimmedVenue)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":222,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":223,"author":{"gitId":"chongjunwei"},"content":"        return new Venue(trimmedVenue);","lastModifiedDate":"2021-10-13"},{"lineNumber":224,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":225,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":226,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":227,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String capacity} into a {@code Capacity}.","lastModifiedDate":"2021-10-13"},{"lineNumber":228,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":229,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":230,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code capacity} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":231,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":232,"author":{"gitId":"chongjunwei"},"content":"    public static Capacity parseCapacity(String capacity) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":233,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":234,"author":{"gitId":"chongjunwei"},"content":"        String trimmedCapacity \u003d capacity.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":235,"author":{"gitId":"chongjunwei"},"content":"        if (!Capacity.isValidCapacity(trimmedCapacity)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":236,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":237,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":238,"author":{"gitId":"chongjunwei"},"content":"        return new Capacity(trimmedCapacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":239,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":240,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":241,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":242,"author":{"gitId":"gordonlzy"},"content":"     * Parses a {@code String information} into a {@code InformationList}.","lastModifiedDate":"2021-10-18"},{"lineNumber":243,"author":{"gitId":"gordonlzy"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-18"},{"lineNumber":244,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":245,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-18"},{"lineNumber":246,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"    public static ResidentList parseResidents(String information) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(information);","lastModifiedDate":"2021-10-18"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"        String trimmedInformation \u003d information.trim();","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"        if (!ResidentList.isValidResidentList(trimmedInformation)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(ResidentList.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"        return new ResidentList(trimmedInformation);","lastModifiedDate":"2021-10-18"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"rebeccalaujx":23,"chongjunwei":64,"gordonlzy":32,"VimuthM":22,"-":85,"jaredlhf":29}},{"path":"src/main/java/safeforhall/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"VimuthM":1,"-":38}},{"path":"src/main/java/safeforhall/logic/parser/add/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_RESIDENTS;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":" * Parses input arguments and creates a new AddEventCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE,","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                        PREFIX_VENUE, PREFIX_CAPACITY, PREFIX_RESIDENTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE,","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"                PREFIX_VENUE, PREFIX_CAPACITY)","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        Capacity capacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residents \u003d ParserUtil.parseResidents(argMultimap.getValue(PREFIX_RESIDENTS)","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"                .orElse(ResidentList.DEFAULT_LIST));","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        Event event \u003d new Event(eventName, eventDate, venue, capacity, residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        return new AddEventCommand(event);","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":46,"gordonlzy":6,"VimuthM":14}},{"path":"src/main/java/safeforhall/logic/parser/add/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":" * Parses input arguments and creates a new AddPersonCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"     * and returns an AddPersonCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    public AddPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"                        PREFIX_EMAIL, PREFIX_ROOM, PREFIX_VACCSTATUS, PREFIX_FACULTY,","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"                        PREFIX_FETDATE, PREFIX_COLLECTIONDATE);","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"                PREFIX_ROOM, PREFIX_VACCSTATUS, PREFIX_FACULTY)","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        // Required fields","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        Room room \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOM).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus vaccStatus \u003d ParserUtil.parseVaccStatus(argMultimap.getValue(PREFIX_VACCSTATUS).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        // Optional fields","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        LastDate lastFetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_FETDATE)","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"                .orElse(LastDate.DEFAULT_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        LastDate lastCollectionDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_COLLECTIONDATE)","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                .orElse(LastDate.DEFAULT_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        Person person \u003d new Person(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        return new AddPersonCommand(person);","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"VimuthM":20,"-":28,"jaredlhf":31}},{"path":"src/main/java/safeforhall/logic/parser/delete/DeleteEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeleteEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new DeleteEventCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * and returns a DeleteEventCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            ArrayList\u003cIndex\u003e indexArray \u003d ParserUtil.parseIndexes(args.trim().split(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            return new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    DeleteEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rebeccalaujx":3,"chongjunwei":12,"-":15,"VimuthM":3}},{"path":"src/main/java/safeforhall/logic/parser/delete/DeletePersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new DeletePersonCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * and returns a DeletePersonCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"            ArrayList\u003cIndex\u003e indexArray \u003d ParserUtil.parseIndexes(args.trim().split(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            return new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    DeletePersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":33}},{"path":"src/main/java/safeforhall/logic/parser/edit/EditEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":" * Parses input arguments and creates a new EditEventCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEventCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"     * and returns an EditEventCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_VENUE, PREFIX_CAPACITY);","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        Index index;","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + EditEventCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setDate(ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setCapacity(ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        return new EditEventCommand(index, editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"rebeccalaujx":63}},{"path":"src/main/java/safeforhall/logic/parser/edit/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":" * Parses input arguments and creates a new EditPersonCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_NAME \u003d \"Name should not be changed for more than one person.\";","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     * and returns an EditPersonCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"                        CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ROOM, CliSyntax.PREFIX_VACCSTATUS,","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"                        CliSyntax.PREFIX_FACULTY, CliSyntax.PREFIX_FETDATE, CliSyntax.PREFIX_COLLECTIONDATE);","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"            indexArray \u003d ParserUtil.parseIndexes(argMultimap.getPreamble().split(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isNameChanged \u003d argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent();","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isMoreThanOnePerson \u003d indexArray.size() \u003e 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            if (isMoreThanOnePerson \u0026\u0026 isNameChanged) {","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"                throw new ParseException(MESSAGE_DUPLICATE_NAME);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + EditPersonCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE)","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL)","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ROOM).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"            editPersonDescriptor.setRoom(ParserUtil.parseRoom(argMultimap.getValue(CliSyntax.PREFIX_ROOM)","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_VACCSTATUS).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setVaccStatus(ParserUtil.parseVaccStatus(argMultimap","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"                    .getValue(CliSyntax.PREFIX_VACCSTATUS).get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FACULTY).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(CliSyntax.PREFIX_FACULTY)","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FETDATE).isPresent()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setLastFetDate(ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_FETDATE)","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"                    .get()));","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_COLLECTIONDATE).isPresent()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setLastCollectionDate(ParserUtil.parseDate(argMultimap.getValue(","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"                    CliSyntax.PREFIX_COLLECTIONDATE).get()));","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        return new EditPersonCommand(indexArray, editPersonDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rebeccalaujx":46,"-":29,"VimuthM":14,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"VimuthM":2,"-":15}},{"path":"src/main/java/safeforhall/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.UniqueEventList;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.UniquePersonList;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the contents of the event list with {@code events}.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        this.events.setEvents(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if an event with the same details as {@code event} exists in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        return events.contains(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"     * Adds an event to the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"     * The event must not already exist in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"    public void addEvent(Event e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"        events.add(e);","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * Finds the event list for an event from the given Event Name.","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"    public Optional\u003cEvent\u003e findEvent(EventName eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        for (Event event : events) {","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"            if (event.hasSameEventName(eventName)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"                return Optional.of(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        return Optional.empty();","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"     * Finds the person list for an event from the given String.","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"    public Optional\u003cPerson\u003e findPerson(String information) throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        if (Room.isValidRoom(information)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            Room room \u003d new Room(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"                if (person.getRoom().equals(room)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"                    return Optional.of(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        } else if (Name.isValidName(information)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"            Name name \u003d new Name(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"                if (person.getName().equals(name)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"                    return Optional.of(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"Information is not room or name\");","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"        return Optional.empty();","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-17"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"        events.setEvent(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"chongjunwei"},"content":"    public void removeEvent(Event key) {","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"        events.remove(key);","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 events.equals(((AddressBook) other).events));","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":11,"gordonlzy":41,"chongjunwei":44,"VimuthM":3,"-":116}},{"path":"src/main/java/safeforhall/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"     * Searches and converts the names in the {@code residentList} to a list of person and return the list of person","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"     * if it exists in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if an event with the same details as {@code event} exists in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"    boolean hasEvent(Event event);","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"     * Searches the eventList and return the {@code event} if it exists in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    Event getEvent(EventName eventName) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"     * Deletes the given event.","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"     * The event must exist in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"    void deleteEvent(Event target);","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"     * Adds the given event.","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"     * {@code event} must not already exist in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"    void addEvent(Event event);","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"    void setEvent(Event target, Event editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"    /** Returns an unmodifiable view of the filtered event list */","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rebeccalaujx":7,"gordonlzy":18,"chongjunwei":28,"VimuthM":3,"-":84}},{"path":"src/main/java/safeforhall/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"     * Converts a {@code ResidentList} that can have a String of Room or Name to an Arraylist of","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"     * {@code Person}","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cString\u003e residentInformation \u003d residentList.getResidentInformation();","lastModifiedDate":"2021-10-20"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        for (String information : residentInformation) {","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"            Optional\u003cPerson\u003e personFound;","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"            personFound \u003d addressBook.findPerson(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"            if (personFound.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"                throw new CommandException(\"No person with this \" + information + \" could be found\");","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"                personList.add(personFound.get());","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        return personList;","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"     * Reads a string of name from {@code ResidentList} and return an Arraylist of {@code Person}","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"        if (residentList.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"            return personList;","lastModifiedDate":"2021-10-20"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"        String[] residentInformation \u003d residentList.getResidents().split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        for (String information : residentInformation) {","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"            Optional\u003cPerson\u003e personFound;","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"            personFound \u003d addressBook.findPerson(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"            if (personFound.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"                throw new CommandException(\"No event with this \" + information + \" could be found\");","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"                personList.add(personFound.get());","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"        return personList;","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":154,"author":{"gitId":"chongjunwei"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":155,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"        return addressBook.hasEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"    public Event getEvent(EventName eventName) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"        Optional\u003cEvent\u003e eventOptional \u003d addressBook.findEvent(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"        if (eventOptional.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(eventName + \" not found\");","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"            return eventOptional.get();","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"chongjunwei"},"content":"    public void deleteEvent(Event target) {","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"        addressBook.removeEvent(target);","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"        addressBook.setEvent(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":217,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":218,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":219,"author":{"gitId":"chongjunwei"},"content":"        return filteredEvents;","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":228,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":229,"author":{"gitId":"chongjunwei"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":230,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":231,"author":{"gitId":"chongjunwei"},"content":"        filteredEvents.setPredicate(predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":232,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":233,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":250,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-13"},{"lineNumber":251,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 filteredEvents.equals(other.filteredEvents);","lastModifiedDate":"2021-10-13"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":7,"gordonlzy":64,"chongjunwei":33,"VimuthM":5,"-":145}},{"path":"src/main/java/safeforhall/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Returns an unmodifiable view of the events list.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * This list will not contain any duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"chongjunwei":6,"VimuthM":2,"-":15}},{"path":"src/main/java/safeforhall/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"VimuthM":2,"-":14}},{"path":"src/main/java/safeforhall/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"safeforhall.json\");","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":84}},{"path":"src/main/java/safeforhall/model/event/Capacity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"public class Capacity {","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"            \"Capacity should be between 1 and 999\";","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\"; // add check for capacity \u003d 0","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Capacity: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"    public final String capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code Capacity}.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"     * @param capacity A valid capacity.","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public Capacity(String capacity) {","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidCapacity(capacity), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid capacity.","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidCapacity(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        return capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof Capacity // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 capacity.equals(((Capacity) other).capacity)); // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        return capacity.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":45,"jaredlhf":3}},{"path":"src/main/java/safeforhall/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":" * Represents an Event in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"public class Event {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    // Identity fields","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    private final EventName eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    private final EventDate eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    private final Venue venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    private final Capacity capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    private final ResidentList residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     * Every field must be present","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    public Event(EventName eventName, EventDate eventDate, Venue venue, Capacity capacity,","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"                 ResidentList residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(eventName, eventDate, venue, capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    public EventName getEventName() {","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        return eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    public EventDate getEventDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        return eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    public Venue getVenue() {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        return venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    public Capacity getCapacity() {","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        return capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public ResidentList getResidents() {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        return residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if both events have the same name, date, venue and capacity.","lastModifiedDate":"2021-10-14"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"     * This defines a weaker notion of equality between two events.","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        if (otherEvent \u003d\u003d this) {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        return otherEvent !\u003d null","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventName().equals(getEventName())","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(getVenue())","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getCapacity().equals(getCapacity());","lastModifiedDate":"2021-10-14"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public String addResidentsToEvent(ArrayList\u003cPerson\u003e current, ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        return residents.addResidentList(current, toAdd);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if the given eventName is same as the eventName of the current instance of Event","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    public boolean hasSameEventName(EventName eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        return getEventName().equals(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if both events have the same identity and data fields.","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"     * This defines a stronger notion of equality between two events.","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        return otherEvent.getEventName().equals(getEventName())","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(getVenue())","lastModifiedDate":"2021-10-14"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getCapacity().equals(getCapacity());","lastModifiedDate":"2021-10-14"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"        return Objects.hash(eventName, eventDate, venue, capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"        builder.append(getEventName())","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"                .append(getEventDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Venue: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"                .append(getVenue())","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Capacity: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"                .append(getCapacity())","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"                .append(\"; Residents: \")","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"                .append(getResidents());","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":12,"chongjunwei":86,"gordonlzy":25}},{"path":"src/main/java/safeforhall/model/event/EventDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"public class EventDate {","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"EventDate inputted has to be in dd-mm-yyyy format\";","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Date: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    private static final int LASTDATE_DEADLINE \u003d 1;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public final String eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code EventDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public EventDate(String date) {","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        this.eventDate \u003d date;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidEventDate(String date) {","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"            LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"            return false;","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public String getEventDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        return eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"     * Converts the given {@code EventDate} to a {@code LocalDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    public LocalDate toLocalDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        return LocalDate.parse(eventDate, dateFormatter);","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventDate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 eventDate.equals(((EventDate) other).eventDate)); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        return eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":62,"jaredlhf":1}},{"path":"src/main/java/safeforhall/model/event/EventName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"public class EventName {","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    /*","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    public final String eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code EventName}.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * @param eventName A valid event name.","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public EventName(String eventName) {","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidEventName(eventName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid event name.","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidEventName(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        return eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventName // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 eventName.equalsIgnoreCase(((EventName) other).eventName)); // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        return eventName.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":52}},{"path":"src/main/java/safeforhall/model/event/NameContainsEventKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"public class NameContainsEventKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"    public NameContainsEventKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getEventName().eventName, keyword));","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"                || (other instanceof NameContainsEventKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 keywords.equals(((NameContainsEventKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":31}},{"path":"src/main/java/safeforhall/model/event/ResidentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class ResidentList {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"            \"Information should be all rooms or all names and each piece of information is separated by a comma\";","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS_ROOM_AND_NAME \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"            \"Arguments given should be all rooms or all names\";","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String DESC \u003d \"Residents: \";","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_LIST \u003d \"\";","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    private final String residents;","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    private final ArrayList\u003cString\u003e residentInformation;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    private final boolean isEmpty;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    private final ArrayList\u003cPerson\u003e residentList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"     * Constructs a {@code ResidentList}.","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"    public ResidentList(String residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        this.isEmpty \u003d residents.equals(DEFAULT_LIST);","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        residentInformation \u003d new ArrayList\u003c\u003e(Arrays.asList(this.residents.split(\"\\\\s*,\\\\s*\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isValidResidentList(String residents) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        if (residents.equals(DEFAULT_LIST)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        String[] informationList \u003d residents.split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        boolean isRoom \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        boolean isName \u003d false;","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        for (String str : informationList) {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"            if (!(Name.isValidName(str) || Room.isValidRoom(str))) {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"                return false;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"                if (Room.isValidRoom(str) \u0026\u0026 !isName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"                    isRoom \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"                } else if (Name.isValidName(str) \u0026\u0026 !isRoom) {","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                    isName \u003d true;","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"                    throw new ParseException(MESSAGE_CONSTRAINTS_ROOM_AND_NAME);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        return true;","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"     * Returns a string consisting of past and new residents for the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"     * @param current  A string of current residents of the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"     * @param toAdd    A string of residents to add to the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"     * @return A String consisting of past and new residents for the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    public String addResidentList(ArrayList\u003cPerson\u003e current, ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder newResidentList \u003d new StringBuilder(residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : current) {","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"            if (!residentList.contains(person)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"                residentList.add(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"            if (!residentList.contains(person) \u0026\u0026 !newResidentList.toString().equals(\"\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(\", \").append(person.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"                residentList.add(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"            } else if (!residentList.contains(person) \u0026\u0026 newResidentList.toString().equals(\"\")) {","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(person.getName());","lastModifiedDate":"2021-10-20"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"                residentList.add(person);","lastModifiedDate":"2021-10-20"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        return newResidentList.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if the ResidentList is empty.","lastModifiedDate":"2021-10-20"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-20"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        return this.isEmpty;","lastModifiedDate":"2021-10-20"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof ResidentList // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 residents.equals(((ResidentList) other).residents)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        return residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cString\u003e getResidentInformation() {","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        return this.residentInformation;","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"    public String getResidents() {","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        return this.residents;","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":119}},{"path":"src/main/java/safeforhall/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Object) so","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":" * as to ensure that the event with exactly the same fields will be removed.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":" *","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":" *","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"     * Adds an event to the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    public void add(Event toAdd) {","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"     * Removes the equivalent event from the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"     * The event must exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(safeforhall.model.event.UniqueEventList replacement) {","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the contents of this list with {@code events}.","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"        if (!eventsAreUnique(events)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"        internalList.setAll(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof safeforhall.model.event.UniqueEventList // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 internalList.equals(((safeforhall.model.event.UniqueEventList) other).internalList));","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if {@code events} contains only unique events.","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {","lastModifiedDate":"2021-10-13"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"                    return false;","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"                }","lastModifiedDate":"2021-10-13"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"        return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":138}},{"path":"src/main/java/safeforhall/model/event/Venue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"public class Venue {","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"            \"Venues should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    /*","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Venue: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    public final String venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code Venue}.","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     * @param venue A valid venue.","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    public Venue(String venue) {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid venue.","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidVenue(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"        return venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof Venue // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 venue.equalsIgnoreCase(((Venue) other).venue)); // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"        return venue.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":52,"jaredlhf":2}},{"path":"src/main/java/safeforhall/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event.exceptions;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":" * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":" * identity).","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"public class DuplicateEventException extends RuntimeException {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"    public DuplicateEventException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"        super(\"Operation would result in duplicate events\");","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":12}},{"path":"src/main/java/safeforhall/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event.exceptions;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":" * Signals that the operation is unable to find the specified event.","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"public class EventNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":7}},{"path":"src/main/java/safeforhall/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Email: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":2,"-":69,"jaredlhf":1}},{"path":"src/main/java/safeforhall/model/person/Faculty.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s faculty in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidFaculty(String)} (String)}","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class Faculty {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Faculty is a single word made up of alphabets \"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"            + \"and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"     * faculty must consist of 2 or more alphabets.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Za-z]{2,}$\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Faculty: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public final String faculty;","lastModifiedDate":"2021-10-05"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"     * Constructs an {@code Faculty}.","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * @param faculty A valid faculty.","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    public Faculty(String faculty) {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(faculty);","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidFaculty(faculty), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty.toUpperCase();","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid faculty.","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidFaculty(String test) {","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        return faculty;","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof Faculty // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 faculty.equals(((Faculty) other).faculty)); // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        return faculty.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"VimuthM":53,"jaredlhf":6}},{"path":"src/main/java/safeforhall/model/person/LastDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"public class LastDate {","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date inputted has to be in dd-mm-yyyy format\";","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    public static final String DEFAULT_DATE \u003d \"\";","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC \u003d \"Last FET: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC \u003d \"Last Collection: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    private static final int LASTDATE_DEADLINE \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public final String date;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     * Constructs a {@code LastDate}.","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public LastDate(String date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isValidDate(String date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        if (date.equals(DEFAULT_DATE)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            return false;","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        return true;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    public String getDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        return date;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"     * Converts the given {@code LastDate} to a {@code LocalDate}.","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    public LocalDate toLocalDate() {","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        return LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"     * Adds the period of validity to the given {@code LastDate} to get the next deadline.","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        return date.equals(\"\")","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"                ? LocalDate.now()","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"                : LocalDate.parse(date, dateFormatter).plusWeeks(LASTDATE_DEADLINE);","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof LastDate // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date.equals(((LastDate) other).date)); // state check","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":63,"VimuthM":1,"jaredlhf":8}},{"path":"src/main/java/safeforhall/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"            \"Names should only contain alphabetic characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Name: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":3,"VimuthM":3,"-":54,"jaredlhf":1}},{"path":"src/main/java/safeforhall/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"VimuthM":2,"-":29}},{"path":"src/main/java/safeforhall/model/person/NameMissedDeadlinePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"public class NameMissedDeadlinePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameMissedDeadlinePredicate without the date parameter","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public NameMissedDeadlinePredicate(String keyword, LastDate date) {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"        this.date \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"     * Tests if the given {@code Person} object\u0027s FET or Collection Date is due before the given date.","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the person\u0027s deadline is due before the given date","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        return getDeadlinePeriod(person) \u003e 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public long getDeadlinePeriod(Person person) {","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentPersonLastDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        LocalDate deadline;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(\"f\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastFetDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastCollectionDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        deadline \u003d currentPersonLastDate.getDeadline();","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        return ChronoUnit.DAYS.between(deadline, date);","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"gordonlzy":40}},{"path":"src/main/java/safeforhall/model/person/NameNearLastDatePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"public class NameNearLastDatePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameNearLastDatePredicate without the optional date parameter","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public NameNearLastDatePredicate(String keyword, LastDate date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameNearLastDatePredicate with the optional date parameter {@code LastDate}","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public NameNearLastDatePredicate(String keyword, LastDate date1, LastDate date2) {","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date2.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"     * Tests if the given {@code Person} object\u0027s FET or Collection Date is due in a week\u0027s time by adding their","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"     * lastDate\u0027s week by 1 and comparing with the given date.","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the person\u0027s lastDate added by 1 falls within the given date or the given range of dates","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentPersonLastDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        LocalDate deadline;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(\"f\")) {","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastFetDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastCollectionDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        deadline \u003d currentPersonLastDate.getDeadline();","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        long p1 \u003d ChronoUnit.DAYS.between(date1, deadline);","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        long p2 \u003d ChronoUnit.DAYS.between(deadline, date2);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        return ((p1 \u003e\u003d 0) \u0026\u0026 (p2 \u003e\u003d 0));","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":50}},{"path":"src/main/java/safeforhall/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private final Room room;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    private final VaccStatus vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private final Faculty faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate lastFetDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate lastCollectionDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"     * Every field must be present.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    public Person(Name name, Room room, Phone phone, Email email, VaccStatus vaccStatus,","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"                    Faculty faculty, LastDate lastFetDate, LastDate lastCollectionDate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"        requireAllNonNull(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    public Room getRoom() {","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        return room;","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public VaccStatus getVaccStatus() {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    public Faculty getFaculty() {","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        return faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    public LastDate getLastFetDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        return lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public LastDate getLastCollectionDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        return lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"     * Returns true if both persons have the same name and room.","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getRoom().equals(getRoom())","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 otherPerson.getVaccStatus().equals(getVaccStatus())","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getFaculty().equals(getFaculty())","lastModifiedDate":"2021-10-14"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getLastFetDate().equals(getLastFetDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getLastCollectionDate().equals(getLastCollectionDate());","lastModifiedDate":"2021-10-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        return Objects.hash(name, room, phone, email, vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Room: \")","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"                .append(getRoom())","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Vaccinated: \")","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"                .append(getVaccStatus())","lastModifiedDate":"2021-10-07"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Faculty: \")","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"                .append(getFaculty())","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"                .append(\"; Last Fet Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"                .append(getLastFetDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"                .append(\"; Last Collection Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"                .append(getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"     * Returns true the person has missed any of his fet dates.","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"    public boolean hasMissedDeadline() {","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentDate \u003d new LastDate(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate checkFet \u003d new NameMissedDeadlinePredicate(\"f\", currentDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        return checkFet.test(this);","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"     * Returns the number of days the person has missed any of his fet dates.","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"    public int getMissedDates() {","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentDate \u003d new LastDate(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate checkFet \u003d new NameMissedDeadlinePredicate(\"f\", currentDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"        if (this.hasMissedDeadline()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"            return (int) Math.abs(checkFet.getDeadlinePeriod(this));","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"            return -1;","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":29,"VimuthM":36,"-":88,"jaredlhf":10}},{"path":"src/main/java/safeforhall/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Phone: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":2,"-":51,"jaredlhf":3}},{"path":"src/main/java/safeforhall/model/person/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s room in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"public class Room {","lastModifiedDate":"2021-10-05"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Rooms should not contain spaces and be of the format AXXX: \\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"            + \"Character 1: The block, A-E\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"            + \"Character 2: The level, 1-4\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"            + \"Character 3: The room, 0-2\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"            + \"Character 4: The room, 0-9\\n\";","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_CONSTRAINTS_FOR_FIND \u003d \"Rooms can be searched by block, level, block-level: \\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + CliSyntax.PREFIX_ROOM + \"A , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"1 , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"A1 , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"A100 \";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * The room must be 4 characters","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     * The first character of the room must be A-E to represent the block","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"     * The second character of the room must be 1-4 to represent the level","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     * The third character of the room must be 0-2","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"     * The fourth character of the room must be 0-9","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"     * This check assumes 5 blocks, 4 levels and 30 rooms a level","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[a-eA-E][1-4][0-2][0-9]$\";","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public static final String VALIDATION_FOR_FIND_REGEX \u003d \"[a-eA-E]|[1-4]|[a-eA-E][1-4]\";","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Room: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    public final String room;","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"     * Constructs a {@code Room}.","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"     * @param room A valid room.","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    public Room(String room) {","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidRoom(room), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        // Converts the first character to upper case","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room.toUpperCase();","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid room.","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidRoom(String test) {","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid block, level, level-block or room.","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidRoomForFind(String test) {","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_FOR_FIND_REGEX) || isValidRoom(test);","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        return room;","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof Room // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 room.equalsIgnoreCase(((Room) other).room)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        return room.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"gordonlzy":1,"VimuthM":83,"jaredlhf":2}},{"path":"src/main/java/safeforhall/model/person/RoomValidCheckPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Tests that a {@code Person}\u0027s {@code Room} matches either fully, by block, by level, or both.","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class RoomValidCheckPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    private final String input;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"     * Validates the string input for room and returns the RoomValidCheckPredicate instance","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     * or throws an exception","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"     * @param input the user input","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    public RoomValidCheckPredicate(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        checkArgument(Room.isValidRoomForFind(input), Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        String room \u003d person.getRoom().room;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        String block \u003d room.substring(0, 1);","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        String level \u003d room.substring(1, 2);","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        if (input.length() \u003d\u003d 1) {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"                Integer.parseInt(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"                return input.equals(level);","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"                return input.equals(block);","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        } else if (input.length() \u003d\u003d 2) {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            return input.equalsIgnoreCase(block + level);","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            return input.equalsIgnoreCase(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof RoomValidCheckPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 input.equals(((RoomValidCheckPredicate) other).input)); // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"VimuthM":49}},{"path":"src/main/java/safeforhall/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":4,"-":133}},{"path":"src/main/java/safeforhall/model/person/VaccStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s vaccination status in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidVaccStatus(String)}","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class VaccStatus {","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Vaccination status can be T or F (case insensitive).\";","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"     * Vaccination status can T/F (case insensitive)","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALIDATION_REGEX \u003d \"^([Tt]|[Ff])$\";","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Vaccinated: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    public final String vaccStatus;","lastModifiedDate":"2021-10-05"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public final boolean vaccinated;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"     * Constructs a {@code VaccStatus}.","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * @param vaccStatus A valid vaccination status.","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    public VaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(vaccStatus);","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidVaccStatus(vaccStatus), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus.equals(\"T\") || vaccStatus.equals(\"t\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d \"T\";","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            this.vaccinated \u003d true;","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d \"F\";","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            this.vaccinated \u003d false;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid vaccination status.","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidVaccStatus(String test) {","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus;","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof VaccStatus // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 vaccinated \u003d\u003d ((VaccStatus) other).vaccinated); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"VimuthM":61,"jaredlhf":5}},{"path":"src/main/java/safeforhall/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"VimuthM":1,"-":10}},{"path":"src/main/java/safeforhall/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"VimuthM":1,"-":5}},{"path":"src/main/java/safeforhall/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.tag;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":2,"-":52}},{"path":"src/main/java/safeforhall/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.tag.Tag;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Room(\"E417\"), new Phone(\"87438807\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"alexyeoh@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"SoC\"), new LastDate(\"01-10-2021\"), new LastDate(\"10-10-2021\")),","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"Bernice Yu\"), new Room(\"A213\"), new Phone(\"99272758\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"berniceyu@example.com\"), new VaccStatus(\"F\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"FASS\"), new LastDate(\"10-10-2021\"), new LastDate(\"11-10-2021\")),","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Room(\"B423\"), new Phone(\"93210283\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"charlotte@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"SoC\"), new LastDate(\"11-10-2021\"), new LastDate(\"12-10-2021\")),","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"David Li\"), new Room(\"C112\"), new Phone(\"91031282\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"lidavid@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"SDE\"), new LastDate(\"02-10-2021\"), new LastDate(\"01-10-2021\")),","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Room(\"D422\"), new Phone(\"92492021\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"irfan@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"FoE\"), new LastDate(\"12-10-2021\"), new LastDate(\"12-10-2021\")),","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Room(\"A309\"), new Phone(\"92624417\"),","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"                    new Email(\"royb@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"                    new Faculty(\"BIZ\"), new LastDate(\"20-10-2021\"), new LastDate(\"21-10-2021\")),","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        sampleAb.addEvent(new Event(new EventName(\"Powerlifting\"), new EventDate(\"03-01-2021\"),","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                new Venue(\"Gym\"), new Capacity(\"5\"), new ResidentList(\"Alex Yeoh\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"chongjunwei":6,"gordonlzy":15,"VimuthM":17,"-":33}},{"path":"src/main/java/safeforhall/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":5,"-":41}},{"path":"src/main/java/safeforhall/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    private final String eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    private final String eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    private final String venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    private final String capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private final String residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"                             @JsonProperty(\"eventDate\") String eventDate,","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"                             @JsonProperty(\"venue\") String venue,","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"                             @JsonProperty(\"capacity\") String capacity,","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                            @JsonProperty(\"residents\") String residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        eventName \u003d source.getEventName().eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        eventDate \u003d source.getEventDate().eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        venue \u003d source.getVenue().venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        capacity \u003d source.getCapacity().capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        residents \u003d source.getResidents().getResidents();","lastModifiedDate":"2021-10-20"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        // EventName","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        if (eventName \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"                    EventName.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"        if (!EventName.isValidEventName(eventName)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"        final EventName modelEventName \u003d new EventName(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        // EventDate","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        if (eventDate \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"                    EventDate.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        if (!EventDate.isValidEventDate(eventDate)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        final EventDate modelEventDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"        // Venue","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"        if (venue \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"        if (!Venue.isValidVenue(venue)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"        final Venue modelVenue \u003d new Venue(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        // Capacity","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"        if (capacity \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"                    Capacity.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"        if (!Capacity.isValidCapacity(capacity)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        final Capacity modelCapacity \u003d new Capacity(capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        // Residents","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        if (residents \u003d\u003d null) {","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"                    ResidentList.class.getSimpleName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        if (!ResidentList.isValidResidentList(residents)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        final ResidentList modelResidentList \u003d new ResidentList(residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        return new Event(modelEventName, modelEventDate, modelVenue, modelCapacity, modelResidentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":98,"gordonlzy":18}},{"path":"src/main/java/safeforhall/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private final String room;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private final String vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    private final String faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    private final String lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private final String lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"room\") String room,","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"email\") String email,","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"vaccStatus\") String vaccStatus,","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"faculty\") String faculty,","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"lastFetDate\") String lastFetDate,","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"lastCollectionDate\") String lastCollectionDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        room \u003d source.getRoom().room;","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        vaccStatus \u003d source.getVaccStatus().vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d source.getFaculty().faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        lastFetDate \u003d source.getLastFetDate().date;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        lastCollectionDate \u003d source.getLastCollectionDate().date;","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        // Name","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        // Room","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        if (room \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        if (!Room.isValidRoom(room)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        final Room modelRoom \u003d new Room(room);","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        // Phone","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        // Email","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        // VaccStatus","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"                    VaccStatus.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        if (!VaccStatus.isValidVaccStatus(vaccStatus)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        final VaccStatus modelVaccStatus \u003d new VaccStatus(vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        // Faculty","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        if (!Faculty.isValidFaculty(faculty)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        final Faculty modelFaculty \u003d new Faculty(faculty);","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        // LastFetDate","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(lastFetDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"        final LastDate modelFetDate \u003d new LastDate(lastFetDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"        // LastCollectionDate","lastModifiedDate":"2021-10-06"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(lastCollectionDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"        final LastDate modelCollectionDate \u003d new LastDate(lastCollectionDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        return new Person(modelName, modelRoom, modelPhone, modelEmail,","lastModifiedDate":"2021-10-06"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"                modelVaccStatus, modelFaculty, modelFetDate, modelCollectionDate);","lastModifiedDate":"2021-10-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"gordonlzy":7,"VimuthM":65,"-":70}},{"path":"src/main/java/safeforhall/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.tag.Tag;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":3,"-":45}},{"path":"src/main/java/safeforhall/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.FileUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":7,"-":73}},{"path":"src/main/java/safeforhall/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"@JsonRootName(value \u003d \"safeforhall\")","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        this.events.addAll(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"            if (addressBook.hasEvent(event)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"            addressBook.addEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"chongjunwei":14,"VimuthM":6,"-":53}},{"path":"src/main/java/safeforhall/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":5,"-":42}},{"path":"src/main/java/safeforhall/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VimuthM":5,"-":27}},{"path":"src/main/java/safeforhall/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":6,"-":73}},{"path":"src/main/java/safeforhall/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":6,"-":30}},{"path":"src/main/java/safeforhall/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    private ArrayList\u003cString\u003e historicals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private int current \u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        handleHistory();","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        historicals.add(commandText);","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        current \u003d historicals.size() - 1;","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"     * Handles the up and down key events to re-instate past commands.","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"    private void handleHistory() {","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"            if (historicals.isEmpty() || !(event.getTarget() instanceof TextField)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"                return;","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"            // Simplified if statement not used to allow other key pressed to propagate","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"            if (event.getCode() \u003d\u003d KeyCode.UP || event.getCode() \u003d\u003d KeyCode.DOWN) {","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"                String newText;","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"                if (event.getCode() \u003d\u003d KeyCode.UP) {","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"                    if (current \u003e 0) {","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"                        current--;","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"                    }","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"                    newText \u003d historicals.get(current);","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"                    if (current \u003c historicals.size() - 1) {","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"                        current++;","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"                        newText \u003d historicals.get(current);","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"                    } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"                        current \u003d historicals.size();","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"                        newText \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"                    }","lastModifiedDate":"2021-10-16"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"                }","lastModifiedDate":"2021-10-16"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"                event.consume();","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"                commandTextField.setText(newText);","lastModifiedDate":"2021-10-16"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"                commandTextField.end();","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-10-16"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"         * @see Logic#execute(String, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"VimuthM":49,"-":81}},{"path":"src/main/java/safeforhall/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":" * An UI component that displays information of a {@code Event}.","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public final Event event;","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    private Label name;","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    private Label id;","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    private Label date;","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    private Label venue;","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"    private Label capacity;","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"    private Label residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"     * Creates a {@code EventCode} with the given {@code Event} and index to display.","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"        super(FXML);","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"        this.event \u003d event;","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"        name.setText(event.getEventName().eventName);","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        date.setText(EventDate.DESC + event.getEventDate().eventDate);","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        venue.setText(Venue.DESC + event.getVenue().venue);","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        capacity.setText(Capacity.DESC + event.getCapacity().capacity);","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        residents.setText(ResidentList.DESC + event.getResidents().getResidents());","lastModifiedDate":"2021-10-20"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"            return true;","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        if (!(other instanceof EventCard)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"            return false;","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        // state check","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"        EventCard card \u003d (EventCard) other;","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 event.equals(card.event);","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"gordonlzy":4,"jaredlhf":72}},{"path":"src/main/java/safeforhall/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":" * Panel containing the list of Events.","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"     * Creates a {@code EventListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"        super(FXML);","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}.","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"                setText(null);","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"            } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"jaredlhf":49}},{"path":"src/main/java/safeforhall/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t15-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":3,"-":99}},{"path":"src/main/java/safeforhall/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    private StackPane eventListPanelPlaceholder;","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    private TabPane tabPane;","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    public boolean getIsResidentTab() {","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        // Dependent on the ordering of tabs in `MainWindow.fxml`","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        // Resident is at index 0 and Event at index 1","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        return tabPane.getSelectionModel().getSelectedIndex() \u003d\u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"     * @see Logic#execute(String, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"            CommandResult commandResult \u003d logic.execute(commandText, getIsResidentTab());","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":15,"-":187,"jaredlhf":11}},{"path":"src/main/java/safeforhall/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.model.person.LastDate.DEFAULT_DATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    private Label room;","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    private Label phone;","lastModifiedDate":"2021-10-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    private Label faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    private Rectangle status;","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    private HBox informationContainer;","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    private VBox deadlineContainer;","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    private VBox statusContainer;","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    private VBox labelBox;","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-14"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"    private VBox labelBoxInterior;","lastModifiedDate":"2021-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"        room.setText(Room.DESC + person.getRoom().room);","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        phone.setText(Phone.DESC + person.getPhone().value);","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        email.setText(Email.DESC + person.getEmail().value);","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"        faculty.setText(Faculty.DESC + person.getFaculty().faculty);","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"        if (person.getLastFetDate().date !\u003d DEFAULT_DATE) {","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"            Label textBox \u003d new Label(LastDate.FET_DESC + person.getLastFetDate().date);","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"            textBox.getStyleClass().add(\"cell_small_label\");","lastModifiedDate":"2021-10-14"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"            labelBoxInterior.getChildren().add(textBox);","lastModifiedDate":"2021-10-14"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        if (person.getLastCollectionDate().date !\u003d DEFAULT_DATE) {","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"            Label textBox \u003d new Label(LastDate.COLLECTION_DESC + person.getLastCollectionDate().date);","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            textBox.getStyleClass().add(\"cell_small_label\");","lastModifiedDate":"2021-10-14"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"            labelBoxInterior.getChildren().add(textBox);","lastModifiedDate":"2021-10-14"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        if (person.hasMissedDeadline()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"            this.getRoot().setStyle(\"-fx-background-color: #8B0000;\");","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"            Label textBox \u003d new Label(\"Late by:\");","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"            int missedDates \u003d person.getMissedDates();","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"            Label date;","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"            if (missedDates \u003e 1) {","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"                date \u003d new Label(missedDates + \" days\");","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"                date \u003d new Label(missedDates + \" day\");","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"            deadlineContainer.getChildren().add(textBox);","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"            deadlineContainer.getChildren().add(date);","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"        if (person.getVaccStatus().vaccinated) {","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"            Image img \u003d new Image(\"/images/vaccinated.png\");","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            Rectangle rec \u003d new Rectangle(30, 30);","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"            rec.setArcHeight(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"            rec.setArcWidth(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            rec.setFill(new ImagePattern(img));","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"            statusContainer.getChildren().add(rec);","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"gordonlzy":19,"VimuthM":28,"-":63,"jaredlhf":20}},{"path":"src/main/java/safeforhall/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":3,"-":46}},{"path":"src/main/java/safeforhall/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":1,"-":27}},{"path":"src/main/java/safeforhall/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":27}},{"path":"src/main/java/safeforhall/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VimuthM":1,"-":12}},{"path":"src/main/java/safeforhall/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/safeforhall.png\";","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":6,"-":83}},{"path":"src/main/java/safeforhall/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":2,"-":86}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":".tab-pane .tab-header-background {","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":".tab {","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    -fx-focus-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    -fx-faint-focus-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    -fx-padding: 10 40 10 40;","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":".tab .tab-label {","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":".tab:selected {","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: #23272a","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":".tab:hover {","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: #99aab5;","lastModifiedDate":"2021-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":134,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":326,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":330,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":351,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":358,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":372,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":373,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"-":348,"VimuthM":2,"jaredlhf":23}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"\u003cHBox id\u003d\"eventPane\" fx:id\u003d\"eventPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"      \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"      \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"      \u003cLabel fx:id\u003d\"residents\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$residents\" /\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"gordonlzy":1,"jaredlhf":34}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"jaredlhf":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"SafeFor(H)All\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    \u003cImage url\u003d\"@/images/safeforhall.png\" /\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        \u003c!-- Method isResidentTab of `MainWindow.java` is dependent on this ordering. --\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"          \u003ctabs\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"            \u003cTab text\u003d\"Residents\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"              \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"            \u003c/Tab\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"            \u003cTab text\u003d\"Events\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"              \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"                \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"            \u003c/Tab\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"          \u003c/tabs\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        \u003c/TabPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":45,"VimuthM":2,"jaredlhf":29}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    \u003cVBox fx:id\u003d\"labelBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"      \u003cVBox fx:id\u003d\"labelBoxInterior\" styleClass\u003d\"cell_small_label\"\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        \u003cLabel fx:id\u003d\"room\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$room\" /\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$faculty\" /\u003e","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    \u003cHBox fx:id\u003d\"informationContainer\" alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"105\"\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"      \u003cVBox fx:id\u003d\"deadlineContainer\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"25\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"      \u003cVBox fx:id\u003d\"statusContainer\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"25\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"gordonlzy":8,"-":33,"VimuthM":7,"jaredlhf":1}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":9,"VimuthM":2}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":6,"VimuthM":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"    \"room\": \"A100\",","lastModifiedDate":"2021-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\": \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    \"lastFetDate\" : \"09-09-2021\",","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    \"lastCollectionDate\" : \"10-09-2021\"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    \"room\": \"A100\",","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\": \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    \"lastFetDate\" : \"09-09-2021\",","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    \"lastCollectionDate\" : \"10-09-2021\"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"  } ],","lastModifiedDate":"2021-10-14"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"  \"events\" : []","lastModifiedDate":"2021-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"gordonlzy":4,"chongjunwei":2,"-":10,"VimuthM":4,"jaredlhf":2}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"    \"email\": \"invalid@email!3e\"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"  } ],","lastModifiedDate":"2021-10-14"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"  \"events\": []","lastModifiedDate":"2021-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"chongjunwei":2,"-":5,"VimuthM":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"  \"_comment\": \"SafeFor(H)all save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A100\",","lastModifiedDate":"2021-10-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"03-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"03-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A101\",","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"12-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"13-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A102\",","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"F\",","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"10-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"03-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A103\",","lastModifiedDate":"2021-10-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"12-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"13-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A104\",","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"F\",","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"05-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"16-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A105\",","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"T\",","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"20-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"04-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    \"room\" : \"A106\",","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    \"vaccStatus\" : \"F\",","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    \"faculty\" : \"SoC\",","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    \"lastFetDate\" : \"15-10-2021\",","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"    \"lastCollectionDate\" : \"01-10-2021\"","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"  } ],","lastModifiedDate":"2021-10-14"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"  \"events\": []","lastModifiedDate":"2021-10-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"chongjunwei":2,"-":30,"VimuthM":9,"jaredlhf":27}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"  \"addressBookFilePath\" : \"safeforhall.json\"","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":12,"VimuthM":1}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"  \"addressBookFilePath\" : \"safeforhall.json\"","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":10,"VimuthM":1}},{"path":"src/test/java/safeforhall/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"VimuthM":1,"-":57}},{"path":"src/test/java/safeforhall/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"VimuthM":1,"-":26}},{"path":"src/test/java/safeforhall/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":133}},{"path":"src/test/java/safeforhall/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core.index;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"VimuthM":2,"-":58}},{"path":"src/test/java/safeforhall/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"        assertNotNull(AppUtil.getImage(\"/images/safeforhall.png\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"VimuthM":3,"-":33}},{"path":"src/test/java/safeforhall/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"VimuthM":3,"-":105}},{"path":"src/test/java/safeforhall/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":4,"-":112}},{"path":"src/test/java/safeforhall/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":21}},{"path":"src/test/java/safeforhall/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.SerializableTestClass;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TestUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":42}},{"path":"src/test/java/safeforhall/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"VimuthM":2,"-":141}},{"path":"src/test/java/safeforhall/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ListCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.StorageManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"safeforhall.json\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    public void execute_validFetCommand_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        String listCommand \u003d \"list k/f d1/10-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_FET, model, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    public void execute_validArtCommand_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        String listCommand \u003d \"list k/c d1/10-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_ART, model, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        String viewCommand \u003d ViewPersonCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(viewCommand, ViewPersonCommand.MESSAGE_SUCCESS, model, true);","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"    public void execute_validFindCommand_success() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        String findCommand \u003d \"find n/alice v/t\";","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(findCommand,","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"                model, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + ROOM_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"                + EMAIL_DESC_AMY + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + FET_DESC_AMY + COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            Model expectedModel, Boolean isResidentTab) throws CommandException, ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        CommandResult result \u003d logic.execute(inputCommand, isResidentTab);","lastModifiedDate":"2021-10-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandSuccess(String, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"                                      String expectedMessage, Model expectedModel, Boolean isResidentTab) {","lastModifiedDate":"2021-10-16"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, isResidentTab));","lastModifiedDate":"2021-10-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"gordonlzy":7,"VimuthM":49,"-":125,"jaredlhf":5}},{"path":"src/test/java/safeforhall/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"VimuthM":9,"-":23}},{"path":"src/test/java/safeforhall/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"VimuthM":1,"-":53}},{"path":"src/test/java/safeforhall/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE1;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE2;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_KEYWORD;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.NameContainsEventKeywordsPredicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-04"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_ROOM_AMY \u003d \"A100\";","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_ROOM_BOB \u003d \"E420\";","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FACULTY_AMY \u003d \"SoC\";","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FACULTY_BOB \u003d \"FASS\";","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_VACCSTATUS_AMY \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_VACCSTATUS_BOB \u003d \"F\";","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FETDATE_AMY \u003d \"20-11-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FETDATE_BOB \u003d \"02-09-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_COLLECTIONDATE_AMY \u003d \"22-11-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_COLLECTIONDATE_BOB \u003d \"12-09-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_LAST_DATE1_OCT \u003d \"10-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_LAST_DATE2_OCT \u003d \"15-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_F \u003d \"f\";","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_C \u003d \"c\";","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_NAME_FOOTBALL_TRAINING \u003d \"Football Training\";","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_NAME_SWIM_TRAINING \u003d \"Swim Training\";","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_DATE_FOOTBALL_TRAINING \u003d \"20-10-2021\";","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_DATE_SWIM_TRAINING \u003d \"19-10-2021\";","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_VENUE_FOOTBALL_TRAINING \u003d \"Field\";","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_VENUE_SWIM_TRAINING \u003d \"Pool\";","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_CAPACITY_FOOTBALL_TRAINING \u003d \"20\";","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_CAPACITY_SWIM_TRAINING \u003d \"15\";","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"    public static final String VACCSTATUS_DESC_AMY \u003d \" \" + PREFIX_VACCSTATUS + VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"    public static final String VACCSTATUS_DESC_BOB \u003d \" \" + PREFIX_VACCSTATUS + VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC_AMY \u003d \" \" + PREFIX_FETDATE + VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC_BOB \u003d \" \" + PREFIX_FETDATE + VALID_FETDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC_AMY \u003d \" \" + PREFIX_COLLECTIONDATE + VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC_BOB \u003d \" \" + PREFIX_COLLECTIONDATE + VALID_COLLECTIONDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"    public static final String LAST_DATE1_DESC_OCT \u003d \" \" + PREFIX_DATE1 + VALID_LAST_DATE1_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    public static final String LAST_DATE2_DESC_OCT \u003d \" \" + PREFIX_DATE2 + VALID_LAST_DATE2_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_F \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_F;","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_C \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_C;","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String NAME_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_NAME + VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String NAME_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_NAME + VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String DATE_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_DATE + VALID_DATE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String DATE_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_DATE + VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VENUE_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_VENUE + VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VENUE_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_VENUE + VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String CAPACITY_DESC_FOOTBALL_TRAINING \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"            \" \" + PREFIX_CAPACITY + VALID_CAPACITY_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String CAPACITY_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_CAPACITY + VALID_CAPACITY_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM; // empty string not allowed for room","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed for faculty","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_VACCSTATUS_DESC \u003d \" \" + PREFIX_VACCSTATUS + \"fake\"; // only T or F allowed","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_FETDATE_DESC \u003d \" \" + PREFIX_FETDATE + \"41-20-20\"; // not valid date","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_COLLECTIONDATE_DESC \u003d \" \" + PREFIX_FETDATE + \"41/20/20\"; // not valid date","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"            \" \" + PREFIX_NAME + \"Football \u0026 Basketball\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"41/20/20\"; // not valid date","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"$bank\"; // \u0027$\u0027 not allowed in venues","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_CAPACITY_DESC \u003d \" \" + PREFIX_CAPACITY + \"ten\"; // accepts numbers only","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        DESC_FOOTBALL_TRAINING \u003d new EditEventDescriptorBuilder().withName(VALID_VENUE_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).withVenue(VALID_VENUE_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"        DESC_SWIM_TRAINING \u003d new EditEventDescriptorBuilder().withName(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        if (actualModel instanceof Person) {","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-19"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"            AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"            List\u003cEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEventList());","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"            assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2021-10-19"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredEventList());","lastModifiedDate":"2021-10-19"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-19"},{"lineNumber":213,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"    public static void showEventAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-19"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"        final String[] splitName \u003d event.getEventName().eventName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-19"},{"lineNumber":220,"author":{"gitId":"rebeccalaujx"},"content":"        model.updateFilteredEventList(new NameContainsEventKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-10-19"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":222,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(1, model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rebeccalaujx":69,"gordonlzy":11,"VimuthM":16,"-":99,"jaredlhf":30}},{"path":"src/test/java/safeforhall/logic/commands/DeletePersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":" * {@code DeletePersonCommand}.","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        int firstPersonIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased();","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        int secondPersonIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased();","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        Person firstPersonToDelete \u003d model.getFilteredPersonList().get(firstPersonIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        Person secondPersonToDelete \u003d model.getFilteredPersonList().get(secondPersonIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResident \u003d \"1.\\t\" + firstPersonToDelete.getName() + \"\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"                + \"2.\\t\" + secondPersonToDelete.getName() + \"\\n\";","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedResident);","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deletePerson(firstPersonToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deletePerson(secondPersonToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResident \u003d \"1.\\t\" + personToDelete.getName() + \"\\n\";","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedResident);","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e firstIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        firstIndexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(firstIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e secondIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        secondIndexArray.add(TypicalIndexes.INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(secondIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(firstIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rebeccalaujx":25,"chongjunwei":16,"VimuthM":17,"-":73}},{"path":"src/test/java/safeforhall/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"VimuthM":5,"-":14}},{"path":"src/test/java/safeforhall/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate firstPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate secondPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"null\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.FIONA),","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-04"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    public void execute_multiplePredicates_multiplePersonsFound() {","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(null, null, null, null, \"F\", null);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"    public void execute_multiplePredicates_multiplePersonsFound2() {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 4);","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"kurz elle kunz best\", null, null, null, null, \"soc\");","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE,","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.FIONA, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"    public void execute_missingFieldWithPrefix_fail() {","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(\"\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"            FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"            assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"                    model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"    public void execute_invalidRoom_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(null, \"A12\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"    public void execute_invalidRoom2_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(null, \"1A\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"            FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    public void execute_validRoom_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(null, \"a1\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.CARL,","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DANIEL, TypicalPersons.ELLE, TypicalPersons.FIONA, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"    private FindCompositePredicate preparePredicate(String name, String room , String phone, String email,","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"                                                    String vaccStatus, String faculty) {","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate f \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        if (name !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"            f.setName(new Name(name));","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"        if (room !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"            f.setRoom(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"        if (phone !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"            f.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        if (email !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"            f.setEmail(new Email(email));","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"            f.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"        if (faculty !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"            f.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"        return f;","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"VimuthM":145,"-":46}},{"path":"src/test/java/safeforhall/logic/commands/FindCompositePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"public class FindCompositePredicateTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate firstPredicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate secondPredicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate firstPredicateCopy \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        // different predicate -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"VimuthM":45}},{"path":"src/test/java/safeforhall/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"VimuthM":5,"-":14}},{"path":"src/test/java/safeforhall/logic/commands/IncludeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public void checkDuplicatesTrue() {","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e current \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        current.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"Benson\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.checkForDuplicates(toAdd, current));","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    public void addOneRoomTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(\"a105\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"                .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"a105\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    public void addMultipleRoomsTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(\"a104, a105\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"a104, a105\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    public void addOneNameTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(\"Daniel Meier\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Daniel Meier\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    public void addMultipleNamesTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(\"Daniel Meier, Elle Meyer\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Daniel Meier, Elle Meyer\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    public void addExistingRoomTest() {","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-20"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"A103\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"    public void addExistingNameTest() {","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-20"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Daniel Meier\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand firstCommand \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand secondCommand \u003d new IncludeCommand(Index.fromOneBased(2), new ResidentList(\"Bernice\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommand));","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand firstCommandCopy \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(1));","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        // different command -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(secondCommand));","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":126}},{"path":"src/test/java/safeforhall/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameMissedDeadlinePredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameNearLastDatePredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        ListCommand firstListCommand \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        ListCommand secondListCommand \u003d new ListCommand(\"c\", new LastDate(\"12-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstListCommand.equals(firstListCommand));","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        ListCommand findFirstCommandCopy \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstListCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstListCommand.equals(1));","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstListCommand.equals(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstListCommand.equals(secondListCommand));","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateFetNotFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"17-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"f\", new LastDate(\"17-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Collections.EMPTY_LIST, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateArtNotFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-09-2021\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"c\", new LastDate(\"10-09-2021\"), new LastDate(\"15-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Collections.EMPTY_LIST, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateFet() {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateCollection() {","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateFet() {","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ELLE);","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateCollection() {","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-10"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(FIONA);","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLateFet() {","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_MISSED_FET;","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"lf\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ELLE);","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLateCollection() {","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d ListCommand.MESSAGE_SUCCESS_MISSED_ART;","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d new ListCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(GEORGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"gordonlzy":136,"VimuthM":6,"-":14}},{"path":"src/test/java/safeforhall/logic/commands/add/AddPersonCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}.","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandIntegrationTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"VimuthM":15,"-":30}},{"path":"src/test/java/safeforhall/logic/commands/add/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, ()","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"            -\u003e addPersonCommand.execute(modelStub));","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        public ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        public ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"        public Event getEvent(EventName eventName) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"        public void deleteEvent(Event target) {","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"chongjunwei":26,"gordonlzy":18,"VimuthM":21,"-":179}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d new EventBuilder().build();","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        Event lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        EventBuilder eventInList \u003d new EventBuilder(lastEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d eventInList.withEventName(VALID_NAME_SWIM_TRAINING)","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                .withEventDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_NAME_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastEvent, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(lastEvent, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, new EditEventDescriptor());","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventInFilteredList \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d new EventBuilder(eventInFilteredList)","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"                .withEventName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEventUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        Event firstEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_SECOND_EVENT, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEventFilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"        // edit event in filtered list into a duplicate in address book","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventInList \u003d model.getAddressBook().getEventList().get(INDEX_SECOND_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder(eventInList).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidEventIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidEventIndexFilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor copyDescriptor \u003d new EditEventDescriptor(DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_EVENT, copyDescriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-19"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_EVENT, DESC_FOOTBALL_TRAINING)));","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_EVENT, DESC_SWIM_TRAINING)));","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":171,"gordonlzy":4}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditEventDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventDescriptorTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand.EditEventDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventCommand.EditEventDescriptor(DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(DESC_FOOTBALL_TRAINING.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(DESC_FOOTBALL_TRAINING.equals(DESC_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(5));","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(DESC_SWIM_TRAINING));","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":53}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    //public static final String MESSAGE_DUPLICATE_NAME \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    //        \"Name should not be changed for more than one person.\\n\" + EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + model.getFilteredPersonList().get(0).getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e lastPersonIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        lastPersonIndexList.add(indexLastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"             .build();","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"             .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(lastPersonIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + lastPerson.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonCommand(indexArray, new EditPersonCommand.EditPersonDescriptor());","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + editedPerson.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray,","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + personInFilteredList.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateSinglePersonUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray,","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"             new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2017-05-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(targetIndexList,","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e firstPersonList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        firstPersonList.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e secondPersonList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        firstPersonList.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(firstPersonList, DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor copyDescriptor \u003d new EditPersonCommand.EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(firstPersonList, copyDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(secondPersonList, DESC_AMY)));","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(firstPersonList, DESC_BOB)));","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"rebeccalaujx":117,"-":78,"VimuthM":9}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"//import static safeforhall.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonCommand.EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rebeccalaujx":4,"-":40,"VimuthM":7}},{"path":"src/test/java/safeforhall/logic/commands/view/ViewEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"public class ViewEventCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"        model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new ViewEventCommand(), model, ViewEventCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        showEventAtIndex(model, TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new ViewEventCommand(), model, ViewEventCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"chongjunwei":1,"-":25,"VimuthM":5,"jaredlhf":8}},{"path":"src/test/java/safeforhall/logic/commands/view/ViewPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"public class ViewPersonCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new ViewPersonCommand(), model, ViewPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new ViewPersonCommand(), model, ViewPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"chongjunwei":1,"-":25,"VimuthM":9,"jaredlhf":4}},{"path":"src/test/java/safeforhall/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"//import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"//import safeforhall.logic.commands.EditCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ListCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"//import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person), true);","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new AddPersonCommand(person), command);","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, true) instanceof ClearCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", true) instanceof ClearCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand(","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), true);","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(new DeletePersonCommand(indexArray), command);","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        // TODO : Fix after edit command is done","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        /*Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);*/","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, true) instanceof ExitCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", true) instanceof ExitCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        String joint \u003d keywords.stream().collect(Collectors.joining(\" \"));","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"                FindCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_NAME + joint + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_ROOM + \"A100\" + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_VACCSTATUS + \"T\", true);","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(joint));","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new FindCommand(predicate), command);","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, true) instanceof HelpCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", true) instanceof HelpCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        ListCommand command \u003d (ListCommand) parser.parseCommand(","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"                ListCommand.COMMAND_WORD + \" k/c d1/10-10-2021\", true);","lastModifiedDate":"2021-10-16"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(new ListCommand(\"c\", new LastDate(\"10-10-2021\")), command);","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"    public void parseCommand_view() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewPersonCommand.COMMAND_WORD, true) instanceof ViewPersonCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewPersonCommand.COMMAND_WORD + \" 3\", true) instanceof ViewPersonCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewEventCommand.COMMAND_WORD, false) instanceof ViewEventCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewEventCommand.COMMAND_WORD + \" 3\", false) instanceof ViewEventCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"    public void parseCommand_include() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d (IncludeCommand) parser.parseCommand(","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"                IncludeCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"                        + \"1 \" + CliSyntax.PREFIX_RESIDENTS + \"a213\", false);","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(command, new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"a213\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"            -\u003e parser.parseCommand(\"\", true));","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            -\u003e parser.parseCommand(\"unknownCommand\", true));","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"rebeccalaujx":5,"gordonlzy":15,"chongjunwei":5,"VimuthM":46,"-":52,"jaredlhf":19}},{"path":"src/test/java/safeforhall/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"VimuthM":1,"-":149}},{"path":"src/test/java/safeforhall/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            Assertions.assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"VimuthM":6,"-":34}},{"path":"src/test/java/safeforhall/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.FindCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC1 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND1;","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC2 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND2;","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC3 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND3;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC1 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND1;","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC2 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND2;","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC3 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND3;","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"                new FindCommand(new FindCommand.FindCompositePredicate(preparePredicate(\"Alice Bob\",","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"                        null, null, null, null, null)));","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-12"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                FindCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"                FindCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"  Alice   Bob  \",","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"                expectedFindCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        // no input","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        // no field specified","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \"1\", FindCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \"some random string\", FindCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \"i/ string\", FindCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"            Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + VACCSTATUS_DESC_AMY","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"                + FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        predicate.setPhone(new Phone(VALID_PHONE_BOB));","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        predicate.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        predicate.setFaculty(new Faculty(VALID_FACULTY_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"        // name","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        // room","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"        userInput \u003d ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"        expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        // vaccination","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"        userInput \u003d VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + VACCSTATUS_DESC_AMY + ROOM_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_BOB);","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom1_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"            FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC1, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom2_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"            FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC2, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom3_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"VimuthM"},"content":"            FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":222,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC3, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoomBlock_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":233,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC1, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":236,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoomBlockLevel_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":243,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC2, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":246,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":248,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoom_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":252,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":253,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":255,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC3, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":256,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":257,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":258,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":260,"author":{"gitId":"VimuthM"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":261,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":263,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate predicate \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"VimuthM"},"content":"        predicate.setPhone(new Phone(VALID_PHONE_BOB));","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"VimuthM"},"content":"        FindCommand expectedCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":266,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":267,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":268,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":269,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":270,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":271,"author":{"gitId":"VimuthM"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-12"},{"lineNumber":272,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":273,"author":{"gitId":"VimuthM"},"content":"    private FindCompositePredicate preparePredicate(String name, String room , String phone, String email,","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"VimuthM"},"content":"                                                                String vaccStatus, String faculty) {","lastModifiedDate":"2021-10-12"},{"lineNumber":275,"author":{"gitId":"VimuthM"},"content":"        FindCommand.FindCompositePredicate f \u003d new FindCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":276,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":277,"author":{"gitId":"VimuthM"},"content":"        if (name !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":278,"author":{"gitId":"VimuthM"},"content":"            f.setName(new Name(name));","lastModifiedDate":"2021-10-12"},{"lineNumber":279,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":280,"author":{"gitId":"VimuthM"},"content":"        if (room !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":281,"author":{"gitId":"VimuthM"},"content":"            f.setRoom(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":282,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":283,"author":{"gitId":"VimuthM"},"content":"        if (phone !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":284,"author":{"gitId":"VimuthM"},"content":"            f.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-12"},{"lineNumber":285,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":286,"author":{"gitId":"VimuthM"},"content":"        if (email !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":287,"author":{"gitId":"VimuthM"},"content":"            f.setEmail(new Email(email));","lastModifiedDate":"2021-10-12"},{"lineNumber":288,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":289,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":290,"author":{"gitId":"VimuthM"},"content":"            f.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-12"},{"lineNumber":291,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":292,"author":{"gitId":"VimuthM"},"content":"        if (faculty !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":293,"author":{"gitId":"VimuthM"},"content":"            f.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-12"},{"lineNumber":294,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":295,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":296,"author":{"gitId":"VimuthM"},"content":"        return f;","lastModifiedDate":"2021-10-12"},{"lineNumber":297,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"VimuthM":278,"-":20}},{"path":"src/test/java/safeforhall/logic/parser/IncludeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    private static final String DEFAULT_INDEX \u003d \"1\";","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    private IncludeCommandParser parser \u003d new IncludeCommandParser();","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"      \",","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public void parse_validArgs_returnsIncludeCommand() {","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand expectedIncludeCommand \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Alex Yeoh, Bernice Yu\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"Alex Yeoh , Bernice Yu\",","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" Alex Yeoh , Bernice Yu \",","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"e417 , a213\",","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" e417 , a213 \",","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        // no input","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        // no field specified","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, DEFAULT_INDEX,","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"some random string\",","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"i/ string\",","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                + CliSyntax.PREFIX_RESIDENTS + \"e417 a213\", ResidentList.MESSAGE_CONSTRAINTS); // no comma","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"                + CliSyntax.PREFIX_RESIDENTS + \"e417, roy\",","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"                ResidentList.MESSAGE_CONSTRAINTS_ROOM_AND_NAME); // room and name","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":79}},{"path":"src/test/java/safeforhall/logic/parser/ListCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_C;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_F;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.LAST_DATE1_DESC_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.LAST_DATE2_DESC_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ListCommand;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"public class ListCommandParserTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public void parse_validArgs_returnsListCommand() {","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        ListCommand expectedListCommand \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_F + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_C + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_F + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_C + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"lf\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_F + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_C + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_F","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_C","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_F + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_C + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"lf\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_F","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        expectedListCommand \u003d new ListCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_C","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedListCommand);","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":73}},{"path":"src/test/java/safeforhall/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_ROOM \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FACULTY \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_VACCSTATUS \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    private static final String INVALID_DATE \u003d \"21.10.2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private static final String INVALID_RESIDENTS \u003d \"Alex Yeoh, C11\";","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_ROOM \u003d \"A100\";","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    private static final String VALID_DATE \u003d \"21-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_FACULTY \u003d \"SoC\";","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_VACCSTATUS \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    private static final String VALID_RESIDENTS \u003d \"Alex Yeoh, Bernice Yu\";","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        assertThrows(ParseException.class, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX, ()","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRoom((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoom(INVALID_ROOM));","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_validValueWithoutWhitespace_returnsRoom() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"        Room expectedRoom \u003d new Room(VALID_ROOM);","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedRoom, ParserUtil.parseRoom(VALID_ROOM));","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_validValueWithWhitespace_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"        Room expectedRoom \u003d new Room(VALID_ROOM);","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedRoom, ParserUtil.parseRoom(roomWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND1));","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue2_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND2));","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue3_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND3));","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue1_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND1 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND1, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue2_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND2 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND2, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue3_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND3 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND3, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVaccStatus((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":200,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVaccStatus(INVALID_VACCSTATUS));","lastModifiedDate":"2021-10-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":204,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_validValueWithoutWhitespace_returnsVaccStatus() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":205,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus expectedVaccStatus \u003d new VaccStatus(VALID_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedVaccStatus, ParserUtil.parseVaccStatus(VALID_VACCSTATUS));","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":210,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_validValueWithWhitespace_returnsTrimmedVaccStatus() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"jaredlhf"},"content":"        String vaccStatusWithWhitespace \u003d WHITESPACE + VALID_VACCSTATUS + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus expectedVaccStatus \u003d new VaccStatus(VALID_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":213,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedVaccStatus, ParserUtil.parseVaccStatus(vaccStatusWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFaculty((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":222,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFaculty(INVALID_FACULTY));","lastModifiedDate":"2021-10-10"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":227,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_validValueWithoutWhitespace_returnsFaculty() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":228,"author":{"gitId":"jaredlhf"},"content":"        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);","lastModifiedDate":"2021-10-10"},{"lineNumber":229,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFaculty, ParserUtil.parseFaculty(VALID_FACULTY));","lastModifiedDate":"2021-10-10"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":233,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_validValueWithWhitespace_returnsTrimmedFaculty() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":234,"author":{"gitId":"jaredlhf"},"content":"        String facultyWithWhitespace \u003d WHITESPACE + VALID_FACULTY + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":235,"author":{"gitId":"jaredlhf"},"content":"        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);","lastModifiedDate":"2021-10-10"},{"lineNumber":236,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFaculty, ParserUtil.parseFaculty(facultyWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":238,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":240,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":242,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":243,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":244,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":245,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":246,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));","lastModifiedDate":"2021-10-10"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsLastDate() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"        LastDate expectedDate \u003d new LastDate(VALID_DATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));","lastModifiedDate":"2021-10-10"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":255,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedLastDate() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"gordonlzy"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"gordonlzy"},"content":"        LastDate expectedDate \u003d new LastDate(VALID_DATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":259,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":262,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":263,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseResidents((String) null));","lastModifiedDate":"2021-10-18"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":267,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseResidents(INVALID_RESIDENTS));","lastModifiedDate":"2021-10-18"},{"lineNumber":270,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_validValueWithoutWhitespace_returnsLastDate() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"        ResidentList expectedList \u003d new ResidentList(VALID_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedList, ParserUtil.parseResidents(VALID_RESIDENTS));","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_validValueWithWhitespace_returnsTrimmedLastDate() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"        String listWithWhitespace \u003d WHITESPACE + VALID_RESIDENTS + WHITESPACE;","lastModifiedDate":"2021-10-18"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"        ResidentList expectedList \u003d new ResidentList(VALID_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedList, ParserUtil.parseResidents(listWithWhitespace));","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"rebeccalaujx":2,"gordonlzy":52,"VimuthM":47,"-":132,"jaredlhf":51}},{"path":"src/test/java/safeforhall/logic/parser/add/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_COLLECTIONDATE_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_FETDATE_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VACCSTATUS_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_COLLECTION;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_FET;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_FET_COLLECTION;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandParserTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        // multiple rooms - last room accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        // multiple faculties - last faculty accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_AMY + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        // multiple vaccination status - last vaccStatus accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"        // multiple fet dates - last fet date accepted","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_AMY + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"        // multiple collection dates - last collection date accepted","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_AMY + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY_NO_FET_COLLECTION).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"        // missing lastFetDate and lastCollectionDate","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        // missing lastFetDate","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        expectedPerson \u003d new PersonBuilder(AMY_NO_FET).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + COLLECTION_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        // missing lastCollectionDate","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        expectedPerson \u003d new PersonBuilder(AMY_NO_COLLECTION).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + FET_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"                AddPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"        // missing name prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"                        + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"                        + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"        // missing room prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ROOM_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"jaredlhf"},"content":"        // missing faculty prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"jaredlhf"},"content":"                + VALID_FACULTY_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"        // missing vaccination prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VALID_VACCSTATUS_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ROOM_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"                + VALID_FACULTY_BOB + VALID_VACCSTATUS_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":170,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":177,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":178,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"jaredlhf"},"content":"        // invalid room","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":182,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"jaredlhf"},"content":"        // invalid faculty","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"jaredlhf"},"content":"                + INVALID_FACULTY_DESC + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"jaredlhf"},"content":"        // invalid vaccination status","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + INVALID_VACCSTATUS_DESC + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, VaccStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"jaredlhf"},"content":"        // invalid FET date","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + INVALID_FETDATE_DESC","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"jaredlhf"},"content":"        // invalid collection date","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"jaredlhf"},"content":"                + INVALID_COLLECTIONDATE_DESC, LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":205,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":211,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB + COLLECTION_DESC_BOB,","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"VimuthM":27,"-":34,"jaredlhf":153}},{"path":"src/test/java/safeforhall/logic/parser/delete/DeletePersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(indexArray));","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"                DeletePersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"rebeccalaujx":6,"chongjunwei":8,"-":20,"VimuthM":4}},{"path":"src/test/java/safeforhall/logic/parser/edit/EditEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_CAPACITY_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandParserTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String INVALID_EVENT_INDEX \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX + \"\\n\" + EditEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    private EditEventCommandParser parser \u003d new EditEventCommandParser();","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"        // no index specified","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, VALID_NAME_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        // no field specified","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\", EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        // negative index","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        // zero index","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 some random string\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 i/ string\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid name","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid date","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATE_DESC, EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid venue","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid date followed by valid venue","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATE_DESC + VENUE_DESC_FOOTBALL_TRAINING,","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"                EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        // valid capacity followed by invalid capacity. The test case for invalid capacity followed by valid capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + CAPACITY_DESC_SWIM_TRAINING + INVALID_CAPACITY_DESC,","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"                Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + INVALID_EVENT_DATE_DESC","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"                        + VALID_CAPACITY_FOOTBALL_TRAINING, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_FOOTBALL_TRAINING + NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_FOOTBALL_TRAINING).withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING + DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        // name","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        // date","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"        // venue","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withVenue(VALID_VENUE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        // capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"                + CAPACITY_DESC_FOOTBALL_TRAINING + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).withDate(VALID_DATE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_CAPACITY_DESC + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING + INVALID_CAPACITY_DESC","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_SWIM_TRAINING + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":191}},{"path":"src/test/java/safeforhall/logic/parser/edit/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandParserTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String INVALID_PERSON_INDEX \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \"\\n\" + EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 some random string\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 i/ string\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"             .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        // name","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        //room","lastModifiedDate":"2021-10-13"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + ROOM_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withRoom(VALID_ROOM_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"        //faculty","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withFaculty(VALID_FACULTY_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        //vaccStatus","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withVaccStatus(VALID_VACCSTATUS_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"        //lastFetDate","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + FET_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withLastFetDate(VALID_FETDATE_AMY).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        //lastCollectionDate","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withLastCollectionDate(VALID_COLLECTIONDATE_AMY).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"             + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"             .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"             .build();","lastModifiedDate":"2021-10-12"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"rebeccalaujx":126,"-":82,"VimuthM":12,"jaredlhf":2}},{"path":"src/test/java/safeforhall/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.ROAD_RELAY;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-20"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    // TODO: Fix testcase","lastModifiedDate":"2021-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    public void findEventSuccess() {","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(ROAD_RELAY);","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findEvent(new EventName(\"basketball\")).get(), BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findEvent(new EventName(\"road relay\")).get(), ROAD_RELAY);","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    public void findEventFailure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        EventName eventName \u003d new EventName(\"non existent event\");","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findEvent(eventName));","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    public void findPersonSuccess() throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addPerson(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"A100\").get(), ALICE);","lastModifiedDate":"2021-10-20"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"A101\").get(), BENSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"Alice Pauline\").get(), ALICE);","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"Benson Meier\").get(), BENSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    public void findPersonFailure() throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findPerson(\"A401\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findPerson(\"Johnny Lim\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":140,"author":{"gitId":"chongjunwei"},"content":"            return events;","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"gordonlzy":36,"chongjunwei":7,"VimuthM":10,"-":91}},{"path":"src/test/java/safeforhall/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.VOLLEYBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"    public void toPersonListTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        ResidentList listWithName \u003d new ResidentList(\"Alice Pauline, Benson Meier\");","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personListWithName \u003d modelManager.toPersonList(listWithName);","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personListWithName, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"        ResidentList listWithRoom \u003d new ResidentList(\"A100, A101\");","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personListWithRoom \u003d modelManager.toPersonList(listWithRoom);","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personListWithRoom, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"    public void getCurrentResidentsTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-18"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"        ResidentList list \u003d new ResidentList(\"Alice Pauline, Benson Meier\");","lastModifiedDate":"2021-10-18"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d modelManager.getCurrentEventResidents(list);","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personList, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"    public void getEventSuccess() {","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withEvent(BASKETBALL).withEvent(VOLLEYBALL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"        EventName basketballEvent \u003d new EventName(\"basketball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"        Optional\u003cEvent\u003e foundBasketball \u003d addressBook.findEvent(basketballEvent);","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(foundBasketball.get(), BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"        EventName volleyballEvent \u003d new EventName(\"volleyball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        Optional\u003cEvent\u003e foundVolleyball \u003d addressBook.findEvent(volleyballEvent);","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(foundVolleyball.get(), VOLLEYBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"    public void getEventFailure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withEvent(BASKETBALL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"        EventName volleyballEvent \u003d new EventName(\"volleyball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"        Optional\u003cEvent\u003e foundVolleyball \u003d addressBook.findEvent(volleyballEvent);","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(foundVolleyball, Optional.empty());","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"gordonlzy":66,"VimuthM":8,"-":124}},{"path":"src/test/java/safeforhall/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"VimuthM":2,"-":19}},{"path":"src/test/java/safeforhall/model/event/NameContainsEventKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"public class NameContainsEventKeywordsPredicateTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        NameContainsEventKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"                new NameContainsEventKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"        NameContainsEventKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"                new NameContainsEventKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        NameContainsEventKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"                new NameContainsEventKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    //TODO","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        // One keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        NameContainsEventKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"                new NameContainsEventKeywordsPredicate(Collections.singletonList(\"Football\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        predicate \u003d new NameContainsEventKeywordsPredicate(Arrays.asList(\"Football\", \"Swim\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        predicate \u003d new NameContainsEventKeywordsPredicate(Arrays.asList(\"Football\", \"Basketball\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        predicate \u003d new NameContainsEventKeywordsPredicate(Arrays.asList(\"fooTbAll\", \"swIM\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        NameContainsEventKeywordsPredicate predicate \u003d new NameContainsEventKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"        predicate \u003d new NameContainsEventKeywordsPredicate(Arrays.asList(\"Swim\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football Basketball\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        // Keywords match phone, email, but does not match name","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        predicate \u003d new NameContainsEventKeywordsPredicate(Arrays.asList(\"20-10-2021\", \"Field\", \"20\"));","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football Training\").withEventDate(\"20-10-2021\")","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(\"Field\").withCapacity(\"20\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":75,"gordonlzy":7}},{"path":"src/test/java/safeforhall/model/event/ResidentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"public class ResidentListTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ResidentList(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_nameRoomConflict_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(ParseException.class, () -\u003e","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"                ResidentList.isValidResidentList(\"Peter, a213\")); // name and room","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public void isValidResidentList() throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        // null name","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ResidentList.isValidResidentList(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        // invalid name","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentList(\" \")); // spaces only","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentList(\"a213 b423\")); // no comma between information","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        // valid name","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"\")); // empty string","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack\")); // alphabets only","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack, Capital Tan\")); // more than one name","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack,Capital Tan\")); // comma no space","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"a213\")); // rooms only","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"A213\")); // rooms capital","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"A213, b423\")); // more than one room","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":42}},{"path":"src/test/java/safeforhall/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"VimuthM":2,"-":66}},{"path":"src/test/java/safeforhall/model/person/LastDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"public class LastDateTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LastDate(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    public void isValidDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        // null dates","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LastDate(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"        // invalid dates","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"        //assertFalse(LastDate.isValidDate(\"\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"10.10.2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"10/10/2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"9-9-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"19-9-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // valid dates","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isValidDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":29,"jaredlhf":1}},{"path":"src/test/java/safeforhall/model/person/NameContainsEventKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"public class NameContainsEventKeywordsPredicateTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        // Keywords match phone, email, but does not match name","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"                .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rebeccalaujx":1,"VimuthM":4,"-":70}},{"path":"src/test/java/safeforhall/model/person/NameMissedDeadlinePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"public class NameMissedDeadlinePredicateTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeFound_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"02-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"02-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"01-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"31-09-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"30-09-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeNotFound_returnsFalse() {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"10-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"10-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"09-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"09-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-10-2021\").build()));","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    public void testGetDeadlinePeriod() {","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(predicate.getDeadlinePeriod(ALICE), 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(predicate.getDeadlinePeriod(ALICE), 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"gordonlzy":60}},{"path":"src/test/java/safeforhall/model/person/NameNearLastDatePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"public class NameNearLastDatePredicateTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeFound_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"04-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"05-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"06-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeNotFound_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"10-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"10-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"09-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"09-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"14-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":52}},{"path":"src/test/java/safeforhall/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"gordonlzy":3,"VimuthM":2,"-":35}},{"path":"src/test/java/safeforhall/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    // @Test","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    // public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    //     Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    //     assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2021-10-06"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    // }","lastModifiedDate":"2021-10-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"gordonlzy":4,"VimuthM":13,"-":63}},{"path":"src/test/java/safeforhall/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"VimuthM":2,"-":38}},{"path":"src/test/java/safeforhall/model/person/RoomValidCheckPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"public class RoomValidCheckPredicateTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"        String input1 \u003d \"A100\";","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        String input2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate firstPredicate \u003d new RoomValidCheckPredicate(input1);","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate secondPredicate \u003d new RoomValidCheckPredicate(input2);","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate firstPredicateCopy \u003d new RoomValidCheckPredicate(input1);","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    public void test_validRoomForFind_returnsTrue() {","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A200\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").withRoom(\"e200\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public void test_invalidRoomForFind_throwsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withRoom(\"A100\").withPhone(\"12345\")","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"                    .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"VimuthM":83}},{"path":"src/test/java/safeforhall/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"VimuthM":9,"-":159}},{"path":"src/test/java/safeforhall/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.tag;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"VimuthM":2,"-":24}},{"path":"src/test/java/safeforhall/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"public class JsonAdaptedEventTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":4}},{"path":"src/test/java/safeforhall/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"// TODO: Add all test cases for new fields","lastModifiedDate":"2021-10-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_VACC \u003d BENSON.getVaccStatus().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_FACULTY \u003d BENSON.getFaculty().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_FETDATE \u003d BENSON.getLastFetDate().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_COLLECTIONDATE \u003d BENSON.getLastCollectionDate().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, null, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, null,","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":26,"-":63}},{"path":"src/test/java/safeforhall/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"//import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"//import static safeforhall.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"//import static safeforhall.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"//import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    // TODO fix under Add","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    //    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"    //    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    //        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    //        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    //        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    //","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    //        // Save in new file and read back","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    //        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    //        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    //","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    //        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    //        original.addPerson(HOON);","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    //        original.removePerson(ALICE);","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"    //        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    //        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"    //","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"    //        // Save and read without specifying file path","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    //        original.addPerson(IDA);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    //        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"    //        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"    //    }","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"gordonlzy":30,"VimuthM":5,"-":75}},{"path":"src/test/java/safeforhall/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":6,"-":41}},{"path":"src/test/java/safeforhall/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"safeforhall.json\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":6,"-":117}},{"path":"src/test/java/safeforhall/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":6,"-":62}},{"path":"src/test/java/safeforhall/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"     * Adds a new {@code Event} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    public AddressBookBuilder withEvent(Event event) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"gordonlzy":9,"VimuthM":3,"-":31}},{"path":"src/test/java/safeforhall/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"VimuthM":1,"-":33}},{"path":"src/test/java/safeforhall/testutil/EditEventDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventDescriptorBuilder {","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"    private EditEventCommand.EditEventDescriptor descriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder() {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventCommand.EditEventDescriptor();","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder(EditEventCommand.EditEventDescriptor descriptor) {","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"        this.descriptor \u003d new EditEventCommand.EditEventDescriptor(descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder(Event event) {","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventCommand.EditEventDescriptor();","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setName(event.getEventName());","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setDate(event.getEventDate());","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVenue(event.getVenue());","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setCapacity(event.getCapacity());","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code EventName} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setName(new EventName(name));","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code EventDate} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withDate(String date) {","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setDate(new EventDate(date));","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Venue} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withVenue(String venue) {","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVenue(new Venue(venue));","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Capacity} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withCapacity(String capacity) {","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setCapacity(new Capacity(capacity));","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand.EditEventDescriptor build() {","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        return descriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":72}},{"path":"src/test/java/safeforhall/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setRoom(person.getRoom());","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setFaculty(person.getFaculty());","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setVaccStatus(person.getVaccStatus());","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setLastFetDate(person.getLastFetDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setLastCollectionDate(person.getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Room} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withRoom(String room) {","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setRoom(new Room(room));","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Faculty} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withFaculty(String faculty) {","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code VaccStatus} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withVaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code LastFetDate} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withLastFetDate(String lastFetDate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setLastFetDate(new LastDate(lastFetDate));","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code LastCollectionDate} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withLastCollectionDate(String lastCollectionDate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setLastCollectionDate(new LastDate(lastCollectionDate));","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rebeccalaujx":44,"VimuthM":5,"-":58,"jaredlhf":3}},{"path":"src/test/java/safeforhall/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":" * A utility class to help with building Event objects.","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class EventBuilder {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_EVENT_NAME \u003d \"Football Training\";","lastModifiedDate":"2021-10-20"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_EVENT_DATE \u003d \"20-10-2021\";","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_VENUE \u003d \"Field\";","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_CAPACITY \u003d \"20\";","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_RESIDENT_LIST \u003d \"\";","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    private EventName eventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    private EventDate eventDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    private Venue venue;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    private Capacity capacity;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    private ResidentList residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder() {","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        eventName \u003d new EventName(DEFAULT_EVENT_NAME);","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        eventDate \u003d new EventDate(DEFAULT_EVENT_DATE);","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        venue \u003d new Venue(DEFAULT_VENUE);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        capacity \u003d new Capacity(DEFAULT_CAPACITY);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        residents \u003d new ResidentList(DEFAULT_RESIDENT_LIST);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        eventName \u003d eventToCopy.getEventName();","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        eventDate \u003d eventToCopy.getEventDate();","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        venue \u003d eventToCopy.getVenue();","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        capacity \u003d eventToCopy.getCapacity();","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        residents \u003d eventToCopy.getResidents();","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code eventName} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withEventName(String eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        this.eventName \u003d new EventName(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code EventDate} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withEventDate(String eventDate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        this.eventDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code Venue} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withVenue(String venue) {","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        this.venue \u003d new Venue(venue);","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code Capacity} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withCapacity(String capacity) {","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        this.capacity \u003d new Capacity(capacity);","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code ResidentList} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withResidentList(String residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d new ResidentList(residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"    public Event build() {","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        return new Event(eventName, eventDate, venue, capacity, residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":91}},{"path":"src/test/java/safeforhall/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_ROOM \u003d \"A100\";","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String DEFAULT_VACCSTATUS \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_FACULTY \u003d \"SoC\";","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_FETDATE \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_COLLECTDATE \u003d \"\";","lastModifiedDate":"2021-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private Room room;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private VaccStatus vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private Faculty faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private LastDate lastFetDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private LastDate lastCollectionDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        room \u003d new Room(DEFAULT_ROOM);","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        vaccStatus \u003d new VaccStatus(DEFAULT_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d new Faculty(DEFAULT_FACULTY);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        lastFetDate \u003d new LastDate(DEFAULT_FETDATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        lastCollectionDate \u003d new LastDate(DEFAULT_COLLECTDATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        room \u003d personToCopy.getRoom();","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        vaccStatus \u003d personToCopy.getVaccStatus();","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d personToCopy.getFaculty();","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        lastFetDate \u003d personToCopy.getLastFetDate();","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        lastCollectionDate \u003d personToCopy.getLastCollectionDate();","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code Room} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withRoom(String room) {","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d new Room(room);","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code VaccStatus} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withVaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d new VaccStatus(vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code Faculty} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withFaculty(String faculty) {","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d new Faculty(faculty);","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code LastDate} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withFet(String lastFetDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        this.lastFetDate \u003d new LastDate(lastFetDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code LastDate} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withCollection(String lastCollectionDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        this.lastCollectionDate \u003d new LastDate(lastCollectionDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        return new Person(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"gordonlzy":15,"VimuthM":48,"-":66,"jaredlhf":2}},{"path":"src/test/java/safeforhall/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_ROOM + person.getRoom().room + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_FACULTY + person.getFaculty().faculty + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_VACCSTATUS + person.getVaccStatus().vaccStatus + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_FETDATE + person.getLastFetDate().date + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_COLLECTIONDATE + person.getLastCollectionDate().date + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.room).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getVaccStatus().ifPresent(vaccStatus -\u003e sb.append(PREFIX_VACCSTATUS)","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"                .append(vaccStatus.vaccStatus).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getFaculty().ifPresent(faculty -\u003e sb.append(PREFIX_FACULTY).append(faculty.faculty).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getLastFetDate().ifPresent(lastFetDate -\u003e sb.append(PREFIX_FETDATE)","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"                .append(lastFetDate.date).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getLastCollectionDate().ifPresent(lastCollectionDate -\u003e sb.append(PREFIX_COLLECTIONDATE)","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"                .append(lastCollectionDate.date).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"rebeccalaujx":10,"VimuthM":7,"-":35,"jaredlhf":10}},{"path":"src/test/java/safeforhall/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":71}},{"path":"src/test/java/safeforhall/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":4,"-":51}},{"path":"src/test/java/safeforhall/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class TypicalEvents {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final Event BASKETBALL \u003d new EventBuilder().withEventName(\"basketball\")","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"basketball court\")","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"5\")","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"\")","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public static final Event VOLLEYBALL \u003d new EventBuilder().withEventName(\"volleyball\")","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"12-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"volleyball court\")","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"6\")","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"Daniel Meier\")","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public static final Event POWERLIFTING \u003d new EventBuilder().withEventName(\"powerlifting\")","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"15-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"gym\")","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"7\")","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"Elle Meyer, Fiona Kunz, George Best\")","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    public static final Event SWIM \u003d new EventBuilder().withEventName(\"swim\")","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-09-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"swimming pool\")","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"8\")","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"George Best\")","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    public static final Event BAND \u003d new EventBuilder().withEventName(\"band\")","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-11-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"band room\")","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"9\")","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"Carl Kurz, Benson Meier\")","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    public static final Event ROAD_RELAY \u003d new EventBuilder().withEventName(\"road relay\")","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"12-12-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"track\")","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"10\")","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"George Best\")","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    public static final Event DANCE \u003d new EventBuilder().withEventName(\"dance\")","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"01-11-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"studio\")","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"11\")","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(\"George Best, Carl Kurz, Benson Meier\")","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"            ab.addEvent(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        return ab;","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BASKETBALL, VOLLEYBALL, POWERLIFTING, SWIM, BAND, ROAD_RELAY, DANCE));","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":75}},{"path":"src/test/java/safeforhall/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"rebeccalaujx":2,"VimuthM":2,"-":10}},{"path":"src/test/java/safeforhall/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A100\")","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A101\")","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"12-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"13-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A102\")","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"10-10-2021\")","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A103\")","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"12-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"13-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A104\")","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"05-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"16-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A105\")","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"20-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"04-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A106\")","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"01-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"stefan@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(\"A103\")","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"hans@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(\"C200\")","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"20-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"22-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"            .withFet(VALID_FETDATE_AMY)","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"            .withCollection(VALID_COLLECTIONDATE_AMY)","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without FET or COLLECTION","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_FET_COLLECTION \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without FET","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_FET \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            .withCollection(VALID_COLLECTIONDATE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without COLLECTION","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_COLLECTION \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"            .withFet(VALID_FETDATE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(VALID_ROOM_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(VALID_FACULTY_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(VALID_VACCSTATUS_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"            .withFet(VALID_FETDATE_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"            .withCollection(VALID_COLLECTIONDATE_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"gordonlzy":18,"VimuthM":84,"-":40,"jaredlhf":38}},{"path":"src/test/java/safeforhall/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"VimuthM":1,"-":34}},{"path":"src/test/java/safeforhall/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"VimuthM":4,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"\u003c?import safeforhall.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":3,"VimuthM":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"\u003cfx:root type\u003d\"safeforhall.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":5,"VimuthM":1}}]
