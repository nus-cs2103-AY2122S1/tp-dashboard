[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions)","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg?token\u003dALPAMIBNHM)](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp)","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SafeFor(H)All can get your hall management tasks done faster than traditional GUI apps. \u003cbr\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-09-21"}],"authorContributionMap":{"VimuthM":1,"-":3,"jaredlhf":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"mainClassName \u003d \u0027safeforhall.Main\u0027","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"    compile group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00275.1\u0027","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    archiveName \u003d \u0027safeforhall.jar\u0027","lastModifiedDate":"2021-10-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"run {","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":72,"VimuthM":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"### Project advisor: [Prof. Damith Rajapakshe](http://www.comp.nus.edu.sg/~damithch)","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"### Vimuth Mendis","lastModifiedDate":"2021-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"\u003cimg src\u003d\"images/vimuthm.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"[[github](https://github.com/VimuthM)]","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"[[portfolio](team/vimuthm.md)]","lastModifiedDate":"2021-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"### Lim Hern Fong, Jared","lastModifiedDate":"2021-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"\u003cimg src\u003d\"images/jaredlhf.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"[[github](http://github.com/jaredlhf)]","lastModifiedDate":"2021-09-21"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"[[portfolio](team/jaredlhf.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"* Role: Developer","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"### Lim Zi Yang","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"\u003cimg src\u003d\"images/gordonlzy.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"[[github](https://github.com/gordonlzy)] [[portfolio](team/gordonlzy.md)]","lastModifiedDate":"2021-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"### Chong Jun Wei","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"\u003cimg src\u003d\"images/chongjunwei.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"[[github](http://github.com/chongjunwei)]","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"[[portfolio](team/chongjunwei.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"### Rebecca Lau","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"\u003cimg src\u003d\"images/rebeccalaujx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"[[github](http://github.com/rebeccalaujx)]","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"[[portfolio](team/rebeccalaujx.md)]","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rebeccalaujx":4,"gordonlzy":3,"chongjunwei":4,"-":36,"VimuthM":5,"jaredlhf":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"* [AB3](https://github.com/se-edu/addressbook-level3) source code for the initial starting code","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"* [opencsv](http://opencsv.sourceforge.net/) was used to read and write csv files","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/Main.java) and [`MainApp`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/MainApp.java). It is responsible for,","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/ui/Ui.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"\u003cimg src\u003d\"images/UiClassDiagram.png\" width\u003d\"700\"/\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"**API** : [`Logic.java`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/logic/Logic.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"**API** : [`Model.java`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/model/Model.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"1100\" /\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object) and all `Event` objects (which are contained in a `UniqueEventList` object).","lastModifiedDate":"2021-11-08"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"* stores the currently \u0027selected\u0027 `Person` or `Event` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` or `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-11-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"**API** : [`Storage.java`](https://github.com/AY2122S1-CS2103T-T15-4/tp/blob/master/src/main/java/safeforhall/storage/Storage.java)","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"![StorageClassDiagram](images/StorageClassDiagram.png)","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"Classes used by multiple components are in the `safeforhall.commons` package.","lastModifiedDate":"2021-11-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"### Add Command","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"This command allows the user to add residents or events to the SafeFor(H)All application depending on the currently active tab.","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"jaredlhf"},"content":"The workflow of the Add command is shown in the Activity diagram illustrated below.","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"![AddActivityDiagram](images/logic/commands/addcommand/AddActivityDiagram.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"jaredlhf"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"jaredlhf"},"content":"**Aspect: Optional `LastDate` fields when adding residents**","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"jaredlhf"},"content":"* **Alternative 1 (current choice):** `lastFetDate` and `lastCollectionDate` are optional fields","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"jaredlhf"},"content":"  * Pros:","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"jaredlhf"},"content":"    - Provides more flexibility for users when adding residents to the application, as users have the choice to include or exclude these fields.","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"jaredlhf"},"content":"    - Saves time as all fields can be added in a single command","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"jaredlhf"},"content":"  * Cons: The length of command is increased as there are potentially more fields for the user to type.","lastModifiedDate":"2021-10-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":170,"author":{"gitId":"jaredlhf"},"content":"* **Alternative 2:** Add `lastFetDate` and `lastCollectionDate` by editing the Person object","lastModifiedDate":"2021-10-22"},{"lineNumber":171,"author":{"gitId":"jaredlhf"},"content":"  * Pros: Makes add command more user-friendly as the command is more succinct","lastModifiedDate":"2021-10-22"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"  * Cons: User has to go through a two-step process of `add` and `edit` to initialise a residents information","lastModifiedDate":"2021-10-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"### Delete Command","lastModifiedDate":"2021-10-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"This command allows the user to delete residents or events to the SafeFor(H)All application depending on the currently active tab.","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"The workflow of the Delete command is shown in the Activity diagram illustrated below.","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"![AddActivityDiagram](images/logic/commands/deletecommand/DeleteActivityDiagram.png)","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"**Aspect: Delete the correct resident/event:**","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"* **Alternative 1 (current choice):** `Index` field","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"    * Pros: No need to type out the full name of the resident/event, and risk typos. `Index` is also unique, which prevents the user","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"      from deleting the wrong resident/event.","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"    * Cons: The user needs to scroll through the GUI to find the index of the resident/event to be deleted.","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"* **Alternative 2:** `Name` and `eventName` fields for Resident and Event respectively.","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"chongjunwei"},"content":"    * Pros: The user does not need to scroll through the GUI to find the index of the resident/event to be deleted.","lastModifiedDate":"2021-10-24"},{"lineNumber":193,"author":{"gitId":"chongjunwei"},"content":"    * Cons: There is a higher risk of erroneous user input, as a `Name`/`eventName` field will inevitably be longer than","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"chongjunwei"},"content":"      an index.","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"### Edit Command","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"This command allows the user to edit residents or events to the SafeFor(H)All application depending on the currently active tab.","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"The workflow of `EditPersonCommand` is shown in the Activity diagram illustrated below.","lastModifiedDate":"2021-11-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"![EditActivityDiagram](images/logic/commands/editcommand/EditActivityDiagram.png)","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"`EditEventCommand` follows a similar flow of actions.","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"Note:","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"- Mass operations for residents can be carried out by inputting multiple indexes after the command `edit`, each separated by a whitespace.","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"rebeccalaujx"},"content":"- `Residents` field in `Event` is not editable by `edit` command","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"**Aspect: Edit parameters:**","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"* **Alternative 1 (current choice):** Excluding `Residents` parameter for Events.","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"    * Pros:","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        - Simpler implementation as there are less `EditDescriptors` to maintain.","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"        - `include` and `exclude` commands exist to enhance the updating of the `Residents` field.","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"          `edit` currently replaces the specified fields with the user input, which will not be user-friendly for the `Residents` field.","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"          It might also cause confusion of possible overlapping functionality on the user\u0027s side.","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"rebeccalaujx"},"content":"    * Cons: Increases the number of commands the user has to remember.","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"rebeccalaujx"},"content":"* **Alternative 2:** `edit` is used to edit the residents involved in an event","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"    * Pros: More instinctive, and less commands for the user to remember.","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"    * Cons: Users will have to rewrite the entire list of residents involved in the event whenever they want to modify the list of residents involved.","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"rebeccalaujx"},"content":"### View Command","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"This command allows the user to view the additional details of a specific resident or event in the sidebar, depending on the currently active tab.","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"How it works:","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"1. When the app is started, the `Ui` component calls on `Logic` to get the `Model` to be displayed in the sidebar. `Model` is first set to an empty list.","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"rebeccalaujx"},"content":"2. When a `ViewCommand` with a valid index is executed, the `Model` is updated to contain only the specified resident or event.","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"rebeccalaujx"},"content":"3. When the `ViewCommand` is executed without index parameters, the main panel will show all residents or events, and the sidebar will be cleared.","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"rebeccalaujx"},"content":"4. If the command is run in the `ResidentTab`, the details of the resident with the corresponding index being displayed in the sidebar. Vice versa for `EventTab`.","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"rebeccalaujx"},"content":"The following sequence diagram demonstrates what happens when the `ViewPersonCommand` is executed:","lastModifiedDate":"2021-11-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"rebeccalaujx"},"content":"![ViewCommandSequenceDiagram](images/logic/commands/viewcommand/ViewPersonCommandSequenceDiagram.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":240,"author":{"gitId":"rebeccalaujx"},"content":"`ViewEventCommand` follows a similar sequence of interactions.","lastModifiedDate":"2021-11-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"rebeccalaujx"},"content":"**Aspect: How to reference residents/ events in the CLI:**","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"rebeccalaujx"},"content":"* **Alternative 1 (current choice):** Reference by `Index`.","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"rebeccalaujx"},"content":"    * Pros:","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"rebeccalaujx"},"content":"      - Easy to reference and no need to type out the whole `residentName`/ `eventName`.","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"rebeccalaujx"},"content":"      - `Index` is unique.","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"rebeccalaujx"},"content":"    * Cons: Need to first determine the `Index` of the resident/ event in the UI. `View` could become a two-step process if the database is large.","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"rebeccalaujx"},"content":"* **Alternative 2:** Reference by `residentName`/ `eventName`.","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"rebeccalaujx"},"content":"    * Pros: Do not have to first determine the `Index` of the resident/ event.","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"rebeccalaujx"},"content":"    * Cons:","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"rebeccalaujx"},"content":"      - Hard to type when the `residentName`/ `eventName` is long.","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"      - `eventName` is not unique, which might cause issues.","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"VimuthM"},"content":"### Find Person Command","lastModifiedDate":"2021-11-08"},{"lineNumber":260,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":261,"author":{"gitId":"VimuthM"},"content":"This command allows searching for residents subjected to 1 or more filters for the different available parameters.","lastModifiedDate":"2021-10-21"},{"lineNumber":262,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":263,"author":{"gitId":"VimuthM"},"content":"The workflow of the Find Person command can be illustrated with an activity diagram as follows:","lastModifiedDate":"2021-11-08"},{"lineNumber":264,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":265,"author":{"gitId":"VimuthM"},"content":"\u003cimg src\u003d\"images/logic/commands/findcommand/FindActivityDiagram.png\" width\u003d\"900\" /\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":266,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":267,"author":{"gitId":"VimuthM"},"content":"How the parsing works:","lastModifiedDate":"2021-10-22"},{"lineNumber":268,"author":{"gitId":"VimuthM"},"content":"1. When `Logic` is called upon to execute the command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-10-22"},{"lineNumber":269,"author":{"gitId":"VimuthM"},"content":"1. If the command was run in the `ResidentTab` it results in a `FindCommandParser` object created and it\u0027s `parse` method called with the user input.","lastModifiedDate":"2021-10-21"},{"lineNumber":270,"author":{"gitId":"VimuthM"},"content":"1. The parsing attempts to create a `FindCommand` object. For each existing prefix, it sets the relevant field of a new `FindCompositePredicate` object.","lastModifiedDate":"2021-10-22"},{"lineNumber":271,"author":{"gitId":"VimuthM"},"content":"1. Parsing of any of the provided values can throw a `ParseException` if invalid. If at least one field is set, a `FindCommand` object is returned. If all are unspecified, an exception is thrown.","lastModifiedDate":"2021-10-22"},{"lineNumber":272,"author":{"gitId":"VimuthM"},"content":"1. The command is executed and the result encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-10-22"},{"lineNumber":273,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"VimuthM"},"content":"Note:","lastModifiedDate":"2021-10-21"},{"lineNumber":275,"author":{"gitId":"VimuthM"},"content":" - Name can take in multiple keywords separated by whitespace","lastModifiedDate":"2021-10-21"},{"lineNumber":276,"author":{"gitId":"VimuthM"},"content":" - `lastFetDate` and `lastCollectionDate` are not included","lastModifiedDate":"2021-10-21"},{"lineNumber":277,"author":{"gitId":"VimuthM"},"content":" - Room filtering is extended to allow block, level and block-level filtering as well","lastModifiedDate":"2021-10-21"},{"lineNumber":278,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":279,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":280,"author":{"gitId":"VimuthM"},"content":"The following sequence diagram demonstrates what happens when the `FindCommand` is executed:","lastModifiedDate":"2021-10-22"},{"lineNumber":281,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":282,"author":{"gitId":"VimuthM"},"content":"\u003cimg src\u003d\"images/logic/commands/findcommand/FindCommandSequenceDiagram.png\" width\u003d\"900\" /\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":283,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":284,"author":{"gitId":"VimuthM"},"content":"The command extends the `Command` class and implements `FindCommand#execute()` to execute the command.","lastModifiedDate":"2021-10-22"},{"lineNumber":285,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":286,"author":{"gitId":"VimuthM"},"content":"The crucial logic underlying is encapsulated in the `FindCompositePredicate` class. This class holds the filtering variables and constructs the required predicate for filtering. The `test` method creates and combines the predicates as shown:","lastModifiedDate":"2021-10-22"},{"lineNumber":287,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":288,"author":{"gitId":"VimuthM"},"content":"```java","lastModifiedDate":"2021-10-22"},{"lineNumber":289,"author":{"gitId":"VimuthM"},"content":"@Override","lastModifiedDate":"2021-10-22"},{"lineNumber":290,"author":{"gitId":"VimuthM"},"content":"public boolean test(Person person) {","lastModifiedDate":"2021-10-22"},{"lineNumber":291,"author":{"gitId":"VimuthM"},"content":"    List\u003cPredicate\u003cPerson\u003e\u003e allPredicates \u003d Arrays.asList(","lastModifiedDate":"2021-10-22"},{"lineNumber":292,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getName().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-22"},{"lineNumber":293,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getRoom().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-22"},{"lineNumber":294,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getPhone().orElse(x -\u003e true).test(p.getPhone()),","lastModifiedDate":"2021-10-22"},{"lineNumber":295,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getEmail().orElse(x -\u003e true).test(p.getEmail()),","lastModifiedDate":"2021-10-22"},{"lineNumber":296,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getVaccStatus().orElse(x -\u003e true).test(p.getVaccStatus()),","lastModifiedDate":"2021-10-22"},{"lineNumber":297,"author":{"gitId":"VimuthM"},"content":"        p -\u003e getFaculty().orElse(x -\u003e true).test(p.getFaculty()));","lastModifiedDate":"2021-10-22"},{"lineNumber":298,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":299,"author":{"gitId":"VimuthM"},"content":"    return allPredicates","lastModifiedDate":"2021-10-22"},{"lineNumber":300,"author":{"gitId":"VimuthM"},"content":"            .stream()","lastModifiedDate":"2021-10-22"},{"lineNumber":301,"author":{"gitId":"VimuthM"},"content":"            .reduce(p -\u003e true, Predicate::and)","lastModifiedDate":"2021-10-22"},{"lineNumber":302,"author":{"gitId":"VimuthM"},"content":"            .test(person);","lastModifiedDate":"2021-10-22"},{"lineNumber":303,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-22"},{"lineNumber":304,"author":{"gitId":"VimuthM"},"content":"```","lastModifiedDate":"2021-10-22"},{"lineNumber":305,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"gordonlzy"},"content":"Most variables are checked against using their respective `equals` methods except for `Name` and `Room` for which separate predicates implementing `Predicate\u003cPerson\u003e` have been created. This is done to support:","lastModifiedDate":"2021-11-08"},{"lineNumber":307,"author":{"gitId":"gordonlzy"},"content":"1. Multiple keywords matching for name and ","lastModifiedDate":"2021-11-08"},{"lineNumber":308,"author":{"gitId":"gordonlzy"},"content":"2. Room matching by block, level and block-level.","lastModifiedDate":"2021-11-08"},{"lineNumber":309,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":310,"author":{"gitId":"VimuthM"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-21"},{"lineNumber":311,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":312,"author":{"gitId":"VimuthM"},"content":"**Aspect: Filtering parameters:**","lastModifiedDate":"2021-10-21"},{"lineNumber":313,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":314,"author":{"gitId":"VimuthM"},"content":"* **Alternative 1 (current choice):** Excluding `lastFetDate` and `lastCollectionDate` parameters.","lastModifiedDate":"2021-10-21"},{"lineNumber":315,"author":{"gitId":"VimuthM"},"content":"    * Pros:","lastModifiedDate":"2021-10-21"},{"lineNumber":316,"author":{"gitId":"VimuthM"},"content":"        - Simpler implementation as there are less filtering predicates to maintain.","lastModifiedDate":"2021-10-21"},{"lineNumber":317,"author":{"gitId":"VimuthM"},"content":"        - `list` command exists to enhance the usage of these 2 fields to extract information. A simple equality check on date is less likely from the user\u0027s POV and `list` handles this. Thus excluding this, prevents confusion of possible overlapping functionality on the user\u0027s side.","lastModifiedDate":"2021-10-21"},{"lineNumber":318,"author":{"gitId":"VimuthM"},"content":"    * Cons:","lastModifiedDate":"2021-10-21"},{"lineNumber":319,"author":{"gitId":"VimuthM"},"content":"        - The user is unable to search for an exact fet/collection date alongside other filters.","lastModifiedDate":"2021-10-21"},{"lineNumber":320,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":321,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":322,"author":{"gitId":"gordonlzy"},"content":"### Include Command","lastModifiedDate":"2021-10-21"},{"lineNumber":323,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":324,"author":{"gitId":"gordonlzy"},"content":"This command adds multiple residents to an event by referencing the `Event` by its `Index` and the `Person` to ","lastModifiedDate":"2021-11-06"},{"lineNumber":325,"author":{"gitId":"gordonlzy"},"content":"add by their `Name` or `Room` through the `AddressBook#findPerson()` method.","lastModifiedDate":"2021-11-06"},{"lineNumber":326,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":327,"author":{"gitId":"gordonlzy"},"content":"The following activity diagram illustrates how the `AddressBook#findPerson()` method works:","lastModifiedDate":"2021-10-21"},{"lineNumber":328,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":329,"author":{"gitId":"gordonlzy"},"content":"![FindPersonActivityDiagram](images/logic/commands/includecommand/FindPersonActivityDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":330,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":331,"author":{"gitId":"gordonlzy"},"content":"The command extends the `Command` class and implements `IncludeCommand#execute()` to execute the command. ","lastModifiedDate":"2021-11-06"},{"lineNumber":332,"author":{"gitId":"gordonlzy"},"content":"A `ResidentList` which contains a list of `Person` to add to an `Event`, is a field added to an `Event`.","lastModifiedDate":"2021-11-06"},{"lineNumber":333,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":334,"author":{"gitId":"gordonlzy"},"content":"When `IncludeCommand#createEditedEvent()` is called, two methods of `Event` are invoked:","lastModifiedDate":"2021-11-08"},{"lineNumber":335,"author":{"gitId":"gordonlzy"},"content":"* `Event#getCombinedDisplayString()` creates a display String with just the names of each `Person` in the combination ","lastModifiedDate":"2021-11-08"},{"lineNumber":336,"author":{"gitId":"gordonlzy"},"content":"  of current `Person` in the Event` and all the `Person` in `toAdd` with no duplicate.","lastModifiedDate":"2021-11-08"},{"lineNumber":337,"author":{"gitId":"gordonlzy"},"content":"* `Event#getCombinedStorageString()` creates a storage String with the full information of each `Person` in the ","lastModifiedDate":"2021-11-08"},{"lineNumber":338,"author":{"gitId":"gordonlzy"},"content":"  combination of current `Person` in the Event` and all the `Person` in `toAdd` with no duplicate. ","lastModifiedDate":"2021-11-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":340,"author":{"gitId":"gordonlzy"},"content":"The following sequence diagram demonstrates what happens when the `IncludeCommand` is executed:","lastModifiedDate":"2021-10-21"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":342,"author":{"gitId":"gordonlzy"},"content":"![IncludeCommandSequenceDiagram](images/logic/commands/includecommand/IncludeCommandSequenceDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":344,"author":{"gitId":"gordonlzy"},"content":"The following activity diagram summarizes what happens when the `IncludeCommand` is executed:","lastModifiedDate":"2021-10-21"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":346,"author":{"gitId":"gordonlzy"},"content":"![IncludeCommandActivityDiagram](images/logic/commands/includecommand/IncludeCommandActivityDiagram.png)","lastModifiedDate":"2021-10-21"},{"lineNumber":347,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":348,"author":{"gitId":"gordonlzy"},"content":"#### Design considerations:","lastModifiedDate":"2021-10-21"},{"lineNumber":349,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":350,"author":{"gitId":"gordonlzy"},"content":"**Aspect: How to reference event in the CLI:**","lastModifiedDate":"2021-10-21"},{"lineNumber":351,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":352,"author":{"gitId":"gordonlzy"},"content":"* **Alternative 1 (current choice):** Reference by `Index`.","lastModifiedDate":"2021-10-21"},{"lineNumber":353,"author":{"gitId":"gordonlzy"},"content":"    * Pros: Easy to reference and no need to type out the whole `eventName`, `Index` is also unique.","lastModifiedDate":"2021-10-21"},{"lineNumber":354,"author":{"gitId":"gordonlzy"},"content":"    * Cons: Need to find the `Index` of the `Event` in the UI to know what `Index` the `Event` has if the number of `Event` is large.","lastModifiedDate":"2021-10-21"},{"lineNumber":355,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":356,"author":{"gitId":"gordonlzy"},"content":"* **Alternative 2:** Reference by `eventName`.","lastModifiedDate":"2021-10-21"},{"lineNumber":357,"author":{"gitId":"gordonlzy"},"content":"  itself.","lastModifiedDate":"2021-10-21"},{"lineNumber":358,"author":{"gitId":"gordonlzy"},"content":"    * Pros: Do not need to have the `Index` in UI to know what `Event` it is, can just reference it by its name.","lastModifiedDate":"2021-10-21"},{"lineNumber":359,"author":{"gitId":"gordonlzy"},"content":"    * Cons: Hard to type when the `eventName` is long, `eventName` not being unique will also cause issues.","lastModifiedDate":"2021-10-21"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":361,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":366,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":367,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":368,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":369,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"gordonlzy"},"content":"* administrator of on-campus halls and residences","lastModifiedDate":"2021-09-22"},{"lineNumber":380,"author":{"gitId":"gordonlzy"},"content":"* has a need to manage a large amount of resident information","lastModifiedDate":"2021-09-22"},{"lineNumber":381,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":384,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"VimuthM"},"content":"**Value proposition**: Manage residents\u0027 information faster than a typical mouse/GUI driven app and allow easy enforcement of Covid-19 restrictions","lastModifiedDate":"2021-09-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"rebeccalaujx"},"content":"[EPIC] Basic CRUD Functionality","lastModifiedDate":"2021-10-22"},{"lineNumber":394,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":395,"author":{"gitId":"-"},"content":"| Priority | As a â€¦â€‹                                 | I want to â€¦â€‹                                                                                       | So that I canâ€¦â€‹                                                                                                                    |","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"rebeccalaujx"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2021-09-25"},{"lineNumber":397,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add a new resident                                                                                    | keep track of the residents\u0027 data                                                                                                     |","lastModifiedDate":"2021-11-07"},{"lineNumber":398,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add a new event                                                                                       | keep track of current and upcoming events happening in the hall/ residence                                                            |","lastModifiedDate":"2021-10-22"},{"lineNumber":399,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add residents to an event                                                                             | keep track of the residents attending a specific hall event                                                                           |","lastModifiedDate":"2021-11-07"},{"lineNumber":400,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete a resident                                                                                     | remove the data of a resident who has moved out                                                                                       |","lastModifiedDate":"2021-11-07"},{"lineNumber":401,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete many residents in a single command                                                             | save a lot of time when deleting multiple residents                                                                                   |","lastModifiedDate":"2021-09-25"},{"lineNumber":402,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete an event                                                                                       | remove an event that has been cancelled                                                                                               |","lastModifiedDate":"2021-10-22"},{"lineNumber":403,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete many events in a single command                                                                | save a lot of time when deleting multiple events                                                                                      |","lastModifiedDate":"2021-11-07"},{"lineNumber":404,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | delete residents from an event                                                                        | remove residents who are no longer attending a specific hall event                                                                    |","lastModifiedDate":"2021-11-07"},{"lineNumber":405,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | update a residentâ€™s details                                                                           | update and reflect any changes in the residentsâ€™ details                                                                              |","lastModifiedDate":"2021-10-22"},{"lineNumber":406,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | update the particulars of many residents in a single command                                          | save a lot of time when editing the details of multiple residents                                                                     |","lastModifiedDate":"2021-10-22"},{"lineNumber":407,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | update an event\u0027s details                                                                             | update an eventâ€™s details if there are any changes                                                                                    |","lastModifiedDate":"2021-10-22"},{"lineNumber":408,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | add and update a resident\u0027s last FET date                                                             | keep track of the residentsâ€™ last FET dates and update the dates whenever they take a new FET                                         |","lastModifiedDate":"2021-11-07"},{"lineNumber":409,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":410,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":411,"author":{"gitId":"rebeccalaujx"},"content":"[EPIC] Information Retrieval","lastModifiedDate":"2021-10-22"},{"lineNumber":412,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":413,"author":{"gitId":"rebeccalaujx"},"content":"| Priority | As a â€¦â€‹                                 | I want to â€¦â€‹                                                                                       | So that I canâ€¦â€‹                                                                                                                    |","lastModifiedDate":"2021-10-22"},{"lineNumber":414,"author":{"gitId":"rebeccalaujx"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2021-10-22"},{"lineNumber":415,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view all residents                                                                                    | see all the current residents                                                                                                         |","lastModifiedDate":"2021-11-07"},{"lineNumber":416,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view all events                                                                                       | see all the current events                                                                                                            |","lastModifiedDate":"2021-11-07"},{"lineNumber":417,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view a list of residents who were present at an event                                                 | identify who is at risk if someone in the group catches COVID                                                                         |","lastModifiedDate":"2021-11-07"},{"lineNumber":418,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | search for the residents by their name, room, email, phone number                                     | find a resident based on the information given                                                                                        |","lastModifiedDate":"2021-09-25"},{"lineNumber":419,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | filter the residents by faculty                                                                       | easily disseminate faculty-specific information to the residents                                                                      |","lastModifiedDate":"2021-10-22"},{"lineNumber":420,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | filter the residents by block and level                                                               | easily contact a group of students in order to disseminate group-specific information                                                 |","lastModifiedDate":"2021-10-22"},{"lineNumber":421,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | filter the residents by their vaccination status                                                      | use the information to disseminate information or guidelines that may be different for vaccinated and unvaccinated individuals        |","lastModifiedDate":"2021-09-25"},{"lineNumber":422,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | immediately see residents who have missed their FET deadlines                                         | disseminate a reminder to these residents to take a new FET test                                                                      |","lastModifiedDate":"2021-10-22"},{"lineNumber":423,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | immediately see which events contain unvaccinated people                                              | ensure that COVID restrictions are adhered to, and that everyone attending the event is vaccinated, by removing the unvaccinated residents from the event list   |","lastModifiedDate":"2021-11-07"},{"lineNumber":424,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve all residents whose FETs are due within a given date                                         | ensure residents do not miss their FET deadlines by reminding them to do their FETs                                                   |","lastModifiedDate":"2021-11-07"},{"lineNumber":425,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve a resident\u0027s test kit collection deadlines                                                   | ensure residents do not miss their test kit collections by reminding them to collect their kits on time                               |","lastModifiedDate":"2021-09-25"},{"lineNumber":426,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve the date and venue of the events                                                             | identify who was in contact with the infected person on the day of the event                                                          |","lastModifiedDate":"2021-11-07"},{"lineNumber":427,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | retrieve the maximum capacity of an event venue and the number of residents attending the event       | ensure that the number of residents attending the event will not exceed the capacity of the event venue                               |","lastModifiedDate":"2021-11-07"},{"lineNumber":428,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | easily carry out contact tracing                                                                      | quarantine can be done quickly in the case where one person in the group catches COVID                                                |","lastModifiedDate":"2021-11-07"},{"lineNumber":429,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | check which CCA booked a certain facility                                                             | find out which CCA is responsible in case trouble arises                                                                              |","lastModifiedDate":"2021-09-25"},{"lineNumber":430,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | check a residentâ€™s prior events                                                                       | find out which group has come into contact with the infected person                                                                   |","lastModifiedDate":"2021-11-07"},{"lineNumber":431,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":432,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":433,"author":{"gitId":"rebeccalaujx"},"content":"[EPIC] Miscellaneous","lastModifiedDate":"2021-10-22"},{"lineNumber":434,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":435,"author":{"gitId":"rebeccalaujx"},"content":"| Priority | As a â€¦â€‹                                 | I want to â€¦â€‹                                                                                       | So that I canâ€¦â€‹                                                                                                                    |","lastModifiedDate":"2021-10-22"},{"lineNumber":436,"author":{"gitId":"rebeccalaujx"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |","lastModifiedDate":"2021-10-22"},{"lineNumber":437,"author":{"gitId":"rebeccalaujx"},"content":"| `* * *`  | admin in a hall/ residence                 | view the help guide whenever I need to                                                                | refresh my memory on how to use the app                                                                                               |","lastModifiedDate":"2021-10-22"},{"lineNumber":438,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | view a summary of the app functions                                                                   | have an overview of what the app does                                                                                                 |","lastModifiedDate":"2021-11-07"},{"lineNumber":439,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | import user data from a CSV file                                                                      | input multiple residents\u0027 information into the system at once without having to add each resident\u0027s information line-by-line          |","lastModifiedDate":"2021-10-22"},{"lineNumber":440,"author":{"gitId":"rebeccalaujx"},"content":"| `* *`    | admin in a hall/ residence                 | export the emails of the residents whose FET/collection are due soon into a file                      | disseminate information to the residents more easily                                                                                  |","lastModifiedDate":"2021-11-07"},{"lineNumber":441,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | view all details of a specific resident or event only when I need to                                  | easily find the specific information I am looking for, without having the large amount of information stored cluttering the app       |","lastModifiedDate":"2021-11-07"},{"lineNumber":442,"author":{"gitId":"rebeccalaujx"},"content":"| `*`      | admin in a hall/ residence                 | see a auto-suggestion of the command format once I type it                                            | quickly refer to the correct format of the command                                                                                    |","lastModifiedDate":"2021-11-07"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"jaredlhf"},"content":"(For all use cases below, the **System** is the `SafeFor(H)All app` and the **Actor** is the `Hall admin`, unless specified otherwise)","lastModifiedDate":"2021-09-29"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC01 - Delete a resident**","lastModifiedDate":"2021-09-29"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"jaredlhf"},"content":"1. Actor requests to list residents.","lastModifiedDate":"2021-11-08"},{"lineNumber":453,"author":{"gitId":"jaredlhf"},"content":"2. System shows a list of residents.","lastModifiedDate":"2021-11-08"},{"lineNumber":454,"author":{"gitId":"jaredlhf"},"content":"3. Actor requests to delete a specific resident in the list.","lastModifiedDate":"2021-11-08"},{"lineNumber":455,"author":{"gitId":"jaredlhf"},"content":"4. System deletes the resident.","lastModifiedDate":"2021-11-08"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":463,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":466,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"jaredlhf"},"content":"    * 3a1. System shows an error message.","lastModifiedDate":"2021-09-29"},{"lineNumber":468,"author":{"gitId":"jaredlhf"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":469,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":472,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC02 - View details of an event**","lastModifiedDate":"2021-11-08"},{"lineNumber":473,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":474,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-09-29"},{"lineNumber":475,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":476,"author":{"gitId":"jaredlhf"},"content":"1. Actor navigates to the `Event` tab of the application.","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"jaredlhf"},"content":"2. Actor requests to view an event from the list of events.","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"jaredlhf"},"content":"3. System shows the relevant information of the event and list of residents involved in the event.","lastModifiedDate":"2021-11-08"},{"lineNumber":479,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":480,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":481,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":482,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-09-29"},{"lineNumber":483,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":484,"author":{"gitId":"jaredlhf"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":485,"author":{"gitId":"jaredlhf"},"content":"    * 2a1. System shows an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":486,"author":{"gitId":"jaredlhf"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":487,"author":{"gitId":"jaredlhf"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-11-08"},{"lineNumber":488,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":489,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":490,"author":{"gitId":"jaredlhf"},"content":"* 3a. The list is empty.","lastModifiedDate":"2021-09-29"},{"lineNumber":491,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":492,"author":{"gitId":"jaredlhf"},"content":"    Use case ends.","lastModifiedDate":"2021-09-29"},{"lineNumber":493,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-29"},{"lineNumber":494,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":495,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC03 - Include a resident to an event**","lastModifiedDate":"2021-11-08"},{"lineNumber":496,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":497,"author":{"gitId":"gordonlzy"},"content":"**MSS**","lastModifiedDate":"2021-11-06"},{"lineNumber":498,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":499,"author":{"gitId":"gordonlzy"},"content":"1. Hall admin navigates to the `Event` Tab.","lastModifiedDate":"2021-11-06"},{"lineNumber":500,"author":{"gitId":"gordonlzy"},"content":"2. Hall admin views the event to include residents in.","lastModifiedDate":"2021-11-06"},{"lineNumber":501,"author":{"gitId":"gordonlzy"},"content":"3. Hall admin enters the residents to be included in the selected event.","lastModifiedDate":"2021-11-06"},{"lineNumber":502,"author":{"gitId":"gordonlzy"},"content":"4. SafeFor(H)all reflects the added residents in the side window.","lastModifiedDate":"2021-11-06"},{"lineNumber":503,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":504,"author":{"gitId":"gordonlzy"},"content":"    Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":505,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":506,"author":{"gitId":"gordonlzy"},"content":"**Extensions**","lastModifiedDate":"2021-11-06"},{"lineNumber":507,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":508,"author":{"gitId":"gordonlzy"},"content":"* 3a. SafeFor(H)all detects invalid residents entered.","lastModifiedDate":"2021-11-06"},{"lineNumber":509,"author":{"gitId":"gordonlzy"},"content":"    * 3a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-06"},{"lineNumber":510,"author":{"gitId":"gordonlzy"},"content":"    * 3a2. SafeFor(H)all requests for valid residents.","lastModifiedDate":"2021-11-06"},{"lineNumber":511,"author":{"gitId":"gordonlzy"},"content":"    * 3a3. Hall admin enters new data.","lastModifiedDate":"2021-11-06"},{"lineNumber":512,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":513,"author":{"gitId":"gordonlzy"},"content":"      Steps 3a1-3a2 are repeated until the residents entered are valid.","lastModifiedDate":"2021-11-06"},{"lineNumber":514,"author":{"gitId":"gordonlzy"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2021-11-06"},{"lineNumber":515,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":516,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC04 - Exclude a resident from an event**","lastModifiedDate":"2021-11-08"},{"lineNumber":517,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":518,"author":{"gitId":"gordonlzy"},"content":"**MSS**","lastModifiedDate":"2021-11-06"},{"lineNumber":519,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":520,"author":{"gitId":"gordonlzy"},"content":"1. Hall admin navigates to the `Event` Tab.","lastModifiedDate":"2021-11-06"},{"lineNumber":521,"author":{"gitId":"gordonlzy"},"content":"2. Hall admin views the event to exclude residents from.","lastModifiedDate":"2021-11-06"},{"lineNumber":522,"author":{"gitId":"gordonlzy"},"content":"3. Hall admin enters the residents to be excluded in the selected event.","lastModifiedDate":"2021-11-06"},{"lineNumber":523,"author":{"gitId":"gordonlzy"},"content":"4. SafeFor(H)all reflects the remaining residents in the side window after removing the given residents.","lastModifiedDate":"2021-11-06"},{"lineNumber":524,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":525,"author":{"gitId":"gordonlzy"},"content":"    Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":527,"author":{"gitId":"gordonlzy"},"content":"**Extensions**","lastModifiedDate":"2021-11-06"},{"lineNumber":528,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":529,"author":{"gitId":"gordonlzy"},"content":"* 3a. SafeFor(H)all detects invalid residents entered.","lastModifiedDate":"2021-11-06"},{"lineNumber":530,"author":{"gitId":"gordonlzy"},"content":"    * 3a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-06"},{"lineNumber":531,"author":{"gitId":"gordonlzy"},"content":"    * 3a2. SafeFor(H)all requests for valid residents.","lastModifiedDate":"2021-11-06"},{"lineNumber":532,"author":{"gitId":"gordonlzy"},"content":"    * 3a3. Hall admin enters new data.","lastModifiedDate":"2021-11-06"},{"lineNumber":533,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":534,"author":{"gitId":"gordonlzy"},"content":"      Steps 3a1-3a3 are repeated until the residents entered are valid.","lastModifiedDate":"2021-11-06"},{"lineNumber":535,"author":{"gitId":"jaredlhf"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":536,"author":{"gitId":"gordonlzy"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2021-11-06"},{"lineNumber":537,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":538,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC05 - List residents who missed their FET**","lastModifiedDate":"2021-11-08"},{"lineNumber":539,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":540,"author":{"gitId":"gordonlzy"},"content":"**MSS**","lastModifiedDate":"2021-11-06"},{"lineNumber":541,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":542,"author":{"gitId":"gordonlzy"},"content":"1. Hall admin navigates to the `Resident` Tab.","lastModifiedDate":"2021-11-06"},{"lineNumber":543,"author":{"gitId":"gordonlzy"},"content":"2. Hall admin filters residents whose FET were due before today.","lastModifiedDate":"2021-11-06"},{"lineNumber":544,"author":{"gitId":"gordonlzy"},"content":"3. SafeFor(H)all displays the filtered residents.","lastModifiedDate":"2021-11-06"},{"lineNumber":545,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":546,"author":{"gitId":"gordonlzy"},"content":"    Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":547,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":548,"author":{"gitId":"gordonlzy"},"content":"**Extensions**","lastModifiedDate":"2021-11-06"},{"lineNumber":549,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":550,"author":{"gitId":"gordonlzy"},"content":"* 2a. SafeFor(H)all detects invalid date entered.","lastModifiedDate":"2021-11-06"},{"lineNumber":551,"author":{"gitId":"gordonlzy"},"content":"    * 2a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-06"},{"lineNumber":552,"author":{"gitId":"gordonlzy"},"content":"    * 2a2. SafeFor(H)all requests for a valid date.","lastModifiedDate":"2021-11-06"},{"lineNumber":553,"author":{"gitId":"gordonlzy"},"content":"    * 2a3. Hall admin enters a new date.","lastModifiedDate":"2021-11-06"},{"lineNumber":554,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":555,"author":{"gitId":"rebeccalaujx"},"content":"      Steps 2a1-2a2 are repeated until the date entered are valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":556,"author":{"gitId":"jaredlhf"},"content":"  ","lastModifiedDate":"2021-11-08"},{"lineNumber":557,"author":{"gitId":"gordonlzy"},"content":"      Use case resumes from step 3.","lastModifiedDate":"2021-11-06"},{"lineNumber":558,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":559,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC06 - List residents whose FET or Test Kit collection dates are due soon**","lastModifiedDate":"2021-11-08"},{"lineNumber":560,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":561,"author":{"gitId":"gordonlzy"},"content":"**MSS**","lastModifiedDate":"2021-11-06"},{"lineNumber":562,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":563,"author":{"gitId":"gordonlzy"},"content":"1. Hall admin navigates to the `Resident` Tab.","lastModifiedDate":"2021-11-06"},{"lineNumber":564,"author":{"gitId":"gordonlzy"},"content":"2. Hall admin filters residents whose FET or Test Kit Collection will be due between two given dates.","lastModifiedDate":"2021-11-06"},{"lineNumber":565,"author":{"gitId":"gordonlzy"},"content":"3. SafeFor(H)all displays the filtered residents.","lastModifiedDate":"2021-11-06"},{"lineNumber":566,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":567,"author":{"gitId":"gordonlzy"},"content":"    Use case ends.","lastModifiedDate":"2021-11-06"},{"lineNumber":568,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":569,"author":{"gitId":"gordonlzy"},"content":"**Extensions**","lastModifiedDate":"2021-11-06"},{"lineNumber":570,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":571,"author":{"gitId":"gordonlzy"},"content":"* 2a. SafeFor(H)all detects invalid dates entered.","lastModifiedDate":"2021-11-06"},{"lineNumber":572,"author":{"gitId":"gordonlzy"},"content":"    * 2a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-06"},{"lineNumber":573,"author":{"gitId":"gordonlzy"},"content":"    * 2a2. SafeFor(H)all requests for valid dates.","lastModifiedDate":"2021-11-06"},{"lineNumber":574,"author":{"gitId":"gordonlzy"},"content":"    * 2a3. Hall admin enters new dates.","lastModifiedDate":"2021-11-06"},{"lineNumber":575,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":576,"author":{"gitId":"rebeccalaujx"},"content":"      Steps 2a1-2a2 are repeated until the dates entered are valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":577,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":578,"author":{"gitId":"gordonlzy"},"content":"      Use case resumes from step 3.","lastModifiedDate":"2021-11-06"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC07 - Update a resident\u0027s last FET date**","lastModifiedDate":"2021-11-08"},{"lineNumber":581,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":582,"author":{"gitId":"rebeccalaujx"},"content":"**MSS**","lastModifiedDate":"2021-11-07"},{"lineNumber":583,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":584,"author":{"gitId":"rebeccalaujx"},"content":"1.  Actor requests to list residents","lastModifiedDate":"2021-11-07"},{"lineNumber":585,"author":{"gitId":"rebeccalaujx"},"content":"2.  System shows a list of residents","lastModifiedDate":"2021-11-07"},{"lineNumber":586,"author":{"gitId":"rebeccalaujx"},"content":"3.  Actor requests to update a specific resident\u0027s last FET date","lastModifiedDate":"2021-11-07"},{"lineNumber":587,"author":{"gitId":"rebeccalaujx"},"content":"4.  System updates the specified resident\u0027s last FET date","lastModifiedDate":"2021-11-07"},{"lineNumber":588,"author":{"gitId":"rebeccalaujx"},"content":"5.  Actor requests to view all details of the specified resident to confirm that the details have been updated correctly","lastModifiedDate":"2021-11-07"},{"lineNumber":589,"author":{"gitId":"rebeccalaujx"},"content":"6.  System shows all details of the specified resident","lastModifiedDate":"2021-11-07"},{"lineNumber":590,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":591,"author":{"gitId":"rebeccalaujx"},"content":"* 2a. The list is empty.","lastModifiedDate":"2021-11-07"},{"lineNumber":592,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":593,"author":{"gitId":"rebeccalaujx"},"content":"  Use case ends.","lastModifiedDate":"2021-11-07"},{"lineNumber":594,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":595,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":596,"author":{"gitId":"rebeccalaujx"},"content":"* 3a. SafeFor(H)all detects invalid index entered.","lastModifiedDate":"2021-11-07"},{"lineNumber":597,"author":{"gitId":"rebeccalaujx"},"content":"    * 3a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":598,"author":{"gitId":"rebeccalaujx"},"content":"    * 3a2. SafeFor(H)all requests for a valid index.","lastModifiedDate":"2021-11-07"},{"lineNumber":599,"author":{"gitId":"rebeccalaujx"},"content":"    * 3a3. Hall admin enters a new index.","lastModifiedDate":"2021-11-07"},{"lineNumber":600,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":601,"author":{"gitId":"rebeccalaujx"},"content":"      Steps 3a1-3a2 are repeated until the index entered is valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":602,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":603,"author":{"gitId":"rebeccalaujx"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2021-11-07"},{"lineNumber":604,"author":{"gitId":"rebeccalaujx"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":605,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":606,"author":{"gitId":"rebeccalaujx"},"content":"* 3b. SafeFor(H)all detects invalid date entered.","lastModifiedDate":"2021-11-07"},{"lineNumber":607,"author":{"gitId":"rebeccalaujx"},"content":"    * 3b1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":608,"author":{"gitId":"rebeccalaujx"},"content":"    * 3b2. SafeFor(H)all requests for a valid date.","lastModifiedDate":"2021-11-07"},{"lineNumber":609,"author":{"gitId":"rebeccalaujx"},"content":"    * 3b3. Hall admin enters a new date.","lastModifiedDate":"2021-11-07"},{"lineNumber":610,"author":{"gitId":"rebeccalaujx"},"content":"      ","lastModifiedDate":"2021-11-07"},{"lineNumber":611,"author":{"gitId":"rebeccalaujx"},"content":"      Steps 3b1-3b2 are repeated until the date entered is valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":612,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":613,"author":{"gitId":"rebeccalaujx"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2021-11-07"},{"lineNumber":614,"author":{"gitId":"rebeccalaujx"},"content":"    ","lastModifiedDate":"2021-11-07"},{"lineNumber":615,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":616,"author":{"gitId":"rebeccalaujx"},"content":"* 5a. SafeFor(H)all detects invalid index entered.","lastModifiedDate":"2021-11-07"},{"lineNumber":617,"author":{"gitId":"rebeccalaujx"},"content":"    * 5a1. SafeFor(H)all displays an error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":618,"author":{"gitId":"rebeccalaujx"},"content":"    * 5a2. SafeFor(H)all requests for a valid index.","lastModifiedDate":"2021-11-07"},{"lineNumber":619,"author":{"gitId":"rebeccalaujx"},"content":"    * 5a3. Hall admin enters a new index.","lastModifiedDate":"2021-11-07"},{"lineNumber":620,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":621,"author":{"gitId":"rebeccalaujx"},"content":"      Steps 5a1-5a2 are repeated until the index entered is valid.","lastModifiedDate":"2021-11-07"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":623,"author":{"gitId":"rebeccalaujx"},"content":"      Use case resumes from step 6.","lastModifiedDate":"2021-11-07"},{"lineNumber":624,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":625,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC08 - Export current list of residents\u0027 email as csv**","lastModifiedDate":"2021-11-08"},{"lineNumber":626,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":627,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":628,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":629,"author":{"gitId":"jaredlhf"},"content":"1. Actor requests for a list of the email addresses of the residents shown.","lastModifiedDate":"2021-11-08"},{"lineNumber":630,"author":{"gitId":"jaredlhf"},"content":"2. Actor enters filename of file to be created.","lastModifiedDate":"2021-11-08"},{"lineNumber":631,"author":{"gitId":"jaredlhf"},"content":"3. System outputs the list of email addresses in the form of a csv file.","lastModifiedDate":"2021-11-08"},{"lineNumber":632,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":633,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":634,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":635,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":636,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":637,"author":{"gitId":"jaredlhf"},"content":"* 2a. System detects duplicate file.","lastModifiedDate":"2021-11-08"},{"lineNumber":638,"author":{"gitId":"jaredlhf"},"content":"    * 2a1. System displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":639,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2021-11-08"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":641,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC09 - Remind residents to take FET**","lastModifiedDate":"2021-11-08"},{"lineNumber":642,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":643,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":644,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":645,"author":{"gitId":"jaredlhf"},"content":"1. Actor \u003cu\u003elists residents who missed their FET (UC05)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":646,"author":{"gitId":"jaredlhf"},"content":"2. Actor \u003cu\u003eexports current list of residents\u0027 email as csv (UC08)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":647,"author":{"gitId":"jaredlhf"},"content":"3. Actor sends an email to these residents to remind them to take their FET soon.","lastModifiedDate":"2021-11-08"},{"lineNumber":648,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":649,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":650,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":651,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":652,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":653,"author":{"gitId":"jaredlhf"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-11-08"},{"lineNumber":654,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":655,"author":{"gitId":"jaredlhf"},"content":"    Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":656,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":657,"author":{"gitId":"jaredlhf"},"content":"**Use case: UC10 - Remind residents to collect FET kits**","lastModifiedDate":"2021-11-08"},{"lineNumber":658,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":659,"author":{"gitId":"jaredlhf"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":660,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":661,"author":{"gitId":"jaredlhf"},"content":"1. Actor \u003cu\u003elists residents whose FET or Test Kit collection dates are due soon (UC06)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":662,"author":{"gitId":"jaredlhf"},"content":"2. Actor \u003cu\u003eexports current list of residents\u0027 email as csv (UC08)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":663,"author":{"gitId":"jaredlhf"},"content":"3. Actor sends an email to these residents to remind them to collect their FET kits soon.","lastModifiedDate":"2021-11-08"},{"lineNumber":664,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":665,"author":{"gitId":"jaredlhf"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":666,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":667,"author":{"gitId":"jaredlhf"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":668,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":669,"author":{"gitId":"jaredlhf"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-11-08"},{"lineNumber":670,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":671,"author":{"gitId":"jaredlhf"},"content":"  Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":672,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":673,"author":{"gitId":"VimuthM"},"content":"**Use case: UC11 - Find close contacts of a resident**","lastModifiedDate":"2021-11-08"},{"lineNumber":674,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":675,"author":{"gitId":"VimuthM"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":676,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":677,"author":{"gitId":"VimuthM"},"content":"1. Actor views the list of residents and locates the resident to trace.","lastModifiedDate":"2021-11-08"},{"lineNumber":678,"author":{"gitId":"VimuthM"},"content":"2. Actor filters the resident list by that resident\u0027s name or room and specifies a number of days to trace back to.","lastModifiedDate":"2021-11-08"},{"lineNumber":679,"author":{"gitId":"VimuthM"},"content":"3. System shows a filtered resident list.","lastModifiedDate":"2021-11-08"},{"lineNumber":680,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":681,"author":{"gitId":"VimuthM"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":682,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":683,"author":{"gitId":"VimuthM"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":684,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":685,"author":{"gitId":"VimuthM"},"content":"* 2a. System cannot find the resident in question.","lastModifiedDate":"2021-11-08"},{"lineNumber":686,"author":{"gitId":"VimuthM"},"content":"    * 2a1. System displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":687,"author":{"gitId":"VimuthM"},"content":"    * 2a2. System requests for a valid name or room.","lastModifiedDate":"2021-11-08"},{"lineNumber":688,"author":{"gitId":"VimuthM"},"content":"    * 2a3. Actor retries with different information.","lastModifiedDate":"2021-11-08"},{"lineNumber":689,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":690,"author":{"gitId":"VimuthM"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-11-08"},{"lineNumber":691,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":692,"author":{"gitId":"VimuthM"},"content":"* 2b. System detects an invalid duration that is negative or more than a month.","lastModifiedDate":"2021-11-08"},{"lineNumber":693,"author":{"gitId":"VimuthM"},"content":"    * 2b1. System displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":694,"author":{"gitId":"VimuthM"},"content":"    * 2b2. System requests for a valid duration.","lastModifiedDate":"2021-11-08"},{"lineNumber":695,"author":{"gitId":"VimuthM"},"content":"    * 2b3. Actor retries with different input.","lastModifiedDate":"2021-11-08"},{"lineNumber":696,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":697,"author":{"gitId":"VimuthM"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-11-08"},{"lineNumber":698,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":699,"author":{"gitId":"VimuthM"},"content":"**Use case: UC12 - Inform close contacts of a resident**","lastModifiedDate":"2021-11-08"},{"lineNumber":700,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":701,"author":{"gitId":"VimuthM"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":702,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":703,"author":{"gitId":"VimuthM"},"content":"1. Actor \u003cu\u003efilters for residents who are close contacts of a given resident (UC11)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":704,"author":{"gitId":"VimuthM"},"content":"2. Actor \u003cu\u003eexports current list of residents\u0027 email as csv (UC08)\u003c/u\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":705,"author":{"gitId":"VimuthM"},"content":"3. Actor sends an email to these residents to remind them to self-isolate.","lastModifiedDate":"2021-11-08"},{"lineNumber":706,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":707,"author":{"gitId":"VimuthM"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":708,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":709,"author":{"gitId":"VimuthM"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":710,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":711,"author":{"gitId":"VimuthM"},"content":"* 1a. The list is empty.","lastModifiedDate":"2021-11-08"},{"lineNumber":712,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":713,"author":{"gitId":"VimuthM"},"content":"  Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":714,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":715,"author":{"gitId":"VimuthM"},"content":"**Use case: UC13 - Find all residents on the same floor as a positive case**","lastModifiedDate":"2021-11-08"},{"lineNumber":716,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":717,"author":{"gitId":"VimuthM"},"content":"**MSS**","lastModifiedDate":"2021-11-08"},{"lineNumber":718,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":719,"author":{"gitId":"VimuthM"},"content":"1. Actor views all residents.","lastModifiedDate":"2021-11-08"},{"lineNumber":720,"author":{"gitId":"VimuthM"},"content":"2. Actor locates the positive resident and finds their room number.","lastModifiedDate":"2021-11-08"},{"lineNumber":721,"author":{"gitId":"VimuthM"},"content":"3. Actor filters the resident list based on the block and floor extracted from the room number.","lastModifiedDate":"2021-11-08"},{"lineNumber":722,"author":{"gitId":"VimuthM"},"content":"4. System shows a filtered resident list.","lastModifiedDate":"2021-11-08"},{"lineNumber":723,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":724,"author":{"gitId":"VimuthM"},"content":"   Use case ends.","lastModifiedDate":"2021-11-08"},{"lineNumber":725,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":726,"author":{"gitId":"VimuthM"},"content":"**Extensions**","lastModifiedDate":"2021-11-08"},{"lineNumber":727,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":728,"author":{"gitId":"VimuthM"},"content":"* 3a. System detects and invalid block character or out of range floor number.","lastModifiedDate":"2021-11-08"},{"lineNumber":729,"author":{"gitId":"VimuthM"},"content":"    * 3a1. System displays an error message.","lastModifiedDate":"2021-11-08"},{"lineNumber":730,"author":{"gitId":"VimuthM"},"content":"    * 3a2. System requests for a valid block floor combination.","lastModifiedDate":"2021-11-08"},{"lineNumber":731,"author":{"gitId":"VimuthM"},"content":"    * 3a3. Actor retries with different information.","lastModifiedDate":"2021-11-08"},{"lineNumber":732,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":733,"author":{"gitId":"VimuthM"},"content":"      Use case resumes from step 3.","lastModifiedDate":"2021-11-08"},{"lineNumber":734,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":735,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":737,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"VimuthM"},"content":"4.  Should be targeted towards a single user and not multi-users.","lastModifiedDate":"2021-09-23"},{"lineNumber":741,"author":{"gitId":"VimuthM"},"content":"5.  Data stored locally should be in a human editable text file.","lastModifiedDate":"2021-09-23"},{"lineNumber":742,"author":{"gitId":"VimuthM"},"content":"6.  Do not make use of a DBMS to manage data.","lastModifiedDate":"2021-09-23"},{"lineNumber":743,"author":{"gitId":"VimuthM"},"content":"7.  Final software should be platform-independent.","lastModifiedDate":"2021-09-23"},{"lineNumber":744,"author":{"gitId":"VimuthM"},"content":"8.  The software shouldn\u0027t depend on our own remote server.","lastModifiedDate":"2021-09-23"},{"lineNumber":745,"author":{"gitId":"VimuthM"},"content":"9.  Application is to be packaged into a single JAR file.","lastModifiedDate":"2021-09-23"},{"lineNumber":746,"author":{"gitId":"VimuthM"},"content":"10. JAR file size to be limited to 100MB and documents to 15MB/file.","lastModifiedDate":"2021-09-23"},{"lineNumber":747,"author":{"gitId":"VimuthM"},"content":"11. UG and DG are to be pdf-friendly.","lastModifiedDate":"2021-09-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"chongjunwei"},"content":"* **API**: An Application Programming Interface is a connection between computers or between computer programs. It is a type of software interface, offering a service to other pieces of software.","lastModifiedDate":"2021-09-30"},{"lineNumber":753,"author":{"gitId":"chongjunwei"},"content":"* **GUI**: A Graphical User Interface (GUI) is a form of user interface through which users interact with electronic devices via visual indicator representations.","lastModifiedDate":"2021-09-30"},{"lineNumber":754,"author":{"gitId":"chongjunwei"},"content":"* **CLI**: A Command Line Interface (CLI) processes commands to a computer program in the form of lines of text.","lastModifiedDate":"2021-09-30"},{"lineNumber":755,"author":{"gitId":"chongjunwei"},"content":"* **FET**: Fast and Easy Test for COVID-19, which is self-administered using Antigen Rapid Test (ART) kits.","lastModifiedDate":"2021-09-30"},{"lineNumber":756,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":757,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":773,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":774,"author":{"gitId":"jaredlhf"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample residents. The window size may not be optimum.","lastModifiedDate":"2021-11-08"},{"lineNumber":775,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":776,"author":{"gitId":"jaredlhf"},"content":"2. Saving window preferences","lastModifiedDate":"2021-11-08"},{"lineNumber":777,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":778,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":779,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":780,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":781,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":782,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":783,"author":{"gitId":"VimuthM"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":784,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** ","lastModifiedDate":"2021-11-08"},{"lineNumber":785,"author":{"gitId":"VimuthM"},"content":"For all Resident commands, ensure that you are on the Residents tab before continuing.","lastModifiedDate":"2021-11-08"},{"lineNumber":786,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":787,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":788,"author":{"gitId":"jaredlhf"},"content":"### Adding a resident","lastModifiedDate":"2021-11-08"},{"lineNumber":789,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":790,"author":{"gitId":"jaredlhf"},"content":"1. Adding a resident and their information into the app","lastModifiedDate":"2021-11-08"},{"lineNumber":791,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":792,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `add n/Tommy r/A123 p/87654321 e/tom@gmail.com v/t f/SOC fd/10-10-2020 cd/20-10-2020`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":793,"author":{"gitId":"jaredlhf"},"content":"      Expected: A resident named `Tom` with the relevant information is added into the app, shown in the GUI. Success message is shown.","lastModifiedDate":"2021-11-08"},{"lineNumber":794,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":795,"author":{"gitId":"jaredlhf"},"content":"2. Adding a duplicate resident with the same name or same room","lastModifiedDate":"2021-11-08"},{"lineNumber":796,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":797,"author":{"gitId":"jaredlhf"},"content":"   1. Prerequisites: A resident with the same name `Tommy` or room `A123` is already in the app.","lastModifiedDate":"2021-11-08"},{"lineNumber":798,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":799,"author":{"gitId":"jaredlhf"},"content":"   2. Test case: `add n/Tommy r/A101 p/87654321 e/bern@gmail.com v/t f/SOC fd/10-10-2020 cd/20-10-2020`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":800,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `This resident or room already exists in the address book`","lastModifiedDate":"2021-11-08"},{"lineNumber":801,"author":{"gitId":"jaredlhf"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":802,"author":{"gitId":"jaredlhf"},"content":"   3. Test case: `add n/Tom r/A123 p/87654321 e/tom@gmail.com v/t f/SOC fd/10-10-2020 cd/20-10-2020`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":803,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `This resident or room already exists in the address book`","lastModifiedDate":"2021-11-08"},{"lineNumber":804,"author":{"gitId":"jaredlhf"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":805,"author":{"gitId":"jaredlhf"},"content":"3. Adding a resident with invalid parameters","lastModifiedDate":"2021-11-08"},{"lineNumber":806,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":807,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `add n/Tom! r/A201 p/87654321 e/tom@gmail.com v/t f/SOC fd/10-10-2020 cd/20-10-2020`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":808,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `Names should only contain alphabetic characters and spaces, and it should not be blank`","lastModifiedDate":"2021-11-08"},{"lineNumber":809,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":810,"author":{"gitId":"jaredlhf"},"content":"   2. Test case: `add n/Tom r/A201 p/87654321 e/tom@gmail.com v/true f/SOC fd/10-10-2020 cd/20-10-2020`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":811,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `Vaccination status can be T or F (case insensitive).`","lastModifiedDate":"2021-11-08"},{"lineNumber":812,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":813,"author":{"gitId":"chongjunwei"},"content":"### Viewing a resident","lastModifiedDate":"2021-11-06"},{"lineNumber":814,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":815,"author":{"gitId":"chongjunwei"},"content":"1. View a list of all the residents in the app, or the information on a specific resident","lastModifiedDate":"2021-11-06"},{"lineNumber":816,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":817,"author":{"gitId":"chongjunwei"},"content":"    1. Prerequisites: NIL","lastModifiedDate":"2021-11-06"},{"lineNumber":818,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":819,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `view`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":820,"author":{"gitId":"chongjunwei"},"content":"       Expected: A list of all the residents is displayed in the app\u0027s GUI","lastModifiedDate":"2021-11-06"},{"lineNumber":821,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":822,"author":{"gitId":"jaredlhf"},"content":"    3. Test case: `view 3`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":823,"author":{"gitId":"chongjunwei"},"content":"       Expected: The details of the resident at index 3 (meaning the 3rd resident in the list when `view` without the ","lastModifiedDate":"2021-11-06"},{"lineNumber":824,"author":{"gitId":"chongjunwei"},"content":"       index parameter is called) of the address book are displayed in the GUI.","lastModifiedDate":"2021-11-06"},{"lineNumber":825,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":826,"author":{"gitId":"jaredlhf"},"content":"    4. Other incorrect delete commands to try: `view 0`, `view x` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":827,"author":{"gitId":"chongjunwei"},"content":"       Expected: Error message shown","lastModifiedDate":"2021-11-06"},{"lineNumber":828,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":829,"author":{"gitId":"jaredlhf"},"content":"### Listing residents by FET/Collection Deadlines","lastModifiedDate":"2021-11-08"},{"lineNumber":830,"author":{"gitId":"jaredlhf"},"content":"1. Listing residents\u0027 deadline with normal keyword and valid dates","lastModifiedDate":"2021-11-08"},{"lineNumber":831,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":832,"author":{"gitId":"jaredlhf"},"content":"    1. Prerequisites: There are residents whose FET deadline lies between the 2 gates given","lastModifiedDate":"2021-11-08"},{"lineNumber":833,"author":{"gitId":"jaredlhf"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":834,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `deadline k/f d1/10-10-2021 d2/15-10-2021`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":835,"author":{"gitId":"jaredlhf"},"content":"       Expected: Residents whose FET deadline lies between these 2 dates are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":836,"author":{"gitId":"jaredlhf"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":837,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":838,"author":{"gitId":"jaredlhf"},"content":"2. Listing residents\u0027 deadline with late keyword and valid dates","lastModifiedDate":"2021-11-08"},{"lineNumber":839,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":840,"author":{"gitId":"jaredlhf"},"content":"    1. Prerequisites: There are residents whose FET deadline is due before the given date","lastModifiedDate":"2021-11-08"},{"lineNumber":841,"author":{"gitId":"jaredlhf"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":842,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `deadline k/lf d1/10-10-2021`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":843,"author":{"gitId":"jaredlhf"},"content":"       Expected: Residents whose FET is due before the given date is listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":844,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":845,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":846,"author":{"gitId":"jaredlhf"},"content":"3. Listing residents\u0027 deadline with invalid parameters","lastModifiedDate":"2021-11-08"},{"lineNumber":847,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":848,"author":{"gitId":"jaredlhf"},"content":"    1. Test case: `deadline k/f d1/10-10-2021`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":849,"author":{"gitId":"jaredlhf"},"content":"       Expected: The result box will indicate that the given command format is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":850,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":851,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `deadline k/f d1/12-10-2021 d2/10-10-2021`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":852,"author":{"gitId":"jaredlhf"},"content":"       Expected: The result box will indicate that the second date is earlier than the first.","lastModifiedDate":"2021-11-08"},{"lineNumber":853,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":854,"author":{"gitId":"VimuthM"},"content":"### Finding residents","lastModifiedDate":"2021-11-08"},{"lineNumber":855,"author":{"gitId":"VimuthM"},"content":"1. Finding residents\u0027 who are not vaccinated","lastModifiedDate":"2021-11-08"},{"lineNumber":856,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":857,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: A non-empty resident list","lastModifiedDate":"2021-11-08"},{"lineNumber":858,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":859,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `find v/f`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":860,"author":{"gitId":"VimuthM"},"content":"       Expected: Residents who are not vaccinated (no syringe icon) are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":861,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":862,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":863,"author":{"gitId":"VimuthM"},"content":"2. Finding residents\u0027 who are from `SoC` faculty and are vaccinated","lastModifiedDate":"2021-11-08"},{"lineNumber":864,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":865,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: A non-empty resident list","lastModifiedDate":"2021-11-08"},{"lineNumber":866,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":867,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `find f/soc v/t`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":868,"author":{"gitId":"VimuthM"},"content":"       Expected: Residents who are vaccinated (syringe icon) and from `SoC` are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":869,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":870,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":871,"author":{"gitId":"VimuthM"},"content":"3. Finding residents\u0027 who have the word `alex` in their name and are from  block `A`","lastModifiedDate":"2021-11-08"},{"lineNumber":872,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":873,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: A non-empty resident list","lastModifiedDate":"2021-11-08"},{"lineNumber":874,"author":{"gitId":"VimuthM"},"content":"    ","lastModifiedDate":"2021-11-08"},{"lineNumber":875,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `find n/alex r/a`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":876,"author":{"gitId":"VimuthM"},"content":"       Expected: Residents who fit the criteria are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":877,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":878,"author":{"gitId":"VimuthM"},"content":"4. Finding residents\u0027 who are in an invalid block `P`","lastModifiedDate":"2021-11-08"},{"lineNumber":879,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":880,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `find n/alex r/p`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":881,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message specifying that an invalid room is entered.","lastModifiedDate":"2021-11-08"},{"lineNumber":882,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":883,"author":{"gitId":"rebeccalaujx"},"content":"### Editing residents","lastModifiedDate":"2021-11-07"},{"lineNumber":884,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":885,"author":{"gitId":"rebeccalaujx"},"content":"1. Edit multiple residents\u0027 details while all residents are being shown","lastModifiedDate":"2021-11-07"},{"lineNumber":886,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":887,"author":{"gitId":"rebeccalaujx"},"content":"    1. Prerequisites: View all residents using the `view` command. Multiple residents in the list. ","lastModifiedDate":"2021-11-07"},{"lineNumber":888,"author":{"gitId":"rebeccalaujx"},"content":"       Edited resident does not already exist in the address book.","lastModifiedDate":"2021-11-08"},{"lineNumber":889,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":890,"author":{"gitId":"rebeccalaujx"},"content":"    1. Test case: `edit 1 2 v/T`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":891,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: First and second residents\u0027 vaccination statuses are updated to vaccinated. First and second residents\u0027 names shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":892,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":893,"author":{"gitId":"rebeccalaujx"},"content":"    1. Test case: `edit 0`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":894,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: No resident is edited. Error details shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":895,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":896,"author":{"gitId":"rebeccalaujx"},"content":"    1. Other incorrect delete commands to try: `edit`, `edit x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":897,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-11-07"},{"lineNumber":898,"author":{"gitId":"rebeccalaujx"},"content":"       ","lastModifiedDate":"2021-11-07"},{"lineNumber":899,"author":{"gitId":"rebeccalaujx"},"content":"### Deleting residents","lastModifiedDate":"2021-11-07"},{"lineNumber":900,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":901,"author":{"gitId":"rebeccalaujx"},"content":"1. Deleting multiple resident while all residents are being shown","lastModifiedDate":"2021-11-07"},{"lineNumber":902,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":903,"author":{"gitId":"rebeccalaujx"},"content":"   1. Prerequisites: View all resident using the `view` command. Multiple residents in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":904,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":905,"author":{"gitId":"rebeccalaujx"},"content":"   1. Test case: `delete 1 2`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":906,"author":{"gitId":"rebeccalaujx"},"content":"      Expected: First and second residents are deleted from the list. Names of the deleted residents shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":907,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":908,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":909,"author":{"gitId":"rebeccalaujx"},"content":"      Expected: No resident is deleted. Error details shown in the status message. ","lastModifiedDate":"2021-11-07"},{"lineNumber":910,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":911,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":912,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":913,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":914,"author":{"gitId":"VimuthM"},"content":"### Tracing residents","lastModifiedDate":"2021-11-08"},{"lineNumber":915,"author":{"gitId":"VimuthM"},"content":"1. Tracing a resident who has been in contact with 2 others in one event over the past week","lastModifiedDate":"2021-11-08"},{"lineNumber":916,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":917,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: A resident in room `A213` who shares an event with 2 others in the past week","lastModifiedDate":"2021-11-08"},{"lineNumber":918,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":919,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `trace r/a213`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":920,"author":{"gitId":"VimuthM"},"content":"       Expected: 2 close contact residents are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":921,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":922,"author":{"gitId":"VimuthM"},"content":"2. Tracing a resident who has been in contact with 2 others in one event over the past week, of which one has been in contact with another in the past 9 days.","lastModifiedDate":"2021-11-08"},{"lineNumber":923,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":924,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: A resident in room `A213` who shares an event with 2 others of which one shares another event with one other in the past 9 days.","lastModifiedDate":"2021-11-08"},{"lineNumber":925,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":926,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `trace r/a213 d/2 t/9`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":927,"author":{"gitId":"VimuthM"},"content":"       Expected: 3 close contact residents are listed.","lastModifiedDate":"2021-11-08"},{"lineNumber":928,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":929,"author":{"gitId":"VimuthM"},"content":"3. Tracing a resident for a 0 depth","lastModifiedDate":"2021-11-08"},{"lineNumber":930,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":931,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `trace r/a213 d/0`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":932,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message specifying that an invalid depth is entered.","lastModifiedDate":"2021-11-08"},{"lineNumber":933,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":934,"author":{"gitId":"VimuthM"},"content":"4. Tracing a resident for over 31 days","lastModifiedDate":"2021-11-08"},{"lineNumber":935,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":936,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `trace r/a213 t/58`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":937,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message specifying that an invalid duration is entered.","lastModifiedDate":"2021-11-08"},{"lineNumber":938,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":939,"author":{"gitId":"jaredlhf"},"content":"### Sorting residents","lastModifiedDate":"2021-11-08"},{"lineNumber":940,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":941,"author":{"gitId":"jaredlhf"},"content":"1. Sorting the list of residents by valid fields and order","lastModifiedDate":"2021-11-08"},{"lineNumber":942,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":943,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `sort by/n o/a`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":944,"author":{"gitId":"jaredlhf"},"content":"      Expected: List of residents are sorted by their names in the alphabetical order.","lastModifiedDate":"2021-11-08"},{"lineNumber":945,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":946,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":947,"author":{"gitId":"jaredlhf"},"content":"2. Sorting the list of residents by invalid fields or order","lastModifiedDate":"2021-11-08"},{"lineNumber":948,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":949,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `sort by/z o/a`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":950,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `FIELD should be one of the following: n, e, r, p, f, v, fd, cd`","lastModifiedDate":"2021-11-08"},{"lineNumber":951,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":952,"author":{"gitId":"jaredlhf"},"content":"   2. Test case: `sort by/n o/z`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":953,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `ORDER should be one of the following: a, d`","lastModifiedDate":"2021-11-08"},{"lineNumber":954,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":955,"author":{"gitId":"VimuthM"},"content":"### Importing resident data","lastModifiedDate":"2021-11-08"},{"lineNumber":956,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":957,"author":{"gitId":"VimuthM"},"content":"1. Import 5 residents from a correctly formatted csv","lastModifiedDate":"2021-11-08"},{"lineNumber":958,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":959,"author":{"gitId":"VimuthM"},"content":"     1. Prerequisites: A correctly formatted csv with 6 rows named `safeforhall`","lastModifiedDate":"2021-11-08"},{"lineNumber":960,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":961,"author":{"gitId":"VimuthM"},"content":"     1. Test case: `import safeforhall`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":962,"author":{"gitId":"VimuthM"},"content":"       Expected: 5 residents displayed with correct information and all resident lists cleared from events.","lastModifiedDate":"2021-11-08"},{"lineNumber":963,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":964,"author":{"gitId":"VimuthM"},"content":"2. Non existent filename provided","lastModifiedDate":"2021-11-08"},{"lineNumber":965,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":966,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: csv file `nonexistent.csv` should not be present in the `data/` folder","lastModifiedDate":"2021-11-08"},{"lineNumber":967,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `import nonexistent`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":968,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying the csv file has not been found.","lastModifiedDate":"2021-11-08"},{"lineNumber":969,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":970,"author":{"gitId":"VimuthM"},"content":"2. Missing fields for a specific resident row","lastModifiedDate":"2021-11-08"},{"lineNumber":971,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":972,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: csv file `safeforhall.csv` has one resident row with missing vaccination status","lastModifiedDate":"2021-11-08"},{"lineNumber":973,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":974,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `import safeforhall`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":975,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying the row at which the error occurred.","lastModifiedDate":"2021-11-08"},{"lineNumber":976,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":977,"author":{"gitId":"jaredlhf"},"content":"### Exporting residents\u0027 emails","lastModifiedDate":"2021-11-08"},{"lineNumber":978,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":979,"author":{"gitId":"jaredlhf"},"content":"1. Export email addresses of list of residents","lastModifiedDate":"2021-11-08"},{"lineNumber":980,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":981,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `export testEmailExport`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":982,"author":{"gitId":"jaredlhf"},"content":"      Expected: Csv file filled with column of email addresses of the residents displayed in the app.","lastModifiedDate":"2021-11-08"},{"lineNumber":983,"author":{"gitId":"jaredlhf"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":984,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":985,"author":{"gitId":"jaredlhf"},"content":"2. Duplicate filename provided","lastModifiedDate":"2021-11-08"},{"lineNumber":986,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":987,"author":{"gitId":"jaredlhf"},"content":"   1. Prerequisites: csv file `testDuplicateExport.csv` is already in existing `/data/exports` directory","lastModifiedDate":"2021-11-08"},{"lineNumber":988,"author":{"gitId":"jaredlhf"},"content":"   2. Test case: `export testDuplicateExport`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":989,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `This filename already exists`","lastModifiedDate":"2021-11-08"},{"lineNumber":990,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":991,"author":{"gitId":"jaredlhf"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":992,"author":{"gitId":"jaredlhf"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** ","lastModifiedDate":"2021-11-08"},{"lineNumber":993,"author":{"gitId":"jaredlhf"},"content":"For all Event commands, ensure that you are on the Events tab before continuing.","lastModifiedDate":"2021-11-08"},{"lineNumber":994,"author":{"gitId":"jaredlhf"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":995,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":996,"author":{"gitId":"VimuthM"},"content":"### Adding an event","lastModifiedDate":"2021-11-08"},{"lineNumber":997,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":998,"author":{"gitId":"VimuthM"},"content":"1. Adding an event and its information into the app","lastModifiedDate":"2021-11-08"},{"lineNumber":999,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1000,"author":{"gitId":"VimuthM"},"content":"    1. Test case: `add n/Swim v/Pool d/10-10-2021 t/1900 c/10` \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1001,"author":{"gitId":"VimuthM"},"content":"       Expected: An event named `swim` with the relevant information is added into the app, shown in the GUI. Success message is shown.","lastModifiedDate":"2021-11-08"},{"lineNumber":1002,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1003,"author":{"gitId":"VimuthM"},"content":"2. Adding a duplicate event","lastModifiedDate":"2021-11-08"},{"lineNumber":1004,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1005,"author":{"gitId":"VimuthM"},"content":"    1. Prerequisites: An event with the same name, venue, date and time exists.","lastModifiedDate":"2021-11-08"},{"lineNumber":1006,"author":{"gitId":"VimuthM"},"content":"    2. Test case: `add n/Swim v/Pool d/10-10-2021 t/1900 c/10` \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1007,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying that such an event already exists.","lastModifiedDate":"2021-11-08"},{"lineNumber":1008,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1009,"author":{"gitId":"VimuthM"},"content":"3. Adding an event with invalid parameters","lastModifiedDate":"2021-11-08"},{"lineNumber":1010,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1011,"author":{"gitId":"VimuthM"},"content":"    1. Test case: `add n/Swim v/Pool d/10-10-2021 t/1900 c/0` \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1012,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying that capacity needs to be a positive integer.","lastModifiedDate":"2021-11-08"},{"lineNumber":1013,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1014,"author":{"gitId":"VimuthM"},"content":"    1. Test case: `add n/Swim v/Pool d/10-10-2021 t/2500 c/5` \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1015,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying that time provided is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":1016,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1017,"author":{"gitId":"VimuthM"},"content":"    1. Test case: `add n/Swim v/Pool d/30-02-2021 t/1900 c/0` \u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1018,"author":{"gitId":"VimuthM"},"content":"       Expected: Error message shown specifying that date provided is invalid.","lastModifiedDate":"2021-11-08"},{"lineNumber":1019,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1020,"author":{"gitId":"jaredlhf"},"content":"### Viewing an event","lastModifiedDate":"2021-11-08"},{"lineNumber":1021,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1022,"author":{"gitId":"jaredlhf"},"content":"1. View a list of all the events in the app, or the information of a specific event","lastModifiedDate":"2021-11-08"},{"lineNumber":1023,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1024,"author":{"gitId":"jaredlhf"},"content":"    1. Test case: `view`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1025,"author":{"gitId":"jaredlhf"},"content":"       Expected: A list of all the events is displayed in the app\u0027s GUI","lastModifiedDate":"2021-11-08"},{"lineNumber":1026,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1027,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `view 3`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1028,"author":{"gitId":"jaredlhf"},"content":"       Expected: Additional details of the event currently at index 3 will be displayed in the GUI.","lastModifiedDate":"2021-11-08"},{"lineNumber":1029,"author":{"gitId":"jaredlhf"},"content":"       ","lastModifiedDate":"2021-11-08"},{"lineNumber":1030,"author":{"gitId":"jaredlhf"},"content":"2. Invalid indexes provided","lastModifiedDate":"2021-11-08"},{"lineNumber":1031,"author":{"gitId":"jaredlhf"},"content":"   1. Test case: `view x` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1032,"author":{"gitId":"jaredlhf"},"content":"      Expected: Error message shown, `The event index provided is invalid`","lastModifiedDate":"2021-11-08"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1034,"author":{"gitId":"chongjunwei"},"content":"### Finding an event","lastModifiedDate":"2021-11-06"},{"lineNumber":1035,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1036,"author":{"gitId":"chongjunwei"},"content":"1. Shows a list of events that match the provided keywords for different available parameters.","lastModifiedDate":"2021-11-06"},{"lineNumber":1037,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1038,"author":{"gitId":"chongjunwei"},"content":"    1. Prerequisites: NIL","lastModifiedDate":"2021-11-06"},{"lineNumber":1039,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1040,"author":{"gitId":"chongjunwei"},"content":"    1. Test case: `find c/5`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1041,"author":{"gitId":"chongjunwei"},"content":"       Expected: A list of all the events with capacity 5 is displayed in the app\u0027s GUI","lastModifiedDate":"2021-11-06"},{"lineNumber":1042,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1043,"author":{"gitId":"chongjunwei"},"content":"    1. Test case: `find n/Football Training`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1044,"author":{"gitId":"chongjunwei"},"content":"       Expected: A list of all the events which contain the words \"Football\" and \"Training\" is displayed in the app\u0027s GUI","lastModifiedDate":"2021-11-06"},{"lineNumber":1045,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1046,"author":{"gitId":"chongjunwei"},"content":"    1. Other incorrect delete commands to try: `find`, `find d/03-01` (invalid date input)\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1047,"author":{"gitId":"chongjunwei"},"content":"       Expected: Error message shown","lastModifiedDate":"2021-11-06"},{"lineNumber":1048,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1049,"author":{"gitId":"rebeccalaujx"},"content":"### Editing an event","lastModifiedDate":"2021-11-07"},{"lineNumber":1050,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1051,"author":{"gitId":"rebeccalaujx"},"content":"1. Edit an event\u0027s details while all events are being shown","lastModifiedDate":"2021-11-07"},{"lineNumber":1052,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1053,"author":{"gitId":"rebeccalaujx"},"content":"    1. Prerequisites: View all events using the `view` command. Multiple events in the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":1054,"author":{"gitId":"rebeccalaujx"},"content":"       Edited event does not already exist in the address book.","lastModifiedDate":"2021-11-08"},{"lineNumber":1055,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1056,"author":{"gitId":"rebeccalaujx"},"content":"    1. Test case: `edit 1 c/5`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1057,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: First event capacity is updated to 5. Updated event details shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1058,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1059,"author":{"gitId":"rebeccalaujx"},"content":"    1. Test case: `edit 0`\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1060,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: No event is edited. Error details shown in the status message.","lastModifiedDate":"2021-11-07"},{"lineNumber":1061,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1062,"author":{"gitId":"rebeccalaujx"},"content":"    1. Other incorrect delete commands to try: `edit`, `edit x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":1063,"author":{"gitId":"rebeccalaujx"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-11-07"},{"lineNumber":1064,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":1065,"author":{"gitId":"chongjunwei"},"content":"### Deleting an event","lastModifiedDate":"2021-11-06"},{"lineNumber":1066,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1067,"author":{"gitId":"chongjunwei"},"content":"1. Deleting an event while all persons are being shown","lastModifiedDate":"2021-11-06"},{"lineNumber":1068,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1069,"author":{"gitId":"chongjunwei"},"content":"    1. Prerequisites: List all events using the `view` command (without any parameters). Multiple events in the list.","lastModifiedDate":"2021-11-06"},{"lineNumber":1070,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1071,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `delete 3`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1072,"author":{"gitId":"chongjunwei"},"content":"       Expected: The third event is deleted from the list. Details of the deleted event shown in the status message.","lastModifiedDate":"2021-11-06"},{"lineNumber":1073,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1074,"author":{"gitId":"jaredlhf"},"content":"    3. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1075,"author":{"gitId":"chongjunwei"},"content":"       Expected: No event is deleted. Error details shown.","lastModifiedDate":"2021-11-06"},{"lineNumber":1076,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1077,"author":{"gitId":"jaredlhf"},"content":"    4. Other incorrect delete commands to try: `delete -1`, `delete x` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1078,"author":{"gitId":"chongjunwei"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-11-06"},{"lineNumber":1079,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1080,"author":{"gitId":"jaredlhf"},"content":"### Sorting events","lastModifiedDate":"2021-11-08"},{"lineNumber":1081,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1082,"author":{"gitId":"jaredlhf"},"content":"1. Sorting the list of events by valid fields and order","lastModifiedDate":"2021-11-08"},{"lineNumber":1083,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1084,"author":{"gitId":"jaredlhf"},"content":"    1. Test case: `sort by/n o/a`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1085,"author":{"gitId":"jaredlhf"},"content":"       Expected: List of events are sorted by their names in the alphabetical order.","lastModifiedDate":"2021-11-08"},{"lineNumber":1086,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1087,"author":{"gitId":"jaredlhf"},"content":"2. Sorting the list of events by invalid fields or order","lastModifiedDate":"2021-11-08"},{"lineNumber":1088,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1089,"author":{"gitId":"jaredlhf"},"content":"    1. Test case: `sort by/z o/a`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1090,"author":{"gitId":"jaredlhf"},"content":"       Expected: Error message shown, `FIELD should be one of the following: n, d, c, v`","lastModifiedDate":"2021-11-08"},{"lineNumber":1091,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1092,"author":{"gitId":"jaredlhf"},"content":"    2. Test case: `sort by/n o/z`\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":1093,"author":{"gitId":"jaredlhf"},"content":"       Expected: Error message shown, `ORDER should be one of the following: a, d`","lastModifiedDate":"2021-11-08"},{"lineNumber":1094,"author":{"gitId":"gordonlzy"},"content":"    ","lastModifiedDate":"2021-11-06"},{"lineNumber":1095,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1096,"author":{"gitId":"gordonlzy"},"content":"### Adding residents to an Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1097,"author":{"gitId":"gordonlzy"},"content":"1. Add a single valid resident by name to a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1098,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and an event with index 1. ","lastModifiedDate":"2021-11-06"},{"lineNumber":1099,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/Alex Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1100,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident will be added to the event. Sidebar will reflect that the resident is in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1101,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1102,"author":{"gitId":"gordonlzy"},"content":"2. Add a single valid resident by room to a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1103,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1104,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/A101`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1105,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident will be added to the event. Sidebar will reflect that the resident is in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1106,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1107,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1108,"author":{"gitId":"gordonlzy"},"content":"3. Add multiple valid residents by names to a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1109,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\" ","lastModifiedDate":"2021-11-06"},{"lineNumber":1110,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1111,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/Alex Yeoh, Bernice Yu`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1112,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents will be added to the event. Sidebar will reflect that the residents are in the","lastModifiedDate":"2021-11-06"},{"lineNumber":1113,"author":{"gitId":"gordonlzy"},"content":"       event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1114,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1115,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1116,"author":{"gitId":"gordonlzy"},"content":"4. Add multiple valid residents by rooms to a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1117,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\"","lastModifiedDate":"2021-11-06"},{"lineNumber":1118,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1119,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/A101, A102`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1120,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents will be added to the event. Sidebar will reflect that the residents are in the","lastModifiedDate":"2021-11-06"},{"lineNumber":1121,"author":{"gitId":"gordonlzy"},"content":"       event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1122,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1124,"author":{"gitId":"gordonlzy"},"content":"5. Add a valid resident to an valid Event but without comma separating the rooms","lastModifiedDate":"2021-11-06"},{"lineNumber":1125,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\"","lastModifiedDate":"2021-11-06"},{"lineNumber":1126,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1127,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/A101 A102`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1128,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents are not added to the event. The result box will indicate that names/rooms have to","lastModifiedDate":"2021-11-06"},{"lineNumber":1129,"author":{"gitId":"gordonlzy"},"content":"       be separated by a comma.","lastModifiedDate":"2021-11-06"},{"lineNumber":1130,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1131,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1132,"author":{"gitId":"gordonlzy"},"content":"5. Add a valid resident to an invalid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1133,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and there is no event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1134,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/Alex Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1135,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident is not added to the event. The result box will show that the given index is invalid.","lastModifiedDate":"2021-11-06"},{"lineNumber":1136,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1137,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1138,"author":{"gitId":"gordonlzy"},"content":"6. Add an invalid resident to a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1139,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is no resident with name \"Alex Yeoh\" or room \"A101\", but there is an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1140,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `include 1 r/A101`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1141,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident is not added to the event. The result box will show that no residents with the","lastModifiedDate":"2021-11-06"},{"lineNumber":1142,"author":{"gitId":"gordonlzy"},"content":"       given information could be found.","lastModifiedDate":"2021-11-06"},{"lineNumber":1143,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1144,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1145,"author":{"gitId":"gordonlzy"},"content":"### Removing residents from an Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1146,"author":{"gitId":"gordonlzy"},"content":"1. Remove a single valid resident by name from a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1147,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1148,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/Alex Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1149,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident will be removed from the event. Sidebar will reflect that the resident is no longer","lastModifiedDate":"2021-11-06"},{"lineNumber":1150,"author":{"gitId":"gordonlzy"},"content":"       in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1151,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1152,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1153,"author":{"gitId":"gordonlzy"},"content":"2. Remove a single valid resident by room from a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1154,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1155,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/A101`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1156,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident will be removed from the event. Sidebar will reflect that the resident is no longer","lastModifiedDate":"2021-11-06"},{"lineNumber":1157,"author":{"gitId":"gordonlzy"},"content":"       in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1158,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1159,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1160,"author":{"gitId":"gordonlzy"},"content":"3. Remove multiple valid residents by names from a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1161,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\"","lastModifiedDate":"2021-11-06"},{"lineNumber":1162,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1163,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/Alex Yeoh, Bernice Yu`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1164,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents will be removed from the event. Sidebar will reflect that the residents are no","lastModifiedDate":"2021-11-06"},{"lineNumber":1165,"author":{"gitId":"gordonlzy"},"content":"       longer in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1166,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1167,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1168,"author":{"gitId":"gordonlzy"},"content":"4. Remove multiple valid residents by rooms from a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1169,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\"","lastModifiedDate":"2021-11-06"},{"lineNumber":1170,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1171,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/A101, A102`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1172,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents will be removed from the event. Sidebar will reflect that the residents are no","lastModifiedDate":"2021-11-06"},{"lineNumber":1173,"author":{"gitId":"gordonlzy"},"content":"       longer in the event.","lastModifiedDate":"2021-11-06"},{"lineNumber":1174,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1175,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1176,"author":{"gitId":"gordonlzy"},"content":"5. Remove a valid resident from an valid Event but without comma separating the rooms","lastModifiedDate":"2021-11-06"},{"lineNumber":1177,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There are two residents with names \"Alex Yeoh\" and \"Bernice Yu\", with rooms \"A101\" and \"A102\"","lastModifiedDate":"2021-11-06"},{"lineNumber":1178,"author":{"gitId":"gordonlzy"},"content":"       respectively, and an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1179,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/A101 A102`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1180,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given residents are not removed from the event. The result box will indicate that names/rooms have","lastModifiedDate":"2021-11-06"},{"lineNumber":1181,"author":{"gitId":"gordonlzy"},"content":"       to be separated by a comma.","lastModifiedDate":"2021-11-06"},{"lineNumber":1182,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1183,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1184,"author":{"gitId":"gordonlzy"},"content":"5. Remove a valid resident from an invalid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1185,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is resident with name \"Alex Yeoh\" and room \"A101\", and there is no event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1186,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/Alex Yeoh`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1187,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident is not removed from the event. The result box will show that the given index is","lastModifiedDate":"2021-11-06"},{"lineNumber":1188,"author":{"gitId":"gordonlzy"},"content":"       invalid.","lastModifiedDate":"2021-11-06"},{"lineNumber":1189,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1191,"author":{"gitId":"gordonlzy"},"content":"6. Remove an invalid resident from a valid Event","lastModifiedDate":"2021-11-06"},{"lineNumber":1192,"author":{"gitId":"gordonlzy"},"content":"    1. Prerequisites: There is no resident with name \"Alex Yeoh\" or room \"A101\", but there is an event with index 1.","lastModifiedDate":"2021-11-06"},{"lineNumber":1193,"author":{"gitId":"gordonlzy"},"content":"    2. Test case: `exclude 1 r/A101`\u003cbr\u003e","lastModifiedDate":"2021-11-06"},{"lineNumber":1194,"author":{"gitId":"gordonlzy"},"content":"       Expected: The given resident is not removed from the event. The result box will show that no residents with the","lastModifiedDate":"2021-11-06"},{"lineNumber":1195,"author":{"gitId":"gordonlzy"},"content":"       given information could be found.","lastModifiedDate":"2021-11-06"},{"lineNumber":1196,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":1197,"author":{"gitId":"jaredlhf"},"content":"### Switch between tabs","lastModifiedDate":"2021-11-08"},{"lineNumber":1198,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1199,"author":{"gitId":"jaredlhf"},"content":"1. Switch between the event and resident tabs","lastModifiedDate":"2021-11-08"},{"lineNumber":1200,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1201,"author":{"gitId":"jaredlhf"},"content":"    1. Prerequisites: NIL","lastModifiedDate":"2021-11-08"},{"lineNumber":1202,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1203,"author":{"gitId":"jaredlhf"},"content":"    1. Test case: `switch`\u003cbr\u003e when the user is at the Event tab","lastModifiedDate":"2021-11-08"},{"lineNumber":1204,"author":{"gitId":"jaredlhf"},"content":"       Expected: The GUI switches from displaying the Event tab to the Resident tab","lastModifiedDate":"2021-11-08"},{"lineNumber":1205,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":1208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"rebeccalaujx":179,"gordonlzy":216,"chongjunwei":61,"-":289,"VimuthM":234,"jaredlhf":234}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"   1. Run the `safeforhall.Main` and try a few commands.","lastModifiedDate":"2021-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBookâ€™s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"-":54,"VimuthM":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"   e.g. `safeforhall.commons.StringUtilTest`","lastModifiedDate":"2021-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"   e.g. `StorageManagerTest`","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"   e.g. `LogicManagerTest`","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"-":33,"VimuthM":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"Are you a hall administrator in-charge of managing residents in NUS? Do you have to fumble through multiple different excel sheets just to look for a resident\u0027s information? Are you worried residents might be subject to the dangers of the pandemic? Well look no further as SafeFor(H)All is the application you need!","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a **desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SafeFor(H)All can get your hall management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"1. Download the latest `safeforhall.jar` from [here](https://github.com/AY2122S1-CS2103T-T15-4/tp/releases/tag/v1.3.trial).","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your SafeFor(H)All Application.","lastModifiedDate":"2021-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. \u003cbr\u003e ","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"   * **`view`** : Lists all residents.","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"   * **`add`**`n/John Doe r/A100 e/john@gmail.com p/12345678 v/t f/SoC` : Adds a resident named `John Doe` with the given information to the application.","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"   * **`delete`**`3` : Deletes the 3rd resident shown in the current list.","lastModifiedDate":"2021-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"-------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"## App Interface","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"Refer to the diagram below to understand how our app, SafeFor(H)All looks like.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"![Ui](images/interface.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"Section | Explanation","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"|--------|-------","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"**Residents Tab** | When selected, it allows you to view the list of residents and their associated information","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"**Events Tab** | When selected, it allows you to view the list of events and their associated information","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"**Help Window** | When clicked, a pop-up will appear containing a list of commands and how to use them","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"**Exit app** | Closes the app","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"**Input Box** | Input your command here. The command suggestion box will suggest parameters upon typing","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"**Result Box** | The result of the inputted command will be displayed here","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"**List of Residents** | Displays the list of residents in the app. You can view details about a specific resident by clicking on it, or by using the `view` command","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"**Individual resident information** | In the example shown, the resident has a late FET test which is 21 days overdue.","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"## Legend","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"Below are some formats used to convey different kinds of information:","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"**Information boxes**","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e :information_source: **Info:** These contain additional information about SafeFor(H)All.","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"**Tips**","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e :bulb: **Tip:** These contain our tips that can help improve your experience using SafeFor(H)All.","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"**Warnings**","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e :warning: **Warning:** These contain warnings that can result in unintended consequences of a feature.","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"**Highlights**","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"`These are used to highlight parameters, field values, commands, file names or any user inputs.`","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"### Command Format","lastModifiedDate":"2021-11-05"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"**Format:** `command_word Prefix/PARAMETER`","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"* `command_word` is a word at the start of the command to specify the action to be done. \u003cbr\u003e e.g. in `add n/NAME`, `add` is the command word.","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"* `PARAMETER` are word(s) in `UPPER_CASE` to be supplied by the user.\u003cbr\u003e e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"* `Prefix` are letter(s) before `PARAMETER` to denote the information supplied as parameter. \u003cbr\u003ee.g. in `add n/NAME`, `n/` is a prefix to indicate that NAME is being supplied.","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"  e.g `add n/NAME [fd/LAST_FET_DATE]` can be used as `add n/John` or as `add n/John fd/09-09-2021`.","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"* An ellipsis (...) implies multiple of that parameter can be provided.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"  e.g `edit INDEX...` can be used as `edit 1` or as `edit 1 2 3 5 8`.","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"  e.g. if the command specifies `n/NAME f/FACULTY`, `f/FACULTY n/NAME` is also acceptable.","lastModifiedDate":"2021-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"  e.g. if you specify `v/t v/f` only `v/f` will be taken.","lastModifiedDate":"2021-11-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit`, `view`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"* Date parameters can be of formats: `dd-mm-yyyy`, `dd.mm.yyyy` or `dd/mm/yyyy`","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"* Time parameter is of format: `hhmm`","lastModifiedDate":"2021-10-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"### For Residents","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"These commands will function as specified when run under the `Resident` tab.","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"#### Adding a residentâ€™s information : `add`","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"Adds a resident and their information to the application.","lastModifiedDate":"2021-09-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL r/ROOM v/VACCINATION_STATUS f/FACULTY [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]`","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"jaredlhf"},"content":"Parameter | Constraints","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"|--------|-------","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"**NAME** | Unique, only containing alphabetical characters and spaces","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"**PHONE** | At least 6 digits long","lastModifiedDate":"2021-11-08"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"**ROOM** | Unique, made up of **block** + **level** + **number** \u003cbr\u003e**block** is an alphabetical character from A to E \u003cbr\u003e**level** is a digit from 1 to 4 \u003cbr\u003e**number** is two digits from 00 to 29 \u003cbr\u003ee.g. `A100`","lastModifiedDate":"2021-11-08"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"**EMAIL** |  The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (+_.-). The local-part may not start or end with any special characters. \u003cbr\u003e This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels separated by periods. \u003cbr\u003e The domain name must: \u003cbr\u003e - end with a domain label at least 2 characters long \u003cbr\u003e - have each domain label start and end with alphanumeric characters \u003cbr\u003e - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.","lastModifiedDate":"2021-11-08"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"**VACCINATION_STATUS** | `T` or `F` (case insensitive)","lastModifiedDate":"2021-11-05"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"**FACULTY** | Single alphabetical word","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"**LAST_FET_DATE** \u003cbr\u003e **LAST_COLLECTION_DATE** | Should be of `dd-mm-yyyy`, `dd.mm.yyyy` or `dd/mm/yyyy` format","lastModifiedDate":"2021-11-08"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"jaredlhf"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"**ROOM** is currently modelled after an existing hall in the National University of Singapore.","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"jaredlhf"},"content":"`LAST_FET_DATE` and `LAST_COLLECTION_DATE` are optional parameters.","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"jaredlhf"},"content":"Here\u0027s a step by step guide:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"1. Type the `add` command and the rest of the parameters with help from the command suggestion.","lastModifiedDate":"2021-11-08"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"   ![Step1](images/logic/commands/addpersoncommand/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":156,"author":{"gitId":"jaredlhf"},"content":"2. After execution, the person list will now show the new person.","lastModifiedDate":"2021-11-08"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"   ![Step2](images/logic/commands/addpersoncommand/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"jaredlhf"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com r/A100 v/t f/SoC`","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"jaredlhf"},"content":"* `add n/Betsy Crowe e/betsyc@example.com v/F r/B400 p/1234567 f/FASS fd/20-10-2021 cd/23-10-2021`","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":164,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"#### Viewing residents information : `view`","lastModifiedDate":"2021-10-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"Shows a numbered list of all the residents in the address book.","lastModifiedDate":"2021-09-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"chongjunwei"},"content":"The index of the resident is the corresponding number in the list","lastModifiedDate":"2021-09-22"},{"lineNumber":170,"author":{"gitId":"chongjunwei"},"content":"shown when `view` (without the [INDEX] parameter) is called.","lastModifiedDate":"2021-09-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"chongjunwei"},"content":"Format: `view [INDEX]`","lastModifiedDate":"2021-09-22"},{"lineNumber":173,"author":{"gitId":"chongjunwei"},"content":"* For an index i, 1 â‰¤ i â‰¤ n, where n is the number of residents in the address book","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-09-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"* `view` shows a list of all the residents","lastModifiedDate":"2021-09-22"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"* `view 30` shows the details of the resident at index 30","lastModifiedDate":"2021-09-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"#### Listing residents by fet/collection deadlines : `deadline`","lastModifiedDate":"2021-10-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"Lists residents whose ART collection or FET tests are either:","lastModifiedDate":"2021-11-04"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"* due before a given date, `d1`, by using the `late keywords` or ","lastModifiedDate":"2021-11-04"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"* due within the range of two given dates, `d1` and `d2`, by using the `normal keywords`.","lastModifiedDate":"2021-11-04"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"* There is a one week deadline for the test kit collection and fet test, therefore due date refers to one week after the last recorded date","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"| Differences | Normal Keyword | Late Keyword |","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"|-------------|--------|------|","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"| Format | `deadline k/KEYWORD d1/DATE1 d2/DATE2` | `deadline k/LATE_KEYWORD d1/DATE1`|","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"gordonlzy"},"content":"| Keyword | `f` or `c` | `lf` or `lc` |","lastModifiedDate":"2021-11-07"},{"lineNumber":198,"author":{"gitId":"gordonlzy"},"content":"| Input Date | Both `DATE1` and `DATE2` have to be inputted | Only `DATE1` should be inputted |","lastModifiedDate":"2021-11-07"},{"lineNumber":199,"author":{"gitId":"gordonlzy"},"content":"| Command Example | `deadline k/f d1/10-10-2021 d2/12-10-2021` | `deadline k/lf d1/11-10-2021` |","lastModifiedDate":"2021-11-07"},{"lineNumber":200,"author":{"gitId":"gordonlzy"},"content":"| Usage | List residents whose deadline lie within the range of two given dates, inclusive | List residents whose deadline is due before a given date","lastModifiedDate":"2021-11-07"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"| Usage Example | A resident\u0027s fet or collection is due one week after their `last fet date` or `last collection date`. \u003cbr\u003e For example, if a resident\u0027s last fet date is on a friday, `15-10-2021`, then the resident\u0027s fet deadline is on the following friday which is `22-10-2021` | The number of days a resident is considered late is calculated from `a day after` their deadline to the `current date`, both inclusive.\u003cbr\u003e For example, if a resident\u0027s last fet date is `15-10-2021`, then the fet deadline will be `22-10-2021`, if the current date is `25-10-2021`, then the number of days the resident is late for fet is `3 days`.","lastModifiedDate":"2021-11-07"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"| Note | The given `DATE2` must be a date later than the given `DATE1`\u003cbr\u003e`DATE1` is the start date and `DATE2` is the last date inclusive | Anyone whose fet and collection is due before but not on `DATE1` is outputted","lastModifiedDate":"2021-11-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"Here\u0027s a step-by-step guide for `Normal Keyword`:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"1. Type the `deadline` command with the `normal keyword`, `f` for fet or `c` for collection, `d1`, the start date and","lastModifiedDate":"2021-11-07"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"   `d2`, the end date.","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"   ![Step1](images/logic/commands/deadlinecommand/step1a.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"gordonlzy"},"content":"2. The event list will now show the filtered list of residents.","lastModifiedDate":"2021-11-07"},{"lineNumber":211,"author":{"gitId":"gordonlzy"},"content":"   ![Step2](images/logic/commands/deadlinecommand/step2a.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":213,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"Here\u0027s a step-by-step guide for `Late Keyword`:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":215,"author":{"gitId":"gordonlzy"},"content":"1. Type the `deadline` command with the `late keyword`, `lf` for late fet or `lc` for late collection, `d1`, the ","lastModifiedDate":"2021-11-07"},{"lineNumber":216,"author":{"gitId":"gordonlzy"},"content":"   end date","lastModifiedDate":"2021-11-07"},{"lineNumber":217,"author":{"gitId":"gordonlzy"},"content":"   ![Step1](images/logic/commands/deadlinecommand/step1b.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":218,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":219,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":220,"author":{"gitId":"gordonlzy"},"content":"2. The event list will now show the filtered list of residents.","lastModifiedDate":"2021-11-07"},{"lineNumber":221,"author":{"gitId":"gordonlzy"},"content":"   ![Step2](images/logic/commands/deadlinecommand/step2b.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":222,"author":{"gitId":"gordonlzy"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"gordonlzy"},"content":"* `deadline k/f d1/10-10-2021 d2/12-10-2021` retrieves a list of residents whose `FET` is due between `10 Oct 2021` and `12 Oct 2021`, inclusive","lastModifiedDate":"2021-10-23"},{"lineNumber":226,"author":{"gitId":"gordonlzy"},"content":"* `deadline k/f d1/15-10-2021 d2/20-10-2021` retrieves a list of residents whose `Test Kit Collection` is due some day between `15 Oct 2021` and `20 Oct 2021`, inclusive","lastModifiedDate":"2021-10-23"},{"lineNumber":227,"author":{"gitId":"gordonlzy"},"content":"* `deadline k/lf d1/11-10-2021` retrieves a list of residents whose `FET` is due before `11 Oct 2021`","lastModifiedDate":"2021-10-23"},{"lineNumber":228,"author":{"gitId":"gordonlzy"},"content":"* `deadline k/lc d1/12-10-2021` retrieves a list of residents whose `Test Kit Collection` is due before `12 Oct 2021`","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"VimuthM"},"content":"#### Searching by resident information: `find`","lastModifiedDate":"2021-10-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"VimuthM"},"content":"Shows a list of residents that match the provided keywords for different available parameters. Allowed flags include; `n/`, `r/`, `e/`, `p/`, `f/` and `v/`.","lastModifiedDate":"2021-11-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"Format: `find [PREFIX/KEYWORD]...`","lastModifiedDate":"2021-10-22"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"VimuthM"},"content":"Prefix | Field | Restrictions","lastModifiedDate":"2021-11-08"},{"lineNumber":237,"author":{"gitId":"VimuthM"},"content":"-------- | ------ | ------","lastModifiedDate":"2021-11-08"},{"lineNumber":238,"author":{"gitId":"VimuthM"},"content":"`n` | Name | - It is case-insensitive. e.g `hans` will match `Hans`, `True` will match `true` \u003cbr\u003e \u003cbr\u003e - The order of the keywords provided for the name does not matter. e.g `Hans Bo` will match `Bo Hans` \u003cbr\u003e \u003cbr\u003e - Only full words will be matched. e.g `Han` will not match `Hans` \u003cbr\u003e \u003cbr\u003e - Residents matching at least one keyword for the name will be returned (i.e. `OR` search). e.g `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2021-11-08"},{"lineNumber":239,"author":{"gitId":"VimuthM"},"content":"`r` | Room |  - It is case-insensitive \u003cbr\u003e - A block can be used as a search. e.g `r/A` \u003cbr\u003e - A level can be used as a search. e.g `r/2` \u003cbr\u003e - A block-level can be used as a search. e.g `r/A2` \u003cbr\u003e - A full valid room can be used as a search. e.g `r/A210`","lastModifiedDate":"2021-11-08"},{"lineNumber":240,"author":{"gitId":"VimuthM"},"content":"`e`, `p`, `f`, `v` | Email, Phone, \u003cbr\u003e Faculty, VaccStatus | Subject to the same validity conditions as in the [Add Command](#adding-a-residents-information--add)   ","lastModifiedDate":"2021-11-08"},{"lineNumber":241,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":242,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":243,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":246,"author":{"gitId":"chongjunwei"},"content":"* Prefixes for `LAST_FET_DATE` and `LAST_COLLECTION_DATE` are not used. Refer to [Deadline Command](#listing-residents-by-fetcollection-deadlines--deadline) on how to make use of these fields.","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"VimuthM"},"content":"* Any provided preamble to the prefixes will be ignored","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"VimuthM"},"content":"* `find n/John` returns `john` and `John Doe`","lastModifiedDate":"2021-10-22"},{"lineNumber":252,"author":{"gitId":"jaredlhf"},"content":"* `find n/alex david v/t` returns vaccinated residents, `Alex Yeoh` and `David Li`","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"jaredlhf"},"content":"* `find v/f f/soc` returns un-vaccinated residents from SoC \u003cbr\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"VimuthM"},"content":"#### Editing a resident : `edit`","lastModifiedDate":"2021-10-22"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"Edits the details of existing residents in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":259,"author":{"gitId":"rebeccalaujx"},"content":"Format: `edit INDEXâ€¦ [n/NAME] [r/ROOM] [p/PHONE] [e/EMAIL] [v/VACCINATION_STATUS] [f/FACULTY] [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]`","lastModifiedDate":"2021-10-21"},{"lineNumber":260,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":261,"author":{"gitId":"rebeccalaujx"},"content":"Parameter | Constraints","lastModifiedDate":"2021-11-08"},{"lineNumber":262,"author":{"gitId":"rebeccalaujx"},"content":"|--------|-------","lastModifiedDate":"2021-11-08"},{"lineNumber":263,"author":{"gitId":"rebeccalaujx"},"content":"**NAME** | Unique, only containing alphabetical characters and spaces","lastModifiedDate":"2021-11-08"},{"lineNumber":264,"author":{"gitId":"rebeccalaujx"},"content":"**PHONE** | At least 6 digits long","lastModifiedDate":"2021-11-08"},{"lineNumber":265,"author":{"gitId":"rebeccalaujx"},"content":"**ROOM** | Made up of **block** + **level** + **number** \u003cbr\u003e**block** is an alphabetical character from A to E \u003cbr\u003e**level** is a digit from 1 to 4 \u003cbr\u003e**number** is two digits from 00 to 29 \u003cbr\u003ee.g. `A100`","lastModifiedDate":"2021-11-08"},{"lineNumber":266,"author":{"gitId":"rebeccalaujx"},"content":"**EMAIL** |  The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (+_.-). The local-part may not start or end with any special characters. \u003cbr\u003e This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels separated by periods. \u003cbr\u003e The domain name must: \u003cbr\u003e - end with a domain label at least 2 characters long \u003cbr\u003e - have each domain label start and end with alphanumeric characters \u003cbr\u003e - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.","lastModifiedDate":"2021-11-08"},{"lineNumber":267,"author":{"gitId":"rebeccalaujx"},"content":"**VACCINATION_STATUS** | `T` or `F` (case insensitive)","lastModifiedDate":"2021-11-08"},{"lineNumber":268,"author":{"gitId":"rebeccalaujx"},"content":"**FACULTY** | Single alphabetical word","lastModifiedDate":"2021-11-08"},{"lineNumber":269,"author":{"gitId":"rebeccalaujx"},"content":"**LAST_FET_DATE** \u003cbr\u003e **LAST_COLLECTION_DATE** | Should be of `dd-mm-yyyy`, `dd.mm.yyyy` or `dd/mm/yyyy` format","lastModifiedDate":"2021-11-08"},{"lineNumber":270,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":271,"author":{"gitId":"rebeccalaujx"},"content":"* Edit the residents at the specified `INDEXES`.","lastModifiedDate":"2021-10-21"},{"lineNumber":272,"author":{"gitId":"rebeccalaujx"},"content":"* Each index refers to the index number shown in the displayed resident list.","lastModifiedDate":"2021-10-21"},{"lineNumber":273,"author":{"gitId":"rebeccalaujx"},"content":"* The indexes **must be positive integers** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2021-10-21"},{"lineNumber":274,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-09-25"},{"lineNumber":275,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-09-25"},{"lineNumber":276,"author":{"gitId":"rebeccalaujx"},"content":"* Edit multiple residents in a single command by inputting multiple indexes, each separated by a space.","lastModifiedDate":"2021-10-21"},{"lineNumber":277,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-09-25"},{"lineNumber":278,"author":{"gitId":"rebeccalaujx"},"content":"Example:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":279,"author":{"gitId":"rebeccalaujx"},"content":"Letâ€™s say that residents Alex Yeoh and Bernice Yu just updated you that they are now fully vaccinated, and have submitted their overdue FET on 5th Nov 2021.","lastModifiedDate":"2021-11-08"},{"lineNumber":280,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":281,"author":{"gitId":"rebeccalaujx"},"content":"You can easily update these details in a single `edit` command.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":282,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":283,"author":{"gitId":"rebeccalaujx"},"content":"1. Navigate to the list of residents. Note that Alex Yeoh and Bernice Yu have indexes of 1 and 2 respectively in the current resident list. ","lastModifiedDate":"2021-11-08"},{"lineNumber":284,"author":{"gitId":"rebeccalaujx"},"content":"   To update Alex and Bernice\u0027s vaccination statuses and last FET dates, simply enter `edit 1 2 v/T fd/05-11-2021`.","lastModifiedDate":"2021-11-08"},{"lineNumber":285,"author":{"gitId":"rebeccalaujx"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":286,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step1](images/logic/commands/editcommand/person/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":287,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":288,"author":{"gitId":"rebeccalaujx"},"content":"2. The result box will notify you of the edited residents. The resident list will be updated to contain the modified details.","lastModifiedDate":"2021-11-08"},{"lineNumber":289,"author":{"gitId":"rebeccalaujx"},"content":"   Note that in this case, Alex Yeoh and Bernice Yu no longer have outstanding FETs to submit, so the red flag around their name will be removed.","lastModifiedDate":"2021-11-08"},{"lineNumber":290,"author":{"gitId":"rebeccalaujx"},"content":"   There will also be a syringe symbol beside their names to show that they are vaccinated.","lastModifiedDate":"2021-11-08"},{"lineNumber":291,"author":{"gitId":"rebeccalaujx"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":292,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step2](images/logic/commands/editcommand/person/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":293,"author":{"gitId":"rebeccalaujx"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":294,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step3](images/logic/commands/editcommand/person/step3.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":295,"author":{"gitId":"rebeccalaujx"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":296,"author":{"gitId":"rebeccalaujx"},"content":"More Examples:","lastModifiedDate":"2021-11-08"},{"lineNumber":297,"author":{"gitId":"rebeccalaujx"},"content":"*  `edit 1 e/johndoe@example.com r/A101` Edits the email address and room number of the 1st resident to be `johndoe@example.com` and `A101` respectively.","lastModifiedDate":"2021-10-21"},{"lineNumber":298,"author":{"gitId":"jaredlhf"},"content":"*  `edit 1 2 3 v/t fd/20-10-2021` Sets the vaccination status of the 1st, 2nd, and 3rd resident as vaccinated, and sets their last FET dates to 20-10-2021.","lastModifiedDate":"2021-11-03"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"VimuthM"},"content":"#### Deleting a resident : `delete`","lastModifiedDate":"2021-10-22"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e :warning: **Warning:** The `delete` command cannot be undone! Do make sure that you have entered the command correctly before running it.","lastModifiedDate":"2021-11-08"},{"lineNumber":303,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":304,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":305,"author":{"gitId":"rebeccalaujx"},"content":"Deletes specified residents from the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"rebeccalaujx"},"content":"Format: `delete INDEXâ€¦`","lastModifiedDate":"2021-10-21"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"rebeccalaujx"},"content":"* Delete the residents at the specified `INDEXES`.","lastModifiedDate":"2021-10-21"},{"lineNumber":310,"author":{"gitId":"rebeccalaujx"},"content":"* Each index refers to the index number shown in the displayed resident list.","lastModifiedDate":"2021-10-21"},{"lineNumber":311,"author":{"gitId":"rebeccalaujx"},"content":"* The indexes **must be positive integers** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2021-10-21"},{"lineNumber":312,"author":{"gitId":"rebeccalaujx"},"content":"* Delete multiple residents in a single command by inputting multiple indexes, each separated by a space.","lastModifiedDate":"2021-10-21"},{"lineNumber":313,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":314,"author":{"gitId":"rebeccalaujx"},"content":"Example:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":315,"author":{"gitId":"rebeccalaujx"},"content":"Suppose Alex Yeoh and Bernice Yu have recently moved out of hall. To keep the addressbook updated, you might want to remove them from the list of residents.","lastModifiedDate":"2021-11-08"},{"lineNumber":316,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":317,"author":{"gitId":"rebeccalaujx"},"content":"You can easily do this a single `delete` command.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":318,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":319,"author":{"gitId":"rebeccalaujx"},"content":"1. Note that Alex Yeoh and Bernice Yu have indexes of 1 and 2 respectively in the current resident list. To remove them from the list of residents, simply enter `delete 1 2`.","lastModifiedDate":"2021-11-08"},{"lineNumber":320,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step1](images/logic/commands/deletecommand/person/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":321,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":322,"author":{"gitId":"rebeccalaujx"},"content":"3. The result box will notify you of the deleted residents. Alex Yeoh and Bernice Yu will also be removed from the resident list.","lastModifiedDate":"2021-11-08"},{"lineNumber":323,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step2](images/logic/commands/deletecommand/person/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":324,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":325,"author":{"gitId":"rebeccalaujx"},"content":"More Examples:","lastModifiedDate":"2021-11-08"},{"lineNumber":326,"author":{"gitId":"rebeccalaujx"},"content":"* `view` followed by `delete 1 2 3` deletes the first 3 residents in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":327,"author":{"gitId":"rebeccalaujx"},"content":"* `find n/Anne` followed by `delete 1` deletes the 1st resident named Anne in the results of the `find` command.","lastModifiedDate":"2021-10-21"},{"lineNumber":328,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":329,"author":{"gitId":"VimuthM"},"content":"#### Tracing close contacts : `trace`","lastModifiedDate":"2021-10-29"},{"lineNumber":330,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":331,"author":{"gitId":"VimuthM"},"content":"Traces a resident\u0027s close contacts based on the events they\u0027re involved in. This is useful when a COVID case is located within the residence and their close contacts are to be notified of proper procedure to follow.","lastModifiedDate":"2021-10-29"},{"lineNumber":332,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":333,"author":{"gitId":"VimuthM"},"content":"Format: `trace r/RESIDENT [d/DEPTH] [t/DURATION]`","lastModifiedDate":"2021-10-29"},{"lineNumber":334,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":335,"author":{"gitId":"VimuthM"},"content":"Prefix | Field | Details","lastModifiedDate":"2021-11-08"},{"lineNumber":336,"author":{"gitId":"VimuthM"},"content":"-------- | ------ | ------","lastModifiedDate":"2021-11-08"},{"lineNumber":337,"author":{"gitId":"VimuthM"},"content":"`r` | Resident | The resident to trace can be identified either by full name or room (case-insensitive)","lastModifiedDate":"2021-11-08"},{"lineNumber":338,"author":{"gitId":"VimuthM"},"content":"`d` | Depth | Refers to the maximum allowed links to reach the resident in question \u003cbr\u003e It is an integer, 1 \u003c\u003d depth \u003c\u003d 5, and will default to 1 if not specified","lastModifiedDate":"2021-11-08"},{"lineNumber":339,"author":{"gitId":"VimuthM"},"content":"`t` | Duration | Represents the time in days to trace back to. \u003cbr\u003e It is an integer, 1 \u003c\u003d duration \u003c\u003d 31, and will default to 7 if not specified","lastModifiedDate":"2021-11-08"},{"lineNumber":340,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":341,"author":{"gitId":"VimuthM"},"content":"1. Using sample data, running `trace r/Alex Yeoh d/1` will trace down residents Charlotte and David since they all were in the Volleyball event.","lastModifiedDate":"2021-11-08"},{"lineNumber":342,"author":{"gitId":"VimuthM"},"content":"   ![depth1](images/logic/commands/tracecommand/depth1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":343,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":344,"author":{"gitId":"VimuthM"},"content":"2. Using sample data, running the above command but with depth 2, `trace r/Alex Yeoh d/2`,will trace down resident Irfan in addition, since David in turn was in contact with Irfan during Powerlifting event.","lastModifiedDate":"2021-11-08"},{"lineNumber":345,"author":{"gitId":"VimuthM"},"content":"   ![depth2](images/logic/commands/tracecommand/depth2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":346,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":347,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":348,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":349,"author":{"gitId":"VimuthM"},"content":":warning: **Note:** The above commands will, given time, not result in any close contacts since this is a time-dependent problem. The examples are used to merely explain the concept of depth.","lastModifiedDate":"2021-11-08"},{"lineNumber":350,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":351,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":352,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":353,"author":{"gitId":"VimuthM"},"content":"Examples:","lastModifiedDate":"2021-10-29"},{"lineNumber":354,"author":{"gitId":"VimuthM"},"content":"* `trace` followed by `r/A101` lists the resident\u0027s immediate close contact from events in the past 7 days.","lastModifiedDate":"2021-10-29"},{"lineNumber":355,"author":{"gitId":"chongjunwei"},"content":"* `trace r/Anne` followed by `d/2 t/4` lists Anne\u0027s immediate contacts and their immediate contacts from events in the past 4 days.","lastModifiedDate":"2021-11-03"},{"lineNumber":356,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":357,"author":{"gitId":"jaredlhf"},"content":"#### Sorting residents : `sort`","lastModifiedDate":"2021-10-29"},{"lineNumber":358,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":359,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e :bulb: **Tip:** To undo the `sort` command, simply run `view`.","lastModifiedDate":"2021-11-08"},{"lineNumber":360,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":361,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":362,"author":{"gitId":"jaredlhf"},"content":"Sorts the residents according to specified fields in ascending or descending order","lastModifiedDate":"2021-10-29"},{"lineNumber":363,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":364,"author":{"gitId":"jaredlhf"},"content":"Format: `sort by/FIELD o/ORDER`","lastModifiedDate":"2021-10-29"},{"lineNumber":365,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":366,"author":{"gitId":"jaredlhf"},"content":"FIELD | Resident\u0027s field","lastModifiedDate":"2021-10-29"},{"lineNumber":367,"author":{"gitId":"jaredlhf"},"content":"-------- | ------ ","lastModifiedDate":"2021-10-29"},{"lineNumber":368,"author":{"gitId":"jaredlhf"},"content":"`n` | Name","lastModifiedDate":"2021-10-29"},{"lineNumber":369,"author":{"gitId":"jaredlhf"},"content":"`e` | Email","lastModifiedDate":"2021-10-29"},{"lineNumber":370,"author":{"gitId":"jaredlhf"},"content":"`r` | Room","lastModifiedDate":"2021-10-29"},{"lineNumber":371,"author":{"gitId":"jaredlhf"},"content":"`p` | Phone","lastModifiedDate":"2021-10-29"},{"lineNumber":372,"author":{"gitId":"jaredlhf"},"content":"`f` | Faculty","lastModifiedDate":"2021-10-29"},{"lineNumber":373,"author":{"gitId":"jaredlhf"},"content":"`v` | Vaccination","lastModifiedDate":"2021-10-29"},{"lineNumber":374,"author":{"gitId":"jaredlhf"},"content":"`fd` | FET date","lastModifiedDate":"2021-11-03"},{"lineNumber":375,"author":{"gitId":"jaredlhf"},"content":"`cd` | Collection date","lastModifiedDate":"2021-10-29"},{"lineNumber":376,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":377,"author":{"gitId":"jaredlhf"},"content":"* `ORDER` can be `a` for ascending or `d` for descending","lastModifiedDate":"2021-10-29"},{"lineNumber":378,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":379,"author":{"gitId":"jaredlhf"},"content":"Examples:","lastModifiedDate":"2021-10-29"},{"lineNumber":380,"author":{"gitId":"jaredlhf"},"content":"* `sort by/n o/a` sorts the residents by name in ascending order","lastModifiedDate":"2021-10-29"},{"lineNumber":381,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":382,"author":{"gitId":"VimuthM"},"content":"#### Importing resident data : `import`","lastModifiedDate":"2021-10-29"},{"lineNumber":383,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":384,"author":{"gitId":"VimuthM"},"content":"Imports resident information from the specified csv file which is to be located within the `data/` folder.","lastModifiedDate":"2021-10-29"},{"lineNumber":385,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":386,"author":{"gitId":"VimuthM"},"content":"Format: `import CSV_NAME`","lastModifiedDate":"2021-10-29"},{"lineNumber":387,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":388,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":389,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":390,"author":{"gitId":"VimuthM"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":391,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":392,"author":{"gitId":"VimuthM"},"content":"* 8 comma separated values for each row with values in order; \u003cbr\u003e","lastModifiedDate":"2021-10-29"},{"lineNumber":393,"author":{"gitId":"VimuthM"},"content":"  `name`, `room`, `phone`, `email`, `vaccStatus`, `faculty`, `lastFetDate`, `lastCollectionDate`","lastModifiedDate":"2021-10-29"},{"lineNumber":394,"author":{"gitId":"VimuthM"},"content":"* The first row will be discarded as column headings","lastModifiedDate":"2021-10-29"},{"lineNumber":395,"author":{"gitId":"VimuthM"},"content":"* `lastFetDate`, `lastCollectionDate` are optional (can be left as empty space)","lastModifiedDate":"2021-10-29"},{"lineNumber":396,"author":{"gitId":"VimuthM"},"content":"* The file format (`.csv`) is not to be included in `CSV_NAME`","lastModifiedDate":"2021-11-08"},{"lineNumber":397,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":398,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":399,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2021-11-08"},{"lineNumber":400,"author":{"gitId":"VimuthM"},"content":"You can save to `csv` format from an excel file by  Save as` -\u003e `.csv`","lastModifiedDate":"2021-11-08"},{"lineNumber":401,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":402,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":403,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":404,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":405,"author":{"gitId":"VimuthM"},"content":":warning: **Warning:** Resident lists of all events will be cleared!","lastModifiedDate":"2021-11-08"},{"lineNumber":406,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":407,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":408,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":409,"author":{"gitId":"VimuthM"},"content":"Here\u0027s a step by step guide:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":410,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":411,"author":{"gitId":"VimuthM"},"content":"1. Create your csv file in the correct format (shown below).","lastModifiedDate":"2021-11-08"},{"lineNumber":412,"author":{"gitId":"VimuthM"},"content":"    ![CSV](images/logic/commands/importcommand/csvFormat.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":413,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":414,"author":{"gitId":"VimuthM"},"content":"2. Place your csv file in the `data/` folder.","lastModifiedDate":"2021-11-08"},{"lineNumber":415,"author":{"gitId":"VimuthM"},"content":"    ![FileStructure](images/logic/commands/importcommand/filefolder.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":416,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":417,"author":{"gitId":"VimuthM"},"content":"3. Run `import CSV_NAME`.","lastModifiedDate":"2021-11-08"},{"lineNumber":418,"author":{"gitId":"VimuthM"},"content":"    ![NewResidents](images/logic/commands/importcommand/newresidents.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":419,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":420,"author":{"gitId":"VimuthM"},"content":"Examples:","lastModifiedDate":"2021-10-29"},{"lineNumber":421,"author":{"gitId":"VimuthM"},"content":"* `import` followed by `safeforhall` attempts to read the file `safeforhall.csv` within the `data/` folder.","lastModifiedDate":"2021-10-29"},{"lineNumber":422,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":423,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":424,"author":{"gitId":"VimuthM"},"content":"#### Exporting residents\u0027 emails : `export`","lastModifiedDate":"2021-10-29"},{"lineNumber":425,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":426,"author":{"gitId":"jaredlhf"},"content":"Exports the emails of all the residents in the last filtered list to a csv file within the `data/exports/` folder.","lastModifiedDate":"2021-11-05"},{"lineNumber":427,"author":{"gitId":"jaredlhf"},"content":"A quick copy-paste of the email addresses from the csv file allows you to send mass emails using modern email clients.","lastModifiedDate":"2021-11-05"},{"lineNumber":428,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":429,"author":{"gitId":"VimuthM"},"content":"Format: `export FILE_NAME`","lastModifiedDate":"2021-10-29"},{"lineNumber":430,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":431,"author":{"gitId":"jaredlhf"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":432,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":433,"author":{"gitId":"jaredlhf"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":434,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":435,"author":{"gitId":"jaredlhf"},"content":"* The file format (`.csv`) is not to be included in the `FILE_NAME`","lastModifiedDate":"2021-11-05"},{"lineNumber":436,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":437,"author":{"gitId":"jaredlhf"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":438,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":439,"author":{"gitId":"jaredlhf"},"content":"1. Run `export FILE_NAME`.","lastModifiedDate":"2021-11-08"},{"lineNumber":440,"author":{"gitId":"jaredlhf"},"content":"   ![Export](images/logic/commands/exportcommand/command.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":441,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":442,"author":{"gitId":"jaredlhf"},"content":"2. Find your csv file in the `data/exports` folder.","lastModifiedDate":"2021-11-08"},{"lineNumber":443,"author":{"gitId":"jaredlhf"},"content":"   ![FileStructure](images/logic/commands/exportcommand/filefolder.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":444,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":445,"author":{"gitId":"jaredlhf"},"content":"3. Your exported csv file should look like this.","lastModifiedDate":"2021-11-08"},{"lineNumber":446,"author":{"gitId":"jaredlhf"},"content":"   ![Csv](images/logic/commands/exportcommand/csvFormat.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":447,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":448,"author":{"gitId":"VimuthM"},"content":"Examples:","lastModifiedDate":"2021-10-29"},{"lineNumber":449,"author":{"gitId":"jaredlhf"},"content":"* `export` followed by `safeforhall` creates a `safeforhall.csv` within the `data/exports/` folder, with the emails of all the residents currently displayed on the application.","lastModifiedDate":"2021-11-03"},{"lineNumber":450,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":451,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":452,"author":{"gitId":"VimuthM"},"content":"### For Events","lastModifiedDate":"2021-10-22"},{"lineNumber":453,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":454,"author":{"gitId":"VimuthM"},"content":"These commands will function as specified when run under the `Event` tab.","lastModifiedDate":"2021-10-22"},{"lineNumber":455,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":456,"author":{"gitId":"VimuthM"},"content":"#### Adding an event : `add`","lastModifiedDate":"2021-10-22"},{"lineNumber":457,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":458,"author":{"gitId":"VimuthM"},"content":"Adds a new event to the address book.","lastModifiedDate":"2021-10-22"},{"lineNumber":459,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":460,"author":{"gitId":"VimuthM"},"content":"Format: `add n/EVENT_NAME v/VENUE c/CAPACITY d/DATE t/TIME [r/RESIDENTS]`","lastModifiedDate":"2021-10-29"},{"lineNumber":461,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":462,"author":{"gitId":"VimuthM"},"content":"Prefix | Field | Details","lastModifiedDate":"2021-11-08"},{"lineNumber":463,"author":{"gitId":"VimuthM"},"content":"-------- | ------ | ------","lastModifiedDate":"2021-11-08"},{"lineNumber":464,"author":{"gitId":"VimuthM"},"content":"`n` | Name | Should only contain alphanumeric characters and spaces, and it should not be blank","lastModifiedDate":"2021-11-08"},{"lineNumber":465,"author":{"gitId":"VimuthM"},"content":"`v` | Venue | Should only contain alphanumeric characters and spaces, and it should not be blank","lastModifiedDate":"2021-11-08"},{"lineNumber":466,"author":{"gitId":"VimuthM"},"content":"`c` | Capacity | Represents the maximum number of residents allowed in this event and is an integer, 1 \u003c\u003d capacity \u003c\u003d 2147483647","lastModifiedDate":"2021-11-08"},{"lineNumber":467,"author":{"gitId":"VimuthM"},"content":"`d` | Date | Should be of `dd-mm-yyyy`, `dd.mm.yyyy` or `dd/mm/yyyy` format","lastModifiedDate":"2021-11-08"},{"lineNumber":468,"author":{"gitId":"VimuthM"},"content":"`t` | Time | Should be of `HHmm` format","lastModifiedDate":"2021-11-08"},{"lineNumber":469,"author":{"gitId":"VimuthM"},"content":"`r` | Residents | Can be identified with either all names or all rooms \u003cbr\u003e The number of residents cannot exceed the provided capacity \u003cbr\u003e Provided names and rooms are case-insensitive and should be comma-separated","lastModifiedDate":"2021-11-08"},{"lineNumber":470,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":471,"author":{"gitId":"VimuthM"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":472,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":473,"author":{"gitId":"VimuthM"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":474,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":475,"author":{"gitId":"VimuthM"},"content":"* The combination of `Name` (case-insensitive), `Venue` (case-insensitive), `Date` and `Time` should be unique","lastModifiedDate":"2021-11-08"},{"lineNumber":476,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":477,"author":{"gitId":"VimuthM"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":478,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":479,"author":{"gitId":"VimuthM"},"content":"Here\u0027s a step by step guide:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":480,"author":{"gitId":"VimuthM"},"content":"1. Type the `add` command and the rest of the parameters with help from the command suggestion.","lastModifiedDate":"2021-11-08"},{"lineNumber":481,"author":{"gitId":"VimuthM"},"content":"   ![Step1](images/logic/commands/addeventcommand/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":482,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":483,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":484,"author":{"gitId":"VimuthM"},"content":"2. After execution, the event list will now show the new event.","lastModifiedDate":"2021-11-08"},{"lineNumber":485,"author":{"gitId":"VimuthM"},"content":"   ![Step2](images/logic/commands/addeventcommand/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":486,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":487,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-10-22"},{"lineNumber":488,"author":{"gitId":"VimuthM"},"content":"* `add n/Swim v/Swimming Pool c/10 d/28-10-2021 t/1500`","lastModifiedDate":"2021-10-29"},{"lineNumber":489,"author":{"gitId":"gordonlzy"},"content":"* `add n/Frisbee v/MPSH c/15 d/30/10/2021 t/1500 r/E201`  ","lastModifiedDate":"2021-11-02"},{"lineNumber":490,"author":{"gitId":"gordonlzy"},"content":"* `add n/Frisbee v/MPSH c/15 d/30/10/2021 t/1500 r/E201, a121`","lastModifiedDate":"2021-11-02"},{"lineNumber":491,"author":{"gitId":"gordonlzy"},"content":"* `add n/Frisbee v/MPSH c/15 d/30/10/2021 t/1500 r/John Doe, Jane Doe`","lastModifiedDate":"2021-11-02"},{"lineNumber":492,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":493,"author":{"gitId":"chongjunwei"},"content":"#### Viewing events information : `view`","lastModifiedDate":"2021-11-03"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":495,"author":{"gitId":"chongjunwei"},"content":"Shows a numbered list of all the events in the address book.","lastModifiedDate":"2021-11-03"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":497,"author":{"gitId":"chongjunwei"},"content":"The index of the event is the corresponding number in the list","lastModifiedDate":"2021-11-03"},{"lineNumber":498,"author":{"gitId":"chongjunwei"},"content":"shown when `view` (without the [INDEX] parameter) is called.","lastModifiedDate":"2021-11-03"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":500,"author":{"gitId":"chongjunwei"},"content":"Format: `view [INDEX]`","lastModifiedDate":"2021-11-03"},{"lineNumber":501,"author":{"gitId":"chongjunwei"},"content":"* For an index i, 1 â‰¤ i â‰¤ n, where n is the number of events in the address book","lastModifiedDate":"2021-11-03"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":503,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-11-03"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":505,"author":{"gitId":"chongjunwei"},"content":"* `view` shows a list of all the events","lastModifiedDate":"2021-11-03"},{"lineNumber":506,"author":{"gitId":"chongjunwei"},"content":"* `view 5` shows the details of the event at index 5","lastModifiedDate":"2021-11-03"},{"lineNumber":507,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":508,"author":{"gitId":"VimuthM"},"content":"#### Editing an event : `edit`","lastModifiedDate":"2021-10-22"},{"lineNumber":509,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":510,"author":{"gitId":"rebeccalaujx"},"content":"Edits an existing event in the address book.","lastModifiedDate":"2021-10-21"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":512,"author":{"gitId":"rebeccalaujx"},"content":"Format: `edit INDEX [n/EVENT_NAME] [v/VENUE] [c/CAPACITY] [d/EVENT_DATE] [t/EVENT_TIME]`","lastModifiedDate":"2021-11-08"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":514,"author":{"gitId":"rebeccalaujx"},"content":"Prefix | Field | Details","lastModifiedDate":"2021-11-08"},{"lineNumber":515,"author":{"gitId":"rebeccalaujx"},"content":"-------- | ------ | ------","lastModifiedDate":"2021-11-08"},{"lineNumber":516,"author":{"gitId":"rebeccalaujx"},"content":"`n` | Name | Should only contain alphanumeric characters and spaces, and it should not be blank","lastModifiedDate":"2021-11-08"},{"lineNumber":517,"author":{"gitId":"rebeccalaujx"},"content":"`v` | Venue | Should only contain alphanumeric characters and spaces, and it should not be blank","lastModifiedDate":"2021-11-08"},{"lineNumber":518,"author":{"gitId":"rebeccalaujx"},"content":"`c` | Capacity | Represents the maximum number of residents allowed in this event and is an integer, 1 \u003c\u003d capacity \u003c\u003d 2147483647","lastModifiedDate":"2021-11-08"},{"lineNumber":519,"author":{"gitId":"rebeccalaujx"},"content":"`d` | Date | Should be of `dd-mm-yyyy`, `dd.mm.yyyy` or `dd/mm/yyyy` format","lastModifiedDate":"2021-11-08"},{"lineNumber":520,"author":{"gitId":"rebeccalaujx"},"content":"`t` | Time | Should be of `HHmm` format","lastModifiedDate":"2021-11-08"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":522,"author":{"gitId":"rebeccalaujx"},"content":"* Edits the event at the specified `INDEX`.","lastModifiedDate":"2021-10-21"},{"lineNumber":523,"author":{"gitId":"rebeccalaujx"},"content":"* The index refers to the index number shown in the displayed event list.","lastModifiedDate":"2021-10-21"},{"lineNumber":524,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"rebeccalaujx"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-10-21"},{"lineNumber":526,"author":{"gitId":"rebeccalaujx"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-10-21"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"rebeccalaujx"},"content":"Example:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":529,"author":{"gitId":"rebeccalaujx"},"content":"Letâ€™s say that Powerlifting changed the date and time of their event from `25 Oct 2021 8:00AM` to `26 Oct 2021 9:00AM`.","lastModifiedDate":"2021-11-08"},{"lineNumber":530,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":531,"author":{"gitId":"rebeccalaujx"},"content":"You can easily update these details in a single `edit` command.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":532,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":533,"author":{"gitId":"rebeccalaujx"},"content":"1. Note that Powerlifting\u0027s index is reflected as 1 in the current list of events. To update the date and time of the event, simply enter `edit 1 d/26-10-2021 t/0900`.","lastModifiedDate":"2021-11-08"},{"lineNumber":534,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step1](images/logic/commands/editcommand/event/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":535,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":536,"author":{"gitId":"rebeccalaujx"},"content":"2. The result box will display the updated details of the event. The event list will also be updated to contain the modified event details.","lastModifiedDate":"2021-11-08"},{"lineNumber":537,"author":{"gitId":"rebeccalaujx"},"content":"   ![Step2](images/logic/commands/editcommand/event/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":538,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":539,"author":{"gitId":"rebeccalaujx"},"content":"More Examples:","lastModifiedDate":"2021-11-08"},{"lineNumber":540,"author":{"gitId":"rebeccalaujx"},"content":"*  `edit 1 n/Football Training v/Field c/50` Edits the name, venue, and capacity of the 1st event in the event list to be `Football Training`, `Field`, and `50` respectively.","lastModifiedDate":"2021-11-02"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"chongjunwei"},"content":"#### Searching by event information: `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":543,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":544,"author":{"gitId":"chongjunwei"},"content":"Shows a list of events that match the provided keywords for different available parameters. Allowed flags include; `n/`, `d/`, `v/`, `c/`","lastModifiedDate":"2021-11-08"},{"lineNumber":545,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":546,"author":{"gitId":"chongjunwei"},"content":"Format: `find [PREFIX/KEYWORD]...`","lastModifiedDate":"2021-11-03"},{"lineNumber":547,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":548,"author":{"gitId":"chongjunwei"},"content":"Prefix | Field | Restrictions","lastModifiedDate":"2021-11-08"},{"lineNumber":549,"author":{"gitId":"chongjunwei"},"content":"-------- | ------ | ------","lastModifiedDate":"2021-11-08"},{"lineNumber":550,"author":{"gitId":"chongjunwei"},"content":"`n` | Name | - It is case-insensitive. e.g `dance` will match `Dance` \u003cbr\u003e \u003cbr\u003e - Keywords will be matched without the need to enter the full event name. e.g `Band` will match `Band training` \u003cbr\u003e \u003cbr\u003e - Events matching at least one keyword for the event name will be returned (i.e. `OR` search). e.g `Football Basketball` will return `Football Training`, `Basketball Training`","lastModifiedDate":"2021-11-08"},{"lineNumber":551,"author":{"gitId":"chongjunwei"},"content":"`v` | Venue | - It is case-insensitive. e.g `nus field` will match `NUS Field` \u003cbr\u003e \u003cbr\u003e - Only full event names will be matched. e.g `Field` will not match `NUS Field`","lastModifiedDate":"2021-11-08"},{"lineNumber":552,"author":{"gitId":"chongjunwei"},"content":"`d, c` | Date, Capacity | - Subject to the same validity conditions as in the [Add Event Command](#adding-an-event--add)","lastModifiedDate":"2021-11-08"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":554,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-11-03"},{"lineNumber":555,"author":{"gitId":"chongjunwei"},"content":"* `find n/Football` returns `Football Match` and `Football Training`","lastModifiedDate":"2021-11-03"},{"lineNumber":556,"author":{"gitId":"chongjunwei"},"content":"* `find v/NUS field c/5` returns all the events at `NUS field` which have a capacity of `5`","lastModifiedDate":"2021-11-03"},{"lineNumber":557,"author":{"gitId":"chongjunwei"},"content":"* `find d/03-01-2021` returns all the events which occur on the date `03-01-2021` \u003cbr\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":559,"author":{"gitId":"rebeccalaujx"},"content":"#### Deleting an event : `delete`","lastModifiedDate":"2021-11-02"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":561,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e :warning: **Warning:** The `delete` command cannot be undone! Do make sure that you have entered the command correctly before running it.","lastModifiedDate":"2021-11-08"},{"lineNumber":562,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":564,"author":{"gitId":"rebeccalaujx"},"content":"Deletes specified events from the address book.","lastModifiedDate":"2021-11-02"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":566,"author":{"gitId":"rebeccalaujx"},"content":"Format: `delete INDEXâ€¦`","lastModifiedDate":"2021-11-02"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":568,"author":{"gitId":"rebeccalaujx"},"content":"* Delete the events at the specified `INDEXâ€¦`.","lastModifiedDate":"2021-11-02"},{"lineNumber":569,"author":{"gitId":"rebeccalaujx"},"content":"* Each index refers to the index number shown in the displayed event list.","lastModifiedDate":"2021-11-02"},{"lineNumber":570,"author":{"gitId":"rebeccalaujx"},"content":"* The indexes **must be positive integers** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2021-11-02"},{"lineNumber":571,"author":{"gitId":"rebeccalaujx"},"content":"* Delete multiple events in a single command by inputting multiple indexes, each separated by a space.","lastModifiedDate":"2021-11-02"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":573,"author":{"gitId":"chongjunwei"},"content":"Example:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":574,"author":{"gitId":"chongjunwei"},"content":"Suppose Football Training is cancelled due to a tightening of COVID-19 measures. To keep the addressbook updated, you might want to remove the event from the list of events.","lastModifiedDate":"2021-11-08"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":576,"author":{"gitId":"chongjunwei"},"content":"You can easily do this a single `delete` command.\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":577,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":578,"author":{"gitId":"chongjunwei"},"content":"1. Note that the event \"Football Training\" has an index of 2 in the current event list. To remove it from the list of events, simply enter `delete 2`.","lastModifiedDate":"2021-11-08"},{"lineNumber":579,"author":{"gitId":"chongjunwei"},"content":"   ![Step1](images/logic/commands/deletecommand/event/step1.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":580,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":581,"author":{"gitId":"chongjunwei"},"content":"2. The result box will notify you of the deleted event. The event will also be removed from the event list.","lastModifiedDate":"2021-11-08"},{"lineNumber":582,"author":{"gitId":"chongjunwei"},"content":"   ![Step2](images/logic/commands/deletecommand/event/step2.png)","lastModifiedDate":"2021-11-08"},{"lineNumber":583,"author":{"gitId":"chongjunwei"},"content":"   ","lastModifiedDate":"2021-11-08"},{"lineNumber":584,"author":{"gitId":"chongjunwei"},"content":"More Examples:","lastModifiedDate":"2021-11-08"},{"lineNumber":585,"author":{"gitId":"rebeccalaujx"},"content":"* `view` followed by `delete 1 2 3` deletes the first 3 events in the address book.","lastModifiedDate":"2021-11-02"},{"lineNumber":586,"author":{"gitId":"rebeccalaujx"},"content":"* `find n/Football Training` followed by `delete 1` deletes the 1st event named Football Training in the results of the `find` command.","lastModifiedDate":"2021-11-02"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":588,"author":{"gitId":"VimuthM"},"content":"#### Add residents to an event: `include`","lastModifiedDate":"2021-10-29"},{"lineNumber":589,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":590,"author":{"gitId":"gordonlzy"},"content":"Add multiple residents to an event based on the information given(name or room number), a resident is only expected to be given a name or a room.","lastModifiedDate":"2021-11-04"},{"lineNumber":591,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":592,"author":{"gitId":"gordonlzy"},"content":"Format: `include INDEX r/RESIDENTS`","lastModifiedDate":"2021-11-04"},{"lineNumber":593,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":594,"author":{"gitId":"gordonlzy"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":595,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":596,"author":{"gitId":"gordonlzy"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":597,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":598,"author":{"gitId":"gordonlzy"},"content":"* Residents can be given in the form of `names/rooms`, but all has to be all `rooms` or all `names`","lastModifiedDate":"2021-11-07"},{"lineNumber":599,"author":{"gitId":"gordonlzy"},"content":"* The residents\u0027 `names/rooms` inputted have to exist in the address book under the `Resident` Tab to be added to an `Event`","lastModifiedDate":"2021-11-07"},{"lineNumber":600,"author":{"gitId":"gordonlzy"},"content":"* When adding multiple `names/rooms`, each resident\u0027s `name/room` is separated by a comma","lastModifiedDate":"2021-11-07"},{"lineNumber":601,"author":{"gitId":"gordonlzy"},"content":"* The resident\u0027s `name/room` inputted is case-insensitive","lastModifiedDate":"2021-11-07"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":603,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":604,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":605,"author":{"gitId":"rebeccalaujx"},"content":"Here\u0027s a step-by-step guide:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":606,"author":{"gitId":"gordonlzy"},"content":"1. Type the `include` command with the `index` of the event, and the `names/rooms` of the residents to include to","lastModifiedDate":"2021-11-07"},{"lineNumber":607,"author":{"gitId":"gordonlzy"},"content":"   the event. When adding multiple `names/rooms`, remember to separate the `names/rooms` by a comma.","lastModifiedDate":"2021-11-07"},{"lineNumber":608,"author":{"gitId":"gordonlzy"},"content":"   ![Step1](images/logic/commands/includecommand/step1.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":611,"author":{"gitId":"gordonlzy"},"content":"2. The sidebar will now show the updated list of residents in the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":612,"author":{"gitId":"gordonlzy"},"content":"   ![Step2](images/logic/commands/includecommand/step2.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":613,"author":{"gitId":"gordonlzy"},"content":"   ","lastModifiedDate":"2021-11-07"},{"lineNumber":614,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":615,"author":{"gitId":"gordonlzy"},"content":"Examples:","lastModifiedDate":"2021-10-20"},{"lineNumber":616,"author":{"gitId":"gordonlzy"},"content":"* `include 1 r/A101` adds the resident who stays in room A101 to the first event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":617,"author":{"gitId":"gordonlzy"},"content":"* `include 2 r/A101, A102, A103` adds the residents who stay in rooms A101, A102 and A103 to the second event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":618,"author":{"gitId":"gordonlzy"},"content":"* `include 3 r/John Doe` adds John Doe to the third event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":619,"author":{"gitId":"gordonlzy"},"content":"* `include 4 r/John Doe, Jane Doe` adds John Doe and Jane Doe to the fourth event in the address book","lastModifiedDate":"2021-10-20"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":621,"author":{"gitId":"VimuthM"},"content":"#### Remove residents from an event: `exclude`","lastModifiedDate":"2021-10-29"},{"lineNumber":622,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":623,"author":{"gitId":"gordonlzy"},"content":"Remove multiple residents from an event based on the information given(name or room number), a resident is only expected to be given a name or a room.","lastModifiedDate":"2021-11-04"},{"lineNumber":624,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":625,"author":{"gitId":"gordonlzy"},"content":"Format: `exclude INDEX r/RESIDENTS`","lastModifiedDate":"2021-11-04"},{"lineNumber":626,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":627,"author":{"gitId":"gordonlzy"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":628,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":629,"author":{"gitId":"gordonlzy"},"content":"**:information_source: Note:**\u003cbr\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":630,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":631,"author":{"gitId":"gordonlzy"},"content":"* Residents can be given in the form of `names/rooms`, but all has to be all `rooms` or all `names`","lastModifiedDate":"2021-11-07"},{"lineNumber":632,"author":{"gitId":"gordonlzy"},"content":"* The residents\u0027 `names/rooms` inputted have to be involved in the `Event` under the `Event` Tab, to be removed from","lastModifiedDate":"2021-11-07"},{"lineNumber":633,"author":{"gitId":"gordonlzy"},"content":"  that event","lastModifiedDate":"2021-11-07"},{"lineNumber":634,"author":{"gitId":"gordonlzy"},"content":"* When removing multiple `names/rooms`, each resident\u0027s `name/room` is separated by a comma","lastModifiedDate":"2021-11-07"},{"lineNumber":635,"author":{"gitId":"gordonlzy"},"content":"* The resident\u0027s `name/room` inputted is case-insensitive","lastModifiedDate":"2021-11-07"},{"lineNumber":636,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":637,"author":{"gitId":"gordonlzy"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-07"},{"lineNumber":638,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":639,"author":{"gitId":"rebeccalaujx"},"content":"Here\u0027s a step-by-step guide:\u003cbr\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":640,"author":{"gitId":"gordonlzy"},"content":"1. Type the `exclude` command with the `index` of the event, and the `names/rooms` of the residents to exclude from","lastModifiedDate":"2021-11-07"},{"lineNumber":641,"author":{"gitId":"gordonlzy"},"content":"   the event. When removing multiple `names/rooms`, remember to separate the `names/rooms` by a comma.","lastModifiedDate":"2021-11-07"},{"lineNumber":642,"author":{"gitId":"gordonlzy"},"content":"   ![Step1](images/logic/commands/excludecommand/step1.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":643,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":644,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":645,"author":{"gitId":"gordonlzy"},"content":"2. The sidebar will now show the updated list of residents in the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":646,"author":{"gitId":"gordonlzy"},"content":"   ![Step2](images/logic/commands/excludecommand/step2.png)","lastModifiedDate":"2021-11-07"},{"lineNumber":647,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":648,"author":{"gitId":"gordonlzy"},"content":"Examples:","lastModifiedDate":"2021-10-28"},{"lineNumber":649,"author":{"gitId":"gordonlzy"},"content":"* `exclude 1 r/A101` removes the resident who stays in room A101 from the first event in the address book","lastModifiedDate":"2021-10-28"},{"lineNumber":650,"author":{"gitId":"gordonlzy"},"content":"* `exclude 2 r/A101, A102, A103` removes the residents who stay in rooms A101, A102 and A103 from the second event in the address book","lastModifiedDate":"2021-10-28"},{"lineNumber":651,"author":{"gitId":"gordonlzy"},"content":"* `exclude 3 r/John Doe` removes John Doe from the third event in the address book","lastModifiedDate":"2021-10-28"},{"lineNumber":652,"author":{"gitId":"gordonlzy"},"content":"* `exclude 4 r/John Doe, Jane Doe` removes John Doe and Jane Doe from the fourth event in the address book","lastModifiedDate":"2021-10-28"},{"lineNumber":653,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":654,"author":{"gitId":"jaredlhf"},"content":"#### Sorting events : `sort`","lastModifiedDate":"2021-10-29"},{"lineNumber":655,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":656,"author":{"gitId":"rebeccalaujx"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e :bulb: **Tip:** To undo the `sort` command, simply run `view`.","lastModifiedDate":"2021-11-08"},{"lineNumber":657,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-11-08"},{"lineNumber":658,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":659,"author":{"gitId":"jaredlhf"},"content":"Sorts the events according to specified fields in ascending or descending order.","lastModifiedDate":"2021-11-03"},{"lineNumber":660,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":661,"author":{"gitId":"jaredlhf"},"content":"Format: `sort by/FIELD o/ORDER`","lastModifiedDate":"2021-10-29"},{"lineNumber":662,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":663,"author":{"gitId":"jaredlhf"},"content":"FIELD | Event\u0027s field","lastModifiedDate":"2021-10-29"},{"lineNumber":664,"author":{"gitId":"jaredlhf"},"content":"-------- | ------ ","lastModifiedDate":"2021-10-29"},{"lineNumber":665,"author":{"gitId":"jaredlhf"},"content":"`n` | Name","lastModifiedDate":"2021-10-29"},{"lineNumber":666,"author":{"gitId":"jaredlhf"},"content":"`d` | Date and Time","lastModifiedDate":"2021-10-29"},{"lineNumber":667,"author":{"gitId":"jaredlhf"},"content":"`c` | Capacity","lastModifiedDate":"2021-10-29"},{"lineNumber":668,"author":{"gitId":"jaredlhf"},"content":"`v` | Venue","lastModifiedDate":"2021-10-29"},{"lineNumber":669,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":670,"author":{"gitId":"jaredlhf"},"content":"* `ORDER` can be `a` for ascending or `d` for descending","lastModifiedDate":"2021-10-29"},{"lineNumber":671,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":672,"author":{"gitId":"jaredlhf"},"content":"Examples:","lastModifiedDate":"2021-10-29"},{"lineNumber":673,"author":{"gitId":"jaredlhf"},"content":"* `sort by/n o/a` sorts the events by name in ascending order","lastModifiedDate":"2021-10-29"},{"lineNumber":674,"author":{"gitId":"jaredlhf"},"content":"* `sort by/d o/a` sorts the events by date and time from old to new","lastModifiedDate":"2021-10-29"},{"lineNumber":675,"author":{"gitId":"jaredlhf"},"content":"* `sort by/d o/d` sorts the events by date and time from new to old","lastModifiedDate":"2021-11-05"},{"lineNumber":676,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":677,"author":{"gitId":"VimuthM"},"content":"### Commons","lastModifiedDate":"2021-10-22"},{"lineNumber":678,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":679,"author":{"gitId":"VimuthM"},"content":"These commands will function the same in either tab.","lastModifiedDate":"2021-10-22"},{"lineNumber":680,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":681,"author":{"gitId":"VimuthM"},"content":"#### Viewing help : `help`","lastModifiedDate":"2021-10-22"},{"lineNumber":682,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":683,"author":{"gitId":"VimuthM"},"content":"Provides a short summary of the commands and a hyperlink for the user to reach this online user guide.","lastModifiedDate":"2021-10-29"},{"lineNumber":684,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":685,"author":{"gitId":"VimuthM"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2021-10-22"},{"lineNumber":686,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":687,"author":{"gitId":"VimuthM"},"content":"Format: `help`","lastModifiedDate":"2021-10-22"},{"lineNumber":688,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":689,"author":{"gitId":"VimuthM"},"content":"#### Switching tabs: `switch`","lastModifiedDate":"2021-10-29"},{"lineNumber":690,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":691,"author":{"gitId":"VimuthM"},"content":"Toggles between the `Residents` and `Events` tab.","lastModifiedDate":"2021-10-29"},{"lineNumber":692,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":693,"author":{"gitId":"VimuthM"},"content":"Format: `switch`","lastModifiedDate":"2021-10-29"},{"lineNumber":694,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":695,"author":{"gitId":"VimuthM"},"content":"#### Command history","lastModifiedDate":"2021-10-29"},{"lineNumber":696,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":697,"author":{"gitId":"VimuthM"},"content":"The `up` and `down` arrow keys when used with the input box in focus, allows traversal of past input commands to increase of use and efficiency.","lastModifiedDate":"2021-10-22"},{"lineNumber":698,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":699,"author":{"gitId":"VimuthM"},"content":"#### Command suggestion","lastModifiedDate":"2021-10-29"},{"lineNumber":700,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":701,"author":{"gitId":"gordonlzy"},"content":"A suggested string of parameters is displayed above the input box when a valid command is entered, parameters that have their prefixes entered correctly are removed from this suggestion.","lastModifiedDate":"2021-10-28"},{"lineNumber":702,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":703,"author":{"gitId":"VimuthM"},"content":"#### Clearing all entries : `clear`","lastModifiedDate":"2021-10-22"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"gordonlzy"},"content":"Clears all entries from the address book, including entries from the `Resident` Tab and the `Event` Tab. Data cleared cannot be retrieved and this command should be used with caution. A sample data can be retrieved by removing the `safeforhall.json` file from `/data`","lastModifiedDate":"2021-11-02"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"VimuthM"},"content":"#### Exiting the program : `exit`","lastModifiedDate":"2021-10-22"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":715,"author":{"gitId":"VimuthM"},"content":"-------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-10-29"},{"lineNumber":716,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":717,"author":{"gitId":"VimuthM"},"content":"## Prefix summary","lastModifiedDate":"2021-10-29"},{"lineNumber":718,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":719,"author":{"gitId":"jaredlhf"},"content":"### Resident Prefix","lastModifiedDate":"2021-11-03"},{"lineNumber":720,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":721,"author":{"gitId":"jaredlhf"},"content":"PREFIX | Description | Usage","lastModifiedDate":"2021-11-03"},{"lineNumber":722,"author":{"gitId":"VimuthM"},"content":"|-------- | ------ | ------","lastModifiedDate":"2021-11-03"},{"lineNumber":723,"author":{"gitId":"jaredlhf"},"content":"`n/` | Name | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":724,"author":{"gitId":"jaredlhf"},"content":"`p/` | Phone number | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":725,"author":{"gitId":"jaredlhf"},"content":"`e/` | Email address | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":726,"author":{"gitId":"jaredlhf"},"content":"`r/` | Room | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":727,"author":{"gitId":"jaredlhf"},"content":"`v/` | Vaccination status | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":728,"author":{"gitId":"jaredlhf"},"content":"`f/` | Faculty | `add`, `edit`, `find`","lastModifiedDate":"2021-11-03"},{"lineNumber":729,"author":{"gitId":"jaredlhf"},"content":"`fd/` | Last FET date | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":730,"author":{"gitId":"jaredlhf"},"content":"`cd/` | Last collection date | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":731,"author":{"gitId":"jaredlhf"},"content":"`k/` | Keyword | `deadline`","lastModifiedDate":"2021-11-03"},{"lineNumber":732,"author":{"gitId":"jaredlhf"},"content":"`d1/` | Date 1 | `deadline`","lastModifiedDate":"2021-11-03"},{"lineNumber":733,"author":{"gitId":"jaredlhf"},"content":"`d2/` | Date 2 | `deadline`","lastModifiedDate":"2021-11-03"},{"lineNumber":734,"author":{"gitId":"jaredlhf"},"content":"`r/` | Resident | `trace`","lastModifiedDate":"2021-11-03"},{"lineNumber":735,"author":{"gitId":"jaredlhf"},"content":"`d/` | Depth | `trace`","lastModifiedDate":"2021-11-03"},{"lineNumber":736,"author":{"gitId":"jaredlhf"},"content":"`t/` | Duration | `trace`","lastModifiedDate":"2021-11-03"},{"lineNumber":737,"author":{"gitId":"jaredlhf"},"content":"`by/` | Field | `sort`","lastModifiedDate":"2021-11-03"},{"lineNumber":738,"author":{"gitId":"jaredlhf"},"content":"`o/` | Order | `sort`","lastModifiedDate":"2021-11-03"},{"lineNumber":739,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":740,"author":{"gitId":"jaredlhf"},"content":"### Event Prefix","lastModifiedDate":"2021-11-03"},{"lineNumber":741,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":742,"author":{"gitId":"jaredlhf"},"content":"PREFIX | Description | Usage","lastModifiedDate":"2021-11-03"},{"lineNumber":743,"author":{"gitId":"VimuthM"},"content":"|-------- | ------ | ------","lastModifiedDate":"2021-11-03"},{"lineNumber":744,"author":{"gitId":"jaredlhf"},"content":"`n/` | Name | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":745,"author":{"gitId":"jaredlhf"},"content":"`v/` | Venue | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":746,"author":{"gitId":"jaredlhf"},"content":"`c/` | Capacity | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":747,"author":{"gitId":"jaredlhf"},"content":"`d/` | Date | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":748,"author":{"gitId":"jaredlhf"},"content":"`t/` | Time | `add`, `edit`","lastModifiedDate":"2021-11-03"},{"lineNumber":749,"author":{"gitId":"jaredlhf"},"content":"`r/` | Residents | `add`, `include`, `exclude`","lastModifiedDate":"2021-11-03"},{"lineNumber":750,"author":{"gitId":"jaredlhf"},"content":"`by/` | Field | `sort`","lastModifiedDate":"2021-11-03"},{"lineNumber":751,"author":{"gitId":"jaredlhf"},"content":"`o/` | Order | `sort`","lastModifiedDate":"2021-11-03"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":753,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"gordonlzy"},"content":"### Resident Commands","lastModifiedDate":"2021-11-02"},{"lineNumber":757,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":758,"author":{"gitId":"gordonlzy"},"content":"Command | Format | Examples","lastModifiedDate":"2021-11-02"},{"lineNumber":759,"author":{"gitId":"gordonlzy"},"content":"|--------|-------|----------","lastModifiedDate":"2021-11-03"},{"lineNumber":760,"author":{"gitId":"gordonlzy"},"content":"**Add** |  `add n/NAME p/PHONE_NUMBER e/EMAIL r/ROOM v/VACCINATION_STATUS f/FACULTY [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]` | `add n/Betsy Crowe e/betsyc@example.com v/F r/B400 p/1234567 f/FASS fd/20-10-2021 cd/23-10-2021`","lastModifiedDate":"2021-11-02"},{"lineNumber":761,"author":{"gitId":"gordonlzy"},"content":"**View** | `view [INDEX]`| `view 30`","lastModifiedDate":"2021-11-02"},{"lineNumber":762,"author":{"gitId":"gordonlzy"},"content":"**Deadline** | `deadline k/KEYWORD d1/DATE1 d2/DATE` or\u003cbr\u003e`deadline k/LATE_KEYWORD d1/DATE1` | `deadline k/f d1/15-08-2021 d2/20-08-2021` or\u003cbr\u003e`deadline k/lf d1/15-08-2021`","lastModifiedDate":"2021-11-08"},{"lineNumber":763,"author":{"gitId":"gordonlzy"},"content":"**Find** | `find [PREFIX/KEYWORD]...` | `find n/john alex v/false f/fass` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":764,"author":{"gitId":"gordonlzy"},"content":"**Edit** | `edit INDEXâ€¦ [FLAG/UPDATED_PARTICULARS]â€¦` | `edit 1 2 3 v/true fd/20-10-2021` \u003cbr\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":765,"author":{"gitId":"gordonlzy"},"content":"**Delete** | `delete INDEXâ€¦` | `delete 1 2 3`","lastModifiedDate":"2021-11-02"},{"lineNumber":766,"author":{"gitId":"gordonlzy"},"content":"**Trace** | `trace r/RESIDENT [d/DEPTH] [t/DURATION]` | `trace r/D201 d/2 t/4`","lastModifiedDate":"2021-11-02"},{"lineNumber":767,"author":{"gitId":"jaredlhf"},"content":"**Sort** | `sort by/FIELD o/ORDER` | `sort by/n o/a`","lastModifiedDate":"2021-11-03"},{"lineNumber":768,"author":{"gitId":"gordonlzy"},"content":"**Import** | `import CSV_NAME` | `import safeforhall`","lastModifiedDate":"2021-11-02"},{"lineNumber":769,"author":{"gitId":"gordonlzy"},"content":"**Export** | `export FILE_NAME` | `export closeContactsOfA123`","lastModifiedDate":"2021-11-02"},{"lineNumber":770,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":771,"author":{"gitId":"gordonlzy"},"content":"### Event Commands","lastModifiedDate":"2021-11-02"},{"lineNumber":772,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":773,"author":{"gitId":"gordonlzy"},"content":"Command | Format | Examples","lastModifiedDate":"2021-11-02"},{"lineNumber":774,"author":{"gitId":"gordonlzy"},"content":"|--------|-------|----------","lastModifiedDate":"2021-11-03"},{"lineNumber":775,"author":{"gitId":"gordonlzy"},"content":"**Add** |  `add n/EVENT_NAME v/VENUE c/CAPACITY d/DATE t/TIME [r/RESIDENTS]` | `add n/Frisbee v/MPSH c/15 d/30/10/2021 t/1500 r/E201`","lastModifiedDate":"2021-11-08"},{"lineNumber":776,"author":{"gitId":"gordonlzy"},"content":"**View** | `view [INDEX]`| `view 30`","lastModifiedDate":"2021-11-02"},{"lineNumber":777,"author":{"gitId":"gordonlzy"},"content":"**Find** | `find [PREFIX/KEYWORD]...` | `find n/Swim d/28-10-2021`","lastModifiedDate":"2021-11-02"},{"lineNumber":778,"author":{"gitId":"gordonlzy"},"content":"**Edit** | `edit INDEX [FLAG/UPDATED_PARTICULARS]â€¦` | `edit 1 n/Football Training l/Field`","lastModifiedDate":"2021-11-02"},{"lineNumber":779,"author":{"gitId":"gordonlzy"},"content":"**Delete** | `delete INDEXâ€¦` | `delete 1 2 3`","lastModifiedDate":"2021-11-02"},{"lineNumber":780,"author":{"gitId":"gordonlzy"},"content":"**Include** | `include INDEX r/RESIDENTS` | `include 1 r/A102, E416`","lastModifiedDate":"2021-11-04"},{"lineNumber":781,"author":{"gitId":"gordonlzy"},"content":"**Exclude** | `exclude INDEX r/RESIDENTS` | `exclude 1 r/A102, E416`","lastModifiedDate":"2021-11-04"},{"lineNumber":782,"author":{"gitId":"jaredlhf"},"content":"**Sort** | `sort by/FIELD o/ORDER` | `sort by/c o/d`","lastModifiedDate":"2021-11-03"},{"lineNumber":783,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":784,"author":{"gitId":"gordonlzy"},"content":"### Commons","lastModifiedDate":"2021-11-02"},{"lineNumber":785,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":786,"author":{"gitId":"gordonlzy"},"content":"Command | Format","lastModifiedDate":"2021-11-08"},{"lineNumber":787,"author":{"gitId":"gordonlzy"},"content":"|--------|-------","lastModifiedDate":"2021-11-08"},{"lineNumber":788,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":789,"author":{"gitId":"gordonlzy"},"content":"**Switch** | `switch`","lastModifiedDate":"2021-11-02"},{"lineNumber":790,"author":{"gitId":"gordonlzy"},"content":"**Clear** | `clear`","lastModifiedDate":"2021-11-02"},{"lineNumber":791,"author":{"gitId":"VimuthM"},"content":"**Exit** | `exit`","lastModifiedDate":"2021-09-21"},{"lineNumber":792,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"rebeccalaujx":133,"chongjunwei":57,"gordonlzy":131,"-":138,"VimuthM":191,"jaredlhf":142}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"VimuthM"},"content":"    content: \"SafeFor(H)All\";","lastModifiedDate":"2021-11-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"-":294,"VimuthM":1}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-05-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"Package Person \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"Class Room","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"Class Email","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"Class Faculty","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"Class VaccStatus","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"Class LastDate","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"Package Event \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"Class UniqueEventList","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"Class Event","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"Class EventName","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"Class EventTime","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"Class EventDate","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"Class Venue","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"Class Capacity","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"Class ResidentList","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e\"~*all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"Person *--\u003e Room","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"Person *--\u003e Faculty","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"Person *--\u003e VaccStatus","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"Person *--\u003e \"0..2\"LastDate","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"AddressBook *--\u003e \"1\" UniqueEventList","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"UniqueEventList --\u003e\"~*all\" Event","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e EventName","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e EventDate","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e EventTime","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e Venue","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e Capacity","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"Event *--\u003e ResidentList","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"Event -[hidden]right-\u003e Person","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"Phone -[hidden]right-\u003e Room","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"Room -[hidden]down-\u003e Email","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"Email -[hidden]right-\u003e Faculty","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"Faculty -[hidden]right-\u003e VaccStatus","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"VaccStatus -[hidden]right-\u003e LastDate","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"EventName -[hidden]right-\u003e EventDate","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"EventDate -[hidden]right-\u003e Venue","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"Venue -[hidden]right-\u003e Capacity","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"Capacity -[hidden]down-\u003e ResidentList","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~*filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"ModelManager --\u003e\"~*filtered\" Event","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"ResidentList -\u003e\"~*\" Person","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":47,"jaredlhf":45}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"Class JsonAdaptedEvent","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedEvent","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"gordonlzy":2,"-":41}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"Class EventListPanel","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"Class EventCard","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"MainWindow *-down-\u003e \"1\" EventListPanel","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"EventListPanel -down--\u003e \"*\" EventCard","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"EventListPanel --|\u003e UiPart","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"EventCard -|\u003e UiPart","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"EventCard .\u003e Model","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"EventListPanel -[hidden]left- PersonListPanel","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":60,"jaredlhf":9}},{"path":"docs/diagrams/logic/commands/addcommand/AddActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"start","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":":App executes add command;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"if () then ([Residents tab])","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"    :Creates new Person object;","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"    if () then ([duplicate person])","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"        :App shows error message;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    else ([else])","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"        :Adds Person to AddressBook;","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"        :App shows success message;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    endif","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"else([Events tab])","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    :Creates new Event object;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    if () then ([duplicate event])","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"        :App shows error message;","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    else ([else])","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"        :Adds Event to AddressBook;","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"        :App shows success message;","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"endif","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"endif","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"stop","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"jaredlhf":26}},{"path":"docs/diagrams/logic/commands/deletecommand/DeleteActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"@startuml","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"start","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":":App executes Delete command;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":": Validate user input;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"if () then ([Invalid command format])","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"    : App shows error message;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"else ([else])","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":" if () then ([Residents tab])","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"        :Deletes Resident object;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"        if () then ([Invalid resident index])","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"            :App shows error message;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"        else ([else])","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"            :Deletes Resident;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"            :App shows success message;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"        endif","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    else([Events tab])","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"        :Deletes Event object;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"        if () then ([Invalid event index])","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"            :App shows error message;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"        else ([else])","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            :Deletes Event;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"            :App shows success message;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"endif","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"endif","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"endif","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"stop","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"@enduml","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"chongjunwei":28}},{"path":"docs/diagrams/logic/commands/editcommand/EditActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"@startuml","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"start","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":":App executes EditPerson command;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":":Parse user input;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"    if () then ([invalid index])","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"        :App shows error message;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"    elseif () then ([empty description])","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"        :App shows error message;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"    else ([else])","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"        :User input parsed successfully;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"if () then ([duplicate person])","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    :App shows error message;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"else ([else])","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    :Resident details are updated;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    :App shows success message;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"endif","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"endif","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"stop","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"@enduml","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"rebeccalaujx":23}},{"path":"docs/diagrams/logic/commands/findcommand/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"start","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":":App executes FindPerson command;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":":Parse user input;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"    if () then ([any invalid parameter])","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"        :App shows error message;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"    else ([else])","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"        :User input parsed successfully;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"        :FindCompositePredicate object created;","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"if () then ([no filtering predicate])","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    :App shows error message;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"else ([else])","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    :Resident details are updated;","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    :App shows success message;","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"endif","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"endif","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"stop","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"VimuthM":22}},{"path":"docs/diagrams/logic/commands/findcommand/FindCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"@startuml","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"!include ../../../style.puml","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"participant \":FindCommand\" as FindCommand LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"end box","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"[-\u003e LogicManager : execute(\"find v/t\")","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"activate LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"find v/t\")","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"activate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"AddressBookParser -\u003e AddressBookParser : parseResidentCommand(\"find\", \"v/t\")","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"create FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"AddressBookParser -\u003e FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"activate FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"FindCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"AddressBookParser -\u003e FindCommandParser : parse(\"v/t\")","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"activate FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"create FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"FindCommandParser -\u003e FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"activate FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"FindCommand --\u003e FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"deactivate FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"FindCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"deactivate FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"FindCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"destroy FindCommandParser","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"AddressBookParser --\u003e LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"LogicManager -\u003e FindCommand : execute()","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"activate FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"FindCommand -\u003e Model : updateFilteredPersonList(c)","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"activate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"Model --\u003e FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"deactivate Model","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"create CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"FindCommand -\u003e CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"activate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"CommandResult --\u003e FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"deactivate CommandResult","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"FindCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"deactivate FindCommand","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"@enduml","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"VimuthM":73}},{"path":"docs/diagrams/logic/commands/includecommand/FindPersonActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"start","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":":findPerson(information) method gets called;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"if () then ([valid Room])","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    :Find a person whose room match information;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    if () then ([Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"        :Return person;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    else ([Not Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"        :Return Empty;","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    endif","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"else([invalid Room])","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"if () then ([valid Name])","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    :Find a person whose name match information;","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    if () then ([Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        :Return person;","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    else ([Not Found])","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        :Return Empty;","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    endif","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"else ([invalid Name])","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"stop","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":27}},{"path":"docs/diagrams/logic/commands/includecommand/IncludeCommandActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"start","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":":User executes command;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"if () then ([there are valid residents to add])","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    :Create display and storage Strings of current and toAdd Residents;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    :Create a new edited Event;","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    :Save editedEvent to addressBook;","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    :Update filteredEventList;","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"else ([no resident to add])","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"endif","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"stop","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":16}},{"path":"docs/diagrams/logic/commands/includecommand/IncludeCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"@startuml","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"!include ../../../style.puml","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"participant \"i:IncludeCommand\" as IncludeCommand LOGIC_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"end box","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"participant \"current:Event\" as currEvent MODEL_COLOR","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"end box","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"activate LogicManager","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"LogicManager -\u003e IncludeCommand : execute()","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"activate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : getFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand : eventList","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : toPersonList()","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand : toAdd","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand --\u003e IncludeCommand : createEditedEvent(current, toAdd)","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"activate IncludeCommand","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e currEvent : getCombinedDisplayString(toAdd)","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"activate currEvent","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"return displayString","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e currEvent : getCombinedStorageString(toAdd)","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"activate currEvent","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"return storageString","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"return editedEvent","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : setEvent(current, editedEvent)","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -\u003e Model : updateFilteredEventList()","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"activate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"Model --\u003e IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"deactivate Model","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand --\u003e LogicManager : result","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"deactivate IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"IncludeCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"destroy IncludeCommand","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"deactivate LogicManager","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"@enduml","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"gordonlzy":63}},{"path":"docs/diagrams/logic/commands/viewcommand/ViewPersonCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"@startuml","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"!include ../../../style.puml","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"box Ui UI_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"participant \":MainWindow\" as MainWindow UI_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"participant \":ViewCommand\" as ViewCommand LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"participant \"current:Person\" as currPerson MODEL_COLOR","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"end box","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"activate MainWindow","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"MainWindow -\u003e LogicManager : getSinglePerson()","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"activate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"[-\u003e LogicManager : execute(\"view 1\")","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"create ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"note over LogicManager, ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"  The lower-level parsing details have been omitted","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"end note","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"LogicManager -\u003e ViewCommand : execute(:Model)","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"activate ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"ViewCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"activate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"Model -\u003e AddressBook : getFilteredPersonList()","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"activate AddressBook","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"AddressBook --\u003e Model :","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"deactivate AddressBook","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"Model --\u003e ViewCommand : filteredPersonList","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"deactivate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"create currPerson","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"ViewCommand -\u003e currPerson : filteredPersonList.get(0)","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"activate currPerson","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"currPerson --\u003e ViewCommand : personToShow","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"deactivate currPerson","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"ViewCommand -\u003e Model : setSinglePerson(personToShow)","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"activate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"Model --\u003e ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"deactivate Model","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"create CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"ViewCommand -\u003e CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"activate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"CommandResult --\u003e ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"deactivate CommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"ViewCommand --\u003e LogicManager : viewCommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"deactivate ViewCommand","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"LogicManager --\u003e MainWindow : viewCommandResult","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"deactivate LogicManager","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"[\u003c--MainWindow","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"deactivate MainWindow","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"@enduml","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"rebeccalaujx":78}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"title: SafeFor(H)All app","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"[![CI Status](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2122S1-CS2103T-T15-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp/branch/master/graph/badge.svg?token\u003dALPAMIBNHM)](https://codecov.io/gh/AY2122S1-CS2103T-T15-4/tp)","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"**SafeFor(H)All is a desktop application for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"* If you are interested in using SafeFor(H)All, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"* If you are interested about developing SafeFor(H)All, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":6,"-":14}},{"path":"docs/team/chongjunwei.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"layout: page","lastModifiedDate":"2021-09-22"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"title: Jun Wei\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-22"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"---","lastModifiedDate":"2021-09-22"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"### Project: SafeFor(H)All","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 15 kLoC.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"* **Key Contribution**: Created an `Event` model [\\#63](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/63)","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Creates a backbone for which events can be added to the address book along with the associated functionalities, similar to the preexisting `Person` model","lastModifiedDate":"2021-11-04"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product because the `Event` model is one of the core selling points of our product.","lastModifiedDate":"2021-11-04"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"  * Credits: Some parts of the model were refactored from the preexisting `Person` model","lastModifiedDate":"2021-11-04"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"  ","lastModifiedDate":"2021-09-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added `add` command for events [\\#63](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/63)","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Allows the user to add events","lastModifiedDate":"2021-11-04"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product because the user can utilise the CLI to add events with ease, similar to the add person command in the `Person` model","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added `find` command for events [\\#135](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/135)","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Allows the user to find events matching the given parameter(s) (eg `capacity \u003d 5`)","lastModifiedDate":"2021-11-04"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product significantly because the user can find the desired events matching the given","lastModifiedDate":"2021-11-04"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"  parameter(s) with ease","lastModifiedDate":"2021-11-04"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added `delete` command for events [\\#88](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/88)","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Allows the user to delete events","lastModifiedDate":"2021-11-04"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product because the user can utilise the CLI to delete unwanted events","lastModifiedDate":"2021-11-04"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"  * Credit: This command was created by adapting the `delete` command in the `Person` model.","lastModifiedDate":"2021-11-04"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    ","lastModifiedDate":"2021-11-04"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added `view` command for residents [\\#49](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/49)","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Allows the user to view a numbered list of all the residents in the address book","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product because the user can utilise the CLI to quickly view all the residents in the address book","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"* **New Feature**: Added `switch` command [\\#136](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/136)","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"  * What it does: Allows the user to switch between Event and Resident tabs","lastModifiedDate":"2021-11-04"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"  * Justification: This feature improves the product because the user can utilise the CLI to quickly switch tabs","lastModifiedDate":"2021-11-04"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"  ","lastModifiedDate":"2021-11-04"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dchongjunwei\u0026tabRepo\u003dAY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-04"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-22"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    * Added `time` field for events [\\#127](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/127)","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    * Wrote tests for Event model [\\#103](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/103)","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"  ","lastModifiedDate":"2021-09-22"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-22"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    * User Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        * Added documentation for the features `delete` and `find` [\\#72](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/72)","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        * Fixed bugs that were reported in the PE-D [\\#237](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/237)","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        * Added an introduction on the app interface [\\#261](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/261)","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-22"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        * Added implementation details of the `view` and `delete` event features [\\#106](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/106), [\\#131](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/131)","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        * Formatting [\\#131](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/131)","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        * Update the glossary [\\#43](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/43), [\\#44](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/44)","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-09-22"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"* **Community**:","lastModifiedDate":"2021-09-22"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#85](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/85), [\\#129](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/129)","lastModifiedDate":"2021-11-04"}],"authorContributionMap":{"chongjunwei":53,"VimuthM":2}},{"path":"docs/team/gordonlzy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"title: Zi Yang\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"### Project: SafeFor(H)All","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 15 kLoC.","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added the ability to list residents by their Fast and Easy Testing(FET) and Test Kit Collection Deadlines.","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"  * What it does: allows the user to list all the residents whose fet or collection is due within a period of time. The user can also list the residents who are late for their fet and collection deadline given a date.","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"  * Justification: This feature allows the residents whose deadline is due or over to be listed to be used for the export function.","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"  * Highlights: This enhancement affects the export feature. It required a good analysis of the existing model classes. The implementation is moderately difficult as there many new classes and tests that had to be written.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added the ability to add multiple residents to an event.","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"  * What it does: allows the user to add multiple residents to an event at a time. The user can choose to add the residents by their names or rooms.","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"  * Justification: This feature is the main building block to allow residents to be traced by their events they attended.","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"  * Highlights: This enhancement affects the trace command. The feature stores multiple data in a field, so it required an in-depth analysis of json storage alternatives and storage classes. The difficulty of this implementation arises from the conversion multiple residents data in String to Person class and vice versa.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added the ability to remove multiple residents from an event.","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"  * What it does: allows the user to remove multiple residents from an event at a time. The user can choose to add the residents by their names or rooms.","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"  * Justification: This feature complements the include feature to allow the user to remove the users from an event if they added them by mistake or the residents themselves decide to not participate in an evnet","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"  * Highlights: This enhancement builds on top of include feature, with an existing design, this enhancement is easier than the last.","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"* **New Feature**: Added a command suggestion that suggests a command\u0027s parameters.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"  * What it does: allows the user to look at the parameters as they type without having to refer to user guide. The parameters that are correctly typed are removed from the suggestion bar as the user types.","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"  * Justification: This feature improves the user experience by making reminding users the parameters of a command and flattens the learning curve of the application.","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"  * Highlights: This enhancement is used by all commands implemented. It required an in-depth analysis of event handling. The implementation was challenging as the feature had to handle many cases of user input and there are changes to the UI part.","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dgordonlzy\u0026tabRepo\u003dAY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"* **Project management**:","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"  * Managed [releases](https://github.com/AY2122S1-CS2103T-T15-4/tp/releases) `v1.4` on GitHub","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"  * Refactored `list` to `deadline` to better suit its function name [PR #122](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/122)","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"  * Implemented storage of multiple residents in a string and extract them [PR #128](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/128)","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"  * Contributions to testing:","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    * Added ~1.4 kLoC in total for testing","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"    * Created new test utils, `TypicalEvents` and `EventBuilder`, for `Event` class","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"  * Contributions to the UI:","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    * Showed the number of days a resident is late for FET [PR #59](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/59)","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    * Came up with a Figma mockup for the UI design [Figma](https://www.figma.com/file/Xt0MjUdFjvB438sHOwurRm/safeforhall?node-id\u003d0%3A1)","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    * Revamped original GUI color scheme to better fit the UI mockup [PR #149](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/149)","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    * Added documentation for `list`(now `deadline`) and `include` [PR #93](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/93)","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    * Added documentation for `exclude` and `command suggestion` [PR #152](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/152)","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    * Did cosmetic tweaks to existing documentation of command summary: [PR #228](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/228)","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    * Added annotated diagrams for `deadline`, `include` and `exclude`[PR #261](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/261).","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    * Updated target user profile [PR #21](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/21).","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    * Added implementation details of the `include` feature [PR #94](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/94).","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    * Added manual testing for `include`, `exclude` and `deadline` [PR #260](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/260).","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    * Added use cases for `include`, `exclude` and `deadline` [PR #260](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/260).","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    * Updated storage uml diagram [PR #260](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/260).","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"  * PRs reviewed (with non-trivial review comments): [PR #63](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/63), [PR #145](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/145), [PR #146](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/146), [PR #151](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/151)","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"  * Reported [bugs and suggestions](https://github.com/gordonlzy/ped/issues) for other teams in the class.","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"gordonlzy":42,"-":19,"VimuthM":2}},{"path":"docs/team/jaredlhf.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"layout: page","lastModifiedDate":"2021-09-21"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"title: Jared\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-21"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"---","lastModifiedDate":"2021-09-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"### Project: SafeFor(H)All","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 15 kLoC.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-21"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"* **New Feature**: Added the ability to sort residents and events","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"  * What it does: allows the user to sort residents by any field and order without modifying the original order of the list, `view` command also reverts list to original ordering.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"  * Justification: This feature improves the product significantly because the hall admin can now view the residents or events in an organised manner. E.g. being able to sort events by date and time allows the admin to view the events chronologically.","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"  * Highlights: This feature required an understanding of ObservableList and SortedList. It was challenging to ensure that the original ordering was not modified and straightforward one-way sorting implementations had to be avoided. Individual fields also had to be comparable.","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"* **New Feature**: Added the ability to export the list of email addresses into a csv file","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"  * What it does: allows the user to have easy access to the list of email addresses of the residents currently displayed in the application.","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"  * Justification: This feature improves the use case of the product as hall admins can easily contact the residents they wish. They can simply `find` to get a filtered list of residents and `export` to view these email addresses in a csv file. They can then copy and paste these addresses into an email client to send their desired email.","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"  * Highlights: This feature required the use of a file writer, which involved utilising the opencsv library previously used in the `export` command.","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"  * Credits: [opencsv](http://opencsv.sourceforge.net/), was used to aid the writing of csv files.","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"* **New Feature**: Added the ability to view events","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"  * What it does: allows the user to view the original unfiltered list of events in the `Event` tab","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"  * Justification: This feature was necessary for hall admins to view the original list after commands such as `find` and `sort` are executed.","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"  * Credits: The code written was adapted from `view` in the original AB3.","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003djared\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003djaredlhf\u0026tabRepo\u003dAY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-21"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"  * Feature","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    * Allow `add` to add residents with more fields such as room, vaccination, faculty and optional fields `FET_DATE` and `COLLECTION_DATE` [\\#48](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/48)","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"  * UI","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    * Added tabs to separate `Event` and `Resident` into two tabs [\\#76](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/76)","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    * Added GUI visualisation of events [\\#76](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/76)","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    * Relocate command box and result box to bottom of GUI [\\#76](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/76)","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    * Highlights any past events with grey colored border or red if event contains non-vaccinated residents [\\#96](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/96)","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    * Displays number of non-vaccinated residents on event card GUI [\\#96](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/96)","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"  * Testing","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"    * Wrote additional tests for storage component to increase coverage of entire code base by 3% [\\#125](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/125)","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    * Added testing in `PaserUtil` for new fields and `add`, `sort`, `export` commands [\\#48](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/48), [\\#234](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/234), [\\#146](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/146)","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-21"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"  * User Guide:","lastModifiedDate":"2021-09-21"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    * Added documentation for the features `add` and `sort` [\\#95](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/95), [\\#156](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/156), [\\#254](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/254)","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    * Reformat `Command Format` section: [\\#254](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/254)","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"  * Developer Guide:","lastModifiedDate":"2021-09-21"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    * Added implementation details of the `add` feature [\\#99](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/99)","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    * Added Use Cases of project [\\#41](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/41), [\\#260](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/260)","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    * Update UML diagrams for `model` and `UI` components [\\#107](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/107)","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    * Added manual testing instructions for `add`, `sort`, `export`, `view` [\\#260](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/260)","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-09-21"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"* **Community**:","lastModifiedDate":"2021-09-21"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#45](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/45), [\\#85](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/85), [\\#128](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/128), [\\#130](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/130)","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"  * Reported [bugs and suggestions](https://github.com/jaredlhf/ped/issues) for other teams in the class","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"VimuthM":2,"jaredlhf":55}},{"path":"docs/team/rebeccalaujx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"layout: page","lastModifiedDate":"2021-09-23"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"title: Rebecca\u0027s Project Portfolio Page","lastModifiedDate":"2021-09-23"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"---","lastModifiedDate":"2021-09-23"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"### Project: SafeFor(H)All","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 15 kLoC.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-23"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"* **New Feature**: Modify `view` command to view more Resident/ Event details.","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"  * What it does: This feature allows the user to use `view` to see additional the Resident/ Event details in a sidebar when the user inputs the index of the specified event. Otherwise, it can be used to view the entire list of Residents/ Events when its index parameters are removed.","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"  * Justification: This feature improves the product significantly because having all the information in the main panel takes up a lot of space, making the app less user-friendly. This feature allows the user to retrieve the less commonly required information only if he/ she wants to.","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"  * Highlights: This feature required a split screen feature in the UI, using 2 panels to split up the main and additional information.","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"* **New Feature**: Added a mass operations function to the `edit` resident feature. ","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"    * What it does: This feature allows the user to edit the details of multiple residents in a single command, by inputting the residents\u0027 respective indexes.","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    * Justification: This feature improves the product significantly because a user might want to update multiple residents\u0027 details, such as their vaccination statuses or last FET dates, all in a single command.","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"* **New Feature**: Added a mass operations function to the `delete` resident feature.","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"  * What it does: This feature allows the user to delete multiple residents in a single command, by inputting the residents\u0027 respective indexes.","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"  * Justification: This feature improves the product significantly because a user might want to delete multiple residents at a time, instead of inputting a new command line every time the user wants to delete a single resident.","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"* **New Feature**: Added the `edit` feature for events.","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"  * What it does: This feature allows the user to edit event details.","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"  * Justification: This feature improves the product since the user might want to update certain fields in an event given any changes.","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"  * Credits: The code written was adapted from the original AB3.","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003drebeccalaujx\u0026tabRepo\u003dAY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    * Wrote tests for the AddEvent, EditEvent, DeleteEvent, EditPerson, and Switch commands and parsers (PRs: [\\#231](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/231), [\\#81](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/81))","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"    * Modified the help guide to include a summary of the command formats, and a hyperlink to our user guide for more information (PRs: [\\#141](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/141), [\\#246](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/246))","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    * Designed the UI mockup for SafeFor(H)All using [Figma](https://www.figma.com/file/Xt0MjUdFjvB438sHOwurRm/safeforhall?node-id\u003d0%3A1)","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"* **Project management**:","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    * Opened issues that addressed bugs (Issues: [\\#233](https://github.com/AY2122S1-CS2103T-T15-4/tp/issues/252), [\\#242](https://github.com/AY2122S1-CS2103T-T15-4/tp/issues/242), [\\#86](https://github.com/AY2122S1-CS2103T-T15-4/tp/issues/86))","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    * Reviewed and approved team members\u0027 PRs for merging (more details in the **Community** section)","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-23"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    * User Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        * Added documentation for the features `edit` and `delete` for both Resident and Event models (PRs: [\\#19](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/19), [\\#31](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/31), [\\#233](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/233))","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        * Fixed the bugs that were reported in the PE-D (PRs: [\\#233](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/233))","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-23"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        * Added and categorised user stories by epics (PRs: [\\#36](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/36), [\\#101](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/101))","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        * Added implementation details of the `edit` and `view` features (PRs: [\\#134](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/134))","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-09-23"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"* **Community**:","lastModifiedDate":"2021-09-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    * PRs reviewed (with non-trivial review comments): (PRs: [\\#127](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/127), [\\#132](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/132), [\\#140](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/140), [\\#80](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/80))","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    ","lastModifiedDate":"2021-09-23"}],"authorContributionMap":{"rebeccalaujx":28,"gordonlzy":20,"VimuthM":2}},{"path":"docs/team/vimuthm.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"layout: page","lastModifiedDate":"2021-09-20"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"title: Vimuth\u0027s Project Portfolio Page","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"---","lastModifiedDate":"2021-09-20"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"### Project: SafeFor(H)All","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"SafeFor(H)All is a desktop app for hall admins to keep track of hall residentsâ€™ information to keep hall residents safe during the COVID-19 pandemic via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 15 kLoC.","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-09-20"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"* **Key contribution**: Refactored the AB3 codebase to the context of SafeFor(H)All [#45](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/45)","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    * Changed package name from `seedu.address` to `safeforhall`","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    * Enhanced the `Person` model to fit that of a resident","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    * Updated the ui to show all details of a resident","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    * Updated storage for residents and added testing for all new files","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"* **New Feature**: Added the ability to contact trace residents","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    * What it does:","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        * Allows the user to get a list of all residents a given resident has been in contact with.","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"      This is done using information provided by the events data. The user is free to specify how far back to trace (number of days) as well as the depth which indicates if contacts are simply immediate contacts (depth 1) or contacts of contacts (depth 2, 3...)","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    * Justification:","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        * This feature adds significant value to the product and is strongly in line with the value proposition. It provides the admin with an easy way to find all close contacts in case of a positive case.","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    * Highlights:","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        * This enhancement required working with the model to access the list of events. There was a need for a good understanding of the design structure to not breaking existing abstraction and design. It was fun and challenging to implement the depth and duration restrictions.","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"* **New Feature**: Added the ability to import data from a csv","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    * What it does:","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        * Allows the user to mass import resident data from a provided csv file. This replaces the existing resident data provided no errors were raised while reading and creating `Person` objects. All resident lists of each event is then wiped to remove dependencies to old residents.","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    * Justification:","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        * This feature greatly improves the transition from an admins existing workflow to our product. It removes the need for entry of countless tedious add commands and improves the user experience.","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    * Highlights:","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        * This enhancement required thorough reading of the opencsv documentation. It required a number of decisions to be taken where I had to balance usabilty vs complicated implementations.","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    * Credits: The third part library, [opencsv](http://opencsv.sourceforge.net/), was used to ease the reading of csv files.","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"* **New Feature**: Added the ability to traverse the history of command inputs","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"  * What it does:","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    * Allows the user to use the up and down arrow keys when the command box is in focus, to traverse their past command line inputs. There is no hard limit on how many inputs are stored but there is no persistence after exiting the app.","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"  * Justification:","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    * This feature really adds to the ease of use of the application. Since long commands are tedious to type but have a higher chance of being similar, and taking into account repetitive commands, this feature drastically reduces time waste and enhances the user experience.","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"  * Highlights:","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    * This enhancement interacts mostly with the ui and required an understanding of how to send updates to it. Adding event handlers, resetting the text and even moving the cursor to the rightmost end of the text, were interesting and exciting tasks.","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-09-20"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"  * Enhanced the `find` feature to allow filtering by any provided parameter [\\#53](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/53)","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"      * What it does:","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"          * Allows the user to filter by other variables such as vaccination, faculty, email in addition to name.","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"      * Justification:","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"          * This significantly increases the usability of the `find` feature. In the context of the app, there\u0027s a need to be able to filter by vaccination status, different blocks, levels and faculties for the admin to disemminate information to the right students.","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"  * Implement tab-specific behaviour of the same command keyword [\\#80](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/80)","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"  * Contributions to the UI:","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"      * Show vaccinated icons next to such residents [\\#61](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/61)","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"      * Highlight residents in red when their FET\u0027s are due [\\#61](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/61)","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"      * Make tabs resizable [\\#149](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/149)","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"      * Create the left icon bar [\\#129](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/129)","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"  * Contributions to testing:","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"      * Added 100% coverage for the `Person` model [\\#142](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/142)","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"      * Added testing for the `find`, `trace` and `import` features","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"      * Added ~2 kLoC in total for testing","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dVimuthM\u0026tabRepo\u003dAY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipSortBy\u003dlineOfCode)","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"* **Project management**:","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    * Set up the GitHub team org/repo and tools such as CodeCov and Gradle","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"    * Did work related to renaming the product and changing the product icon","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"    * Delegated work and issues and managed the issue tracker throughout","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    * Managed [releases](https://github.com/AY2122S1-CS2103T-T15-4/tp/releases) `v1.2`, `v1.3.trial`, `v1.3` and `v.1.3.1` (4 releases) on GitHub","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"* **Documentation**:","lastModifiedDate":"2021-09-20"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    * User Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        * Added documentation for `find` [\\#98](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/98)","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        * Segment UG to resident features, event features and commons [\\#98](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/98)","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        * Added documentation for `trace`, `import` and `export` [\\#154](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/154)","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"        * Added a section on introducing the ui and included screenshots [\\#154](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/154)","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"    * Developer Guide:","lastModifiedDate":"2021-09-20"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        * Added implementation details of the `find` feature [\\#97](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/97)","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        * Added list of non-functional requirements, use cases and manual testing [\\#26](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/26)","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"* **Community**:","lastModifiedDate":"2021-09-20"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#85](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/85), [\\#81](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/81), [\\#62](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/62), [\\#57](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/57), [\\#51](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/51)","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    * Contributed to [forum](https://nus-cs2103-ay2122s1.github.io/dashboards/contents/forum-activities.html#6-dina-ndis-vimuthm-38-posts) discussions (some instances: [1](https://github.com/nus-cs2103-AY2122S1/forum/issues/109#issuecomment-907317863), [2](https://github.com/nus-cs2103-AY2122S1/forum/issues/326#issuecomment-946411200), [3](https://github.com/nus-cs2103-AY2122S1/forum/issues/314#issuecomment-942032282), [4](https://github.com/nus-cs2103-AY2122S1/forum/issues/274#issuecomment-927850889))","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    * Reported [bugs and suggestions](https://github.com/VimuthM/ped/issues) for other teams in the class.","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-09-20"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"* **Tools**:","lastModifiedDate":"2021-09-20"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    * Integrated a third party library, [opencsv](http://opencsv.sourceforge.net/), to the project ([\\#130](https://github.com/AY2122S1-CS2103T-T15-4/tp/pull/130))","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"VimuthM":84}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"import static CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the personâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"Simply add the following to [`PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-10-04"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"Thatâ€™s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBookâ€™s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Letâ€™s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2021-08-01"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":398,"VimuthM":3}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Letâ€™s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"The `address` field in `Person` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Letâ€™s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":111,"VimuthM":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. â€¦â€‹\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEAâ€™s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `Logic`.","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"A quick look at the `Logic` (an extract given below) confirms that this indeed might be what weâ€™re looking for.","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what weâ€™re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now letâ€™s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so letâ€™s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Letâ€™s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Letâ€™s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Letâ€™s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Letâ€™s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":299,"VimuthM":2}},{"path":"src/main/java/safeforhall/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.FileUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"VimuthM":3,"-":61}},{"path":"src/main/java/safeforhall/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"VimuthM":1,"-":24}},{"path":"src/main/java/safeforhall/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Version;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.ConfigUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.LogicManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.util.SampleDataUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.AddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.Storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.StorageManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.UserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.ui.Ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.ui.UiManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SafeFor(H)All ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        storage.createExportsFolder(userPrefs.getExportsFolderPath());","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Data file not found. Will be starting with a sample SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty SafeFor(H)All\");","lastModifiedDate":"2021-10-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"Starting SafeFor(H)All \" + MainApp.VERSION);","lastModifiedDate":"2021-10-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SafeFor(H)All ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-10-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":31,"-":152,"jaredlhf":3}},{"path":"src/main/java/safeforhall/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":62}},{"path":"src/main/java/safeforhall/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"    private static final double DEFAULT_WIDTH \u003d 1000;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":1,"VimuthM":1,"-":77}},{"path":"src/main/java/safeforhall/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    private static final String LOG_FILE \u003d \"safeforhall.log\";","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":110}},{"path":"src/main/java/safeforhall/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":1,"VimuthM":1,"-":11}},{"path":"src/main/java/safeforhall/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":115}},{"path":"src/main/java/safeforhall/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core.index;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"VimuthM":1,"-":53}},{"path":"src/main/java/safeforhall/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":10}},{"path":"src/main/java/safeforhall/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":1,"-":20}},{"path":"src/main/java/safeforhall/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":2,"-":40}},{"path":"src/main/java/safeforhall/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":1,"-":34}},{"path":"src/main/java/safeforhall/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":3,"-":20}},{"path":"src/main/java/safeforhall/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":82}},{"path":"src/main/java/safeforhall/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":140}},{"path":"src/main/java/safeforhall/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":66}},{"path":"src/main/java/safeforhall/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"     * @param isResidentTab","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    CommandResult execute(String commandText, Boolean isResidentTab) throws CommandException, ParseException;","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    /** Returns the model */","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    Model getModel();","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    /** Returns an unmodifiable view of the selected resident */","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    ObservableList\u003cPerson\u003e getSinglePerson();","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    /** Returns an unmodifiable view of the filtered list of events */","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    /** Returns an unmodifiable view of the selected event */","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    ObservableList\u003cEvent\u003e getSingleEvent();","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rebeccalaujx":6,"chongjunwei":4,"VimuthM":14,"-":41}},{"path":"src/main/java/safeforhall/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.AddressBookParser;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.Storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    public CommandResult execute(String commandText, Boolean isResidentTab) throws CommandException, ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText, isResidentTab);","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"    public Model getModel() {","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        return model;","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"        return model.getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"    public ObservableList\u003cEvent\u003e getSingleEvent() {","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        model.setNoEvent();","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"        return model.getSingleEvent();","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"    public ObservableList\u003cPerson\u003e getSinglePerson() {","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        model.setNoPerson();","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        return model.getSinglePerson();","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rebeccalaujx":12,"chongjunwei":6,"VimuthM":19,"-":67}},{"path":"src/main/java/safeforhall/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":1,"VimuthM":3,"-":20}},{"path":"src/main/java/safeforhall/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":3,"-":17}},{"path":"src/main/java/safeforhall/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    /** The application should switch tabs. */","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    private final boolean switchTab;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    /** The application should","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean switchTab) {","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        this.switchTab \u003d switchTab;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser and switchTab},","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult(String feedbackToUser, boolean switchTab) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        this(feedbackToUser, false, false, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    public boolean isSwitchTab() {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        return switchTab;","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"chongjunwei":20,"VimuthM":1,"-":68}},{"path":"src/main/java/safeforhall/logic/commands/DeadlineCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameMissedDeadlinePredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameNearLastDatePredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":" * Lists all persons whose ART Collection or FET tests are due on the given date if one day is given or due within a","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":" * range of 2 dates if 2 dates are given.","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"k/KEYWORD d1/DATE d2/DATE\";","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists residents whose ART collection or \"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            + \"FET tests are due within the range of the given date or the range of the 2 dates given.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"KEYWORD \"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"DATE \"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE2 + \"DATE \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"f \"","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"30-09-2021 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE2 + \"05-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE_LATE \u003d COMMAND_WORD + \": Lists residents whose ART collection or \"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"            + \"FET tests are due before the given date.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"KEYWORD \"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"DATE \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_KEYWORD + \"lf \"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_DATE1 + \"30-09-2021 \";","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_ART \u003d \"Listed all residents whose ART collections are due on the \"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"            + \"given range of dates\";","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_FET \u003d \"Listed all residents whose FET are due on the given range of \"","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            + \"dates\";","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_MISSED_ART \u003d \"Listed all residents whose ART collections are due \"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"            + \"before the given date\";","lastModifiedDate":"2021-10-11"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS_MISSED_FET \u003d \"Listed all residents whose FET are due before the \"","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"            + \"given date\";","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SECOND_DATE_EARLIER_THAN_FIRST \u003d \"The second date inputted is earlier than \"","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"            + \"the first\";","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_WRONG_KEYWORD \u003d \"Wrong keyword parsed\";","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public static final String ART_KEYWORD \u003d \"c\";","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    public static final String FET_KEYWORD \u003d \"f\";","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    public static final String LATE_ART_KEYWORD \u003d \"lc\";","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    public static final String LATE_FET_KEYWORD \u003d \"lf\";","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    private final Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"     * Creates an DeadlineCommand to add the specified {@code String}","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    public DeadlineCommand(String keyword, LastDate date1) {","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(keyword);","lastModifiedDate":"2021-10-10"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        assert keyword.equals(LATE_FET_KEYWORD) || keyword.equals(LATE_ART_KEYWORD)","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"                || keyword.equals(FET_KEYWORD) || keyword.equals(ART_KEYWORD);","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(LATE_FET_KEYWORD)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameMissedDeadlinePredicate(FET_KEYWORD, date1);","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        } else if (keyword.equals(LATE_ART_KEYWORD)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameMissedDeadlinePredicate(ART_KEYWORD, date1);","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"            this.predicate \u003d new NameNearLastDatePredicate(keyword, date1);","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"     * Creates an DeadlineCommand to add the specified {@code String, LastDate}","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"    public DeadlineCommand(String keyword, LastDate date1, LastDate date2) {","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(keyword);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date1);","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date2);","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        assert keyword.equals(LATE_FET_KEYWORD) || keyword.equals(LATE_ART_KEYWORD)","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"                || keyword.equals(FET_KEYWORD) || keyword.equals(ART_KEYWORD);","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        this.predicate \u003d new NameNearLastDatePredicate(keyword, date1, date2);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        long period \u003d ChronoUnit.DAYS.between(date1.toLocalDate(), date2.toLocalDate());","lastModifiedDate":"2021-10-11"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        if (period \u003c 0) {","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_SECOND_DATE_EARLIER_THAN_FIRST);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        switch (keyword) {","lastModifiedDate":"2021-10-11"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        case ART_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ART);","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        case FET_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_FET);","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        case LATE_ART_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_MISSED_ART);","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        case LATE_FET_KEYWORD:","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"            return new CommandResult(MESSAGE_SUCCESS_MISSED_FET);","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        default:","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_WRONG_KEYWORD);","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof DeadlineCommand // instanceof handles nulls","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date1.equals(((DeadlineCommand) other).date1)","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date2.equals(((DeadlineCommand) other).date2)); // state check","lastModifiedDate":"2021-10-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":113,"chongjunwei":2,"VimuthM":2,"-":14}},{"path":"src/main/java/safeforhall/logic/commands/ExcludeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":" * Removes a resident from an event.","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"public class ExcludeCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"exclude\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"INDEX r/ROOMS/NAMES(COMMA_SEPARATED)\";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes residents from the given event.\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"            + \"INDEX \"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"ROOM/NAME \\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            + \"1 \"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"A101, A102, A103\";","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s removed from event %s\";","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ExcludeCommand.class);","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    private final Index index;","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    private final ResidentList residentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"     * Creates an ExcludeCommand to add the specified {@code EventName} and {@code InformationList}","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"    public ExcludeCommand(Index index, ResidentList residentList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        this.residentList \u003d residentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"     * Checks if there are any person from {@code toAdd} who is already in {@code currentResidents}","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    public void checkAllExists(ArrayList\u003cPerson\u003e toRemove, ArrayList\u003cPerson\u003e currentResidents)","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder names \u003d new StringBuilder();","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        int foundInvalid \u003d (int) toRemove.stream()","lastModifiedDate":"2021-11-05"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                .filter(person -\u003e !currentResidents.contains(person))","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                .count();","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        toRemove.stream()","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"                .filter(person -\u003e !currentResidents.contains(person))","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"                .forEach(person -\u003e names.append(person.getName()).append(\", \"));","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        String invalidNames \u003d names.toString().replaceAll(\", $\", \"\");","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        if (foundInvalid \u003d\u003d 1) {","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(invalidNames + \" is not in this event\");","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        } else if (foundInvalid \u003e 1) {","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(invalidNames + \" are not in this event\");","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        Event event;","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"            event \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"            logger.warning(\"Index given is invalid\");","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"Index given is invalid\");","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        if (residentList.isEmpty()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"No person with this information \u0027\" + residentList.getResidentsDisplay()","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"                    + \"\u0027 could be found\");","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d model.toPersonList(residentList);","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e currentResidents \u003d model.getCurrentEventResidents(event.getResidentList());","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        checkAllExists(toRemove, currentResidents);","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d createEditedEvent(event, toRemove);","lastModifiedDate":"2021-11-05"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        model.setEvent(event, editedEvent);","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        String resultMsg \u003d String.format(MESSAGE_SUCCESS, toRemove.stream()","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"                .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(), event.getEventName());","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        return new CommandResult(resultMsg);","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof ExcludeCommand // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 index.equals(((ExcludeCommand) other).index));","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"     * Creates a new edited {@code Event} with the same fields as the given event, except residents which remove the","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * residents in {@code toRemove} from the current residents","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"    public Event createEditedEvent(Event event, ArrayList\u003cPerson\u003e toRemove) {","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        String combinedDisplayString \u003d event.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"        String combinedStorageString \u003d event.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        return new Event(event.getEventName(), event.getEventDate(), event.getEventTime(),","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"                event.getVenue(), event.getCapacity(), new ResidentList(combinedDisplayString, combinedStorageString));","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"gordonlzy":121}},{"path":"src/main/java/safeforhall/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"gordonlzy":1,"chongjunwei":1,"VimuthM":2,"-":15}},{"path":"src/main/java/safeforhall/logic/commands/ExportCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import java.io.File;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import java.util.List;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import com.opencsv.CSVWriter;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":" * Exports a list of email addresses of the last filtered list of residents as csv file","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"public class ExportCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    public static final String COMMAND_WORD \u003d \"export\";","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    public static final String PARAMETERS \u003d \"FILE_NAME\";","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the current list of residents\u0027\"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"            + \"email addresses into a csv file. \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"            + \"Parameters: \" + PARAMETERS + \"\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"            + \"Example: \" + COMMAND_WORD + \"safeforhall\";","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Exported residents\u0027 email to csv file\";","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_DUPLICATE_FILE_ERROR \u003d \"This filename already exists\";","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Filename should be a single word\";","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    private final String filename;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ExportCommand.class);","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"     * Constructs an ExportCommand.","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"     * @param filename filename of csv to be created.","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    public ExportCommand(String filename) {","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        this.filename \u003d \"data/exports/\" + filename + \".csv\";","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"     * Constructs an ExportCommand for testing.","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"     * @param filename filename of csv to be created.","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public ExportCommand(String filepath, String filename) {","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        this.filename \u003d filepath + filename + \".csv\";","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString[]\u003e emailArr \u003d getEmailArr(filteredPersonList);","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"        writeCsv(emailArr);","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"     * Converts list of persons into arraylist of emails","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"     * @param filteredList the list of persons","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"     * @return arraylist of arrays each containing a email string","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"    public ArrayList\u003cString[]\u003e getEmailArr(List\u003cPerson\u003e filteredList) {","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString[]\u003e emailArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        for (Person p : filteredList) {","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"            String[] email \u003d new String[]{p.getEmail().toString()};","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"            emailArray.add(email);","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        return emailArray;","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"     * Writes information to a specified csv file","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"     * @param content information to be written to csv file","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"    public void writeCsv(ArrayList\u003cString[]\u003e content) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"            File f \u003d new File(filename);","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"            if (f.exists() \u0026\u0026 !f.isDirectory()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"                logger.warning(\"File already exists\");","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_FILE_ERROR);","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"            } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"                CSVWriter writer \u003d new CSVWriter(new FileWriter(filename));","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"                writer.writeAll(content);","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"                writer.close();","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"            logger.warning(\"Issue with file creation\");","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"            throw new CommandException(e.getMessage());","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 this.filename.equals(((ExportCommand) other).filename)); // state check","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"jaredlhf":115}},{"path":"src/main/java/safeforhall/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":1,"chongjunwei":1,"VimuthM":2,"-":17}},{"path":"src/main/java/safeforhall/logic/commands/ImportCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.io.FileReader;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import com.opencsv.CSVReader;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import com.opencsv.exceptions.CsvException;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":" * Imports the csv and replaces the existing address book with the available information","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":" * provided a correctly formatted csv was found at \"/data/\"","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"public class ImportCommand extends Command {","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    public static final String COMMAND_WORD \u003d \"import\";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"CSV_NAME\";","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports resident information from the specified csv \"","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            + \"file located within the /data folder\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            + \"NAME_OF_CSV\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"            + \"safeforhall\\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            + \"Note: \\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"            + \"     1. 8 comma separated values for each row in order; \\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"            + \"             name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"            + \"     2. The first row will be discarded as column headings\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            + \"     3. LastFetDate and LastCollectionDate are optional (can be left as empty space)\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"            + \"     4. Resident lists of all events will be wiped\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"            + PARAMETERS + \"\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"            + \"safeforhall\";","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Imported resident information from csv\";","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Specified csv file was not found within the /data folder.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_ERROR_READING \u003d \"Error reading row %1d: \";","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_INCORRECT_CSV_FORMAT \u003d \"File is in an incorrect csv format\";","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_INCORRECT_FIELDS \u003d \"8 fields of comma separated values not found\";","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_NO_RESIDENTS \u003d \"No resident information was found\";","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENT \u003d \"Duplicate resident information found: \";","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Filename should be a single word\";","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_FILENAME \u003d \"safeforhall\";","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ImportCommand.class);","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    private final Path filepath;","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    private final String filename;","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"     * Constructs an ImportCommand.","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"     * @param filename filename of csv to be read","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"    public ImportCommand(String filename) {","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        this.filename \u003d filename;","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        this.filepath \u003d Paths.get(\"data\", filename + \".csv\");","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"     * Constructs an ImportCommand.","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"     * @param path path of csv to be read","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"    public ImportCommand(Path path) {","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        this.filename \u003d DEFAULT_FILENAME;","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        this.filepath \u003d path;","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        AddressBook newAddressBook \u003d readCsv();","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        if (newAddressBook.getPersonList().isEmpty()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"            logger.warning(\"Unable to read a single valid resident: Importing aborted!\");","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_NO_RESIDENTS);","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        List\u003cEvent\u003e eventList \u003d model.getAddressBook().getEventList();","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e eventListRemovedResidents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        for (Event event: eventList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"            Event newEvent \u003d new Event(event.getEventName(), event.getEventDate(), event.getEventTime(),","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"                    event.getVenue(), event.getCapacity(),","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"                    new ResidentList(ResidentList.DEFAULT_LIST, ResidentList.DEFAULT_LIST));","lastModifiedDate":"2021-10-28"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            eventListRemovedResidents.add(newEvent);","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"        newAddressBook.setEvents(eventListRemovedResidents);","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"        model.setAddressBook(newAddressBook);","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"     * Opens and reads the contents of the user-provided csv.","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"     * @return A new AddressBook with the content of the csv if reading was a success","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"    private AddressBook readCsv() throws CommandException {","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003cPerson\u003e();","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        try (CSVReader reader \u003d new CSVReader(new FileReader(this.filepath.toString()))) {","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"            List\u003cString[]\u003e rows \u003d reader.readAll();","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"            // Remove column headings row","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"            rows.remove(0);","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"            addPersons(persons, rows);","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            return createNewAddressBook(persons);","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_FOUND);","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        } catch (CsvException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_INCORRECT_CSV_FORMAT);","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    private AddressBook createNewAddressBook(ArrayList\u003cPerson\u003e persons) throws CommandException {","lastModifiedDate":"2021-11-05"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"        AddressBook importedData \u003d new AddressBook();","lastModifiedDate":"2021-11-05"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"        for (Person singlePerson : persons) {","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"                importedData.addPerson(singlePerson);","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"            } catch (DuplicatePersonException e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_RESIDENT + singlePerson.toString());","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-11-05"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        return importedData;","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"    private void addPersons(ArrayList\u003cPerson\u003e persons, List\u003cString[]\u003e rows) throws CommandException {","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"        for (String[] row: rows) {","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"            Person personToAdd;","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"                // Skip empty rows","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"                if (row.length \u003d\u003d 1 \u0026\u0026 row[0].equals(\"\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"                    continue;","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"                }","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"                personToAdd \u003d createPerson(row);","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"                // Index + 2 to account for discarded first row and zero-indexing","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"                throw new CommandException(String.format(MESSAGE_ERROR_READING, rows.indexOf(row) + 2)","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"                    + e.getMessage());","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"            persons.add(personToAdd);","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"    private static Person createPerson(String[] row) throws IllegalArgumentException {","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"        if (row.length !\u003d 8) {","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalArgumentException(MESSAGE_INCORRECT_FIELDS);","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"        Name name \u003d new Name(row[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        Room room \u003d new Room(row[1]);","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"        Phone phone \u003d new Phone(row[2]);","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        Email email \u003d new Email(row[3]);","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"        VaccStatus vaccStatus \u003d new VaccStatus(row[4]);","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"        Faculty faculty \u003d new Faculty(row[5]);","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"        LastDate lastFet \u003d null;","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"        LastDate lastCollection \u003d null;","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"        if (!row[6].trim().isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"            lastFet \u003d new LastDate(row[6]);","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"        if (!row[7].trim().isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"            lastCollection \u003d new LastDate(row[7]);","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"        LastDate defaultDate \u003d new LastDate(LastDate.DEFAULT_DATE);","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"        return new Person(name, room, phone, email, vaccStatus, faculty,","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"                lastFet \u003d\u003d null ? defaultDate : lastFet,","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"                lastCollection \u003d\u003d null ? defaultDate : lastCollection);","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 this.filename.equals(((ImportCommand) other).filename)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"gordonlzy":1,"chongjunwei":1,"VimuthM":191,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/commands/IncludeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":" * Adds a resident to an event.","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"include\";","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"INDEX r/ROOMS/NAMES(COMMA_SEPARATED)\";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds residents to the given event.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            + \"INDEX \"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"ROOM/NAME \\n\"","lastModifiedDate":"2021-10-20"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            + \"1 \"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"A101, A102, A103\";","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%s added to event %s\";","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_EXCEED_CAPACITY \u003d \"Number of residents to add exceed event capacity\";","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(IncludeCommand.class);","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    private final Index index;","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    private final ResidentList residentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"     * Creates an IncludeCommand to add the specified {@code EventName} and {@code InformationList}","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    public IncludeCommand(Index index, ResidentList residentList) {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        this.residentList \u003d residentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"     * Checks if there are any person from {@code toAdd} who is already in {@code currentResidents}","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    public void checkForDuplicates(ArrayList\u003cPerson\u003e toAdd, ArrayList\u003cPerson\u003e currentResidents)","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"            throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder names \u003d new StringBuilder();","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        int foundDuplicate \u003d (int) toAdd.stream()","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"                .filter(currentResidents::contains)","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"                .count();","lastModifiedDate":"2021-11-05"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        toAdd.stream()","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"                .filter(currentResidents::contains)","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                .forEach(person -\u003e names.append(person.getName()).append(\", \"));","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        String duplicates \u003d names.toString().replaceAll(\", $\", \"\");","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        if (foundDuplicate \u003d\u003d 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(duplicates + \" is already in this event\");","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        } else if (foundDuplicate \u003e 1) {","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(duplicates + \" are already in this event\");","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        Event event;","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"            event \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"            logger.warning(\"Index given is invalid\");","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"Index given is invalid\");","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        if (residentList.isEmpty()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(\"No person with this information \u0027\" + residentList.getResidentsDisplay()","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"                    + \"\u0027 could be found\");","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e currentResidents \u003d model.getCurrentEventResidents(event.getResidentList());","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        checkForDuplicates(toAdd, currentResidents);","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d createEditedEvent(event, toAdd);","lastModifiedDate":"2021-11-05"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        model.setEvent(event, editedEvent);","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        String resultMsg \u003d String.format(MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"                .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(), event.getEventName());","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        return new CommandResult(resultMsg);","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof IncludeCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 index.equals(((IncludeCommand) other).index));","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"     * Creates a new edited {@code Event} with the same fields as the given event, except residents which combine the","lastModifiedDate":"2021-11-05"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"     * current residents and the new residents from {@code toAdd}","lastModifiedDate":"2021-11-05"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"    public Event createEditedEvent(Event event, ArrayList\u003cPerson\u003e toAdd) throws CommandException {","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        String combinedDisplayString \u003d event.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        String combinedStorageString \u003d event.getCombinedStorageString(toAdd);","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        if (new ResidentList(combinedDisplayString,","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                combinedStorageString).getResidents().size() \u003e event.getCapacity().capacity) {","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_EXCEED_CAPACITY);","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        return new Event(event.getEventName(), event.getEventDate(), event.getEventTime(),","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"                event.getVenue(), event.getCapacity(), new ResidentList(combinedDisplayString,","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"                combinedStorageString));","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":125,"chongjunwei":1,"VimuthM":3}},{"path":"src/main/java/safeforhall/logic/commands/SwitchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"public class SwitchCommand extends Command {","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    public static final String COMMAND_WORD \u003d \"switch\";","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"    public static final String SWITCH_SUCCESS_MESSAGE \u003d \"Switched tabs\";","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(SWITCH_SUCCESS_MESSAGE, true);","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"chongjunwei":17,"gordonlzy":1}},{"path":"src/main/java/safeforhall/logic/commands/TraceCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"public class TraceCommand extends Command {","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public static final String COMMAND_WORD \u003d \"trace\";","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"r/RESIDENT [d/DEPTH] [t/DURATION] \";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Traces a resident\u0027s close contacts based on the \"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"            + \"events they\u0027re involved in. \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_RESIDENT + \"RESIDENT \"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_DEPTH + \"DEPTH] \"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_DURATION + \"DURATION] \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_RESIDENT + \"A210 \"","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_DEPTH + \"2 \"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_DURATION + \"4 \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            + \"Note: \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            + \"     1. A resident can be identified either by full name or room \\n\"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            + \"     2. Depth refers to the number of maximum links to reach resident in question \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            + \"     3. Depth should be an integer, 1 \u003c\u003d depth \u003c\u003d 5 and will default to 1 \\n\"","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            + \"     4. Duration is in days, 1 \u003c\u003d duration \u003c\u003d 31 and will default to 7\\n\";","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_FOUND_CONTACTS \u003d \"Found %1d close contacts at this depth: \";","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    public static final Integer DEFAULT_DEPTH \u003d 1;","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    public static final Integer DEFAULT_DURATION \u003d 7;","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    private final String personInput;","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    private final Integer depth;","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    private final Integer duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    private Optional\u003cPerson\u003e person;","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"     * Creates a TraceCommand to trace the depth-level contacts of the specified {@code Person}","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"     * @param person The resident to trace (either name or room validated)","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    public TraceCommand(String person) {","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        this.personInput \u003d person;","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        this.depth \u003d DEFAULT_DEPTH;","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        this.duration \u003d DEFAULT_DURATION;","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"     * Creates a TraceCommand to trace the depth-level contacts of the specified {@code Person}","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"     * @param person The resident to trace (either name or room validated)","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"     * @param depth The depth of tracing","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"    public TraceCommand(String person, Integer depth) {","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        this.personInput \u003d person;","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        this.depth \u003d depth;","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        this.duration \u003d DEFAULT_DURATION;","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"     * Creates a TraceCommand to trace the depth-level contacts of the specified {@code Person}","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"     * @param person The resident to trace (either name or room validated)","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"     * @param depth The depth of tracing","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"     * @param duration The number of days to trace back to (for events)","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    public TraceCommand(String person, Integer depth, Integer duration) {","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"        assert depth \u003e 0;","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        assert duration \u003e 0;","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        this.personInput \u003d person;","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        this.depth \u003d depth;","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"        AddressBook addressBook \u003d (AddressBook) model.getAddressBook();","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        this.person \u003d addressBook.findPerson(this.personInput);","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        if (this.person.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(\"No resident with this information \u0027\" + this.personInput + \"\u0027 could be found\");","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        List\u003cPerson\u003e contacts \u003d findCloseContacts(model, this.person.get());","lastModifiedDate":"2021-11-05"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        contacts.remove(this.person.get());","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        model.updateFilteredPersonList(contacts::contains);","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"                String.format(MESSAGE_FOUND_CONTACTS, model.getFilteredPersonList().size()));","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    private ArrayList\u003cPerson\u003e findCloseContacts(Model model, Person person) {","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"        Predicate\u003cEvent\u003e predicate \u003d event -\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            LocalDate eventDate \u003d event.getEventDate().toLocalDate();","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"            LocalDate today \u003d LocalDate.now();","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"            long days \u003d ChronoUnit.DAYS.between(eventDate, today);","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            return days \u003e\u003d 0 \u0026\u0026 days \u003c\u003d this.duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        };","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e contacts \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        contacts.add(person);","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        for (int i \u003d 0; i \u003c this.depth; i++) {","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"            ArrayList\u003cPerson\u003e copyOfContacts \u003d new ArrayList\u003c\u003e(contacts);","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"            for (Person contact: contacts) {","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"                ArrayList\u003cEvent\u003e relevantEvents \u003d model.getPersonEvents(contact, predicate);","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"                addToContacts(copyOfContacts, relevantEvents);","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"            contacts \u003d copyOfContacts;","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        return contacts;","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"    private void addToContacts(List\u003cPerson\u003e contacts, ArrayList\u003cEvent\u003e relevantEvents) {","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e finalContacts \u003d new ArrayList\u003c\u003e(contacts);","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        relevantEvents.forEach(event -\u003e","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"                finalContacts.addAll(event.getResidentList().getResidents()));","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        contacts.removeAll(contacts);","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"        contacts.addAll(finalContacts.stream()","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"                .distinct()","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-11-05"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof TraceCommand // instanceof handles nulls","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 this.personInput.equals(((TraceCommand) other).personInput)","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 this.depth.equals(((TraceCommand) other).depth)","lastModifiedDate":"2021-10-28"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 this.duration.equals(((TraceCommand) other).duration)); // state check","lastModifiedDate":"2021-10-28"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"gordonlzy":1,"VimuthM":143}},{"path":"src/main/java/safeforhall/logic/commands/add/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"n/NAME d/DATE t/TIME v/VENUE c/CAPACITY [r/RESIDENTS]\";","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_DATE + \"DATE \"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_TIME + \"TIME \"","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_VENUE + \"VENUE \"","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"CAPACITY \"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"RESIDENTS \\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_NAME + \"Football Training \"","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_DATE + \"03-01-2021 \"","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_TIME + \"0830 \"","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_VENUE + \"NUS field \"","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"5 \"","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"            + CliSyntax.PREFIX_RESIDENTS + \"Alex Yeoh \";","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_EXCEED_CAPACITY \u003d \"Number of residents to add exceed event capacity\";","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_INVALID_RESIDENT \u003d \"%s is not a valid resident in the address book\";","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    private final Event toAdd;","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        toAdd \u003d event;","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        if (model.hasEvent(toAdd)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        String invalidResident \u003d model.getInvalidResident(toAdd);","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        if (!invalidResident.equals(EMPTY_STRING) \u0026\u0026 !toAdd.hasNoResidents()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_RESIDENT, invalidResident));","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e personList \u003d model.toPersonList(toAdd.getResidentList());","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        if (personList.size() \u003e toAdd.getCapacity().capacity) {","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_EXCEED_CAPACITY);","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        String combinedStorageString \u003d toAdd.getCombinedStorageString(personList);","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        Event editedEvent \u003d new Event(toAdd.getEventName(), toAdd.getEventDate(), toAdd.getEventTime(),","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"                toAdd.getVenue(), toAdd.getCapacity(), new ResidentList(personListToString(personList),","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"                combinedStorageString));","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(editedEvent);","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));","lastModifiedDate":"2021-10-17"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"     * Converts a {@code personList} to a String, separated by a comma","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    public String personListToString(ArrayList\u003cPerson\u003e personList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder stringBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        if (personList.isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"            return ResidentList.DEFAULT_LIST;","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"            stringBuilder \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        for (Person p : personList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"            if (count \u003d\u003d 0) {","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"                stringBuilder.append(p.getName());","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"                stringBuilder.append(\", \").append(p.getName());","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"            count++;","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":53,"gordonlzy":41,"VimuthM":14}},{"path":"src/main/java/safeforhall/logic/commands/add/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"n/NAME r/ROOM p/PHONE e/EMAIL v/VACCINATION_STATUS f/FACULTY \"","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"            + \"[fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]\";","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resident to the address book.\\n\"","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_ROOM + \"ROOM \"","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS \"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FACULTY + \"FACULTY \"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FETDATE + \"LAST FET DATE \"","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_COLLECTIONDATE + \"LAST COLLECTION DATE \\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_ROOM + \"A100 \"","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"T \"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FACULTY + \"SoC \"","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_FETDATE + \"20-10-2021 \"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"            + CliSyntax.PREFIX_COLLECTIONDATE + \"23-10-2021 \";","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New resident added: %1$s\";","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident or room already exists in the address book\";","lastModifiedDate":"2021-11-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    public AddPersonCommand(Person person) {","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":3,"chongjunwei":1,"VimuthM":18,"-":37,"jaredlhf":13}},{"path":"src/main/java/safeforhall/logic/commands/delete/DeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeleteEventCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"INDEXES\";","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"            + \": Deletes the events identified by the index number used in the displayed event list.\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space)\\n\"","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Events: \\n%1$s\";","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexArray;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    public DeleteEventCommand(ArrayList\u003cIndex\u003e targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        this.targetIndexArray \u003d targetIndexArray;","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e targetEventsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        StringBuilder deletedEvents \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"        for (Index targetIndex : targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"            Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"            targetEventsArray.add(eventToDelete);","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        for (Event eventToDelete : targetEventsArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            deletedEvents.append(count + 1).append(\".\\t\").append(eventToDelete.getEventName()).append(\"\\n\");","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"            model.deleteEvent(eventToDelete);","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"            count++;","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, deletedEvents.toString()));","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 targetIndexArray.equals(((DeleteEventCommand) other).targetIndexArray)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":59,"gordonlzy":2,"VimuthM":3}},{"path":"src/main/java/safeforhall/logic/commands/delete/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommand extends Command {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"INDEXES\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            + \": Deletes the people identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space)\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Residents: \\n%1$s\";","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public DeletePersonCommand(ArrayList\u003cIndex\u003e targetIndexArray) {","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndexArray \u003d targetIndexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cPerson\u003e targetResidentsArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResidents \u003d \"\";","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index targetIndex : targetIndexArray) {","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"            targetResidentsArray.add(personToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        for (Person personToDelete : targetResidentsArray) {","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"            deletedResidents +\u003d ((count + 1) + \".\\t\" + personToDelete.getName() + \"\\n\");","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"            count++;","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedResidents));","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 targetIndexArray.equals(((DeletePersonCommand) other).targetIndexArray)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":20,"chongjunwei":7,"gordonlzy":1,"-":35,"VimuthM":5}},{"path":"src/main/java/safeforhall/logic/commands/edit/EditEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":" * Edits the details of an existing event in the address book.","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String PARAMETERS \u003d \"INDEXES [n/NAME] [d/DATE] [t/TIME] [v/VENUE] [c/CAPACITY]\";","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \"","lastModifiedDate":"2021-10-20"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"            + \"by the index number used in the displayed events list. \"","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEX (positive integers only) \"","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"            + \"[\" + CliSyntax.PREFIX_TIME + \"TIME] \"","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_VENUE + \"VENUE] \"","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_CAPACITY + \"CAPACITY] \\n\"","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            + CliSyntax.PREFIX_DATE + \"20-01-2021 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_TIME + \"1200 \"","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"            + CliSyntax.PREFIX_CAPACITY + \"50\";","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: \\n%1$s\";","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book.\";","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_EXCEED_CAPACITY \u003d \"New capacity of the event is less than the number of \"","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"            + \"residents currently in the event\";","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    private final EditEventDescriptor editEventDescriptor;","lastModifiedDate":"2021-10-17"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"     * @param targetIndex Index of Event in the filtered event list to edit","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"     * @param editEventDescriptor details to edit the event with","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand(Index targetIndex, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(targetIndex);","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        if (editedEvent.getCapacity().capacity \u003c eventToEdit.getResidentListSize()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(MESSAGE_EXCEED_CAPACITY);","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        model.setEvent(eventToEdit, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));","lastModifiedDate":"2021-10-17"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates and returns a {@code Event} with the details of {@code eventToEdit}","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"     * edited with {@code editEventDescriptor}.","lastModifiedDate":"2021-10-17"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        assert eventToEdit !\u003d null;","lastModifiedDate":"2021-10-17"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        EventName updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getEventName());","lastModifiedDate":"2021-10-17"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        EventDate updatedDate \u003d editEventDescriptor.getDate().orElse(eventToEdit.getEventDate());","lastModifiedDate":"2021-10-17"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"        EventTime updatedTime \u003d editEventDescriptor.getTime().orElse(eventToEdit.getEventTime());","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        Venue updatedVenue \u003d editEventDescriptor.getVenue().orElse(eventToEdit.getVenue());","lastModifiedDate":"2021-10-17"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        Capacity updatedCapacity \u003d editEventDescriptor.getCapacity().orElse(eventToEdit.getCapacity());","lastModifiedDate":"2021-10-17"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        ResidentList updatedResidentList \u003d editEventDescriptor.getResidentList()","lastModifiedDate":"2021-10-20"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"                .orElse(eventToEdit.getResidentList());","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"        return new Event(updatedName, updatedDate, updatedTime, updatedVenue, updatedCapacity, updatedResidentList);","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-17"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof EditEventCommand)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand e \u003d (EditEventCommand) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        return targetIndex.equals(e.targetIndex)","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"     * Stores the details to edit the event with. Each non-empty field value will replace the","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"     * corresponding field value of the event.","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"    public static class EditEventDescriptor {","lastModifiedDate":"2021-10-17"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        private EventName name;","lastModifiedDate":"2021-10-17"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        private EventDate date;","lastModifiedDate":"2021-10-17"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"        private EventTime time;","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        private Venue venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        private Capacity capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        private ResidentList residentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        public EditEventDescriptor() {}","lastModifiedDate":"2021-10-17"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"        /**","lastModifiedDate":"2021-10-17"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-17"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"         */","lastModifiedDate":"2021-10-17"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {","lastModifiedDate":"2021-10-17"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-10-17"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2021-10-17"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"            setTime(toCopy.time);","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"            setVenue(toCopy.venue);","lastModifiedDate":"2021-10-17"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"            setCapacity(toCopy.capacity);","lastModifiedDate":"2021-10-17"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"            setResidentList(toCopy.residentList);","lastModifiedDate":"2021-10-20"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        /**","lastModifiedDate":"2021-10-17"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-10-17"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"         */","lastModifiedDate":"2021-10-17"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"            return CollectionUtil.isAnyNonNull(name, date, time, venue, capacity);","lastModifiedDate":"2021-11-03"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"        public void setName(EventName name) {","lastModifiedDate":"2021-10-17"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-10-17"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cEventName\u003e getName() {","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"        public void setDate(EventDate date) {","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"            this.date \u003d date;","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cEventDate\u003e getDate() {","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"        public void setTime(EventTime time) {","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"            this.time \u003d time;","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cEventTime\u003e getTime() {","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(time);","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"        public void setVenue(Venue venue) {","lastModifiedDate":"2021-10-17"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"            this.venue \u003d venue;","lastModifiedDate":"2021-10-17"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cVenue\u003e getVenue() {","lastModifiedDate":"2021-10-17"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(venue);","lastModifiedDate":"2021-10-17"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"        public void setCapacity(Capacity capacity) {","lastModifiedDate":"2021-10-17"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"            this.capacity \u003d capacity;","lastModifiedDate":"2021-10-17"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cCapacity\u003e getCapacity() {","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(capacity);","lastModifiedDate":"2021-10-17"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"        public void setResidentList(ResidentList residentList) {","lastModifiedDate":"2021-10-20"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"            this.residentList \u003d residentList;","lastModifiedDate":"2021-10-20"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"        public Optional\u003cResidentList\u003e getResidentList() {","lastModifiedDate":"2021-10-20"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"            return Optional.ofNullable(residentList);","lastModifiedDate":"2021-10-20"},{"lineNumber":208,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":209,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":213,"author":{"gitId":"rebeccalaujx"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-17"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"                return true;","lastModifiedDate":"2021-10-17"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"            if (!(other instanceof EditEventDescriptor)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"                return false;","lastModifiedDate":"2021-10-17"},{"lineNumber":220,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":222,"author":{"gitId":"rebeccalaujx"},"content":"            // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-10-17"},{"lineNumber":225,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())","lastModifiedDate":"2021-10-17"},{"lineNumber":226,"author":{"gitId":"chongjunwei"},"content":"                    \u0026\u0026 getTime().equals(e.getTime())","lastModifiedDate":"2021-10-24"},{"lineNumber":227,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getVenue().equals(e.getVenue())","lastModifiedDate":"2021-10-17"},{"lineNumber":228,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getCapacity().equals(e.getCapacity());","lastModifiedDate":"2021-10-17"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":233,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"rebeccalaujx":196,"chongjunwei":16,"gordonlzy":19,"VimuthM":2}},{"path":"src/main/java/safeforhall/logic/commands/edit/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-11-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-11-04"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommand extends Command {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"INDEXES [n/NAME] [r/ROOM] [p/PHONE] [e/EMAIL] [v/VACCINATION_STATUS] \"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            + \"[f/FACULTY] [fd/LAST_FET_DATE] [cd/LAST_COLLECTION_DATE]\";","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the residents identified \"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"            + \"by the index numbers used in the displayed resident list. \"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Parameters: INDEXES (positive integers, separated by a space) \"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"            + \"[\" + CliSyntax.PREFIX_ROOM + \"ROOM] \"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"            + \"[\" + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS] \"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_FACULTY + \"FACULTY] \"","lastModifiedDate":"2021-10-12"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_FETDATE + \"LAST FET DATE] \"","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            + \"[\" + CliSyntax.PREFIX_COLLECTIONDATE + \"LAST COLLECTION DATE] \\n\"","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 3 \"","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2021-10-04"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Residents: \\n%1$s\";","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident or room already exists in the address book.\";","lastModifiedDate":"2021-11-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"    private final ArrayList\u003cIndex\u003e indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"     * @param indexArray Array of people in the filtered person list to edit","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonCommand(ArrayList\u003cIndex\u003e indexArray, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index index : indexArray) {","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        this.indexArray \u003d indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        StringBuilder editedResidents \u003d new StringBuilder();","lastModifiedDate":"2021-11-04"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"        for (Index targetIndex : indexArray) {","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"            Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isSameName \u003d personToEdit.isSameNamePerson(editedPerson);","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isSameRoom \u003d personToEdit.isSameRoomPerson(editedPerson);","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isNotSamePerson \u003d !isSameName || !isSameRoom;","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"            if (isNotSamePerson \u0026\u0026 model.hasExactPerson(editedPerson)) {","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"            updatePersonEventResidentLists(model, personToEdit, editedPerson);","lastModifiedDate":"2021-11-04"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"            } catch (DuplicatePersonException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"            editedResidents.append(count + 1).append(\".\\t\").append(personToEdit.getName()).append(\"\\n\");","lastModifiedDate":"2021-11-04"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"            count++;","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedResidents.toString()));","lastModifiedDate":"2021-11-04"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-04"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"    private void updatePersonEventResidentLists(Model model, Person personToEdit, Person editedPerson) {","lastModifiedDate":"2021-11-04"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e personEvents \u003d model.getPersonEvents(personToEdit, event -\u003e true);","lastModifiedDate":"2021-11-04"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        for (Event event: personEvents) {","lastModifiedDate":"2021-11-04"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            ResidentList residents \u003d event.getResidentList();","lastModifiedDate":"2021-11-04"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"            ArrayList\u003cPerson\u003e toRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-04"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"            toRemove.add(personToEdit);","lastModifiedDate":"2021-11-04"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"            ArrayList\u003cPerson\u003e toAdd \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-04"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"            toAdd.add(editedPerson);","lastModifiedDate":"2021-11-04"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"            ResidentList removed \u003d new ResidentList(residents.getRemovedDisplayString(toRemove),","lastModifiedDate":"2021-11-04"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"                    residents.getRemovedStorageString(toRemove));","lastModifiedDate":"2021-11-04"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"            ResidentList added \u003d new ResidentList(removed.getCombinedDisplayString(toAdd),","lastModifiedDate":"2021-11-04"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"                    removed.getCombinedStorageString(toAdd));","lastModifiedDate":"2021-11-04"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-04"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"            Event editedEvent \u003d new Event(event.getEventName(), event.getEventDate(), event.getEventTime(),","lastModifiedDate":"2021-11-04"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"                    event.getVenue(), event.getCapacity(), added);","lastModifiedDate":"2021-11-04"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            model.setEvent(event, editedEvent);","lastModifiedDate":"2021-11-04"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            model.updateFilteredEventList(Model.PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-11-04"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        Room updatedRoom \u003d editPersonDescriptor.getRoom().orElse(personToEdit.getRoom());","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        VaccStatus updatedVaccStatus \u003d editPersonDescriptor.getVaccStatus().orElse(personToEdit.getVaccStatus());","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        Faculty updatedFaculty \u003d editPersonDescriptor.getFaculty().orElse(personToEdit.getFaculty());","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"        LastDate updatedLastFetDate \u003d editPersonDescriptor.getLastFetDate().orElse(personToEdit.getLastFetDate());","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"        LastDate updatedLastCollectionDate \u003d editPersonDescriptor.getLastCollectionDate()","lastModifiedDate":"2021-10-12"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"                .orElse(personToEdit.getLastCollectionDate());","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"        // Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2021-10-06"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        return new Person(updatedName, updatedRoom, updatedPhone, updatedEmail, updatedVaccStatus, updatedFaculty,","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"                updatedLastFetDate, updatedLastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof EditPersonCommand)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        return indexArray.equals(e.indexArray)","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        private Room room;","lastModifiedDate":"2021-10-11"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"        private VaccStatus vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        private Faculty faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        private LastDate lastFetDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        private LastDate lastCollectionDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":187,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"            setRoom(toCopy.room);","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"            setVaccStatus(toCopy.vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"            setFaculty(toCopy.faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"            setLastFetDate(toCopy.lastFetDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"            setLastCollectionDate(toCopy.lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, room, vaccStatus, faculty,","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"                    lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"        public void setRoom(Room room) {","lastModifiedDate":"2021-10-11"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"            this.room \u003d room;","lastModifiedDate":"2021-10-11"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":235,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cRoom\u003e getRoom() {","lastModifiedDate":"2021-10-11"},{"lineNumber":236,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(room);","lastModifiedDate":"2021-10-11"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":239,"author":{"gitId":"rebeccalaujx"},"content":"        public void setVaccStatus(VaccStatus vaccStatus) {","lastModifiedDate":"2021-10-11"},{"lineNumber":240,"author":{"gitId":"rebeccalaujx"},"content":"            this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":243,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cVaccStatus\u003e getVaccStatus() {","lastModifiedDate":"2021-10-11"},{"lineNumber":244,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":245,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":246,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":247,"author":{"gitId":"rebeccalaujx"},"content":"        public void setFaculty(Faculty faculty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":248,"author":{"gitId":"rebeccalaujx"},"content":"            this.faculty \u003d faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":249,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":250,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":251,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cFaculty\u003e getFaculty() {","lastModifiedDate":"2021-10-11"},{"lineNumber":252,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":255,"author":{"gitId":"rebeccalaujx"},"content":"        public void setLastFetDate(LastDate lastFetDate) {","lastModifiedDate":"2021-10-12"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"            this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":259,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cLastDate\u003e getLastFetDate() {","lastModifiedDate":"2021-10-12"},{"lineNumber":260,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(lastFetDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":261,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":263,"author":{"gitId":"rebeccalaujx"},"content":"        public void setLastCollectionDate(LastDate lastCollectionDate) {","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"rebeccalaujx"},"content":"            this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":266,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":267,"author":{"gitId":"rebeccalaujx"},"content":"        public Optional\u003cLastDate\u003e getLastCollectionDate() {","lastModifiedDate":"2021-10-12"},{"lineNumber":268,"author":{"gitId":"rebeccalaujx"},"content":"            return Optional.ofNullable(lastCollectionDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":269,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":270,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":288,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-10-13"},{"lineNumber":289,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getRoom().equals(e.getRoom())","lastModifiedDate":"2021-10-13"},{"lineNumber":290,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getVaccStatus().equals(e.getVaccStatus())","lastModifiedDate":"2021-10-13"},{"lineNumber":291,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getFaculty().equals(e.getFaculty())","lastModifiedDate":"2021-10-13"},{"lineNumber":292,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getLastFetDate().equals(e.getLastFetDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":293,"author":{"gitId":"rebeccalaujx"},"content":"                    \u0026\u0026 getLastCollectionDate().equals(e.getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"rebeccalaujx":100,"gordonlzy":3,"-":145,"VimuthM":46,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"VimuthM":1,"-":16}},{"path":"src/main/java/safeforhall/logic/commands/find/FindEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventNameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":" * Finds and lists all events in address book whose parameters matched any of the provided argument keywords.","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"public class FindEventCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    public static final String PARAMETERS \u003d \"[n/NAME] [d/DATE] [v/VENUE] [c/CAPACITY]\";","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose parameters match any of \"","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"            + \"the provided keywords for different options (case-insensitive)\\nand displays them as a \"","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"            + \"list with index numbers.\\n\"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"            + \"[\" + CliSyntax.PREFIX_VENUE + \"VENUE] \"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"            + \"[\" + CliSyntax.PREFIX_CAPACITY + \"CAPACITY] \"","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_NAME + \"Football Training \"","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_DATE + \"03-01-2021 \"","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"            + CliSyntax.PREFIX_VENUE + \"Field\";","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Matching events listed.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_NOT_FILTERED \u003d \"At least one field to filter be must be provided.\";","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    private final FindCompositePredicate predicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    public FindEventCommand(FindCompositePredicate predicate) {","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        model.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        return new CommandResult(","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()));","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof FindEventCommand // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"     * Stores the predicates to search the address book with. Each non-empty field value will be used for filtering.","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"    public static class FindCompositePredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        private Predicate\u003cEvent\u003e eventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"        private Predicate\u003cEventDate\u003e eventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        private Predicate\u003cEventTime\u003e eventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        private Predicate\u003cVenue\u003e venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        private Predicate\u003cCapacity\u003e capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        // For equality checks","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"        private EventName eEventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"        private EventDate eEventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"        private EventTime eEventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"        private Venue eVenue;","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        private Capacity eCapacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"        public FindCompositePredicate() {}","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"        /**","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"         */","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        public FindCompositePredicate(FindCompositePredicate toCopy) {","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"            this.eventName \u003d toCopy.eventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"            this.eventDate \u003d toCopy.eventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"            this.eventTime \u003d toCopy.eventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"            this.venue \u003d toCopy.venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"            this.capacity \u003d toCopy.capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"            this.eEventName \u003d toCopy.eEventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"            this.eEventDate \u003d toCopy.eEventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"            this.eEventTime \u003d toCopy.eEventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"            this.eVenue \u003d toCopy.eVenue;","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"            this.eCapacity \u003d toCopy.eCapacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"        /**","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"         * Returns true if at least one field is to be filtered with.","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"         */","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        public boolean isAnyFieldFiltered() {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"            return CollectionUtil.isAnyNonNull(eventName, eventDate, eventTime, venue, capacity);","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"        public void setEventName(EventName eventName) {","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"            this.eEventName \u003d new EventName(String.join(\" \", eventName.eventName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"            this.eventName \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(eventName.eventName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"        public void setEventDate(EventDate eventDate) {","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"            this.eEventDate \u003d eventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"            this.eventDate \u003d eventDate::equals;","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"        public void setEventTime(EventTime eventTime) {","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"            this.eEventTime \u003d eventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"            this.eventTime \u003d eventTime::equals;","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"        public void setVenue(Venue venue) {","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"            this.eVenue \u003d venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"            this.venue \u003d venue::equals;","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"        public void setCapacity(Capacity capacity) {","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"            this.eCapacity \u003d capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"            this.capacity \u003d capacity::equals;","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cPredicate\u003cEvent\u003e\u003e getEventName() {","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(eventName);","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cPredicate\u003cEventDate\u003e\u003e getEventDate() {","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(eventDate);","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cPredicate\u003cEventTime\u003e\u003e getEventTime() {","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(eventTime);","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cPredicate\u003cVenue\u003e\u003e getVenue() {","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(venue);","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"chongjunwei"},"content":"        public Optional\u003cPredicate\u003cCapacity\u003e\u003e getCapacity() {","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"chongjunwei"},"content":"            return Optional.ofNullable(capacity);","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"        /**","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"         * Tests if the provided Event matches all the available criteria.","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"         *","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"chongjunwei"},"content":"         * @param event The Event object to test","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"chongjunwei"},"content":"         * @return True if matches all the preset criteria","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"chongjunwei"},"content":"         */","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"        public boolean test(Event event) {","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"            List\u003cPredicate\u003cEvent\u003e\u003e allPredicates \u003d Arrays.asList(","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"                p -\u003e getEventName().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"                p -\u003e getEventDate().orElse(x -\u003e true).test(p.getEventDate()),","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"chongjunwei"},"content":"                p -\u003e getEventTime().orElse(x -\u003e true).test(p.getEventTime()),","lastModifiedDate":"2021-10-27"},{"lineNumber":170,"author":{"gitId":"chongjunwei"},"content":"                p -\u003e getVenue().orElse(x -\u003e true).test(p.getVenue()),","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"chongjunwei"},"content":"                p -\u003e getCapacity().orElse(x -\u003e true).test(p.getCapacity()));","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"chongjunwei"},"content":"            return allPredicates","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"                    .stream()","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"                    .reduce(p -\u003e true, Predicate::and)","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"chongjunwei"},"content":"                    .test(event);","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"chongjunwei"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"                return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"            if (!(other instanceof FindCompositePredicate)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"                return false;","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"            // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"chongjunwei"},"content":"            FindCompositePredicate e \u003d (FindCompositePredicate) other;","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"chongjunwei"},"content":"            return Objects.equals(eEventName, e.eEventName)","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"                    \u0026\u0026 Objects.equals(eEventDate, e.eEventDate)","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"                    \u0026\u0026 Objects.equals(eEventTime, e.eEventTime)","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"                    \u0026\u0026 Objects.equals(eVenue, e.eVenue)","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"                    \u0026\u0026 Objects.equals(eCapacity, e.eCapacity);","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"chongjunwei":201}},{"path":"src/main/java/safeforhall/logic/commands/find/FindPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.CollectionUtil;","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.RoomValidCheckPredicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":" * Finds and lists all persons in address book whose parameters matched any of the provided argument keywords.","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"public class FindPersonCommand extends Command {","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"[n/NAME] [r/ROOM] [p/PHONE] [e/EMAIL] [v/VACCINATION_STATUS] [f/FACULTY]\";","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all residents whose parameters match any of \"","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            + \"the provided keywords for different options (case-insensitive) and displays them as a \"","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            + \"list with index numbers.\\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            + \"Note that room can searched for by block (A), level (1), and block-level (A1) as well. \"","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_ROOM + \"ROOM] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_VACCSTATUS + \"VACCINATION STATUS] \"","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            + \"[\" + CliSyntax.PREFIX_FACULTY + \"FACULTY] \\n\"","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_NAME + \"david li \"","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_VACCSTATUS + \"T \"","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_FACULTY + \"SoC\";","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Matching residents listed.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_NOT_FILTERED \u003d \"At least one field to filter be must be provided.\";","lastModifiedDate":"2021-10-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    private final FindCompositePredicate predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    public FindPersonCommand(FindCompositePredicate predicate) {","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"     * Stores the predicates to search the address book with. Each non-empty field value will be used for filtering.","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"    public static class FindCompositePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPerson\u003e name;","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPerson\u003e room;","lastModifiedDate":"2021-10-17"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cPhone\u003e phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cEmail\u003e email;","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cVaccStatus\u003e vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        private Predicate\u003cFaculty\u003e faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        // For equality checks","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        private Name eName;","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        private String eRoom;","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        private Phone ePhone;","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        private Email eEmail;","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        private VaccStatus eVaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"        private Faculty eFaculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        public FindCompositePredicate() {}","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"         * Copy constructor.","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        public FindCompositePredicate(FindCompositePredicate toCopy) {","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"            this.name \u003d toCopy.name;","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"            this.room \u003d toCopy.room;","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"            this.phone \u003d toCopy.phone;","lastModifiedDate":"2021-10-11"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"            this.email \u003d toCopy.email;","lastModifiedDate":"2021-10-11"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d toCopy.vaccStatus;","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"            this.faculty \u003d toCopy.faculty;","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            this.eName \u003d toCopy.eName;","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"            this.eRoom \u003d toCopy.eRoom;","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"            this.ePhone \u003d toCopy.ePhone;","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            this.eEmail \u003d toCopy.eEmail;","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"            this.eVaccStatus \u003d toCopy.eVaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"            this.eFaculty \u003d toCopy.eFaculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"         * Returns true if at least one field is to be filtered with.","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-11"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        public boolean isAnyFieldFiltered() {","lastModifiedDate":"2021-10-11"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"            return CollectionUtil.isAnyNonNull(name, room, phone, email, vaccStatus, faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-10-11"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"            this.eName \u003d new Name(String.join(\" \", name.fullName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"            this.name \u003d new NameContainsKeywordsPredicate(Arrays.asList(name.fullName.split(\"\\\\s+\")));","lastModifiedDate":"2021-10-11"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        public void setRoom(String room) {","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            this.eRoom \u003d room;","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            this.room \u003d new RoomValidCheckPredicate(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-10-11"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            this.ePhone \u003d phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"            this.phone \u003d phone::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"            this.eEmail \u003d email;","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"            this.email \u003d email::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"        public void setVaccStatus(VaccStatus vaccStatus) {","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            this.eVaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d vaccStatus::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"        public void setFaculty(Faculty faculty) {","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"            this.eFaculty \u003d faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"            this.faculty \u003d faculty::equals;","lastModifiedDate":"2021-10-11"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cPerson\u003e\u003e getName() {","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cPerson\u003e\u003e getRoom() {","lastModifiedDate":"2021-10-17"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(room);","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cPhone\u003e\u003e getPhone() {","lastModifiedDate":"2021-10-11"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-10-11"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"        public Optional\u003cPredicate\u003cEmail\u003e\u003e getEmail() {","lastModifiedDate":"2021-10-11"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-10-11"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cVaccStatus\u003e\u003e getVaccStatus() {","lastModifiedDate":"2021-10-11"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(vaccStatus);","lastModifiedDate":"2021-10-11"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        private Optional\u003cPredicate\u003cFaculty\u003e\u003e getFaculty() {","lastModifiedDate":"2021-10-11"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"            return Optional.ofNullable(faculty);","lastModifiedDate":"2021-10-11"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"        /**","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"         * Tests if the provided person matches all the available criteria.","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"         *","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"         * @param person The Person object to test","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"         * @return True if matches all the preset criteria","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"         */","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"        public boolean test(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"            List\u003cPredicate\u003cPerson\u003e\u003e allPredicates \u003d Arrays.asList(","lastModifiedDate":"2021-10-11"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getName().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-11"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getRoom().orElse(x -\u003e true).test(p),","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getPhone().orElse(x -\u003e true).test(p.getPhone()),","lastModifiedDate":"2021-10-11"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getEmail().orElse(x -\u003e true).test(p.getEmail()),","lastModifiedDate":"2021-10-11"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getVaccStatus().orElse(x -\u003e true).test(p.getVaccStatus()),","lastModifiedDate":"2021-10-11"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"                p -\u003e getFaculty().orElse(x -\u003e true).test(p.getFaculty()));","lastModifiedDate":"2021-10-11"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"            return allPredicates","lastModifiedDate":"2021-10-11"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"                    .stream()","lastModifiedDate":"2021-10-11"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"                    .reduce(p -\u003e true, Predicate::and)","lastModifiedDate":"2021-10-11"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"                    .test(person);","lastModifiedDate":"2021-10-11"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"        @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-10-11"},{"lineNumber":198,"author":{"gitId":"VimuthM"},"content":"            // short circuit if same object","lastModifiedDate":"2021-10-11"},{"lineNumber":199,"author":{"gitId":"VimuthM"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-11"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"                return true;","lastModifiedDate":"2021-10-11"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-10-11"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"            if (!(other instanceof FindCompositePredicate)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"                return false;","lastModifiedDate":"2021-10-11"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-11"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"            // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate e \u003d (FindCompositePredicate) other;","lastModifiedDate":"2021-10-11"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"            return Objects.equals(eName, e.eName)","lastModifiedDate":"2021-10-12"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eRoom, e.eRoom)","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(ePhone, e.ePhone)","lastModifiedDate":"2021-10-12"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eEmail, e.eEmail)","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eVaccStatus, e.eVaccStatus)","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"                    \u0026\u0026 Objects.equals(eFaculty, e.eFaculty);","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":218,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"chongjunwei":7,"gordonlzy":1,"-":27,"VimuthM":184}},{"path":"src/main/java/safeforhall/logic/commands/sort/SortEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.sort;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":" * Sorts list of events in the application.","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"public class SortEventCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    public static final String PARAMETERS \u003d \"by/FIELD o/ORDER\";","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Events have been successfully sorted.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    public static final String ALLOWED_FIELDS \u003d \"FIELD should be one of the following: \"","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"            + EventName.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"            + EventDate.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"            + Capacity.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"            + Venue.FIELD;","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    public static final String ASCENDING \u003d \"a\";","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESCENDING \u003d \"d\";","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    public static final String ALLOWED_ORDER \u003d \"ORDER should be one of the following: \" + ASCENDING + \", \" + DESCENDING;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort events by field in \"","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            + \"ascending or descending order. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"            + \"Parameters: \" + PREFIX_SORT + \"FIELD \" + PREFIX_ORDER + \"ORDER \\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"            + ALLOWED_FIELDS + \"\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"            + ALLOWED_ORDER + \"\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SORT + EventName.FIELD + \" \" + PREFIX_ORDER + DESCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    private final String field;","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    private final String order;","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"     * Creates a {@code SortCommand} to sort the list of residents","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"     * @param field The field to sort by.","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"     * @param order Ascending or descending order to sort.","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    public SortEventCommand(String field, String order) {","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(field);","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(order);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        this.field \u003d field;","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        this.order \u003d order;","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cEvent\u003e comparator \u003d getComparator();","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        model.updateSortedEventList(comparator);","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"     * Creates a Comparator given the field and order for sort.","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"     * @return Comparator that sorts by the field and order specified.","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If field or order provided is invalid.","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"    public Comparator\u003cEvent\u003e getComparator() throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cEvent\u003e comparator;","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        switch (field) {","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        case EventName.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Event::getEventName);","lastModifiedDate":"2021-10-29"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        case EventDate.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Event::getEventDate).thenComparing(Event::getEventTime);","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"        case Capacity.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Event::getCapacity);","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"        case Venue.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Event::getVenue);","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"        default:","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"            throw new CommandException(ALLOWED_FIELDS);","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"        switch (order) {","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"        case ASCENDING:","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            return comparator;","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"        case DESCENDING:","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"            return comparator.reversed();","lastModifiedDate":"2021-10-29"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        default:","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"            throw new CommandException(ALLOWED_ORDER);","lastModifiedDate":"2021-10-29"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-03"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-03"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"                || (other instanceof SortEventCommand // instanceof handles nulls","lastModifiedDate":"2021-11-03"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 field.equals(((SortEventCommand) other).field)","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 order.equals(((SortEventCommand) other).order));","lastModifiedDate":"2021-11-03"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"jaredlhf":117}},{"path":"src/main/java/safeforhall/logic/commands/sort/SortPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.sort;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":" * Sorts list of persons in the application.","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"public class SortPersonCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    public static final String PARAMETERS \u003d \"by/FIELD o/ORDER\";","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Residents have been successfully sorted.\";","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    public static final String ALLOWED_FIELDS \u003d \"FIELD should be one of the following: \"","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"            + Name.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"            + Email.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"            + Room.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            + Phone.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            + Faculty.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"            + VaccStatus.FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"            + LastDate.FET_FIELD + \", \"","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"            + LastDate.COLLECTION_FIELD;","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    public static final String ASCENDING \u003d \"a\";","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESCENDING \u003d \"d\";","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    public static final String ALLOWED_ORDER \u003d \"ORDER should be one of the following: \" + ASCENDING + \", \" + DESCENDING;","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort residents by field in \"","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"            + \"ascending or descending order. \\n\"","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"            + \"Parameters: \" + PREFIX_SORT + \"FIELD \" + PREFIX_ORDER + \"ORDER \\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"            + ALLOWED_FIELDS + \"\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"            + ALLOWED_ORDER + \"\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SORT + Name.FIELD + \" \" + PREFIX_ORDER + ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    private final String field;","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    private final String order;","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"     * Creates a SortPersonCommand to sort the list of residents.","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"     * @param field The field to sort by.","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"     * @param order Ascending or descending order to sort.","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    public SortPersonCommand(String field, String order) {","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(field);","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(order);","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        this.field \u003d field;","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        this.order \u003d order;","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator();","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"        model.updateSortedPersonList(comparator);","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"     * Creates a Comparator given the field and order for sort.","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"     * @return Comparator that sorts by the field and order specified.","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"     * @throws CommandException If field or order provided is invalid.","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"    public Comparator\u003cPerson\u003e getComparator() throws CommandException {","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cPerson\u003e comparator;","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        switch (field) {","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"        case Name.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getName);","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"        case Email.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getEmail);","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"        case Room.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getRoom);","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"        case Phone.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getPhone);","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"        case Faculty.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getFaculty);","lastModifiedDate":"2021-10-29"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"        case VaccStatus.FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getVaccStatus);","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"        case LastDate.FET_FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getLastFetDate);","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"        case LastDate.COLLECTION_FIELD:","lastModifiedDate":"2021-10-29"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"            comparator \u003d Comparator.comparing(Person::getLastCollectionDate);","lastModifiedDate":"2021-10-29"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"            break;","lastModifiedDate":"2021-10-29"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"        default:","lastModifiedDate":"2021-10-29"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"            throw new CommandException(ALLOWED_FIELDS);","lastModifiedDate":"2021-10-29"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        switch (order) {","lastModifiedDate":"2021-10-29"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"        case ASCENDING:","lastModifiedDate":"2021-10-29"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"            return comparator;","lastModifiedDate":"2021-10-29"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"        case DESCENDING:","lastModifiedDate":"2021-10-29"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"            return comparator.reversed();","lastModifiedDate":"2021-10-29"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"        default:","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"jaredlhf"},"content":"            throw new CommandException(ALLOWED_ORDER);","lastModifiedDate":"2021-10-29"},{"lineNumber":129,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-11-03"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-11-03"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-11-03"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"                || (other instanceof SortPersonCommand // instanceof handles nulls","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 field.equals(((SortPersonCommand) other).field)","lastModifiedDate":"2021-11-03"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 order.equals(((SortPersonCommand) other).order));","lastModifiedDate":"2021-11-03"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":140,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"jaredlhf":140}},{"path":"src/main/java/safeforhall/logic/commands/view/ViewEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-20"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-20"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2021-10-20"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"public class ViewEventCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-10-20"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"[INDEX]\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_ALL_EVENTS_SHOWN \u003d \"All events shown\";","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the additional details of the identified event \"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"            + \"by the index numbers used in the displayed event list, and views all events when \"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"            + \"index is not specified. \"","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_VIEW_EVENT_SUCCESS \u003d \"Event details displayed in sidebar\";","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    private Index targetIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewEventCommand() {","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"     * @param targetIndex Index of Event in the filtered event list to edit","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewEventCommand(Index targetIndex) {","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex \u003d\u003d null) {","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"            model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"            model.setNoEvent();","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"            model.updateSortedEventList(null);","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"            return new CommandResult(MESSAGE_ALL_EVENTS_SHOWN);","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            setSingleEvent(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"            return new CommandResult(MESSAGE_VIEW_EVENT_SUCCESS);","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public void setSingleEvent(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cEvent\u003e filteredPersonList \u003d model.getFilteredEventList();","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventToShow \u003d filteredPersonList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        model.setSingleEvent(eventToShow);","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-20"}],"authorContributionMap":{"rebeccalaujx":38,"gordonlzy":1,"VimuthM":6,"jaredlhf":22}},{"path":"src/main/java/safeforhall/logic/commands/view/ViewPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-20"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-20"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"public class ViewPersonCommand extends Command {","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String PARAMETERS \u003d \"[INDEX]\";","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_ALL_RESIDENTS_SHOWN \u003d \"All residents shown\";","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views the additional details of the \"","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"            + \"identified resident by the index numbers used in the displayed resident list, \"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"            + \"or views all residents when the index is not specified. \"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_VIEW_RESIDENT_SUCCESS \u003d \"Resident details displayed in sidebar\";","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    private Index targetIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewPersonCommand() {","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"     * @param targetIndex Index of Resident in the filtered resident list to edit","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewPersonCommand(Index targetIndex) {","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex \u003d\u003d null) {","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            model.setNoPerson();","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"            model.updateSortedPersonList(null);","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"            return new CommandResult(MESSAGE_ALL_RESIDENTS_SHOWN);","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"            setSinglePerson(model);","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            return new CommandResult(MESSAGE_VIEW_RESIDENT_SUCCESS);","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    public void setSinglePerson(Model model) throws CommandException {","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        model.setSinglePerson(filteredPersonList.get(targetIndex.getZeroBased()));","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":34,"chongjunwei":1,"gordonlzy":1,"-":15,"VimuthM":9,"jaredlhf":5}},{"path":"src/main/java/safeforhall/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExcludeCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.SwitchCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.TraceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeleteEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.add.AddEventCommandParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.add.AddPersonCommandParser;","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.delete.DeleteEventCommandParser;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.delete.DeletePersonCommandParser;","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.edit.EditEventCommandParser;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.edit.EditPersonCommandParser;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.find.FindEventCommandParser;","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.find.FindPersonCommandParser;","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.sort.SortEventCommandParser;","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.sort.SortPersonCommandParser;","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.view.ViewEventCommandParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.view.ViewPersonCommandParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"     * @param isResidentTab indicates if the active tab is Resident or Model","lastModifiedDate":"2021-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    public Command parseCommand(String userInput, Boolean isResidentTab) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"            return new ClearCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"            return new ExitCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-16"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"            return new HelpCommand();","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"        case SwitchCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"            return new SwitchCommand();","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"            if (isResidentTab) {","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                return parseResidentCommand(commandWord, arguments);","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"            } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"                return parseEventCommand(commandWord, arguments);","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"     * Parses commands that have been input while the Resident tab is active.","lastModifiedDate":"2021-10-16"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"     * @param commandWord the main command word","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"     * @param arguments the provided arguments","lastModifiedDate":"2021-10-16"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-16"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-16"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    private Command parseResidentCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        case AddPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"            return new AddPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        case EditPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"            return new EditPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"        case DeletePersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"            return new DeletePersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"        case FindPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"            return new FindPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-23"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"            return new DeadlineCommandParser().parse(arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"        case ViewPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-20"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        case ImportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            return new ImportCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"        case ExportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"            return new ExportCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        case TraceCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"            return new TraceCommandParser().parse(arguments);","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"        case SortPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"            return new SortPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-10-29"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        default:","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"     * Parses commands that have been input while the Event tab is active.","lastModifiedDate":"2021-10-16"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"     * @param commandWord the main command word","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"     * @param arguments the provided arguments","lastModifiedDate":"2021-10-16"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"     * @return the command based on the user input","lastModifiedDate":"2021-10-16"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    private Command parseEventCommand(String commandWord, String arguments) throws ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"        switch (commandWord) {","lastModifiedDate":"2021-10-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-17"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-17"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"        case DeleteEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"            return new DeleteEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"        case EditEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"            return new EditEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"jaredlhf"},"content":"        case ViewEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-20"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-23"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"        case IncludeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-18"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"            return new IncludeCommandParser().parse(arguments);","lastModifiedDate":"2021-10-18"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"        case ExcludeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"            return new ExcludeCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"chongjunwei"},"content":"        case FindEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"            return new FindEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"jaredlhf"},"content":"        case SortEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"jaredlhf"},"content":"            return new SortEventCommandParser().parse(arguments);","lastModifiedDate":"2021-10-29"},{"lineNumber":178,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":15,"chongjunwei":27,"gordonlzy":11,"VimuthM":68,"-":44,"jaredlhf":18}},{"path":"src/main/java/safeforhall/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"VimuthM":1,"-":59}},{"path":"src/main/java/safeforhall/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"VimuthM":1,"-":147}},{"path":"src/main/java/safeforhall/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_KEYWORD \u003d new Prefix(\"k/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_DATE1 \u003d new Prefix(\"d1/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_DATE2 \u003d new Prefix(\"d2/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_VACCSTATUS \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_FETDATE \u003d new Prefix(\"fd/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_COLLECTIONDATE \u003d new Prefix(\"cd/\");","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final Prefix PREFIX_RESIDENTS \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public static final Prefix PREFIX_RESIDENT \u003d new Prefix(\"r/\");","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"    public static final Prefix PREFIX_DEPTH \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_SORT \u003d new Prefix(\"by/\");","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"gordonlzy":4,"chongjunwei":4,"VimuthM":4,"-":11,"jaredlhf":7}},{"path":"src/main/java/safeforhall/logic/parser/DeadlineCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"     * and returns a FindPersonCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    public DeadlineCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_KEYWORD, CliSyntax.PREFIX_DATE1,","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"                        CliSyntax.PREFIX_DATE2);","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_KEYWORD, CliSyntax.PREFIX_DATE1)","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        String keyword \u003d argMultimap.getValue(CliSyntax.PREFIX_KEYWORD).get();","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        if (!isKeywordValid(argMultimap, keyword)) {","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE_LATE));","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        if ((keyword.equals(\"c\") || keyword.equals(\"f\")) \u0026\u0026 !arePrefixesPresent(argMultimap, CliSyntax.PREFIX_DATE2)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DATE2).isEmpty()) {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            LastDate date \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE1).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"            return new DeadlineCommand(keyword, date);","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            LastDate date1 \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE1).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            LastDate date2 \u003d ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_DATE2).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"            return new DeadlineCommand(keyword, date1, date2);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-11"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    private static boolean isKeywordValid(ArgumentMultimap argumentMultimap, String keyword) {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        boolean normalKeywords \u003d keyword.equals(\"c\") || keyword.equals(\"f\");","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        boolean lateKeywords \u003d keyword.equals(\"lc\") || keyword.equals(\"lf\");","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        boolean emptyDate2 \u003d argumentMultimap.getValue(CliSyntax.PREFIX_DATE2).isEmpty();","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        return normalKeywords || (lateKeywords \u0026\u0026 emptyDate2);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":62,"chongjunwei":2}},{"path":"src/main/java/safeforhall/logic/parser/ExcludeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_RESIDENTS;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExcludeCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":" * Parses input arguments and creates a new ExcludeCommand object","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"public class ExcludeCommandParser implements Parser\u003cExcludeCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"     * Parses the given {@code String} of arguments in the context of the IncludeCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"     * and returns an IncludeCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public ExcludeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENTS);","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESIDENTS)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        Index index;","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            String preamble \u003d argMultimap.getPreamble();","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            index \u003d ParserUtil.parseIndex(preamble);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + ExcludeCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        // Required fields","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        ResidentList list \u003d ParserUtil.parseResidents(argMultimap.getValue(PREFIX_RESIDENTS).get());","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        return new ExcludeCommand(index, list);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"gordonlzy":54}},{"path":"src/main/java/safeforhall/logic/parser/ExportCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"     * and returns a ExportCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    public ExportCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"        String fileName \u003d ParserUtil.parseExportFileName(args);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"        return new ExportCommand(fileName);","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"jaredlhf":21}},{"path":"src/main/java/safeforhall/logic/parser/ImportCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"     * and returns a ImportCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    public ImportCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"        String fileName \u003d ParserUtil.parseImportFileName(args);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"        return new ImportCommand(fileName);","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"VimuthM":19,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/parser/IncludeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_RESIDENTS;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":" * Parses input arguments and creates a new IncludeCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandParser implements Parser\u003cIncludeCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"     * Parses the given {@code String} of arguments in the context of the IncludeCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"     * and returns an IncludeCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public IncludeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESIDENTS)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        Index index;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            String preamble \u003d argMultimap.getPreamble();","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            index \u003d ParserUtil.parseIndex(preamble);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + IncludeCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        // Required fields","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        ResidentList list \u003d ParserUtil.parseResidents(argMultimap.getValue(PREFIX_RESIDENTS).get());","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        return new IncludeCommand(index, list);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":54}},{"path":"src/main/java/safeforhall/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"VimuthM":3,"-":13}},{"path":"src/main/java/safeforhall/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ALLOWED_ORDER;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ASCENDING;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.DESCENDING;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses {@code indexes} into their relevant {@code Index} and returns it.","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    @SafeVarargs","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"    public static ArrayList\u003cIndex\u003e parseIndexes(String... indexes) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        for (String i : indexes) {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(i)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"                throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"            indexArray.add(Index.fromOneBased(Integer.parseInt(i)));","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        return indexArray;","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String room} into a {@code Room}.","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code room} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"    public static Room parseRoom(String room) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"        String trimmedRoom \u003d room.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"        if (!Room.isValidRoom(trimmedRoom)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"        return new Room(trimmedRoom);","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"     * Parses a {@code String room} into a {@code Room}.","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-17"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-17"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the given {@code room} is invalid.","lastModifiedDate":"2021-10-17"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"    public static String parseRoomForFind(String room) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        String trimmedRoom \u003d room.trim();","lastModifiedDate":"2021-10-17"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        if (!Room.isValidRoomForFind(trimmedRoom)) {","lastModifiedDate":"2021-10-17"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        return trimmedRoom;","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String vaccStatus} into a {@code VaccStatus}.","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code vaccStatus} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"jaredlhf"},"content":"    public static VaccStatus parseVaccStatus(String vaccStatus) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(vaccStatus);","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"        String trimmedVaccStatus \u003d vaccStatus.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"        if (!VaccStatus.isValidVaccStatus(trimmedVaccStatus)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(VaccStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"        return new VaccStatus(trimmedVaccStatus);","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":161,"author":{"gitId":"jaredlhf"},"content":"     * Parses a {@code String faculty} into a {@code Faculty}.","lastModifiedDate":"2021-10-10"},{"lineNumber":162,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-10"},{"lineNumber":163,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":164,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code faculty} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":166,"author":{"gitId":"jaredlhf"},"content":"    public static Faculty parseFaculty(String faculty) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":167,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(faculty);","lastModifiedDate":"2021-10-10"},{"lineNumber":168,"author":{"gitId":"jaredlhf"},"content":"        String trimmedFaculty \u003d faculty.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":169,"author":{"gitId":"jaredlhf"},"content":"        if (!Faculty.isValidFaculty(trimmedFaculty)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":170,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"        return new Faculty(trimmedFaculty);","lastModifiedDate":"2021-10-10"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"     * Parses a {@code String date} into a {@code LastDate}.","lastModifiedDate":"2021-10-10"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-10"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"    public static LastDate parseDate(String date) throws ParseException {","lastModifiedDate":"2021-10-10"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-10"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2021-10-10"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(trimmedDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        if (LastDate.isFutureDate(trimmedDate)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(LastDate.MESSAGE_IS_FUTURE_DATE);","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"        return new LastDate(trimmedDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":193,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String eventName} into a {@code EventName}.","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code eventName} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"    public static EventName parseEventName(String eventName) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"chongjunwei"},"content":"        String trimmedEventName \u003d eventName.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"chongjunwei"},"content":"        if (!EventName.isValidEventName(trimmedEventName)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":204,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":205,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":206,"author":{"gitId":"chongjunwei"},"content":"        return new EventName(trimmedEventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":210,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String eventDate} into a {@code EventDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":213,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code eventDate} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":214,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":215,"author":{"gitId":"chongjunwei"},"content":"    public static EventDate parseEventDate(String eventDate) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":216,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"chongjunwei"},"content":"        String trimmedEventDate \u003d eventDate.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":218,"author":{"gitId":"chongjunwei"},"content":"        if (!EventDate.isValidEventDate(trimmedEventDate)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":219,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":220,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"        return new EventDate(trimmedEventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":222,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":223,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":224,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":225,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String eventTime} into a {@code EventTime}.","lastModifiedDate":"2021-10-24"},{"lineNumber":226,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-24"},{"lineNumber":227,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":228,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code eventTime} is invalid.","lastModifiedDate":"2021-10-24"},{"lineNumber":229,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":230,"author":{"gitId":"chongjunwei"},"content":"    public static EventTime parseEventTime(String eventTime) throws ParseException {","lastModifiedDate":"2021-10-24"},{"lineNumber":231,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":232,"author":{"gitId":"chongjunwei"},"content":"        String trimmedEventTime \u003d eventTime.trim();","lastModifiedDate":"2021-10-24"},{"lineNumber":233,"author":{"gitId":"chongjunwei"},"content":"        if (!EventTime.isValidEventTime(trimmedEventTime)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":234,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(EventTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":235,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":236,"author":{"gitId":"chongjunwei"},"content":"        return new EventTime(trimmedEventTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":237,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":238,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":239,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":240,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String venue} into a {@code Venue}.","lastModifiedDate":"2021-10-13"},{"lineNumber":241,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":242,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":243,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code venue} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":244,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":245,"author":{"gitId":"chongjunwei"},"content":"    public static Venue parseVenue(String venue) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":246,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":247,"author":{"gitId":"chongjunwei"},"content":"        String trimmedVenue \u003d venue.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":248,"author":{"gitId":"chongjunwei"},"content":"        if (!Venue.isValidVenue(trimmedVenue)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":249,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":250,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":251,"author":{"gitId":"chongjunwei"},"content":"        return new Venue(trimmedVenue);","lastModifiedDate":"2021-10-13"},{"lineNumber":252,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":253,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":254,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":255,"author":{"gitId":"chongjunwei"},"content":"     * Parses a {@code String capacity} into a {@code Capacity}.","lastModifiedDate":"2021-10-13"},{"lineNumber":256,"author":{"gitId":"chongjunwei"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-13"},{"lineNumber":257,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":258,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the given {@code capacity} is invalid.","lastModifiedDate":"2021-10-13"},{"lineNumber":259,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":260,"author":{"gitId":"chongjunwei"},"content":"    public static Capacity parseCapacity(String capacity) throws ParseException {","lastModifiedDate":"2021-10-13"},{"lineNumber":261,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":262,"author":{"gitId":"chongjunwei"},"content":"        String trimmedCapacity \u003d capacity.trim();","lastModifiedDate":"2021-10-13"},{"lineNumber":263,"author":{"gitId":"chongjunwei"},"content":"        if (!Capacity.isValidCapacity(trimmedCapacity)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":264,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":265,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":266,"author":{"gitId":"chongjunwei"},"content":"        return new Capacity(trimmedCapacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":267,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":270,"author":{"gitId":"gordonlzy"},"content":"     * Parses a {@code String information} into a {@code InformationList}.","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"gordonlzy"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"gordonlzy"},"content":"    public static ResidentList parseResidents(String information) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(information);","lastModifiedDate":"2021-10-18"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"        String trimmedInformation \u003d information.trim();","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"        if (!ResidentList.isValidResidentList(trimmedInformation)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"            throw new ParseException(ResidentList.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"        return new ResidentList(trimmedInformation);","lastModifiedDate":"2021-10-18"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":284,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":285,"author":{"gitId":"jaredlhf"},"content":"     * Parse a {@code String fileName} into a {@code String fileName} for ExportCommand.","lastModifiedDate":"2021-10-28"},{"lineNumber":286,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-28"},{"lineNumber":287,"author":{"gitId":"jaredlhf"},"content":"     * Ensures that fileName is a single word with no whitespace.","lastModifiedDate":"2021-10-28"},{"lineNumber":288,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":289,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":290,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":291,"author":{"gitId":"jaredlhf"},"content":"    public static String parseExportFileName(String fileName) throws ParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":292,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(fileName);","lastModifiedDate":"2021-10-28"},{"lineNumber":293,"author":{"gitId":"jaredlhf"},"content":"        String trimmedFileName \u003d fileName.trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":294,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":295,"author":{"gitId":"jaredlhf"},"content":"        if (trimmedFileName.isEmpty() || trimmedFileName.contains(\" \")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":296,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(ExportCommand.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":297,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":298,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":299,"author":{"gitId":"jaredlhf"},"content":"        return trimmedFileName;","lastModifiedDate":"2021-10-28"},{"lineNumber":300,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":301,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":302,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":303,"author":{"gitId":"jaredlhf"},"content":"     * Parse a {@code String fileName} into a {@code String fileName} for ImportCommand.","lastModifiedDate":"2021-10-28"},{"lineNumber":304,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-28"},{"lineNumber":305,"author":{"gitId":"jaredlhf"},"content":"     * Ensures that fileName is a single word with no whitespace.","lastModifiedDate":"2021-10-28"},{"lineNumber":306,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-28"},{"lineNumber":307,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-28"},{"lineNumber":308,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":309,"author":{"gitId":"jaredlhf"},"content":"    public static String parseImportFileName(String fileName) throws ParseException {","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(fileName);","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"jaredlhf"},"content":"        String trimmedFileName \u003d fileName.trim();","lastModifiedDate":"2021-10-28"},{"lineNumber":312,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"jaredlhf"},"content":"        if (trimmedFileName.isEmpty() || trimmedFileName.contains(\" \")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":314,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(ImportCommand.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":315,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":317,"author":{"gitId":"jaredlhf"},"content":"        return trimmedFileName;","lastModifiedDate":"2021-10-28"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":319,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":320,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":321,"author":{"gitId":"jaredlhf"},"content":"     * Parse a {@code String field} into a {@code String field} for SortPersonCommand.","lastModifiedDate":"2021-10-29"},{"lineNumber":322,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-29"},{"lineNumber":323,"author":{"gitId":"jaredlhf"},"content":"     * Ensures that field is valid.","lastModifiedDate":"2021-10-29"},{"lineNumber":324,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":325,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-29"},{"lineNumber":326,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":327,"author":{"gitId":"jaredlhf"},"content":"    public static String parsePersonField(String field) throws ParseException {","lastModifiedDate":"2021-10-29"},{"lineNumber":328,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(field);","lastModifiedDate":"2021-10-29"},{"lineNumber":329,"author":{"gitId":"jaredlhf"},"content":"        String trimmedField \u003d field.trim().toLowerCase();","lastModifiedDate":"2021-10-29"},{"lineNumber":330,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString\u003e allowedFields \u003d new ArrayList\u003c\u003e(Arrays.asList(Name.FIELD,","lastModifiedDate":"2021-10-29"},{"lineNumber":331,"author":{"gitId":"jaredlhf"},"content":"                Email.FIELD, Room.FIELD, Phone.FIELD, Faculty.FIELD, VaccStatus.FIELD,","lastModifiedDate":"2021-10-29"},{"lineNumber":332,"author":{"gitId":"jaredlhf"},"content":"                LastDate.FET_FIELD, LastDate.COLLECTION_FIELD));","lastModifiedDate":"2021-10-29"},{"lineNumber":333,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":334,"author":{"gitId":"jaredlhf"},"content":"        if (!allowedFields.contains(trimmedField)) {","lastModifiedDate":"2021-10-29"},{"lineNumber":335,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(SortPersonCommand.ALLOWED_FIELDS);","lastModifiedDate":"2021-11-03"},{"lineNumber":336,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":337,"author":{"gitId":"jaredlhf"},"content":"        return trimmedField;","lastModifiedDate":"2021-10-29"},{"lineNumber":338,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":339,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":340,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":341,"author":{"gitId":"jaredlhf"},"content":"     * Parse a {@code String field} into a {@code String field} for SortEventCommand.","lastModifiedDate":"2021-10-29"},{"lineNumber":342,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-29"},{"lineNumber":343,"author":{"gitId":"jaredlhf"},"content":"     * Ensures that field is valid.","lastModifiedDate":"2021-10-29"},{"lineNumber":344,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":345,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-29"},{"lineNumber":346,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":347,"author":{"gitId":"jaredlhf"},"content":"    public static String parseEventField(String field) throws ParseException {","lastModifiedDate":"2021-10-29"},{"lineNumber":348,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(field);","lastModifiedDate":"2021-10-29"},{"lineNumber":349,"author":{"gitId":"jaredlhf"},"content":"        String trimmedField \u003d field.trim().toLowerCase();","lastModifiedDate":"2021-10-29"},{"lineNumber":350,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString\u003e allowedFields \u003d new ArrayList\u003c\u003e(Arrays.asList(EventName.FIELD,","lastModifiedDate":"2021-10-29"},{"lineNumber":351,"author":{"gitId":"jaredlhf"},"content":"                EventDate.FIELD, Capacity.FIELD, Venue.FIELD));","lastModifiedDate":"2021-10-29"},{"lineNumber":352,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":353,"author":{"gitId":"jaredlhf"},"content":"        if (!allowedFields.contains(trimmedField)) {","lastModifiedDate":"2021-10-29"},{"lineNumber":354,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(SortEventCommand.ALLOWED_FIELDS);","lastModifiedDate":"2021-11-03"},{"lineNumber":355,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":356,"author":{"gitId":"jaredlhf"},"content":"        return trimmedField;","lastModifiedDate":"2021-10-29"},{"lineNumber":357,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":358,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":359,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":360,"author":{"gitId":"jaredlhf"},"content":"     * Parse a {@code String order} into a {@code String order} for SortCommand.","lastModifiedDate":"2021-10-29"},{"lineNumber":361,"author":{"gitId":"jaredlhf"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-10-29"},{"lineNumber":362,"author":{"gitId":"jaredlhf"},"content":"     * Ensures that field is valid.","lastModifiedDate":"2021-10-29"},{"lineNumber":363,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-29"},{"lineNumber":364,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the given {@code information} is invalid.","lastModifiedDate":"2021-10-29"},{"lineNumber":365,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":366,"author":{"gitId":"jaredlhf"},"content":"    public static String parseOrder(String order) throws ParseException {","lastModifiedDate":"2021-10-29"},{"lineNumber":367,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(order);","lastModifiedDate":"2021-10-29"},{"lineNumber":368,"author":{"gitId":"jaredlhf"},"content":"        String trimmedOrder \u003d order.trim().toLowerCase();","lastModifiedDate":"2021-11-08"},{"lineNumber":369,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":370,"author":{"gitId":"jaredlhf"},"content":"        if (!trimmedOrder.equals(ASCENDING) \u0026\u0026 !trimmedOrder.equals(DESCENDING)) {","lastModifiedDate":"2021-10-29"},{"lineNumber":371,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(ALLOWED_ORDER);","lastModifiedDate":"2021-10-29"},{"lineNumber":372,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":373,"author":{"gitId":"jaredlhf"},"content":"        return trimmedOrder;","lastModifiedDate":"2021-10-29"},{"lineNumber":374,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":375,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":376,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":377,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"rebeccalaujx":23,"chongjunwei":80,"gordonlzy":36,"VimuthM":22,"-":85,"jaredlhf":131}},{"path":"src/main/java/safeforhall/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"VimuthM":1,"-":38}},{"path":"src/main/java/safeforhall/logic/parser/TraceCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.TraceCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"public class TraceCommandParser implements Parser\u003cTraceCommand\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the TraceCommand","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"     * and returns a TraceCommand object for execution.","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    public TraceCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TraceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_RESIDENT,","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"                CliSyntax.PREFIX_DEPTH, CliSyntax.PREFIX_DURATION);","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_RESIDENT)","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TraceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        // Required fields","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        // Either name or room need to be valid","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        String inputForResident \u003d argMultimap.getValue(CliSyntax.PREFIX_RESIDENT).get();","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            ParserUtil.parseName(inputForResident);","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"                ParserUtil.parseRoom(inputForResident);","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                throw new ParseException(\"Information is neither a room or name\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"                        + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        // Optional fields","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        Integer[] result \u003d parseDepthDuration(argMultimap);","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        return new TraceCommand(inputForResident, result[0], result[1]);","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    private Integer[] parseDepthDuration(ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        Integer depth;","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        Integer duration;","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"            depth \u003d Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DEPTH)","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"                    .orElse(TraceCommand.DEFAULT_DEPTH.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            duration \u003d Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DURATION)","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"                    .orElse(TraceCommand.DEFAULT_DURATION.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            if (depth \u003c 1 || depth \u003e 5) {","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                throw new ParseException(\"Depth must be greater than 0 and less than 6\\n\"","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"                        + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"            if (duration \u003c 1 || duration \u003e 31) {","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                throw new ParseException(\"Duration must be greater than 0 and less than 32\\n\"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"                        + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(\"Depth and duration must be integers\\n\" + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        return new Integer[]{depth, duration};","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"VimuthM":82}},{"path":"src/main/java/safeforhall/logic/parser/add/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_RESIDENTS;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":" * Parses input arguments and creates a new AddEventCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME,","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"                        PREFIX_VENUE, PREFIX_CAPACITY, PREFIX_RESIDENTS);","lastModifiedDate":"2021-10-20"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE,","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"                PREFIX_TIME, PREFIX_VENUE, PREFIX_CAPACITY)","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        EventTime eventTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_TIME).get());","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"        Capacity capacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residents \u003d ParserUtil.parseResidents(argMultimap.getValue(PREFIX_RESIDENTS)","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"                .orElse(ResidentList.DEFAULT_LIST));","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        Event event \u003d new Event(eventName, eventDate, eventTime, venue, capacity, residents);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        return new AddEventCommand(event);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":50,"gordonlzy":5,"VimuthM":14}},{"path":"src/main/java/safeforhall/logic/parser/add/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":" * Parses input arguments and creates a new AddPersonCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"     * and returns an AddPersonCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    public AddPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"                        PREFIX_EMAIL, PREFIX_ROOM, PREFIX_VACCSTATUS, PREFIX_FACULTY,","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"                        PREFIX_FETDATE, PREFIX_COLLECTIONDATE);","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"                PREFIX_ROOM, PREFIX_VACCSTATUS, PREFIX_FACULTY)","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        // Required fields","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        Room room \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOM).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus vaccStatus \u003d ParserUtil.parseVaccStatus(argMultimap.getValue(PREFIX_VACCSTATUS).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        // Optional fields","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        LastDate lastFetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_FETDATE)","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"                .orElse(LastDate.DEFAULT_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        LastDate lastCollectionDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_COLLECTIONDATE)","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                .orElse(LastDate.DEFAULT_DATE));","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        Person person \u003d new Person(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        return new AddPersonCommand(person);","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"VimuthM":20,"-":28,"jaredlhf":31}},{"path":"src/main/java/safeforhall/logic/parser/delete/DeleteEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeleteEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new DeleteEventCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * and returns a DeleteEventCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            ArrayList\u003cIndex\u003e indexArray \u003d ParserUtil.parseIndexes(args.trim().split(\" \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            return new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    DeleteEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rebeccalaujx":3,"chongjunwei":12,"-":15,"VimuthM":3}},{"path":"src/main/java/safeforhall/logic/parser/delete/DeletePersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new DeletePersonCommand object","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * and returns a DeletePersonCommand object for execution.","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"            ArrayList\u003cIndex\u003e indexArray \u003d ParserUtil.parseIndexes(args.trim().split(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"            return new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    DeletePersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"chongjunwei":33}},{"path":"src/main/java/safeforhall/logic/parser/edit/EditEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-17"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-17"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-17"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":" * Parses input arguments and creates a new EditEventCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEventCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     * and returns an EditEventCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_VENUE, PREFIX_CAPACITY);","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        Index index;","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        try {","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + EditEventCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setName(ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setDate(ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setTime(ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_TIME).get()));","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"            editEventDescriptor.setCapacity(ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get()));","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-10-17"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        return new EditEventCommand(index, editEventDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"rebeccalaujx":67}},{"path":"src/main/java/safeforhall/logic/parser/edit/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-17"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-17"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":" * Parses input arguments and creates a new EditPersonCommand object","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_NAME \u003d \"Name should not be changed for more than one person.\";","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"Room should not be changed for more than one person.\";","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"     * and returns an EditPersonCommand object for execution.","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"                        CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_ROOM, CliSyntax.PREFIX_VACCSTATUS,","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"                        CliSyntax.PREFIX_FACULTY, CliSyntax.PREFIX_FETDATE, CliSyntax.PREFIX_COLLECTIONDATE);","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray;","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            indexArray \u003d ParserUtil.parseIndexes(argMultimap.getPreamble().split(\" \"));","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isNameChanged \u003d argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent();","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isRoomChanged \u003d argMultimap.getValue(CliSyntax.PREFIX_ROOM).isPresent();","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"            boolean isMoreThanOnePerson \u003d indexArray.size() \u003e 1;","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"            if (isMoreThanOnePerson \u0026\u0026 isNameChanged) {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"                throw new ParseException(MESSAGE_DUPLICATE_NAME);","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"            if (isMoreThanOnePerson \u0026\u0026 isRoomChanged) {","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"                throw new ParseException(MESSAGE_DUPLICATE_ROOM);","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"            String message \u003d pe.getMessage() + \"\\n\" + EditPersonCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message), pe);","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-10-04"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE)","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL)","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ROOM).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"            editPersonDescriptor.setRoom(ParserUtil.parseRoom(argMultimap.getValue(CliSyntax.PREFIX_ROOM)","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"                                .get()));","lastModifiedDate":"2021-10-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_VACCSTATUS).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setVaccStatus(ParserUtil.parseVaccStatus(argMultimap","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"                    .getValue(CliSyntax.PREFIX_VACCSTATUS).get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FACULTY).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(CliSyntax.PREFIX_FACULTY)","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FETDATE).isPresent()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setLastFetDate(ParserUtil.parseDate(argMultimap.getValue(CliSyntax.PREFIX_FETDATE)","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"                    .get()));","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_COLLECTIONDATE).isPresent()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"            editPersonDescriptor.setLastCollectionDate(ParserUtil.parseDate(argMultimap.getValue(","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"                    CliSyntax.PREFIX_COLLECTIONDATE).get()));","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"        return new EditPersonCommand(indexArray, editPersonDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"rebeccalaujx":51,"-":29,"VimuthM":14,"jaredlhf":2}},{"path":"src/main/java/safeforhall/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"VimuthM":2,"-":15}},{"path":"src/main/java/safeforhall/logic/parser/find/FindEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new FindEventCommand object","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the FindEventCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * and returns a FindEventCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public FindEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_DATE,","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"                        CliSyntax.PREFIX_VENUE, CliSyntax.PREFIX_CAPACITY);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand.FindCompositePredicate findCompositePredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"                new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"            findCompositePredicate.setEventName(ParserUtil.parseEventName(argMultimap.getValue(CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"                    .get()));","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"            findCompositePredicate.setEventDate(ParserUtil.parseEventDate(argMultimap.getValue(CliSyntax.PREFIX_DATE)","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"                    .get()));","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_VENUE).isPresent()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"            findCompositePredicate.setVenue(ParserUtil.parseVenue(argMultimap.getValue(CliSyntax.PREFIX_VENUE)","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"                    .get()));","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_CAPACITY).isPresent()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"            findCompositePredicate.setCapacity(ParserUtil.parseCapacity(argMultimap.getValue(CliSyntax.PREFIX_CAPACITY)","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"                    .get()));","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"        if (!findCompositePredicate.isAnyFieldFiltered()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"            throw new ParseException(FindEventCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        return new FindEventCommand(findCompositePredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"chongjunwei":63}},{"path":"src/main/java/safeforhall/logic/parser/find/FindPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" * Parses input arguments and creates a new FindPersonCommand object","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * and returns a FindPersonCommand object for execution.","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public FindPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ROOM,","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"                        CliSyntax.PREFIX_PHONE, CliSyntax.PREFIX_EMAIL, CliSyntax.PREFIX_VACCSTATUS,","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"                        CliSyntax.PREFIX_FACULTY);","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate findCompositePredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"                new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        setPredicateFields(argMultimap, findCompositePredicate);","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        if (!findCompositePredicate.isAnyFieldFiltered()) {","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            throw new ParseException(FindPersonCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        return new FindPersonCommand(findCompositePredicate);","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    private void setPredicateFields(ArgumentMultimap argMultimap,","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"                            FindPersonCommand.FindCompositePredicate findCompositePredicate) throws ParseException {","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME)","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ROOM).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setRoom(ParserUtil.parseRoomForFind(argMultimap.getValue(CliSyntax.PREFIX_ROOM)","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE)","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL)","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_VACCSTATUS).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setVaccStatus(ParserUtil.parseVaccStatus(argMultimap","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"                    .getValue(CliSyntax.PREFIX_VACCSTATUS).get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_FACULTY).isPresent()) {","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"            findCompositePredicate.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(CliSyntax.PREFIX_FACULTY)","lastModifiedDate":"2021-10-11"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"                    .get()));","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"chongjunwei":15,"-":17,"VimuthM":45}},{"path":"src/main/java/safeforhall/logic/parser/sort/SortEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser.sort;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":" * Parses input arguments and creates a new FindEventCommand object","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"public class SortEventCommandParser implements Parser\u003cSortEventCommand\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"     * Parses the given {@code String} of arguments in the context of the SortPersonCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"     * and returns a SortPersonCommand object for execution.","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public SortEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT,","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"                PREFIX_ORDER);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_SORT, PREFIX_ORDER)","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        // Required fields","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        String field \u003d ParserUtil.parseEventField(argMultimap.getValue(PREFIX_SORT).get());","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        String order \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER).get());","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        return new SortEventCommand(field, order);","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"jaredlhf":59}},{"path":"src/main/java/safeforhall/logic/parser/sort/SortPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser.sort;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-29"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.Prefix;","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":" * Parses input arguments and creates a new SortPersonCommand object","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"public class SortPersonCommandParser implements Parser\u003cSortPersonCommand\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"     * Parses the given {@code String} of arguments in the context of the SortPersonCommand","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"     * and returns a SortPersonCommand object for execution.","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public SortPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-10-29"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORT,","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"                PREFIX_ORDER);","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_SORT, PREFIX_ORDER)","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        // Required fields","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        String field \u003d ParserUtil.parsePersonField(argMultimap.getValue(PREFIX_SORT).get());","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        String order \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER).get());","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        return new SortPersonCommand(field, order);","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"jaredlhf":59}},{"path":"src/main/java/safeforhall/logic/parser/view/ViewEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.view;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"public class ViewEventCommandParser implements Parser\u003cViewEventCommand\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"        if (args.isEmpty() || args.equals(\"\")) {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewEventCommand();","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        Index index;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"            index \u003d ParserUtil.parseIndex(args.trim());","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewEventCommand(index);","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"                    ViewEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":29}},{"path":"src/main/java/safeforhall/logic/parser/view/ViewPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.view;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.Parser;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.ParserUtil;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"public class ViewPersonCommandParser implements Parser\u003cViewPersonCommand\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"    public ViewPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"        if (args.isEmpty() || args.equals(\"\")) {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewPersonCommand();","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        Index index;","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"            index \u003d ParserUtil.parseIndex(args.trim());","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"            return new ViewPersonCommand(index);","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"                    ViewPersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":29}},{"path":"src/main/java/safeforhall/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-20"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.UniqueEventList;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.UniquePersonList;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the contents of the event list with {@code events}.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        this.events.setEvents(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if a person with the same exact identity as {@code person} exists in the address book.","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean hasExactPerson(Person person) {","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        return persons.containsExact(person);","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if an event with the same details as {@code event} exists in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        return events.contains(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"     * Adds an event to the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"     * The event must not already exist in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"    public void addEvent(Event e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"        events.add(e);","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"     * Finds the event list for an event from the given Event Name.","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"    public Optional\u003cEvent\u003e findEvent(EventName eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        for (Event event : events) {","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"            if (event.hasSameEventName(eventName)) {","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"                return Optional.of(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        return Optional.empty();","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"     * Finds the person list for an event from the given String.","lastModifiedDate":"2021-10-20"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"    public Optional\u003cPerson\u003e findPerson(String information) throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        if (Room.isValidRoom(information)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"            Room room \u003d new Room(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"                if (person.getRoom().equals(room)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"                    return Optional.of(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"        } else if (Name.isValidName(information)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"            Name name \u003d new Name(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"            for (Person person : persons) {","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"                if (person.getName().equals(name)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"                    return Optional.of(person);","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-20"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"            throw new CommandException(\"Information is neither a room or name\");","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        return Optional.empty();","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-17"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        events.setEvent(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"    public void removeEvent(Event key) {","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"        events.remove(key);","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":206,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":210,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":215,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2021-10-13"},{"lineNumber":216,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 events.equals(((AddressBook) other).events));","lastModifiedDate":"2021-10-13"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":19,"gordonlzy":40,"chongjunwei":44,"VimuthM":4,"-":116}},{"path":"src/main/java/safeforhall/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if a person with the exact same identity as {@code person} exists in the address book.","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    boolean hasExactPerson(Person person);","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"     * Searches and converts the names in the {@code residentList} to a list of person and return the list of person","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"     * if it exists in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"    ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"     * Returns a String of information if {@code Person} does not exist in the address book, return","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"     * an empty String otherwise.","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    String getInvalidResident(Event event) throws CommandException;","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if an event with the same details as {@code event} exists in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"    boolean hasEvent(Event event);","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"    Event getEvent(EventName eventName) throws CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"     * Deletes the given event.","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"     * The event must exist in the address book.","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"    void deleteEvent(Event target);","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"     * Adds the given event.","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"     * {@code event} must not already exist in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"    void addEvent(Event event);","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-17"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"    void setEvent(Event target, Event editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"    /** Returns an unmodifiable view of the filtered event list */","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"    /** Adds the selected resident into the filtered resident list */","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"    void setSinglePerson(Person person);","lastModifiedDate":"2021-10-23"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"    /** Set an empty person list */","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"    void setNoPerson();","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"    /** Returns an unmodifiable view of the selected resident */","lastModifiedDate":"2021-10-23"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"    ObservableList\u003cPerson\u003e getSinglePerson();","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"    /** Adds the selected event into the filtered event list */","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"    void setSingleEvent(Event event);","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"    /** Set an empty event list */","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"    void setNoEvent();","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"    /** Returns an unmodifiable view of the selected event */","lastModifiedDate":"2021-10-23"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"    ObservableList\u003cEvent\u003e getSingleEvent();","lastModifiedDate":"2021-10-23"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":163,"author":{"gitId":"chongjunwei"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-10-13"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"jaredlhf"},"content":"    ObservableList\u003cPerson\u003e getSortedPersonList();","lastModifiedDate":"2021-10-28"},{"lineNumber":169,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"jaredlhf"},"content":"    ObservableList\u003cEvent\u003e getSortedEventList();","lastModifiedDate":"2021-10-28"},{"lineNumber":171,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"    void updateSortedPersonList(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":174,"author":{"gitId":"jaredlhf"},"content":"    void updateSortedEventList(Comparator\u003cEvent\u003e comparator);","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"     * Returns an array list of events the specified person is in.","lastModifiedDate":"2021-10-28"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"     * @param person The person to search for in events","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"     * @param predicate A predicate to filter given events by","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"     * @return The array list of events","lastModifiedDate":"2021-10-28"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"    ArrayList\u003cEvent\u003e getPersonEvents(Person person, Predicate\u003cEvent\u003e predicate);","lastModifiedDate":"2021-10-28"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"rebeccalaujx":30,"gordonlzy":21,"chongjunwei":28,"VimuthM":11,"-":84,"jaredlhf":9}},{"path":"src/main/java/safeforhall/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import javafx.collections.transformation.SortedList;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    private final SortedList\u003cPerson\u003e sortedPersons;","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    private final SortedList\u003cEvent\u003e sortedEvents;","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    private final FilteredList\u003cPerson\u003e singlePerson;","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    private final FilteredList\u003cEvent\u003e singleEvent;","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        sortedPersons \u003d new SortedList\u003c\u003e(filteredPersons);","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        sortedEvents \u003d new SortedList\u003c\u003e(filteredEvents);","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        singlePerson \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        singleEvent \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"     * Converts a {@code ResidentList} that can have a String of Room or Name to an Arraylist of","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * {@code Person}","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cString\u003e residentInformation \u003d residentList.getStringResidentList();","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        if (residentList.isEmpty()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"            return personList;","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        for (String information : residentInformation) {","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"            Optional\u003cPerson\u003e personFound;","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"            personFound \u003d addressBook.findPerson(information);","lastModifiedDate":"2021-10-20"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            if (personFound.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"                throw new CommandException(\"No resident with this information \u0027\" + information + \"\u0027 could be found\");","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"            } else if (!personList.contains(personFound.get())) {","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"                personList.add(personFound.get());","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        return personList;","lastModifiedDate":"2021-10-18"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"     * Reads a string of name from {@code ResidentList} and return an Arraylist of {@code Person}","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residentList);","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"        if (residentList.isEmpty()) {","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"            return personList;","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        String[] residentInformation \u003d residentList.getResidentsStorage().split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        for (String information : residentInformation) {","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"            String[] informationList \u003d information.split(\"\\\\s*;\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"            Optional\u003cPerson\u003e personFound;","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"            personFound \u003d addressBook.findPerson(informationList[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"            if (personFound.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"                throw new CommandException(\"No event with this information \u0027\" + information + \"\u0027 could be found\");","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"                personList.add(personFound.get());","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        return personList;","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-11-08"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean hasExactPerson(Person person) {","lastModifiedDate":"2021-11-08"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-11-08"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        return addressBook.hasExactPerson(person);","lastModifiedDate":"2021-11-08"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"     * Returns a String of information if {@code Person} does not exist in the address book, return","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"     * an empty String otherwise.","lastModifiedDate":"2021-10-24"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"    public String getInvalidResident(Event event) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-24"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cString\u003e residentInformation \u003d event.getStringResidentList();","lastModifiedDate":"2021-10-24"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"        for (String information : residentInformation) {","lastModifiedDate":"2021-10-24"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"            Optional\u003cPerson\u003e personFound;","lastModifiedDate":"2021-10-24"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"            personFound \u003d addressBook.findPerson(information);","lastModifiedDate":"2021-10-24"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"            if (personFound.isEmpty()) {","lastModifiedDate":"2021-10-24"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"                return information;","lastModifiedDate":"2021-10-24"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-24"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"        return EMPTY_STRING;","lastModifiedDate":"2021-10-26"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"        return addressBook.hasEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"    public Event getEvent(EventName eventName) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"        Optional\u003cEvent\u003e eventOptional \u003d addressBook.findEvent(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"        if (eventOptional.isEmpty()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"            throw new CommandException(eventName + \" not found\");","lastModifiedDate":"2021-10-18"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":208,"author":{"gitId":"gordonlzy"},"content":"            return eventOptional.get();","lastModifiedDate":"2021-10-18"},{"lineNumber":209,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":210,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":211,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":218,"author":{"gitId":"chongjunwei"},"content":"    public void deleteEvent(Event target) {","lastModifiedDate":"2021-10-18"},{"lineNumber":219,"author":{"gitId":"chongjunwei"},"content":"        addressBook.removeEvent(target);","lastModifiedDate":"2021-10-18"},{"lineNumber":220,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":228,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":229,"author":{"gitId":"chongjunwei"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":230,"author":{"gitId":"chongjunwei"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":231,"author":{"gitId":"chongjunwei"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":232,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":233,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":241,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":242,"author":{"gitId":"rebeccalaujx"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-17"},{"lineNumber":243,"author":{"gitId":"rebeccalaujx"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":244,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":245,"author":{"gitId":"rebeccalaujx"},"content":"        addressBook.setEvent(target, editedEvent);","lastModifiedDate":"2021-10-17"},{"lineNumber":246,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":247,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":256,"author":{"gitId":"jaredlhf"},"content":"        return sortedPersons;","lastModifiedDate":"2021-10-28"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":259,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"jaredlhf"},"content":"     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"jaredlhf"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":264,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":265,"author":{"gitId":"jaredlhf"},"content":"        return sortedEvents;","lastModifiedDate":"2021-10-28"},{"lineNumber":266,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":267,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":268,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":269,"author":{"gitId":"rebeccalaujx"},"content":"    public void setSinglePerson(Person person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":270,"author":{"gitId":"rebeccalaujx"},"content":"        singlePerson.setPredicate(person::equals);","lastModifiedDate":"2021-10-23"},{"lineNumber":271,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":272,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":273,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":274,"author":{"gitId":"rebeccalaujx"},"content":"    public void setNoPerson() {","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"rebeccalaujx"},"content":"        singlePerson.setPredicate(resident -\u003e false);","lastModifiedDate":"2021-10-24"},{"lineNumber":276,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":278,"author":{"gitId":"rebeccalaujx"},"content":"    public ObservableList\u003cPerson\u003e getSinglePerson() {","lastModifiedDate":"2021-10-23"},{"lineNumber":279,"author":{"gitId":"rebeccalaujx"},"content":"        return singlePerson;","lastModifiedDate":"2021-10-23"},{"lineNumber":280,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":281,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":282,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":283,"author":{"gitId":"rebeccalaujx"},"content":"    public void setSingleEvent(Event event) {","lastModifiedDate":"2021-10-23"},{"lineNumber":284,"author":{"gitId":"rebeccalaujx"},"content":"        singleEvent.setPredicate(event::equals);","lastModifiedDate":"2021-10-23"},{"lineNumber":285,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":286,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":287,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":288,"author":{"gitId":"rebeccalaujx"},"content":"    public void setNoEvent() {","lastModifiedDate":"2021-10-24"},{"lineNumber":289,"author":{"gitId":"rebeccalaujx"},"content":"        singleEvent.setPredicate(event -\u003e false);","lastModifiedDate":"2021-10-24"},{"lineNumber":290,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":292,"author":{"gitId":"rebeccalaujx"},"content":"    public ObservableList\u003cEvent\u003e getSingleEvent() {","lastModifiedDate":"2021-10-23"},{"lineNumber":293,"author":{"gitId":"rebeccalaujx"},"content":"        return singleEvent;","lastModifiedDate":"2021-10-23"},{"lineNumber":294,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":295,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":302,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":303,"author":{"gitId":"chongjunwei"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":304,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":305,"author":{"gitId":"chongjunwei"},"content":"        filteredEvents.setPredicate(predicate);","lastModifiedDate":"2021-10-13"},{"lineNumber":306,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":307,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":308,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":309,"author":{"gitId":"VimuthM"},"content":"    public ArrayList\u003cEvent\u003e getPersonEvents(Person person, Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-28"},{"lineNumber":310,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":311,"author":{"gitId":"VimuthM"},"content":"        for (Event e: filteredEvents.filtered(predicate)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":312,"author":{"gitId":"VimuthM"},"content":"            if (e.getResidentList().getResidents().contains(person)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"VimuthM"},"content":"                if (!events.contains(e)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":314,"author":{"gitId":"VimuthM"},"content":"                    events.add(e);","lastModifiedDate":"2021-10-28"},{"lineNumber":315,"author":{"gitId":"VimuthM"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":316,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":317,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":318,"author":{"gitId":"VimuthM"},"content":"        return events;","lastModifiedDate":"2021-10-28"},{"lineNumber":319,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":320,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":321,"author":{"gitId":"jaredlhf"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-28"},{"lineNumber":322,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":323,"author":{"gitId":"jaredlhf"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2021-10-28"},{"lineNumber":324,"author":{"gitId":"jaredlhf"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-28"},{"lineNumber":325,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":326,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":327,"author":{"gitId":"jaredlhf"},"content":"    public ObservableList\u003cPerson\u003e getSortedPersonList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":328,"author":{"gitId":"jaredlhf"},"content":"        return sortedPersons;","lastModifiedDate":"2021-10-28"},{"lineNumber":329,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":330,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":331,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":332,"author":{"gitId":"jaredlhf"},"content":"     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of","lastModifiedDate":"2021-10-28"},{"lineNumber":333,"author":{"gitId":"jaredlhf"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-10-28"},{"lineNumber":334,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":335,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":336,"author":{"gitId":"jaredlhf"},"content":"    public ObservableList\u003cEvent\u003e getSortedEventList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":337,"author":{"gitId":"jaredlhf"},"content":"        return sortedEvents;","lastModifiedDate":"2021-10-28"},{"lineNumber":338,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":339,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":340,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":341,"author":{"gitId":"jaredlhf"},"content":"    public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-10-28"},{"lineNumber":342,"author":{"gitId":"jaredlhf"},"content":"        sortedPersons.setComparator(comparator);","lastModifiedDate":"2021-10-28"},{"lineNumber":343,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":344,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":345,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":346,"author":{"gitId":"jaredlhf"},"content":"    public void updateSortedEventList(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-10-28"},{"lineNumber":347,"author":{"gitId":"jaredlhf"},"content":"        sortedEvents.setComparator(comparator);","lastModifiedDate":"2021-10-28"},{"lineNumber":348,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":349,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":365,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":366,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2021-10-13"},{"lineNumber":367,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 filteredEvents.equals(other.filteredEvents);","lastModifiedDate":"2021-10-13"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":370,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":43,"gordonlzy":89,"chongjunwei":32,"VimuthM":21,"-":144,"jaredlhf":41}},{"path":"src/main/java/safeforhall/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Returns an unmodifiable view of the events list.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * This list will not contain any duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"chongjunwei":6,"VimuthM":2,"-":15}},{"path":"src/main/java/safeforhall/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"VimuthM":2,"-":14}},{"path":"src/main/java/safeforhall/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"safeforhall.json\");","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    private Path exportsFolder \u003d Paths.get(\"data\", \"exports\");","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    public Path getExportsFolderPath() {","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        return exportsFolder;","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":84,"jaredlhf":5}},{"path":"src/main/java/safeforhall/model/event/Capacity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"public class Capacity implements Comparable\u003cCapacity\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Capacity should be an integer greater than 0. Maximum allowed\"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"        + \" capacity is 2147483647\";","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Capacity: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"c\";","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    public final String inputCapacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    public final int capacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code Capacity}.","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"     * @param inputCapacity A valid capacity.","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    public Capacity(String inputCapacity) {","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(inputCapacity);","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidCapacity(inputCapacity), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        this.inputCapacity \u003d inputCapacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        this.capacity \u003d Integer.parseInt(inputCapacity);","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid capacity.","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidCapacity(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            int cap \u003d Integer.parseInt(test);","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            return cap \u003e 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        return inputCapacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof Capacity // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 inputCapacity.equals(((Capacity) other).inputCapacity)); // state check","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        return inputCapacity.hashCode();","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Capacity c) {","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        return Integer.compare(this.capacity, c.capacity);","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":32,"VimuthM":19,"jaredlhf":10}},{"path":"src/main/java/safeforhall/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.Objects;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":" * Represents an Event in the address book.","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"public class Event {","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    // Identity fields","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    private final EventName eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    private final EventDate eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    private final EventTime eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    private final Venue venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    private final Capacity capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    private final ResidentList residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"     * Every field must be present","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    public Event(EventName eventName, EventDate eventDate, EventTime eventTime, Venue venue, Capacity capacity,","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"                 ResidentList residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(eventName, eventDate, venue, capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"    public EventName getEventName() {","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        return eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public EventDate getEventDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        return eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    public Venue getVenue() {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        return venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    public Capacity getCapacity() {","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        return capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    public ResidentList getResidentList() {","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        return residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    public EventTime getEventTime() {","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        return eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cString\u003e getStringResidentList() {","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        return residents.getStringResidentList();","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if both events have the same name, date, venue, capacity and time.","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"     * This defines a notion of equality between two events.","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        if (otherEvent \u003d\u003d this) {","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        return otherEvent !\u003d null","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventName().equals(getEventName())","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventTime().equals(getEventTime())","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(getVenue());","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"    public String getCombinedStorageString(ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        return residents.getCombinedStorageString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    public String getCombinedDisplayString(ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        return residents.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"    public String getRemovedStorageString(ArrayList\u003cPerson\u003e toRemove) {","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        return residents.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    public String getRemovedDisplayString(ArrayList\u003cPerson\u003e toRemove) {","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        return residents.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"     * Checks if residents attending the event are vaccinated","lastModifiedDate":"2021-10-21"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"     * @return Returns true if any {@code resident} in the {@code Event} is not vaccinated","lastModifiedDate":"2021-10-21"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"    public boolean hasUnvaccinatedResident() {","lastModifiedDate":"2021-10-21"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"        return residents.hasUnvaccinatedResident();","lastModifiedDate":"2021-10-21"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"     * Counts the number of unvaccinated residents in the {@code Event}","lastModifiedDate":"2021-10-21"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"     * @return Returns the number of unvaccinated residents in the {@code Event}","lastModifiedDate":"2021-10-21"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    public int numOfUnvaccinatedResidents() {","lastModifiedDate":"2021-10-21"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"        return residents.numOfUnvaccinatedResidents();","lastModifiedDate":"2021-10-21"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if the event is over.","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"    public boolean isOver() {","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        return eventDate.isPast();","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if the given eventName is same as the eventName of the current instance of Event","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"    public boolean hasSameEventName(EventName eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        return getEventName().equals(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if the {@code ResidentList} of the {@code Event} is empty.","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"    public boolean hasNoResidents() {","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"        return residents.isEmpty();","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"     * Returns the number of residents currently in the event.","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"    public int getResidentListSize() {","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        return this.residents.getResidentListSize();","lastModifiedDate":"2021-10-28"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if both events have the same identity and data fields.","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"     * This defines a stronger notion of equality between two events.","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"chongjunwei"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":150,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"        return otherEvent.getEventName().equals(getEventName())","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getEventTime().equals(getEventTime())","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(getVenue())","lastModifiedDate":"2021-10-14"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 otherEvent.getCapacity().equals(getCapacity());","lastModifiedDate":"2021-10-14"},{"lineNumber":161,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":163,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"        return Objects.hash(eventName, eventDate, eventTime, venue, capacity);","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":171,"author":{"gitId":"chongjunwei"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"chongjunwei"},"content":"        builder.append(getEventName())","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"                .append(getEventDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Time: \")","lastModifiedDate":"2021-10-24"},{"lineNumber":176,"author":{"gitId":"chongjunwei"},"content":"                .append(getEventTime())","lastModifiedDate":"2021-10-24"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Venue: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"                .append(getVenue())","lastModifiedDate":"2021-10-13"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"                .append(\"; Capacity: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"                .append(getCapacity())","lastModifiedDate":"2021-10-20"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"                .append(\"; Residents: \")","lastModifiedDate":"2021-10-20"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"                .append(getResidentList());","lastModifiedDate":"2021-10-27"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"        return builder.toString();","lastModifiedDate":"2021-10-13"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":12,"chongjunwei":95,"gordonlzy":52,"VimuthM":3,"jaredlhf":23}},{"path":"src/main/java/safeforhall/model/event/EventDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"public class EventDate implements Comparable\u003cEventDate\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date inputted has to be a valid date in the format of:\\n1. \"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"            + \"dd-mm-yyyy\\n2. dd.mm.yyyy\\n3. dd/mm/yyyy\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"            + \"Some common errors include having an invalid day (35-01-2021),\"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"            + \" an invalid month (31-13-2021), an invalid date (29-02-2021) or an invalid formatting (01012021)\";","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Date: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"d\";","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"            .ofPattern(\"[dd-MM-uuuu][dd.MM.uuuu][dd/MM/uuuu]\")","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public final String eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code EventDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    public EventDate(String date) {","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidEventDate(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        String[] dayMonthYear \u003d date.split(\"[-./]\");","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assert dayMonthYear.length \u003d\u003d 3;","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        this.eventDate \u003d dayMonthYear[0] + \"-\" + dayMonthYear[1] + \"-\" + dayMonthYear[2];","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidEventDate(String date) {","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"            LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"            return false;","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if the current eventDate is in the past.","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    public boolean isPast() {","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        return toLocalDate().isBefore(LocalDate.now());","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"     * Converts the given {@code EventDate} to a {@code LocalDate}.","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"    public LocalDate toLocalDate() {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        return LocalDate.parse(eventDate, dateFormatter);","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventDate // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 eventDate.equals(((EventDate) other).eventDate)); // state check","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        return eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(EventDate date) {","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        return this.toLocalDate().compareTo(date.toLocalDate());","lastModifiedDate":"2021-10-29"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":54,"gordonlzy":11,"jaredlhf":15}},{"path":"src/main/java/safeforhall/model/event/EventName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"public class EventName implements Comparable\u003cEventName\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    /*","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"n\";","lastModifiedDate":"2021-10-29"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public final String eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code EventName}.","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     * @param eventName A valid event name.","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public EventName(String eventName) {","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidEventName(eventName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid event name.","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidEventName(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        return eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventName // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 eventName.equalsIgnoreCase(((EventName) other).eventName)); // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        return eventName.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(EventName e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        return this.eventName.compareToIgnoreCase(e.eventName);","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":51,"jaredlhf":7}},{"path":"src/main/java/safeforhall/model/event/EventNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        return keywords.stream()","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getEventName().eventName, keyword));","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":27,"chongjunwei":4}},{"path":"src/main/java/safeforhall/model/event/EventTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-24"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class EventTime implements Comparable\u003cEventTime\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"EventTime inputted has to be in HHmm format\";","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"    public static final String DESC \u003d \"Time: \";","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    private static final DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    public final String eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code EventTime}.","lastModifiedDate":"2021-10-24"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"     * @param time A valid time.","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    public EventTime(String time) {","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(time);","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidEventTime(time), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        this.eventTime \u003d time;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid time.","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidEventTime(String time) {","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"            LocalTime.parse(time, timeFormatter);","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"            return false;","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        return true;","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"     * Converts the given {@code EventTime} to a {@code Localtime}.","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    public LocalTime toLocalTime() {","lastModifiedDate":"2021-10-24"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        return LocalTime.parse(eventTime, timeFormatter);","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof EventTime // instanceof handles nulls","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 eventTime.equals(((EventTime) other).eventTime)); // state check","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        return eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(EventTime time) {","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        return this.toLocalTime().compareTo(time.toLocalTime());","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-24"}],"authorContributionMap":{"chongjunwei":58,"jaredlhf":6}},{"path":"src/main/java/safeforhall/model/event/ResidentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"public class ResidentList {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"            \"Information should be all rooms or all names and each piece of information is separated by a comma\";","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_INCORRECT_FIELDS \u003d \"8 fields of comma separated values not found\";","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String DESC \u003d \"Residents: \";","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_LIST \u003d \"None\";","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public static final int NUMBER_OF_RESIDENT_FIELD \u003d 8;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    private static final String RESIDENTS_SPLIT \u003d \"\\\\s*,\\\\s*\";","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    private static final String RESIDENT_FIELDS_SPLIT \u003d \";\\\\s*\\\\w*(\\\\w*\\\\s*)*:\\\\s*\";","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    private final String residentsDisplay;","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private final String residentsStorage;","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private final ArrayList\u003cString\u003e stringResidentList;","lastModifiedDate":"2021-10-24"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private final boolean isEmpty;","lastModifiedDate":"2021-10-20"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    private final ArrayList\u003cPerson\u003e residentList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"     * Constructs a {@code ResidentList}.","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    public ResidentList(String residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residents);","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        checkArgument(isValidResidentList(residents), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        this.isEmpty \u003d residents.equals(DEFAULT_LIST);","lastModifiedDate":"2021-10-20"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        this.residentsDisplay \u003d residents;","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        this.residentsStorage \u003d EMPTY_STRING;","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        stringResidentList \u003d new ArrayList\u003c\u003e(Arrays.asList(this.residentsDisplay.split(RESIDENTS_SPLIT)));","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"     * Constructs a {@code ResidentList}.","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public ResidentList(String residents, String residentList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(residents);","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        checkArgument(isValidResidentList(residents), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        this.isEmpty \u003d residents.equals(DEFAULT_LIST);","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        this.residentsDisplay \u003d residents;","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        this.residentsStorage \u003d residentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        if (!residentList.equals(ResidentList.DEFAULT_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"            String[] residentInformationList \u003d residentList.split(RESIDENTS_SPLIT);","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"            Arrays.stream(residentInformationList).forEach(residentInformation -\u003e {","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"                String[] information \u003d residentInformation.split(RESIDENT_FIELDS_SPLIT);","lastModifiedDate":"2021-11-05"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"                if (information.length !\u003d 8) {","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"                    throw new IllegalArgumentException(MESSAGE_INCORRECT_FIELDS);","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                this.residentList.add(createResident(information));","lastModifiedDate":"2021-11-05"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"            });","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        stringResidentList \u003d new ArrayList\u003c\u003e(Arrays.asList(this.residentsDisplay.split(RESIDENTS_SPLIT)));","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if a given string is a valid list of residents.","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isValidResidentList(String residents) {","lastModifiedDate":"2021-11-05"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        if (residents.equals(DEFAULT_LIST)) {","lastModifiedDate":"2021-10-20"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"            return true;","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-20"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        String[] informationList \u003d residents.split(RESIDENTS_SPLIT);","lastModifiedDate":"2021-11-05"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        boolean isAllRoom \u003d Arrays.stream(informationList).parallel().allMatch(Room::isValidRoom);","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        boolean isAllName \u003d Arrays.stream(informationList).parallel().allMatch(Name::isValidName);","lastModifiedDate":"2021-11-05"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        return isAllRoom || isAllName;","lastModifiedDate":"2021-11-05"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"     * @param residents A string of residents.","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isValidResidentStorage(String residents) {","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        if (residents.equals(DEFAULT_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"            return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"        String[] residentList \u003d residents.split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        for (String resident : residentList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"            String[] information \u003d resident.split(\";\\\\s*\\\\w*(\\\\w*\\\\s*)*:\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"            if (information.length !\u003d NUMBER_OF_RESIDENT_FIELD) {","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"                return false;","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        return true;","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * Returns a string of person details, consisting of past and new residents for the event.","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"     * @param toAdd    A string of residents to add to the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"     * @return A String consisting of past and new residents for the event.","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    public String getCombinedStorageString(ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder newResidentList;","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"        if (residentsStorage.equals(DEFAULT_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"            newResidentList \u003d new StringBuilder(EMPTY_STRING);","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"            newResidentList \u003d new StringBuilder(residentsStorage);","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            if (!newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(\", \").append(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        if (newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"            return DEFAULT_LIST;","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"            return newResidentList.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"     * Returns a string of names, consisting of past and new residents for the event.","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"     * @param toAdd    A string of residents to add to the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"     * @return A String consisting of past and new residents for the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"    public String getCombinedDisplayString(ArrayList\u003cPerson\u003e toAdd) {","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder newResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        if (residentsDisplay.equals(DEFAULT_LIST)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"            newResidentList \u003d new StringBuilder(EMPTY_STRING);","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"            newResidentList \u003d new StringBuilder(residentsDisplay);","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : toAdd) {","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"            if (!newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(\", \").append(person.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(person.getName());","lastModifiedDate":"2021-10-20"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"        if (newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"            return DEFAULT_LIST;","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"            return newResidentList.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":173,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"jaredlhf"},"content":"     * Checks if any {@code resident} is not vaccinated","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"jaredlhf"},"content":"     * @return Returns true if any {@code resident} in the {@code ResidentList} is not vaccinated","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"jaredlhf"},"content":"    public boolean hasUnvaccinatedResident() {","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"jaredlhf"},"content":"        for (Person person : residentList) {","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"jaredlhf"},"content":"            if (!person.isVaccinated()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"jaredlhf"},"content":"                return true;","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"jaredlhf"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":182,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":183,"author":{"gitId":"jaredlhf"},"content":"        return false;","lastModifiedDate":"2021-10-21"},{"lineNumber":184,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":185,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":186,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":187,"author":{"gitId":"jaredlhf"},"content":"     * Counts the number of unvaccinated residents in the {@code ResidentList}","lastModifiedDate":"2021-10-21"},{"lineNumber":188,"author":{"gitId":"jaredlhf"},"content":"     * @return Returns the number of unvaccinated residents in the {@code ResidentList}","lastModifiedDate":"2021-10-21"},{"lineNumber":189,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":190,"author":{"gitId":"jaredlhf"},"content":"    public int numOfUnvaccinatedResidents() {","lastModifiedDate":"2021-10-21"},{"lineNumber":191,"author":{"gitId":"jaredlhf"},"content":"        int total \u003d 0;","lastModifiedDate":"2021-10-21"},{"lineNumber":192,"author":{"gitId":"jaredlhf"},"content":"        for (Person person : residentList) {","lastModifiedDate":"2021-10-21"},{"lineNumber":193,"author":{"gitId":"jaredlhf"},"content":"            if (!person.isVaccinated()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":194,"author":{"gitId":"jaredlhf"},"content":"                total++;","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"jaredlhf"},"content":"            }","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"jaredlhf"},"content":"        return total;","lastModifiedDate":"2021-10-21"},{"lineNumber":198,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"     * Returns a string of person details, consisting of the remaining residents for the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"     * @param toRemove    A string of residents to add to the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"     * @return A String consisting of past and new residents for the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"    public String getRemovedStorageString(ArrayList\u003cPerson\u003e toRemove) {","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder newResidentList \u003d new StringBuilder();","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : residentList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"gordonlzy"},"content":"            if (!toRemove.contains(person) \u0026\u0026 !newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(\", \").append(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"gordonlzy"},"content":"            } else if (!toRemove.contains(person) \u0026\u0026 newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"gordonlzy"},"content":"        if (newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"gordonlzy"},"content":"            return DEFAULT_LIST;","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"gordonlzy"},"content":"            return newResidentList.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"gordonlzy"},"content":"     * Returns a string of names, consisting of the remaining residents for the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"gordonlzy"},"content":"     * @param toRemove    A string of residents to remove from the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"gordonlzy"},"content":"     * @return A String consisting of the remaining residents for the event.","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"gordonlzy"},"content":"    public String getRemovedDisplayString(ArrayList\u003cPerson\u003e toRemove) {","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder newResidentList \u003d new StringBuilder();","lastModifiedDate":"2021-11-05"},{"lineNumber":234,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"gordonlzy"},"content":"        for (Person person : residentList) {","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"gordonlzy"},"content":"            if (!toRemove.contains(person) \u0026\u0026 !newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(\", \").append(person.getName());","lastModifiedDate":"2021-10-18"},{"lineNumber":238,"author":{"gitId":"gordonlzy"},"content":"            } else if (!toRemove.contains(person) \u0026\u0026 newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"gordonlzy"},"content":"                newResidentList.append(person.getName());","lastModifiedDate":"2021-10-20"},{"lineNumber":240,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":241,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":242,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"gordonlzy"},"content":"        if (newResidentList.toString().equals(EMPTY_STRING)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"gordonlzy"},"content":"            return DEFAULT_LIST;","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"gordonlzy"},"content":"            return newResidentList.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-20"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if the ResidentList is empty.","lastModifiedDate":"2021-10-20"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-20"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2021-10-20"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"        return this.isEmpty;","lastModifiedDate":"2021-10-20"},{"lineNumber":255,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":256,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":257,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":258,"author":{"gitId":"gordonlzy"},"content":"     * Returns the number of residents currently in the event.","lastModifiedDate":"2021-10-28"},{"lineNumber":259,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":260,"author":{"gitId":"gordonlzy"},"content":"    public int getResidentListSize() {","lastModifiedDate":"2021-10-28"},{"lineNumber":261,"author":{"gitId":"gordonlzy"},"content":"        return this.residentList.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":262,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":263,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-18"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-18"},{"lineNumber":267,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof ResidentList // instanceof handles nulls","lastModifiedDate":"2021-10-18"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 residentsDisplay.equals(((ResidentList) other).residentsDisplay)); // state check","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":270,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"    public String toString() {","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"VimuthM"},"content":"        return residentList.toString();","lastModifiedDate":"2021-11-04"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":276,"author":{"gitId":"gordonlzy"},"content":"    public ArrayList\u003cString\u003e getStringResidentList() {","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"        return this.stringResidentList;","lastModifiedDate":"2021-10-24"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"    public String getResidentsStorage() {","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"        return this.residentsStorage;","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":284,"author":{"gitId":"gordonlzy"},"content":"    public String getResidentsDisplay() {","lastModifiedDate":"2021-10-25"},{"lineNumber":285,"author":{"gitId":"gordonlzy"},"content":"        return this.residentsDisplay;","lastModifiedDate":"2021-10-25"},{"lineNumber":286,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":287,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":288,"author":{"gitId":"VimuthM"},"content":"    public ArrayList\u003cPerson\u003e getResidents() {","lastModifiedDate":"2021-10-27"},{"lineNumber":289,"author":{"gitId":"gordonlzy"},"content":"        return this.residentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":290,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-20"},{"lineNumber":291,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":292,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":293,"author":{"gitId":"gordonlzy"},"content":"     * Creates a new {@code resident} from the given information.","lastModifiedDate":"2021-11-05"},{"lineNumber":294,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":295,"author":{"gitId":"gordonlzy"},"content":"    private Person createResident(String[] information) {","lastModifiedDate":"2021-11-05"},{"lineNumber":296,"author":{"gitId":"gordonlzy"},"content":"        Name name \u003d new Name(information[0]);","lastModifiedDate":"2021-11-05"},{"lineNumber":297,"author":{"gitId":"gordonlzy"},"content":"        Room room \u003d new Room(information[1]);","lastModifiedDate":"2021-11-05"},{"lineNumber":298,"author":{"gitId":"gordonlzy"},"content":"        Phone phone \u003d new Phone(information[2]);","lastModifiedDate":"2021-11-05"},{"lineNumber":299,"author":{"gitId":"gordonlzy"},"content":"        Email email \u003d new Email(information[3]);","lastModifiedDate":"2021-11-05"},{"lineNumber":300,"author":{"gitId":"gordonlzy"},"content":"        VaccStatus vaccStatus \u003d new VaccStatus(information[4]);","lastModifiedDate":"2021-11-05"},{"lineNumber":301,"author":{"gitId":"gordonlzy"},"content":"        Faculty faculty \u003d new Faculty(information[5]);","lastModifiedDate":"2021-11-05"},{"lineNumber":302,"author":{"gitId":"gordonlzy"},"content":"        LastDate lastFetDate \u003d new LastDate(information[6]);","lastModifiedDate":"2021-11-05"},{"lineNumber":303,"author":{"gitId":"gordonlzy"},"content":"        LastDate lastCollectionDate \u003d new LastDate(information[7]);","lastModifiedDate":"2021-11-05"},{"lineNumber":304,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":305,"author":{"gitId":"gordonlzy"},"content":"        return new Person(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-11-05"},{"lineNumber":306,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":307,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":276,"VimuthM":3,"jaredlhf":28}},{"path":"src/main/java/safeforhall/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Object) so","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":" * as to ensure that the event with exactly the same fields will be removed.","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":" *","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":" *","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"     * Adds an event to the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    public void add(Event toAdd) {","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"     * The event identity of {@code editedEvent} must not be the same as another existing event in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(target, editedEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"     * Removes the equivalent event from the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"     * The event must exist in the list.","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(safeforhall.model.event.UniqueEventList replacement) {","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"     * Replaces the contents of this list with {@code events}.","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"        if (!eventsAreUnique(events)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"        internalList.setAll(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof safeforhall.model.event.UniqueEventList // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"                \u0026\u0026 internalList.equals(((safeforhall.model.event.UniqueEventList) other).internalList));","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if {@code events} contains only unique events.","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2021-10-13"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {","lastModifiedDate":"2021-10-13"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"                    return false;","lastModifiedDate":"2021-10-13"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"                }","lastModifiedDate":"2021-10-13"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"        return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":137}},{"path":"src/main/java/safeforhall/model/event/Venue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"public class Venue implements Comparable\u003cVenue\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"            \"Venues should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"    /*","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Venue: \";","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"v\";","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public final String venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code Venue}.","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"     * @param venue A valid venue.","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    public Venue(String venue) {","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"     * Returns true if a given string is a valid venue.","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"    public static boolean isValidVenue(String test) {","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    public String toString() {","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        return venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"                || (other instanceof Venue // instanceof handles nulls","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 venue.equalsIgnoreCase(((Venue) other).venue)); // state check","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"        return venue.hashCode();","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Venue v) {","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"        return this.venue.compareToIgnoreCase(v.venue);","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"rebeccalaujx":1,"chongjunwei":51,"jaredlhf":10}},{"path":"src/main/java/safeforhall/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event.exceptions;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":" * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":" * identity).","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"public class DuplicateEventException extends RuntimeException {","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"    public DuplicateEventException() {","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"        super(\"Operation would result in duplicate events\");","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":12}},{"path":"src/main/java/safeforhall/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event.exceptions;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":" * Signals that the operation is unable to find the specified event.","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"public class EventNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":7}},{"path":"src/main/java/safeforhall/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class Email implements Comparable\u003cEmail\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Email: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"e\";","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Email e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"        return this.value.compareToIgnoreCase(e.value);","lastModifiedDate":"2021-10-29"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":2,"-":68,"jaredlhf":8}},{"path":"src/main/java/safeforhall/model/person/Faculty.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s faculty in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidFaculty(String)} (String)}","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class Faculty implements Comparable\u003cFaculty\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Faculty is a single word made up of alphabets \"","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"            + \"and it should not be blank\";","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"     * faculty must consist of 2 or more alphabets.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Za-z]{2,}$\";","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Faculty: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"f\";","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public final String faculty;","lastModifiedDate":"2021-10-05"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * Constructs an {@code Faculty}.","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"     * @param faculty A valid faculty.","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    public Faculty(String faculty) {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(faculty);","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidFaculty(faculty), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty.toUpperCase();","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid faculty.","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidFaculty(String test) {","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        return faculty;","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof Faculty // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 faculty.equals(((Faculty) other).faculty)); // state check","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        return faculty.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Faculty f) {","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        return this.faculty.compareToIgnoreCase(f.faculty);","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"VimuthM":52,"jaredlhf":13}},{"path":"src/main/java/safeforhall/model/person/LastDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"public class LastDate implements Comparable\u003cLastDate\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date inputted has to be a valid date in the format of:\\n1. \"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"            + \"dd-mm-yyyy\\n2. dd.mm.yyyy\\n3. dd/mm/yyyy\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            + \"Some common errors include having an invalid day (35-01-2021),\"","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"            + \" an invalid month (31-13-2021), an invalid date (29-02-2021) or an invalid formatting (01012021)\";","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String MESSAGE_IS_FUTURE_DATE \u003d \"Date inputted is a future date, it should be today or \"","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"            + \"a date before the current date\";","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_DATE \u003d \"None\";","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC \u003d \"Last FET: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC \u003d \"Last Collection: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_FIELD \u003d \"fd\";","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_FIELD \u003d \"cd\";","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            .ofPattern(\"[dd-MM-uuuu][dd.MM.uuuu][dd/MM/uuuu]\")","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"    private static final int LASTDATE_DEADLINE \u003d 1;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public final String date;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"     * Constructs a {@code LastDate}.","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    public LastDate(String date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        if (date.equals(DEFAULT_DATE)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"            this.date \u003d date;","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"            String[] dayMonthYear \u003d date.split(\"[-./]\");","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"            assert dayMonthYear.length \u003d\u003d 3;","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            this.date \u003d dayMonthYear[0] + \"-\" + dayMonthYear[1] + \"-\" + dayMonthYear[2];","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isValidDate(String date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        if (date.equals(DEFAULT_DATE)) {","lastModifiedDate":"2021-10-14"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"            return true;","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        try {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"            LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"            return false;","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        return true;","lastModifiedDate":"2021-10-10"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"     * Returns true if a given string is a future date.","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public static boolean isFutureDate(String date) {","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        if (date.equals(DEFAULT_DATE)) {","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"            return false;","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        long period \u003d ChronoUnit.DAYS.between(LocalDate.parse(date, dateFormatter), LocalDate.now());","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        return period \u003c 0;","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"     * Converts the given {@code LastDate} to a {@code LocalDate}.","lastModifiedDate":"2021-10-11"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"    public LocalDate toLocalDate() {","lastModifiedDate":"2021-10-11"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        return date.equals(DEFAULT_DATE)","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"                ? LocalDate.now()","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"                : LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"     * Adds the period of validity to the given {@code LastDate} to get the next deadline.","lastModifiedDate":"2021-10-11"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2021-10-11"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        return date.equals(DEFAULT_DATE)","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"                ? LocalDate.now()","lastModifiedDate":"2021-10-13"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"                : LocalDate.parse(date, dateFormatter).plusWeeks(LASTDATE_DEADLINE);","lastModifiedDate":"2021-10-13"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        return date;","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"                || (other instanceof LastDate // instanceof handles nulls","lastModifiedDate":"2021-10-10"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 date.equals(((LastDate) other).date)); // state check","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(LastDate ld) {","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"        return this.toLocalDate().compareTo(ld.toLocalDate());","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":86,"VimuthM":10,"jaredlhf":17}},{"path":"src/main/java/safeforhall/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class Name implements Comparable\u003cName\u003e {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"            \"Names should only contain alphabetic characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Name: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"n\";","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Name name) {","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        return this.fullName.toLowerCase().compareTo(name.fullName.toLowerCase());","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"gordonlzy":3,"VimuthM":3,"-":53,"jaredlhf":7}},{"path":"src/main/java/safeforhall/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"VimuthM":2,"-":29}},{"path":"src/main/java/safeforhall/model/person/NameMissedDeadlinePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-11"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"public class NameMissedDeadlinePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameMissedDeadlinePredicate without the date parameter","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    public NameMissedDeadlinePredicate(String keyword, LastDate date) {","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"        this.date \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"     * Tests if the given {@code Person} object\u0027s FET or Collection Date is due before the given date.","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the person\u0027s deadline is due before the given date","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        return getDeadlinePeriod(person) \u003e 0;","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public long getDeadlinePeriod(Person person) {","lastModifiedDate":"2021-10-12"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentPersonLastDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        LocalDate deadline;","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(\"f\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastFetDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastCollectionDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        deadline \u003d currentPersonLastDate.getDeadline();","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        return ChronoUnit.DAYS.between(deadline, date);","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"gordonlzy":40}},{"path":"src/main/java/safeforhall/model/person/NameNearLastDatePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"public class NameNearLastDatePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date1;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    private final LocalDate date2;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    private final String keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameNearLastDatePredicate without the optional date parameter","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public NameNearLastDatePredicate(String keyword, LastDate date) {","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"     * Creates a NameNearLastDatePredicate with the optional date parameter {@code LastDate}","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public NameNearLastDatePredicate(String keyword, LastDate date1, LastDate date2) {","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        this.date1 \u003d date1.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        this.date2 \u003d date2.toLocalDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"     * Tests if the given {@code Person} object\u0027s FET or Collection Date is due in a week\u0027s time by adding their","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"     * lastDate\u0027s week by 1 and comparing with the given date.","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the person\u0027s lastDate added by 1 falls within the given date or the given range of dates","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentPersonLastDate;","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        LocalDate deadline;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        if (keyword.equals(\"f\")) {","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastFetDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"            currentPersonLastDate \u003d person.getLastCollectionDate();","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        deadline \u003d currentPersonLastDate.getDeadline();","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        long p1 \u003d ChronoUnit.DAYS.between(date1, deadline);","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        long p2 \u003d ChronoUnit.DAYS.between(deadline, date2);","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        return ((p1 \u003e\u003d 0) \u0026\u0026 (p2 \u003e\u003d 0));","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":50}},{"path":"src/main/java/safeforhall/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private final Room room;","lastModifiedDate":"2021-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    private final VaccStatus vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private final Faculty faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate lastFetDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private final LastDate lastCollectionDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"     * Every field must be present.","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    public Person(Name name, Room room, Phone phone, Email email, VaccStatus vaccStatus,","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"                    Faculty faculty, LastDate lastFetDate, LastDate lastCollectionDate) {","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"        requireAllNonNull(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    public Room getRoom() {","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        return room;","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public VaccStatus getVaccStatus() {","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    public Faculty getFaculty() {","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        return faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    public LastDate getLastFetDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        return lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public LastDate getLastCollectionDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        return lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"     * Returns true if person is vaccinated.","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"    public boolean isVaccinated() {","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        return vaccStatus.vaccinated;","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"     * Returns true if both persons have the same name and room.","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 (otherPerson.getName().equals(getName()) || otherPerson.getRoom().equals(getRoom()));","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean isSameNamePerson(Person otherPerson) {","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if both persons have the same room.","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean isSameRoomPerson(Person otherPerson) {","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 otherPerson.getRoom().equals(getRoom());","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getRoom().equals(getRoom())","lastModifiedDate":"2021-10-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2021-10-13"},{"lineNumber":140,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 otherPerson.getVaccStatus().equals(getVaccStatus())","lastModifiedDate":"2021-10-13"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getFaculty().equals(getFaculty())","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getLastFetDate().equals(getLastFetDate())","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 otherPerson.getLastCollectionDate().equals(getLastCollectionDate());","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"        return Objects.hash(name, room, phone, email, vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Room: \")","lastModifiedDate":"2021-10-06"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"                .append(getRoom())","lastModifiedDate":"2021-10-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Vaccinated: \")","lastModifiedDate":"2021-10-06"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"                .append(getVaccStatus())","lastModifiedDate":"2021-10-07"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"                .append(\"; Faculty: \")","lastModifiedDate":"2021-10-07"},{"lineNumber":165,"author":{"gitId":"jaredlhf"},"content":"                .append(getFaculty())","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"jaredlhf"},"content":"                .append(\"; Last Fet Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"jaredlhf"},"content":"                .append(getLastFetDate())","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"jaredlhf"},"content":"                .append(\"; Last Collection Date: \")","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"jaredlhf"},"content":"                .append(getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"     * Returns true the person has missed any of his fet dates.","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"    public boolean hasMissedDeadline() {","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentDate \u003d new LastDate(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate checkFet \u003d new NameMissedDeadlinePredicate(\"f\", currentDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"        return checkFet.test(this);","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"     * Returns the number of days the person has missed any of his fet dates.","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"    public int getMissedDates() {","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        LastDate currentDate \u003d new LastDate(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate checkFet \u003d new NameMissedDeadlinePredicate(\"f\", currentDate);","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"        if (this.hasMissedDeadline()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"            return (int) Math.abs(checkFet.getDeadlinePeriod(this));","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"            return -1;","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":26,"gordonlzy":30,"VimuthM":36,"-":88,"jaredlhf":16}},{"path":"src/main/java/safeforhall/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class Phone implements Comparable\u003cPhone\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 6 digits long\";","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{6,}\";","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Phone: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"p\";","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Phone p) {","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"        return this.value.compareToIgnoreCase(p.value);","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VimuthM":4,"-":48,"jaredlhf":10}},{"path":"src/main/java/safeforhall/model/person/Room.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s room in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}","lastModifiedDate":"2021-10-05"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"public class Room implements Comparable\u003cRoom\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Rooms should not contain spaces and be of the format AXXX: \\n\"","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"            + \"Character 1: The block, A-E\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"            + \"Character 2: The level, 1-4\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"            + \"Character 3: The room, 0-2\\n\"","lastModifiedDate":"2021-10-05"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"            + \"Character 4: The room, 0-9\\n\";","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    public static final String MESSAGE_CONSTRAINTS_FOR_FIND \u003d \"Rooms can be searched by block, level, block-level: \\n\"","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"            + \"Example: \" + CliSyntax.PREFIX_ROOM + \"A , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"1 , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"A1 , \"","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"            + CliSyntax.PREFIX_ROOM + \"A100 \";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * The room must be 4 characters","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     * The first character of the room must be A-E to represent the block","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"     * The second character of the room must be 1-4 to represent the level","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     * The third character of the room must be 0-2","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"     * The fourth character of the room must be 0-9","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"     * This check assumes 5 blocks, 4 levels and 30 rooms a level","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[a-eA-E][1-4][0-2][0-9]$\";","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public static final String VALIDATION_FOR_FIND_REGEX \u003d \"[a-eA-E]|[1-4]|[a-eA-E][1-4]\";","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Room: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"r\";","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    public final String room;","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"     * Constructs a {@code Room}.","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"     * @param room A valid room.","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    public Room(String room) {","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(room);","lastModifiedDate":"2021-10-05"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidRoom(room), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        // Converts the first character to upper case","lastModifiedDate":"2021-10-11"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room.toUpperCase();","lastModifiedDate":"2021-10-11"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid room.","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidRoom(String test) {","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid block, level, level-block or room.","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-17"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidRoomForFind(String test) {","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_FOR_FIND_REGEX) || isValidRoom(test);","lastModifiedDate":"2021-10-17"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        return room;","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof Room // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 room.equalsIgnoreCase(((Room) other).room)); // state check","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        return room.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(Room r) {","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"        return this.room.compareToIgnoreCase(r.room);","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"gordonlzy":1,"VimuthM":82,"jaredlhf":9}},{"path":"src/main/java/safeforhall/model/person/RoomValidCheckPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-10-17"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-17"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Tests that a {@code Person}\u0027s {@code Room} matches either fully, by block, by level, or both.","lastModifiedDate":"2021-10-17"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-17"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class RoomValidCheckPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-10-17"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    private final String input;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"     * Validates the string input for room and returns the RoomValidCheckPredicate instance","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     * or throws an exception","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"     * @param input the user input","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    public RoomValidCheckPredicate(String input) {","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        checkArgument(Room.isValidRoomForFind(input), Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        this.input \u003d input;","lastModifiedDate":"2021-10-17"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        String room \u003d person.getRoom().room;","lastModifiedDate":"2021-10-17"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        String block \u003d room.substring(0, 1);","lastModifiedDate":"2021-10-17"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        String level \u003d room.substring(1, 2);","lastModifiedDate":"2021-10-17"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        if (input.length() \u003d\u003d 1) {","lastModifiedDate":"2021-10-17"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"                Integer.parseInt(input);","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"                return input.equals(level);","lastModifiedDate":"2021-10-17"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-17"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"                return input.equalsIgnoreCase(block);","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        } else if (input.length() \u003d\u003d 2) {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            return input.equalsIgnoreCase(block + level);","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        } else {","lastModifiedDate":"2021-10-17"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            return input.equalsIgnoreCase(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-17"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof RoomValidCheckPredicate // instanceof handles nulls","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 input.equals(((RoomValidCheckPredicate) other).input)); // state check","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-17"}],"authorContributionMap":{"VimuthM":49}},{"path":"src/main/java/safeforhall/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns true if the list contains an exactly equivalent person as the given argument.","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean containsExact(Person toCheck) {","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        return (internalList.stream().anyMatch(toCheck::isSameNamePerson)","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"                \u0026\u0026 internalList.stream().anyMatch(toCheck::isSameRoomPerson));","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"rebeccalaujx":10,"VimuthM":4,"-":133}},{"path":"src/main/java/safeforhall/model/person/VaccStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-06"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-10-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-10-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-05"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":" * Represents a Person\u0027s vaccination status in the address book.","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidVaccStatus(String)}","lastModifiedDate":"2021-10-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-05"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"public class VaccStatus implements Comparable\u003cVaccStatus\u003e {","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Vaccination status can be T or F (case insensitive).\";","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    /*","lastModifiedDate":"2021-10-05"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"     * Vaccination status can T/F (case insensitive)","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALIDATION_REGEX \u003d \"^([Tt]|[Ff])$\";","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    public static final String DESC \u003d \"Vaccinated: \";","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    public static final String FIELD \u003d \"v\";","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    public final String vaccStatus;","lastModifiedDate":"2021-10-05"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public final boolean vaccinated;","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"     * Constructs a {@code VaccStatus}.","lastModifiedDate":"2021-10-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"     *","lastModifiedDate":"2021-10-05"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"     * @param vaccStatus A valid vaccination status.","lastModifiedDate":"2021-10-05"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    public VaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-05"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        requireNonNull(vaccStatus);","lastModifiedDate":"2021-10-05"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        checkArgument(isValidVaccStatus(vaccStatus), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-05"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus.equals(\"T\") || vaccStatus.equals(\"t\")) {","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d \"T\";","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"            this.vaccinated \u003d true;","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        } else {","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            this.vaccStatus \u003d \"F\";","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"            this.vaccinated \u003d false;","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-05"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"     * Returns true if a given string is a valid vaccination status.","lastModifiedDate":"2021-10-05"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-05"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    public static boolean isValidVaccStatus(String test) {","lastModifiedDate":"2021-10-05"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-10-05"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    public String toString() {","lastModifiedDate":"2021-10-05"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus;","lastModifiedDate":"2021-10-05"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-05"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-10-05"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"                || (other instanceof VaccStatus // instanceof handles nulls","lastModifiedDate":"2021-10-05"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"                \u0026\u0026 vaccinated \u003d\u003d ((VaccStatus) other).vaccinated); // state check","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    @Override","lastModifiedDate":"2021-10-05"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"    public int hashCode() {","lastModifiedDate":"2021-10-05"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        return vaccStatus.hashCode();","lastModifiedDate":"2021-10-05"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-05"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"    public int compareTo(VaccStatus v) {","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        return this.vaccStatus.compareToIgnoreCase(v.vaccStatus);","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-05"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-05"}],"authorContributionMap":{"VimuthM":60,"jaredlhf":13}},{"path":"src/main/java/safeforhall/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"VimuthM":1,"-":10}},{"path":"src/main/java/safeforhall/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person.exceptions;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"VimuthM":1,"-":5}},{"path":"src/main/java/safeforhall/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-06"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_ALEX \u003d \"Alex Yeoh\";","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_BERNICE \u003d \"Bernice Yu\";","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_CHARLOTTE \u003d \"Charlotte Oliveiro\";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_DAVID \u003d \"David Li\";","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_IRFAN \u003d \"Irfan Ibrahim\";","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    public static final String NAME_ROY \u003d \"Roy Balakrishnan\";","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    public static final Person ALEX \u003d new Person(new Name(NAME_ALEX), new Room(\"E417\"), new Phone(\"87438807\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"alexyeoh@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"SoC\"), new LastDate(\"05-11-2021\"), new LastDate(\"05-11-2021\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public static final Person BERNICE \u003d new Person(new Name(NAME_BERNICE), new Room(\"A213\"), new Phone(\"99272758\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"berniceyu@example.com\"), new VaccStatus(\"F\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"FASS\"), new LastDate(\"10-10-2021\"), new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    public static final Person CHARLOTTE \u003d new Person(new Name(NAME_CHARLOTTE), new Room(\"B423\"), new Phone(\"93210283\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"charlotte@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"SoC\"), new LastDate(\"11-10-2021\"), new LastDate(\"12-10-2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    public static final Person DAVID \u003d new Person(new Name(NAME_DAVID), new Room(\"C112\"), new Phone(\"91031282\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"lidavid@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"SDE\"), new LastDate(\"27-10-2021\"), new LastDate(\"01-10-2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    public static final Person IRFAN \u003d new Person(new Name(NAME_IRFAN), new Room(\"D422\"), new Phone(\"92492021\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"irfan@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"FoE\"), new LastDate(\"03-11-2021\"), new LastDate(\"06-11-2021\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public static final Person ROY \u003d new Person(new Name(NAME_ROY), new Room(\"A309\"), new Phone(\"92624417\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"            new Email(\"royb@example.com\"), new VaccStatus(\"T\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"BIZ\"), new LastDate(\"29-10-2021\"), new LastDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        return new Person[] { ALEX, BERNICE, CHARLOTTE, DAVID, IRFAN, ROY };","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        sampleAb.addEvent(new Event(new EventName(\"Powerlifting\"), new EventDate(\"09-11-2021\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"                new EventTime(\"0800\"), new Venue(\"Gym\"), new Capacity(\"5\"), new ResidentList(","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"                String.join(\", \", NAME_DAVID, NAME_IRFAN), String.join(\", \",","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"                DAVID.toString(), IRFAN.toString()))));","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        sampleAb.addEvent(new Event(new EventName(\"Basketball\"), new EventDate(\"07-11-2021\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"                new EventTime(\"0830\"), new Venue(\"basketball court\"), new Capacity(\"5\"), new ResidentList(","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"                        ResidentList.DEFAULT_LIST, ResidentList.DEFAULT_LIST)));","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        sampleAb.addEvent(new Event(new EventName(\"Volleyball\"), new EventDate(\"08-11-2021\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"                new EventTime(\"0800\"), new Venue(\"volleyball court\"), new Capacity(\"6\"), new ResidentList(","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"                String.join(\", \", NAME_ALEX, NAME_DAVID, NAME_CHARLOTTE), String.join(\", \",","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                ALEX.toString(), DAVID.toString(), CHARLOTTE.toString()))));","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        sampleAb.addEvent(new Event(new EventName(\"Swimming\"), new EventDate(\"01-11-2021\"),","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"                new EventTime(\"0830\"), new Venue(\"Pool\"), new Capacity(\"7\"), new ResidentList(","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"                String.join(\", \", NAME_BERNICE, NAME_DAVID, NAME_CHARLOTTE), String.join(\", \",","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"                BERNICE.toString(), DAVID.toString(), CHARLOTTE.toString()))));","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"chongjunwei":8,"gordonlzy":8,"VimuthM":51,"-":16}},{"path":"src/main/java/safeforhall/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"     * Creates the exports folder within data","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"     * @param filepath The path of the exports folder.","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    void createExportsFolder(Path filepath) throws IOException;","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":5,"-":41,"jaredlhf":7}},{"path":"src/main/java/safeforhall/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-13"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-13"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2021-10-13"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-13"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2021-10-13"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    private final String eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    private final String eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    private final String eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    private final String venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"    private final String capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    private final String residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details.","lastModifiedDate":"2021-10-13"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    @JsonCreator","lastModifiedDate":"2021-10-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"                             @JsonProperty(\"eventDate\") String eventDate,","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"                             @JsonProperty(\"eventTime\") String eventTime,","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"                             @JsonProperty(\"venue\") String venue,","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                             @JsonProperty(\"capacity\") String capacity,","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                            @JsonProperty(\"residents\") String residents) {","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        this.eventDate \u003d eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-10-13"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2021-10-13"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        eventName \u003d source.getEventName().eventName;","lastModifiedDate":"2021-10-13"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        eventDate \u003d source.getEventDate().eventDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"        eventTime \u003d source.getEventTime().eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"        venue \u003d source.getVenue().venue;","lastModifiedDate":"2021-10-13"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        capacity \u003d source.getCapacity().inputCapacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        residents \u003d source.getResidentList().getResidentsStorage();","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2021-10-13"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"     *","lastModifiedDate":"2021-10-13"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2021-10-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"        // EventName","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        if (eventName \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"                    EventName.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        if (!EventName.isValidEventName(eventName)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        final EventName modelEventName \u003d new EventName(eventName);","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"        // EventDate","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        if (eventDate \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"                    EventDate.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"        if (!EventDate.isValidEventDate(eventDate)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"        final EventDate modelEventDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"        // EventTime","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        if (eventTime \u003d\u003d null) {","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"                    EventTime.class.getSimpleName()));","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        if (!EventTime.isValidEventTime(eventTime)) {","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(EventTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"        final EventTime modelEventTime \u003d new EventTime(eventTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"        // Venue","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        if (venue \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"        if (!Venue.isValidVenue(venue)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"        final Venue modelVenue \u003d new Venue(venue);","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"        // Capacity","lastModifiedDate":"2021-10-13"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        if (capacity \u003d\u003d null) {","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-13"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"                    Capacity.class.getSimpleName()));","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"        if (!Capacity.isValidCapacity(capacity)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"            throw new IllegalValueException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"        final Capacity modelCapacity \u003d new Capacity(capacity);","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"        // Residents","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        if (residents \u003d\u003d null) {","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                    ResidentList.class.getSimpleName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        String[] persons \u003d residents.split(\"\\\\s*,\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        for (String person : persons) {","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"            String[] information \u003d person.split(\"\\\\s*;\\\\s*\");","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"            if (count \u003d\u003d 0) {","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"                stringBuilder.append(information[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"            } else {","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"                stringBuilder.append(\", \").append(information[0]);","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"            count++;","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"        if (!ResidentList.isValidResidentStorage(residents)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"            throw new IllegalValueException(ResidentList.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        final ResidentList modelResidentList \u003d new ResidentList(stringBuilder.toString(), residents);","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"        return new Event(modelEventName, modelEventDate, modelEventTime,","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"                modelVenue, modelCapacity, modelResidentList);","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":145,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-13"}],"authorContributionMap":{"chongjunwei":114,"gordonlzy":27,"VimuthM":2,"jaredlhf":2}},{"path":"src/main/java/safeforhall/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-06"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private final String room;","lastModifiedDate":"2021-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private final String vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    private final String faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    private final String lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private final String lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"room\") String room,","lastModifiedDate":"2021-10-06"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2021-10-06"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"email\") String email,","lastModifiedDate":"2021-10-06"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"vaccStatus\") String vaccStatus,","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"faculty\") String faculty,","lastModifiedDate":"2021-10-06"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"lastFetDate\") String lastFetDate,","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"                             @JsonProperty(\"lastCollectionDate\") String lastCollectionDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d room;","lastModifiedDate":"2021-10-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        this.lastFetDate \u003d lastFetDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        this.lastCollectionDate \u003d lastCollectionDate;","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        room \u003d source.getRoom().room;","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        vaccStatus \u003d source.getVaccStatus().vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d source.getFaculty().faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        lastFetDate \u003d source.getLastFetDate().date;","lastModifiedDate":"2021-10-06"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        lastCollectionDate \u003d source.getLastCollectionDate().date;","lastModifiedDate":"2021-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        // Name","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        // Room","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        if (room \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        if (!Room.isValidRoom(room)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        final Room modelRoom \u003d new Room(room);","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        // Phone","lastModifiedDate":"2021-10-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        // Email","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        // VaccStatus","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus \u003d\u003d null) {","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-06"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"                    VaccStatus.class.getSimpleName()));","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        if (!VaccStatus.isValidVaccStatus(vaccStatus)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"            throw new IllegalValueException(VaccStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        final VaccStatus modelVaccStatus \u003d new VaccStatus(vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        // Faculty","lastModifiedDate":"2021-10-06"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"        if (faculty \u003d\u003d null) {","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"                    Faculty.class.getSimpleName()));","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        if (!Faculty.isValidFaculty(faculty)) {","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            throw new IllegalValueException(Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        final Faculty modelFaculty \u003d new Faculty(faculty);","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        // LastFetDate","lastModifiedDate":"2021-10-06"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(lastFetDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-06"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        final LastDate modelFetDate \u003d new LastDate(lastFetDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"        // LastCollectionDate","lastModifiedDate":"2021-10-06"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        if (!LastDate.isValidDate(lastCollectionDate)) {","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"            throw new IllegalValueException(LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"        final LastDate modelCollectionDate \u003d new LastDate(lastCollectionDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"        return new Person(modelName, modelRoom, modelPhone, modelEmail,","lastModifiedDate":"2021-10-06"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"                modelVaccStatus, modelFaculty, modelFetDate, modelCollectionDate);","lastModifiedDate":"2021-10-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"gordonlzy":7,"VimuthM":64,"-":70,"jaredlhf":5}},{"path":"src/main/java/safeforhall/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.FileUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    public void createExportsFolder(Path filePath) throws IOException {","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        Files.createDirectories(filePath);","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":7,"-":73,"jaredlhf":6}},{"path":"src/main/java/safeforhall/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"@JsonRootName(value \u003d \"safeforhall\")","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Residents list contains duplicate resident(s).\";","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";","lastModifiedDate":"2021-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-10-13"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        this.events.addAll(events);","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2021-10-13"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"            if (addressBook.hasEvent(event)) {","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-13"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"            addressBook.addEvent(event);","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"chongjunwei":14,"VimuthM":6,"-":52,"jaredlhf":1}},{"path":"src/main/java/safeforhall/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":5,"-":42}},{"path":"src/main/java/safeforhall/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VimuthM":5,"-":27}},{"path":"src/main/java/safeforhall/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import java.nio.file.Files;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"    public void createExportsFolder(Path filepath) throws IOException {","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        Files.createDirectories(filepath);","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":6,"-":73,"jaredlhf":6}},{"path":"src/main/java/safeforhall/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":6,"-":30}},{"path":"src/main/java/safeforhall/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExcludeCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.SwitchCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.TraceCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.delete.DeleteEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.find.FindEventCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    private ArrayList\u003cString\u003e historicals \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    private int current \u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    private boolean isResidentTab \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    private String currentString \u003d \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    private String currentParamaters \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    private TextField main;","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    private TextField suggestions;","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        main.setBackground(Background.EMPTY);","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        main.setPrefWidth(1600);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        suggestions.setPrefWidth(1400);","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        suggestions.setEditable(false);","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        suggestions.setDisable(true);","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        main.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        handleCommandEntered();","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        handleInput();","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        handleHistory();","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"            if (event.getCode() \u003d\u003d KeyCode.ENTER) {","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"                String commandText \u003d main.getText();","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"                historicals.add(commandText);","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"                current \u003d historicals.size();","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    return;","lastModifiedDate":"2020-12-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2020-12-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                try {","lastModifiedDate":"2017-02-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"                    main.setText(\"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"                    current--;","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2016-09-14"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"                event.consume();","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        });","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        main.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        ObservableList\u003cString\u003e styleClass \u003d main.getStyleClass();","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"     * Handles the up and down key events to re-instate past commands.","lastModifiedDate":"2021-10-16"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"    private void handleHistory() {","lastModifiedDate":"2021-10-16"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            if (historicals.isEmpty() || !(event.getTarget() instanceof TextField)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"                return;","lastModifiedDate":"2021-10-16"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"            // Simplified if statement not used to allow other key presses to propagate","lastModifiedDate":"2021-11-03"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"            if (event.getCode() \u003d\u003d KeyCode.UP || event.getCode() \u003d\u003d KeyCode.DOWN) {","lastModifiedDate":"2021-10-16"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"                String newText;","lastModifiedDate":"2021-10-16"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"                if (event.getCode() \u003d\u003d KeyCode.UP) {","lastModifiedDate":"2021-10-16"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"                    if (current \u003e 0) {","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"                        current--;","lastModifiedDate":"2021-10-16"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"                    }","lastModifiedDate":"2021-10-16"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"                    newText \u003d historicals.get(current);","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"                } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"                    if (current \u003c historicals.size() - 1) {","lastModifiedDate":"2021-10-16"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"                        current++;","lastModifiedDate":"2021-10-16"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"                        newText \u003d historicals.get(current);","lastModifiedDate":"2021-10-16"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"                    } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"                        current \u003d historicals.size();","lastModifiedDate":"2021-10-16"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"                        newText \u003d \"\";","lastModifiedDate":"2021-10-16"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"                    }","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"                }","lastModifiedDate":"2021-10-16"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"                event.consume();","lastModifiedDate":"2021-10-16"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"                main.setText(\"\\n\" + newText);","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"                main.positionCaret(newText.length());","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-10-16"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"    private void handleInput() {","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_RELEASED, event -\u003e {","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"            if (event.getCode() !\u003d KeyCode.UP \u0026\u0026 event.getCode() !\u003d KeyCode.DOWN) {","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"                makeSuggestions();","lastModifiedDate":"2021-10-27"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-10-16"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"    private String[] processMain(String mainText) {","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"        return mainText.split(\" \", 2);","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"    private String compareParts(StringBuilder stringBuilder, String[] suggestionParts, String[] parameterParts) {","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"        for (String suggestionPart : suggestionParts) {","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"            boolean isEntered \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"            SuggestionPredicate suggestionPredicate \u003d new SuggestionPredicate(suggestionPart);","lastModifiedDate":"2021-11-05"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"            for (String parameterPart : parameterParts) {","lastModifiedDate":"2021-10-26"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"                boolean isMatched \u003d suggestionPredicate.test(parameterPart);","lastModifiedDate":"2021-11-05"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"                if (isMatched \u0026\u0026 !suggestionPredicate.isLateKeyword(parameterPart)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"                    isEntered \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"                    break;","lastModifiedDate":"2021-10-28"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"                } else if (isMatched \u0026\u0026 suggestionPredicate.isLateKeyword(parameterPart)) {","lastModifiedDate":"2021-11-05"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"                    isEntered \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"                }","lastModifiedDate":"2021-10-26"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"            if (!isEntered) {","lastModifiedDate":"2021-10-26"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"                stringBuilder.append(suggestionPart).append(\" \");","lastModifiedDate":"2021-10-26"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"    private String getDisplaySuggestion(String suggestion) {","lastModifiedDate":"2021-10-26"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"        if (currentParamaters.equals(\"\")) {","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"            return suggestion;","lastModifiedDate":"2021-10-26"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"            StringBuilder displayedSuggestion \u003d new StringBuilder();","lastModifiedDate":"2021-10-26"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"            String[] suggestionParts \u003d suggestion.split(\" \");","lastModifiedDate":"2021-10-26"},{"lineNumber":197,"author":{"gitId":"gordonlzy"},"content":"            String[] parameterParts \u003d currentParamaters.split(\" \");","lastModifiedDate":"2021-10-27"},{"lineNumber":198,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":199,"author":{"gitId":"gordonlzy"},"content":"            return compareParts(displayedSuggestion, suggestionParts, parameterParts);","lastModifiedDate":"2021-10-26"},{"lineNumber":200,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"    private String mapSuggestion(String currentString, boolean isResidentTab) {","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"        if (isResidentTab) {","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"            return getResidentTabSuggestion(currentString);","lastModifiedDate":"2021-11-05"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-11-05"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"            return getEventTabSuggestion(currentString);","lastModifiedDate":"2021-11-05"},{"lineNumber":208,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":210,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":211,"author":{"gitId":"gordonlzy"},"content":"    public String getResidentTabSuggestion(String currentString) {","lastModifiedDate":"2021-11-05"},{"lineNumber":212,"author":{"gitId":"gordonlzy"},"content":"        switch (currentString) {","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"gordonlzy"},"content":"        case AddPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"gordonlzy"},"content":"            return AddPersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"gordonlzy"},"content":"        case DeletePersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"gordonlzy"},"content":"            return DeletePersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"gordonlzy"},"content":"        case EditPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"gordonlzy"},"content":"            return EditPersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"gordonlzy"},"content":"        case ViewPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"gordonlzy"},"content":"            return ViewPersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"gordonlzy"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"gordonlzy"},"content":"            return ClearCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"gordonlzy"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"gordonlzy"},"content":"            return ExitCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"gordonlzy"},"content":"        case FindPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"gordonlzy"},"content":"            return FindPersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"gordonlzy"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"gordonlzy"},"content":"            return HelpCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"gordonlzy"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":230,"author":{"gitId":"gordonlzy"},"content":"            return DeadlineCommand.PARAMETERS;","lastModifiedDate":"2021-10-26"},{"lineNumber":231,"author":{"gitId":"jaredlhf"},"content":"        case ImportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":232,"author":{"gitId":"jaredlhf"},"content":"            return ImportCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":233,"author":{"gitId":"jaredlhf"},"content":"        case ExportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":234,"author":{"gitId":"jaredlhf"},"content":"            return ExportCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":235,"author":{"gitId":"gordonlzy"},"content":"        case SwitchCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":236,"author":{"gitId":"gordonlzy"},"content":"            return SwitchCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"gordonlzy"},"content":"        case TraceCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":238,"author":{"gitId":"gordonlzy"},"content":"            return TraceCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":239,"author":{"gitId":"jaredlhf"},"content":"        case SortPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-29"},{"lineNumber":240,"author":{"gitId":"jaredlhf"},"content":"            return SortPersonCommand.PARAMETERS;","lastModifiedDate":"2021-10-29"},{"lineNumber":241,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":242,"author":{"gitId":"gordonlzy"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"gordonlzy"},"content":"            return \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":246,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"    public String getEventTabSuggestion(String currentString) {","lastModifiedDate":"2021-11-05"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"        switch (currentString) {","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"            return AddEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"        case DeleteEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"            return DeleteEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"        case EditEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"            return EditEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"gordonlzy"},"content":"        case ViewEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"gordonlzy"},"content":"            return ViewEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"gordonlzy"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"gordonlzy"},"content":"            return ClearCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"gordonlzy"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"gordonlzy"},"content":"            return ExitCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"gordonlzy"},"content":"        case FindEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-26"},{"lineNumber":262,"author":{"gitId":"gordonlzy"},"content":"            return FindEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-26"},{"lineNumber":263,"author":{"gitId":"gordonlzy"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"            return HelpCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"        case IncludeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"            return IncludeCommand.PARAMETERS;","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"jaredlhf"},"content":"        case ImportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":268,"author":{"gitId":"jaredlhf"},"content":"            return ImportCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":269,"author":{"gitId":"jaredlhf"},"content":"        case ExportCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":270,"author":{"gitId":"jaredlhf"},"content":"            return ExportCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"        case SwitchCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"            return SwitchCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":273,"author":{"gitId":"gordonlzy"},"content":"        case ExcludeCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-28"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"            return ExcludeCommand.PARAMETERS;","lastModifiedDate":"2021-10-28"},{"lineNumber":275,"author":{"gitId":"jaredlhf"},"content":"        case SortEventCommand.COMMAND_WORD:","lastModifiedDate":"2021-10-29"},{"lineNumber":276,"author":{"gitId":"jaredlhf"},"content":"            return SortEventCommand.PARAMETERS;","lastModifiedDate":"2021-10-29"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"        default:","lastModifiedDate":"2021-10-25"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"            return \"\";","lastModifiedDate":"2021-10-25"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":289,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":290,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":291,"author":{"gitId":"VimuthM"},"content":"         * @see Logic#execute(String, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":292,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":296,"author":{"gitId":"gordonlzy"},"content":"    public void setIsResidentTab(boolean isResidentTab) {","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"gordonlzy"},"content":"        this.isResidentTab \u003d isResidentTab;","lastModifiedDate":"2021-10-26"},{"lineNumber":298,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":299,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":300,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":301,"author":{"gitId":"gordonlzy"},"content":"     * Refreshes the suggestion when changing tabs .","lastModifiedDate":"2021-10-26"},{"lineNumber":302,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"gordonlzy"},"content":"    public void refreshSuggestions() {","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"gordonlzy"},"content":"        makeSuggestions();","lastModifiedDate":"2021-10-27"},{"lineNumber":305,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":306,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":307,"author":{"gitId":"gordonlzy"},"content":"    private void makeSuggestions() {","lastModifiedDate":"2021-10-27"},{"lineNumber":308,"author":{"gitId":"gordonlzy"},"content":"        currentString \u003d main.getText();","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"gordonlzy"},"content":"        String[] processString \u003d processMain(currentString.trim());","lastModifiedDate":"2021-10-26"},{"lineNumber":310,"author":{"gitId":"gordonlzy"},"content":"        String commandString \u003d processString[0];","lastModifiedDate":"2021-10-26"},{"lineNumber":311,"author":{"gitId":"gordonlzy"},"content":"        if (processString.length \u003e 1) {","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"gordonlzy"},"content":"            currentParamaters \u003d processString[1].trim();","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"gordonlzy"},"content":"            currentParamaters \u003d \"\";","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":316,"author":{"gitId":"gordonlzy"},"content":"        String suggestion \u003d mapSuggestion(commandString.trim(), isResidentTab);","lastModifiedDate":"2021-10-26"},{"lineNumber":317,"author":{"gitId":"gordonlzy"},"content":"        if (!suggestion.equals(\"\")) {","lastModifiedDate":"2021-10-26"},{"lineNumber":318,"author":{"gitId":"gordonlzy"},"content":"            String displayedSuggestion \u003d getDisplaySuggestion(suggestion);","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"gordonlzy"},"content":"            suggestions.setText(displayedSuggestion);","lastModifiedDate":"2021-10-27"},{"lineNumber":320,"author":{"gitId":"gordonlzy"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":321,"author":{"gitId":"gordonlzy"},"content":"            suggestions.setText(\"\");","lastModifiedDate":"2021-10-26"},{"lineNumber":322,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":323,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"gordonlzy":180,"VimuthM":52,"-":75,"jaredlhf":17}},{"path":"src/main/java/safeforhall/ui/EventAdditionalCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"public class EventAdditionalCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String FXML \u003d \"EventAdditionalCard.fxml\";","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    public final Event event;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    private Label name;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    private Label date;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    private Label time;","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    private Label venue;","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    private Label capacity;","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"    private Label residents;","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates a {@code EventAdditionalCard} with the given {@code Member} and index to display.","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    public EventAdditionalCard(Event event) {","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        this.event \u003d event;","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        name.setText(event.getEventName().eventName);","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        name.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        date.setText(EventDate.DESC + event.getEventDate().eventDate);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        time.setText(EventTime.DESC + event.getEventTime().eventTime);","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        venue.setText(Venue.DESC + event.getVenue().venue);","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        venue.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        capacity.setText(Capacity.DESC + event.getCapacity().capacity);","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        capacity.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        residents.setText(ResidentList.DESC + event.getResidentList().getResidentsDisplay());","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        residents.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof EventAdditionalCard)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        // state check","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        EventAdditionalCard card \u003d (EventAdditionalCard) other;","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        return event.equals(card.event);","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":61,"chongjunwei":4,"gordonlzy":8,"VimuthM":1}},{"path":"src/main/java/safeforhall/ui/EventAdditionalListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":" * Panel containing the list of Events.","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"public class EventAdditionalListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String FXML \u003d \"EventAdditionalListPanel.fxml\";","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventAdditionalListPanel.class);","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"    private ListView\u003cEvent\u003e eventAdditionalListView;","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates a {@code EventAdditionalListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"    public EventAdditionalListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"        eventAdditionalListView.setItems(eventList);","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        eventAdditionalListView.setCellFactory(listView -\u003e new EventAdditionalListViewCell());","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventAdditionalCard}.","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    class EventAdditionalListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"                setText(null);","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"            } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"                setGraphic(new EventAdditionalCard(event).getRoot());","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":49}},{"path":"src/main/java/safeforhall/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":" * An UI component that displays information of a {@code Event}.","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"     *","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    public final Event event;","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    private Label name;","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    private Label id;","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    private HBox informationContainer;","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    private VBox vaccinatedContainer;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    private Label date;","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"     * Creates a {@code EventCode} with the given {@code Event} and index to display.","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        super(FXML);","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        this.event \u003d event;","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"        name.setText(event.getEventName().eventName);","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"        date.setText(EventDate.DESC + event.getEventDate().eventDate);","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        if (event.hasUnvaccinatedResident()) {","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            this.getRoot().setStyle(\"-fx-border-color: derive(#FF0000, 70%); -fx-border-width: 1 1 1 7;\"","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"                    + \"-fx-border-radius: 5\");","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"            Label textBox \u003d new Label(\"Un-Vaccinated: \" + event.numOfUnvaccinatedResidents());","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"            vaccinatedContainer.getChildren().add(textBox);","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"        if (event.isOver()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            this.getRoot().setStyle(\"-fx-border-color: derive(#A9A9A9, 70%); -fx-border-width: 1 1 1 7;\"","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                    + \"-fx-border-radius: 5\");","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"            return true;","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        if (!(other instanceof EventCard)) {","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"            return false;","lastModifiedDate":"2021-10-16"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        // state check","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        EventCard card \u003d (EventCard) other;","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"                \u0026\u0026 event.equals(card.event);","lastModifiedDate":"2021-10-16"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"VimuthM":5,"jaredlhf":78}},{"path":"src/main/java/safeforhall/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":" * Panel containing the list of Events.","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private boolean isResidentTab \u003d true;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private final Logic logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"     * Creates a {@code EventListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList, Logic logic) {","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        super(FXML);","lastModifiedDate":"2021-10-16"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2021-10-16"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2021-10-16"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    /**","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}.","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"     */","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2021-10-16"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"                setText(null);","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"            } else {","lastModifiedDate":"2021-10-16"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2021-10-16"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"            }","lastModifiedDate":"2021-10-16"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-16"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private void setSingleEvent() {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        if (!isResidentTab) {","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"                new ViewEventCommand(","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"                        Index.fromZeroBased(eventListView.getSelectionModel().getSelectedIndex()))","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                    .setSingleEvent(logic.getModel());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Non card area selected\");","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"            } catch (CommandException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Invalid card selected\");","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    public void setIsResidentTab(boolean isResidentTab) {","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        this.isResidentTab \u003d isResidentTab;","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"VimuthM":26,"jaredlhf":48}},{"path":"src/main/java/safeforhall/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import java.awt.Desktop;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import java.net.URI;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.net.URISyntaxException;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.Hyperlink;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2122s1-cs2103t-t15-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    public static final String HELP_MESSAGE \u003d \"   Here\u0027s a quick summary of the commands!\\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    public static final String MORE_MESSAGE \u003d \"   For more information, please refer to our \";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    private Rectangle helpGuide;","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    private HBox helpGuideContainer;","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    private Hyperlink hyperlink;","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    private Label message;","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    private Label moreMessage;","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        Image helpGuideImg \u003d new Image(\"/images/help-guide.png\");","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        Rectangle rec \u003d new Rectangle(850, 700);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        rec.setFill(new ImagePattern(helpGuideImg));","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"        helpGuideContainer.getChildren().add(rec);","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        message.setText(HELP_MESSAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        moreMessage.setText(MORE_MESSAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"        message.setFont(new Font(20.0));","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        moreMessage.setFont(new Font(20.0));","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        hyperlink.setFont(new Font(20.0));","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"    void openLink(ActionEvent event) throws URISyntaxException, IOException {","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        Desktop.getDesktop().browse(new URI(USERGUIDE_URL));","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rebeccalaujx":25,"VimuthM":13,"-":85}},{"path":"src/main/java/safeforhall/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import javafx.application.Platform;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.control.Tab;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import javafx.scene.control.Tooltip;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    private EventAdditionalListPanel eventAdditionalListPanel;","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    private PersonAdditionalListPanel personAdditionalListPanel;","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    private CommandBox commandBox;","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    private GridPane splitpane1;","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    private Button helpMenuItem;","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"    private StackPane personAdditionalListPanelPlaceholder;","lastModifiedDate":"2021-10-23"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    private StackPane eventListPanelPlaceholder;","lastModifiedDate":"2021-10-16"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    private StackPane eventAdditionalListPanelPlaceholder;","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"    @FXML","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"    private TabPane tabPane;","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    private Tab residentsTab;","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    private Tab eventsTab;","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"    private Tab helpTab;","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    private Tab exitTab;","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"    private AnchorPane anchor;","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        handleTabCreation();","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"    private void handleTabCreation() {","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        createResidentsTab();","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        createEventsTab();","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"        createHelpTab();","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        createExitTab();","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        tabPane.getSelectionModel().selectedItemProperty().addListener((observable, oldTab, newTab) -\u003e {","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"            boolean success \u003d !newTab.equals(helpTab);","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"            if (!success) {","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"                Platform.runLater(() -\u003e tabPane.getSelectionModel().select(oldTab));","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        tabPane.setRotateGraphic(false);","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"    private void createResidentsTab() {","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        residentsTab.setGraphic(createTab(\"resident\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        residentsTab.setTooltip(new Tooltip(\"Residents\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    private void createEventsTab() {","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        eventsTab.setGraphic(createTab(\"event\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        eventsTab.setTooltip(new Tooltip(\"Events\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"    private void createHelpTab() {","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        helpTab.setGraphic(createTab(\"help\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"        helpTab.setTooltip(new Tooltip(\"Help\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"        helpTab.setOnSelectionChanged(e -\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"            if (helpTab.isSelected()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"                handleHelp();","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"            e.consume();","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"    private void createExitTab() {","lastModifiedDate":"2021-11-05"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        exitTab.setGraphic(createTab(\"exit\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"        exitTab.setTooltip(new Tooltip(\"Exit\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        exitTab.setOnSelectionChanged(e -\u003e {","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"            if (exitTab.isSelected()) {","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"                handleExit();","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        });","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"    private HBox createTab(String imageName) {","lastModifiedDate":"2021-11-05"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"        HBox content \u003d new HBox();","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"        ImageView icon \u003d new ImageView(\"/images/\" + imageName + \".png\");","lastModifiedDate":"2021-10-27"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"        icon.setFitHeight(38);","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"        icon.setFitWidth(38);","lastModifiedDate":"2021-10-28"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        icon.setPreserveRatio(true);","lastModifiedDate":"2021-10-27"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"        content.getChildren().addAll(new Label(\"    \"), icon, new Label(\"     \"));","lastModifiedDate":"2021-10-28"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        return content;","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"    public boolean getIsResidentTab() {","lastModifiedDate":"2021-10-16"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"        // Dependent on the ordering of tabs in `MainWindow.fxml`","lastModifiedDate":"2021-10-16"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        // Resident is at index 0 and Event at index 1","lastModifiedDate":"2021-10-16"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"        return tabPane.getSelectionModel().getSelectedIndex() \u003d\u003d 0;","lastModifiedDate":"2021-10-16"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-16"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"    private void setAccelerator(Button menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":219,"author":{"gitId":"VimuthM"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic);","lastModifiedDate":"2021-10-27"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":222,"author":{"gitId":"VimuthM"},"content":"        personAdditionalListPanel \u003d new PersonAdditionalListPanel(logic.getSinglePerson(), logic);","lastModifiedDate":"2021-10-28"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"        personAdditionalListPanelPlaceholder.getChildren().add(personAdditionalListPanel.getRoot());","lastModifiedDate":"2021-10-23"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":225,"author":{"gitId":"VimuthM"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList(), logic);","lastModifiedDate":"2021-10-27"},{"lineNumber":226,"author":{"gitId":"jaredlhf"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2021-10-16"},{"lineNumber":227,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":228,"author":{"gitId":"rebeccalaujx"},"content":"        eventAdditionalListPanel \u003d new EventAdditionalListPanel(logic.getSingleEvent());","lastModifiedDate":"2021-10-23"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"        eventAdditionalListPanelPlaceholder.getChildren().add(eventAdditionalListPanel.getRoot());","lastModifiedDate":"2021-10-23"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":237,"author":{"gitId":"gordonlzy"},"content":"        commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":281,"author":{"gitId":"chongjunwei"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":282,"author":{"gitId":"chongjunwei"},"content":"    private void handleSwitch() {","lastModifiedDate":"2021-10-26"},{"lineNumber":283,"author":{"gitId":"chongjunwei"},"content":"        int index \u003d tabPane.getSelectionModel().getSelectedIndex() ^ 1;","lastModifiedDate":"2021-10-26"},{"lineNumber":284,"author":{"gitId":"chongjunwei"},"content":"        tabPane.getSelectionModel().select(index);","lastModifiedDate":"2021-10-26"},{"lineNumber":285,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":286,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":287,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":288,"author":{"gitId":"gordonlzy"},"content":"     * Set isResidentTab of CommandBox to True.","lastModifiedDate":"2021-10-26"},{"lineNumber":289,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":290,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":291,"author":{"gitId":"gordonlzy"},"content":"    private void commandBoxToResidents() {","lastModifiedDate":"2021-10-26"},{"lineNumber":292,"author":{"gitId":"gordonlzy"},"content":"        if (commandBox !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":293,"author":{"gitId":"gordonlzy"},"content":"            this.commandBox.setIsResidentTab(true);","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"gordonlzy"},"content":"            this.commandBox.refreshSuggestions();","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":296,"author":{"gitId":"VimuthM"},"content":"        if (personListPanel !\u003d null) {","lastModifiedDate":"2021-10-27"},{"lineNumber":297,"author":{"gitId":"VimuthM"},"content":"            this.personListPanel.setIsResidentTab(true);","lastModifiedDate":"2021-10-27"},{"lineNumber":298,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":299,"author":{"gitId":"VimuthM"},"content":"        if (eventListPanel !\u003d null) {","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"VimuthM"},"content":"            this.eventListPanel.setIsResidentTab(true);","lastModifiedDate":"2021-10-27"},{"lineNumber":301,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":302,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":303,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":304,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":305,"author":{"gitId":"gordonlzy"},"content":"     * Set isResidentTab of CommandBox to False.","lastModifiedDate":"2021-10-26"},{"lineNumber":306,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":307,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-10-26"},{"lineNumber":308,"author":{"gitId":"gordonlzy"},"content":"    private void commandBoxToEvents() {","lastModifiedDate":"2021-10-26"},{"lineNumber":309,"author":{"gitId":"gordonlzy"},"content":"        if (commandBox !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":310,"author":{"gitId":"gordonlzy"},"content":"            this.commandBox.setIsResidentTab(false);","lastModifiedDate":"2021-10-26"},{"lineNumber":311,"author":{"gitId":"gordonlzy"},"content":"            this.commandBox.refreshSuggestions();","lastModifiedDate":"2021-10-26"},{"lineNumber":312,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":313,"author":{"gitId":"VimuthM"},"content":"        if (personListPanel !\u003d null) {","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"VimuthM"},"content":"            this.personListPanel.setIsResidentTab(false);","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":316,"author":{"gitId":"VimuthM"},"content":"        if (eventListPanel !\u003d null) {","lastModifiedDate":"2021-10-27"},{"lineNumber":317,"author":{"gitId":"VimuthM"},"content":"            this.eventListPanel.setIsResidentTab(false);","lastModifiedDate":"2021-10-27"},{"lineNumber":318,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":322,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":323,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":324,"author":{"gitId":"VimuthM"},"content":"     * @see Logic#execute(String, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":325,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":328,"author":{"gitId":"VimuthM"},"content":"            CommandResult commandResult \u003d logic.execute(commandText, getIsResidentTab());","lastModifiedDate":"2021-10-16"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":336,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":338,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":340,"author":{"gitId":"chongjunwei"},"content":"            if (commandResult.isSwitchTab()) {","lastModifiedDate":"2021-10-26"},{"lineNumber":341,"author":{"gitId":"chongjunwei"},"content":"                handleSwitch();","lastModifiedDate":"2021-10-26"},{"lineNumber":342,"author":{"gitId":"chongjunwei"},"content":"            }","lastModifiedDate":"2021-10-26"},{"lineNumber":343,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":351,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rebeccalaujx":13,"gordonlzy":34,"chongjunwei":10,"VimuthM":107,"-":178,"jaredlhf":9}},{"path":"src/main/java/safeforhall/ui/PersonAdditionalCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"public class PersonAdditionalCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String FXML \u003d \"PersonAdditionalCard.fxml\";","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private static final String EVENTS_DESC \u003d \"Events: \";","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    public final Person person;","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    private Label name;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"    private Label room;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"    private Label phone;","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"    private Label email;","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    private Label vaccStatus;","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    private Label faculty;","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    private Label events;","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    private Label lastFetDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    private Label lastCollectionDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    @FXML","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    private HBox informationContainer;","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    private HBox deadlineContainer;","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    private VBox labelBox;","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"    private VBox labelBoxInterior;","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates a {@code PersonAdditionalCard} with the given {@code Member} and index to display.","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public PersonAdditionalCard(Person person, Logic logic) {","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        name.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        room.setText(Room.DESC + person.getRoom().room);","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        phone.setText(Phone.DESC + person.getPhone().value);","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        email.setText(Email.DESC + person.getEmail().value);","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        email.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        faculty.setText(Faculty.DESC + person.getFaculty().faculty);","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        faculty.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        vaccStatus.setText(VaccStatus.DESC + person.getVaccStatus().vaccStatus);","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        lastFetDate.setText(LastDate.FET_DESC + person.getLastFetDate().date);","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        lastCollectionDate.setText(LastDate.COLLECTION_DESC + person.getLastCollectionDate().date);","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e eventList \u003d logic.getModel().getPersonEvents(person, event -\u003e true);","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        events.setText(EVENTS_DESC + (eventList.isEmpty() ? \"None\" : eventList","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"                .stream()","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                .map(event -\u003e event.getEventName().eventName)","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"                .reduce(\"\", (name, acc) -\u003e name.equals(\"\")","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"                        ? name + acc","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"                        : name + \", \" + acc)));","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        events.setWrapText(true);","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        if (person.hasMissedDeadline()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"            Label textBox \u003d new Label(\"Fet late by: \");","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"            int missedDates \u003d person.getMissedDates();","lastModifiedDate":"2021-10-23"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"            Label date;","lastModifiedDate":"2021-10-23"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"            if (missedDates \u003e 1) {","lastModifiedDate":"2021-10-23"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"                date \u003d new Label(missedDates + \" days\");","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"            } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"                date \u003d new Label(missedDates + \" day\");","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"            textBox.getStyleClass().add(\"cell_alert\");","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"            date.getStyleClass().add(\"cell_alert\");","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"            deadlineContainer.getChildren().add(textBox);","lastModifiedDate":"2021-10-23"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"            deadlineContainer.getChildren().add(date);","lastModifiedDate":"2021-10-23"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        // short circuit if same object","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"            return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-10-23"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        if (!(other instanceof PersonAdditionalCard)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"        // state check","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        PersonAdditionalCard card \u003d (PersonAdditionalCard) other;","lastModifiedDate":"2021-10-23"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"        return person.equals(card.person);","lastModifiedDate":"2021-10-23"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":86,"gordonlzy":21,"VimuthM":13}},{"path":"src/main/java/safeforhall/ui/PersonAdditionalListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":" * Panel containing the list of Residents.","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"public class PersonAdditionalListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String FXML \u003d \"PersonAdditionalListPanel.fxml\";","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonAdditionalListPanel.class);","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    private final Logic logic;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    @FXML","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    private ListView\u003cPerson\u003e personAdditionalListView;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"     * Creates a {@code PersonAdditionalListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    public PersonAdditionalListPanel(ObservableList\u003cPerson\u003e personList, Logic logic) {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        super(FXML);","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        personAdditionalListView.setItems(personList);","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        personAdditionalListView.setCellFactory(listView -\u003e new PersonAdditionalListViewCell());","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonAdditionalCard}.","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    class PersonAdditionalListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"                setGraphic(null);","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"                setText(null);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"            } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"                setGraphic(new PersonAdditionalCard(person, logic).getRoot());","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":46,"VimuthM":5}},{"path":"src/main/java/safeforhall/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    private Label room;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    private Rectangle status;","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    private HBox informationContainer;","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    private VBox statusContainer;","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        room.setText(person.getRoom().toString());","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        if (person.hasMissedDeadline()) {","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"            this.getRoot().setStyle(\"-fx-border-color: derive(#FF0000, 70%); -fx-border-width: 1 1 1 7;\");","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        if (person.getVaccStatus().vaccinated) {","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            Image img \u003d new Image(\"/images/vaccinated.png\");","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"            Rectangle rec \u003d new Rectangle(30, 30);","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            rec.setArcHeight(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"            rec.setArcWidth(10);","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"            rec.setFill(new ImagePattern(img));","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"            statusContainer.getChildren().add(rec);","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"gordonlzy":8,"VimuthM":16,"-":61}},{"path":"src/main/java/safeforhall/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private boolean isResidentTab \u003d true;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private final Logic logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList, Logic logic) {","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    @FXML","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private void setSinglePerson() {","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        if (isResidentTab) {","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"            try {","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"                new ViewPersonCommand(","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"                        Index.fromZeroBased(personListView.getSelectionModel().getSelectedIndex()))","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                        .setSinglePerson(logic.getModel());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Non card area selected\");","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"            } catch (CommandException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                logger.info(\"Invalid card selected\");","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"            }","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    public void setIsResidentTab(boolean isResidentTab) {","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        this.isResidentTab \u003d isResidentTab;","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":29,"-":45}},{"path":"src/main/java/safeforhall/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        resultDisplay.setWrapText(true);","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rebeccalaujx":1,"VimuthM":1,"-":27}},{"path":"src/main/java/safeforhall/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":27}},{"path":"src/main/java/safeforhall/ui/SuggestionPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"public class SuggestionPredicate implements Predicate\u003cString\u003e {","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"    private final String suggestionPart;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"     * Creates a SuggestionPredicate","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    public SuggestionPredicate(String suggestionPart) {","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"        this.suggestionPart \u003d suggestionPart;","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"     * Tests if the given {@code parameterPart} matches any of the given pattern.","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the pattern is matched","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    @Override","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    public boolean test(String parameterPart) {","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        boolean isOneCharPrefix \u003d parameterPart.length() \u003e 1 \u0026\u0026 parameterPart.charAt(1) \u003d\u003d \u0027/\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 suggestionPart.substring(0, 2).equals(parameterPart.substring(0, 2));","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        boolean isTwoCharPrefix \u003d parameterPart.length() \u003e 2 \u0026\u0026 parameterPart.charAt(2) \u003d\u003d \u0027/\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 suggestionPart.substring(0, 3).equals(parameterPart.substring(0, 3));","lastModifiedDate":"2021-11-05"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        boolean isIndex \u003d (suggestionPart.equals(\"INDEXES\") || suggestionPart.equals(\"INDEX\")","lastModifiedDate":"2021-11-05"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"                || suggestionPart.equals(\"[INDEXES]\") || suggestionPart.equals(\"[INDEX]\"))","lastModifiedDate":"2021-11-05"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.matches(\"\\\\d+\");","lastModifiedDate":"2021-11-05"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        boolean isImportOrExport \u003d (suggestionPart.equals(\"CSV_NAME\") || suggestionPart.equals(\"FILE_NAME\"))","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.matches(\"\\\\w+\");","lastModifiedDate":"2021-11-05"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        boolean isLateKeyword \u003d parameterPart.contains(\"k/l\") \u0026\u0026 suggestionPart.equals(\"d2/DATE\");","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        boolean isOptionalOneCharPrefix \u003d suggestionPart.charAt(0) \u003d\u003d \u0027[\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.length() \u003e 1","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.charAt(1) \u003d\u003d \u0027/\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 suggestionPart.substring(1, 3).equals(parameterPart.substring(0, 2));","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        boolean isOptionalTwoCharPrefix \u003d suggestionPart.charAt(0) \u003d\u003d \u0027[\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.length() \u003e 2","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 parameterPart.charAt(2) \u003d\u003d \u0027/\u0027","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                \u0026\u0026 suggestionPart.substring(1, 4).equals(parameterPart.substring(0, 3));","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        return isOneCharPrefix || isTwoCharPrefix || isIndex || isImportOrExport || isOptionalOneCharPrefix","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                || isOptionalTwoCharPrefix || isLateKeyword;","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-11-05"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"     * Checks if the given {@code parameterPart} is a late keyword.","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"     *","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"     * @return true if the parameterPart contains \"k/l\"","lastModifiedDate":"2021-11-05"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-11-05"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    public boolean isLateKeyword(String parameterPart) {","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        return parameterPart.contains(\"k/l\") \u0026\u0026 suggestionPart.equals(\"d2/DATE\");","lastModifiedDate":"2021-11-05"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"gordonlzy":53}},{"path":"src/main/java/safeforhall/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VimuthM":1,"-":12}},{"path":"src/main/java/safeforhall/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.LogsCenter;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.StringUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.Logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/safeforhall.png\";","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":6,"-":83}},{"path":"src/main/java/safeforhall/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VimuthM":2,"-":86}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"  \u003cVBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"    \u003cTextField fx:id\u003d\"suggestions\" promptText\u003d\"Command Suggestion\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"    \u003cTextField fx:id\u003d\"main\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"  \u003c/VBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"gordonlzy":6,"-":6}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":".tab-pane .tab-header-background {","lastModifiedDate":"2021-10-16"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":".tab {","lastModifiedDate":"2021-10-16"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    -fx-focus-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    -fx-faint-focus-color: transparent;","lastModifiedDate":"2021-10-16"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    -fx-width: 100;","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    -fx-padding: 100 10 100 10;","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2021-10-16"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":".tab-inactive {","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    -fx-padding: 100 0 100 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":".tab-button {","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    -fx-content-display: graphic-only;","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    -fx-width: 50;","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"    -fx-height: 50;","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":".tab-button:hover {","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":".tab .tab-label {","lastModifiedDate":"2021-10-16"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    -fx-alignment: CENTER;","lastModifiedDate":"2021-10-16"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    -fx-text-fill: #0066FF;","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":".tab:selected {","lastModifiedDate":"2021-10-16"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, -20%)","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-16"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":".tab:hover {","lastModifiedDate":"2021-10-16"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"    -fx-background-color: #99aab5;","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 80 0 80 20;","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"    -fx-border-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":149,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: derive(#FFFFFF, 100%);","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: #8c9aa9;","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-radius: 5 5 5 5;","lastModifiedDate":"2021-10-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Semibold\";","lastModifiedDate":"2021-08-28"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":".cell_big {","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-27"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-size: 25px;","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 10 0 20 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":".cell_normal {","lastModifiedDate":"2021-10-27"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-27"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-size: 15px;","lastModifiedDate":"2021-10-27"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-10-27"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 0 0 10 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":".cell_alert {","lastModifiedDate":"2021-10-27"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-10-27"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"    -fx-font-size: 20px;","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-fill: #ff0000;","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 0 0 10 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"     -fx-background-color: derive(#FFFFFF, 100%);","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"     -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"     -fx-border-color: derive(#D8EBFF, 10%);","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 30%);","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":209,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-27"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":218,"author":{"gitId":"VimuthM"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 30%);","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"VimuthM"},"content":"    -fx-border-color: derive(#D8EBFF, 25%);","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 30%);","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"VimuthM"},"content":"    -fx-border-color: derive(#D8EBFF, 30%);","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":240,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 30%);","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 50%);","lastModifiedDate":"2021-10-25"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-11-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Light\";","lastModifiedDate":"2021-08-28"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: #D8EBFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans Regular\";","lastModifiedDate":"2021-08-28"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"VimuthM"},"content":"  -fx-text-fill: #D8EBFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: #D8EBFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: #D8EBFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: #D8EBFF;","lastModifiedDate":"2021-10-25"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 25%);","lastModifiedDate":"2021-10-25"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":338,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-25"},{"lineNumber":340,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":343,"author":{"gitId":"VimuthM"},"content":"    -fx-background-color: derive(#D8EBFF, 50%);","lastModifiedDate":"2021-10-25"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":345,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":347,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":350,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":352,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":356,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":364,"author":{"gitId":"gordonlzy"},"content":"#personListView .list-cell {","lastModifiedDate":"2021-10-27"},{"lineNumber":365,"author":{"gitId":"gordonlzy"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":366,"author":{"gitId":"gordonlzy"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":367,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":368,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-27"},{"lineNumber":369,"author":{"gitId":"gordonlzy"},"content":"    -fx-border-color: #ffffff;","lastModifiedDate":"2021-10-27"},{"lineNumber":370,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":371,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":372,"author":{"gitId":"gordonlzy"},"content":"#personAdditionalListView .list-cell:filled:selected {","lastModifiedDate":"2021-10-28"},{"lineNumber":373,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-28"},{"lineNumber":374,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":375,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":376,"author":{"gitId":"gordonlzy"},"content":"#eventAdditionalListView .list-cell:filled:selected {","lastModifiedDate":"2021-10-28"},{"lineNumber":377,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: derive(#D8EBFF, 20%);","lastModifiedDate":"2021-10-28"},{"lineNumber":378,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":379,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":380,"author":{"gitId":"gordonlzy"},"content":"#eventListView .list-cell {","lastModifiedDate":"2021-10-27"},{"lineNumber":381,"author":{"gitId":"gordonlzy"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":382,"author":{"gitId":"gordonlzy"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":383,"author":{"gitId":"gordonlzy"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2021-10-27"},{"lineNumber":384,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: #ffffff;","lastModifiedDate":"2021-10-27"},{"lineNumber":385,"author":{"gitId":"gordonlzy"},"content":"    -fx-border-color: #ffffff;","lastModifiedDate":"2021-10-27"},{"lineNumber":386,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":387,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":388,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":390,"author":{"gitId":"gordonlzy"},"content":"    -fx-border-radius: 5;","lastModifiedDate":"2021-10-27"},{"lineNumber":391,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":393,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":396,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":398,"author":{"gitId":"gordonlzy"},"content":"#main {","lastModifiedDate":"2021-10-27"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":401,"author":{"gitId":"gordonlzy"},"content":"    -fx-border-color: #ffffff #afafaf #afafaf #afafaf;","lastModifiedDate":"2021-10-27"},{"lineNumber":402,"author":{"gitId":"VimuthM"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-10-25"},{"lineNumber":403,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":405,"author":{"gitId":"gordonlzy"},"content":"#suggestions {","lastModifiedDate":"2021-10-27"},{"lineNumber":406,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-10-27"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2021-10-27"},{"lineNumber":408,"author":{"gitId":"gordonlzy"},"content":"    -fx-text-inner-color: gray;","lastModifiedDate":"2021-10-27"},{"lineNumber":409,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-10-27"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":411,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":413,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":415,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":416,"author":{"gitId":"gordonlzy"},"content":"    -fx-background-color: transparent, #ffffff, transparent, #ffffff;","lastModifiedDate":"2021-10-27"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":418,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":420,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":423,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":425,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":426,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":432,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":433,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"gordonlzy":62,"-":302,"VimuthM":50,"jaredlhf":19}},{"path":"src/main/resources/view/EventAdditionalCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"            \u003cHBox spacing\u003d\"0\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_normal\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_normal\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_normal\" text\u003d\"\\$venue\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_normal\" text\u003d\"\\$capacity\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            \u003cLabel fx:id\u003d\"residents\" styleClass\u003d\"cell_normal\" text\u003d\"\\$residents\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":28,"chongjunwei":1,"gordonlzy":6,"VimuthM":1}},{"path":"src/main/resources/view/EventAdditionalListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cListView fx:id\u003d\"eventAdditionalListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":8}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"\u003cHBox id\u003d\"eventPane\" fx:id\u003d\"eventPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-border-color: #000000; -fx-border-width: 1 1 1 1; -fx-border-radius: 5;\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    \u003cHBox fx:id\u003d\"informationContainer\" alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"105\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"      \u003cVBox fx:id\u003d\"vaccinatedContainer\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"25\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"rebeccalaujx":1,"gordonlzy":1,"jaredlhf":37}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"  \u003cListView fx:id\u003d\"eventListView\" onMouseClicked\u003d\"#setSingleEvent\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-16"}],"authorContributionMap":{"VimuthM":1,"jaredlhf":7}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Open Sans\";","lastModifiedDate":"2021-08-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":".hyperlink {","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"    -fx-padding: 0 0 6 0;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"-":3,"VimuthM":5}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.control.Hyperlink?\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2019-08-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"      \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"          \u003cHBox alignment\u003d\"TOP_LEFT\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"              \u003cVBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"                \u003cLabel fx:id\u003d\"message\"\u003e\u003c/Label\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"                \u003cHBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"                  \u003cLabel fx:id\u003d\"moreMessage\"\u003e\u003c/Label\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"                  \u003cHyperlink fx:id\u003d\"hyperlink\" layoutX\u003d\"0.0\" layoutY\u003d\"0.0\" onAction\u003d\"#openLink\" text\u003d\"User Guide\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"                \u003c/HBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"          \u003cHBox fx:id\u003d\"helpGuideContainer\" alignment\u003d\"CENTER_RIGHT\"\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"25\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003c/children\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"rebeccalaujx":7,"-":33,"VimuthM":14}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"SafeFor(H)All\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    \u003cImage url\u003d\"@/images/safeforhall.png\" /\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Fonts.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        \u003cHBox HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        \u003c!-- Method isResidentTab of `MainWindow.java` is dependent on this ordering. --\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"            \u003cTabPane fx:id\u003d\"tabPane\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" rotateGraphic\u003d\"true\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                \u003cTab fx:id\u003d\"residentsTab\" onSelectionChanged\u003d\"#commandBoxToResidents\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"                    \u003cGridPane fx:id\u003d\"splitpane1\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"                            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                                \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                                \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"                            \u003cVBox fx:id\u003d\"personAdditionalList\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"                                \u003cpadding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"                                \u003c/padding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"                                \u003cStackPane fx:id\u003d\"personAdditionalListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"                            \u003c/VBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"                        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"                        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"                    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"                \u003c/Tab\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                \u003cTab fx:id\u003d\"eventsTab\" onSelectionChanged\u003d\"#commandBoxToEvents\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"                    \u003cGridPane prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"                            \u003cchildren\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"                                \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"                                    \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"                                    \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                                    \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"                                \u003c/VBox\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"                                \u003cVBox fx:id\u003d\"eventAdditionalList\" minWidth\u003d\"340\" prefWidth\u003d\"500\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"                                    \u003cpadding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"                                    \u003c/padding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"                                    \u003cStackPane fx:id\u003d\"eventAdditionalListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"                                \u003c/VBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"                            \u003c/children\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"                        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"                    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"                \u003c/Tab\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                \u003cTab fx:id\u003d\"helpTab\" styleClass\u003d\"tab-inactive\" \u003e\u003c/Tab\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"\u003c!--                \u003cAnchorPane HBox.hgrow\u003d\"ALWAYS\" /\u003e\u003c/AnchorPane\u003e--\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"                \u003cTab fx:id\u003d\"exitTab\" styleClass\u003d\"tab-inactive\" \u003e\u003c/Tab\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"            \u003c/TabPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2021-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"rebeccalaujx":14,"gordonlzy":2,"-":32,"VimuthM":34,"jaredlhf":21}},{"path":"src/main/resources/view/PersonAdditionalCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"        \u003cVBox fx:id\u003d\"labelBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"            \u003cHBox fx:id\u003d\"deadlineContainer\" alignment\u003d\"CENTER_LEFT\"/\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"            \u003cHBox spacing\u003d\"0\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"            \u003cVBox fx:id\u003d\"labelBoxInterior\" styleClass\u003d\"cell_normal\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"room\" styleClass\u003d\"cell_normal\" text\u003d\"\\$room\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_normal\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_normal\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_normal\" text\u003d\"\\$faculty\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"vaccStatus\" styleClass\u003d\"cell_normal\" text\u003d\"\\$vaccStatus\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"                \u003cLabel fx:id\u003d\"events\" styleClass\u003d\"cell_normal\" text\u003d\"\\$events\" /\u003e","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"lastFetDate\" styleClass\u003d\"cell_normal\" text\u003d\"\\$lastFetDate\" /\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                \u003cLabel fx:id\u003d\"lastCollectionDate\" styleClass\u003d\"cell_normal\" text\u003d\"\\$lastCollectionDate\" /\u003e","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":30,"gordonlzy":11,"chongjunwei":1,"VimuthM":1}},{"path":"src/main/resources/view/PersonAdditionalListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cListView fx:id\u003d\"personAdditionalListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"rebeccalaujx":8}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-border-color: #000000; -fx-border-width: 1 1 1 1; -fx-border-radius: 5;\"\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cVBox fx:id\u003d\"labelBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        \u003cVBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"          \u003cLabel fx:id\u003d\"room\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"      \u003cVBox fx:id\u003d\"labelBoxInterior\" styleClass\u003d\"cell_small_label\"\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-10-14"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"    \u003cHBox fx:id\u003d\"informationContainer\" alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"70\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"      \u003cVBox fx:id\u003d\"statusContainer\" alignment\u003d\"CENTER_RIGHT\"\u003e","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"25\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rebeccalaujx":3,"gordonlzy":9,"-":30,"VimuthM":1}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"  \u003cListView fx:id\u003d\"personListView\" onMouseClicked\u003d\"#setSinglePerson\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":7,"VimuthM":1}},{"path":"src/test/java/safeforhall/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    public void checkEquals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        assertEquals(expected, expected);","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        assertNotEquals(expected, 1);","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"            parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"            expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            expected.hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"VimuthM":20,"-":57}},{"path":"src/test/java/safeforhall/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"VimuthM":1,"-":26}},{"path":"src/test/java/safeforhall/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":133}},{"path":"src/test/java/safeforhall/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.core.index;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"VimuthM":2,"-":58}},{"path":"src/test/java/safeforhall/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"        assertNotNull(AppUtil.getImage(\"/images/safeforhall.png\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"VimuthM":3,"-":33}},{"path":"src/test/java/safeforhall/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"VimuthM":3,"-":105}},{"path":"src/test/java/safeforhall/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Config;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":4,"-":112}},{"path":"src/test/java/safeforhall/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":2,"-":21}},{"path":"src/test/java/safeforhall/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.SerializableTestClass;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TestUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":3,"-":42}},{"path":"src/test/java/safeforhall/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.commons.util;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"VimuthM":2,"-":141}},{"path":"src/test/java/safeforhall/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.storage.StorageManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"safeforhall.json\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-10-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public void execute_validFetCommand_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        String deadlineCommand \u003d \"deadline k/f d1/10-10-2021 d2/13-10-2021\";","lastModifiedDate":"2021-11-05"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(deadlineCommand, DeadlineCommand.MESSAGE_SUCCESS_FET, model, true);","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    public void execute_validArtCommand_success() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        String deadlineCommand \u003d \"deadline k/c d1/10-10-2021 d2/14-10-2021\";","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(deadlineCommand, DeadlineCommand.MESSAGE_SUCCESS_ART, model, true);","lastModifiedDate":"2021-10-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validSingleViewPersonCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        String viewCommand \u003d ViewPersonCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-20"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        logic.getSinglePerson();","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(viewCommand, ViewPersonCommand.MESSAGE_ALL_RESIDENTS_SHOWN, model, true);","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validSingleViewEventCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        String viewCommand \u003d ViewEventCommand.COMMAND_WORD;","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        logic.getSingleEvent();","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(viewCommand, ViewEventCommand.MESSAGE_ALL_EVENTS_SHOWN, model, false);","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"    public void execute_validFindCommand_success() throws Exception {","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        String findCommand \u003d \"find n/alice v/t\";","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(findCommand,","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),","lastModifiedDate":"2021-10-16"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                model, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + ROOM_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"                + EMAIL_DESC_AMY + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + FET_DESC_AMY + COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEventList().remove(0));","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"            Model expectedModel, Boolean isResidentTab) throws CommandException, ParseException {","lastModifiedDate":"2021-10-16"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        CommandResult result \u003d logic.execute(inputCommand, isResidentTab);","lastModifiedDate":"2021-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandFailure(String, Class, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel, true);","lastModifiedDate":"2021-10-16"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"     * @see #assertCommandSuccess(String, String, Model, Boolean)","lastModifiedDate":"2021-10-16"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"                                      String expectedMessage, Model expectedModel, Boolean isResidentTab) {","lastModifiedDate":"2021-10-16"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, isResidentTab));","lastModifiedDate":"2021-10-16"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"rebeccalaujx":14,"gordonlzy":10,"VimuthM":46,"-":126,"jaredlhf":4}},{"path":"src/test/java/safeforhall/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"VimuthM":9,"-":23}},{"path":"src/test/java/safeforhall/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"chongjunwei":5,"VimuthM":1,"-":48}},{"path":"src/test/java/safeforhall/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE1;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_DATE2;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_KEYWORD;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_TIME;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventNameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-04"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_ROOM_AMY \u003d \"A100\";","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_ROOM_BOB \u003d \"E420\";","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FACULTY_AMY \u003d \"SoC\";","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FACULTY_BOB \u003d \"FASS\";","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_VACCSTATUS_AMY \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_VACCSTATUS_BOB \u003d \"F\";","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_FETDATE_AMY \u003d \"20-10-2021\";","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_FETDATE_BOB \u003d \"02-09-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_COLLECTIONDATE_AMY \u003d \"22-10-2021\";","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    public static final String VALID_COLLECTIONDATE_BOB \u003d \"12-09-2021\";","lastModifiedDate":"2021-10-13"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_LAST_DATE1_OCT \u003d \"10-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_LAST_DATE2_OCT \u003d \"15-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_F \u003d \"f\";","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_C \u003d \"c\";","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_LF \u003d \"lf\";","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_KEYWORD_LC \u003d \"lc\";","lastModifiedDate":"2021-11-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_NAME_FOOTBALL_TRAINING \u003d \"Football Training\";","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_NAME_SWIM_TRAINING \u003d \"Swim Training\";","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_NAME_VOLLEYBALL \u003d \"Volleyball\";","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_DATE_VOLLEYBALL \u003d \"12-10-2021\";","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_DATE_FOOTBALL_TRAINING \u003d \"20-10-2021\";","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_DATE_SWIM_TRAINING \u003d \"19-10-2021\";","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"    public static final String VALID_VENUE_BASKETBALL \u003d \"basketball court\";","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_VENUE_FOOTBALL_TRAINING \u003d \"Field\";","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_VENUE_SWIM_TRAINING \u003d \"Pool\";","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"    public static final String VALID_CAPACITY_BASKETBALL \u003d \"1\";","lastModifiedDate":"2021-11-05"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_CAPACITY_FOOTBALL_TRAINING \u003d \"20\";","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VALID_CAPACITY_SWIM_TRAINING \u003d \"15\";","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    public static final String VALID_TIME_BASKETBALL \u003d \"0830\";","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    public static final String VALID_TIME_FOOTBALL_TRAINING \u003d \"1930\";","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    public static final String VALID_TIME_SWIM_TRAINING \u003d \"0800\";","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"    public static final String VACCSTATUS_DESC_AMY \u003d \" \" + PREFIX_VACCSTATUS + VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"    public static final String VACCSTATUS_DESC_BOB \u003d \" \" + PREFIX_VACCSTATUS + VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC_AMY \u003d \" \" + PREFIX_FETDATE + VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"    public static final String FET_DESC_BOB \u003d \" \" + PREFIX_FETDATE + VALID_FETDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC_AMY \u003d \" \" + PREFIX_COLLECTIONDATE + VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"    public static final String COLLECTION_DESC_BOB \u003d \" \" + PREFIX_COLLECTIONDATE + VALID_COLLECTIONDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    public static final String LAST_DATE1_DESC_OCT \u003d \" \" + PREFIX_DATE1 + VALID_LAST_DATE1_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    public static final String LAST_DATE2_DESC_OCT \u003d \" \" + PREFIX_DATE2 + VALID_LAST_DATE2_OCT;","lastModifiedDate":"2021-10-10"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_F \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_F;","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_C \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_C;","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_LF \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_LF;","lastModifiedDate":"2021-11-05"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_DESC_LC \u003d \" \" + PREFIX_KEYWORD + VALID_KEYWORD_LC;","lastModifiedDate":"2021-11-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String NAME_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_NAME + VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String NAME_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_NAME + VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String DATE_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_DATE + VALID_DATE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String DATE_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_DATE + VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VENUE_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_VENUE + VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String VENUE_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_VENUE + VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String CAPACITY_DESC_FOOTBALL_TRAINING \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"            \" \" + PREFIX_CAPACITY + VALID_CAPACITY_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String CAPACITY_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_CAPACITY + VALID_CAPACITY_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"    public static final String TIME_DESC_FOOTBALL_TRAINING \u003d \" \" + PREFIX_TIME + VALID_TIME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"    public static final String TIME_DESC_SWIM_TRAINING \u003d \" \" + PREFIX_TIME + VALID_TIME_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM; // empty string not allowed for room","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY; // empty string not allowed for faculty","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_VACCSTATUS_DESC \u003d \" \" + PREFIX_VACCSTATUS + \"fake\"; // only T or F allowed","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_FETDATE_DESC \u003d \" \" + PREFIX_FETDATE + \"41-20-20\"; // not valid date","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"    public static final String INVALID_COLLECTIONDATE_DESC \u003d \" \" + PREFIX_FETDATE + \"41/20/20\"; // not valid date","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"            \" \" + PREFIX_NAME + \"Football \u0026 Basketball\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"41/20/20\"; // not valid date","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"    public static final String INVALID_EVENT_DATE_DESC2 \u003d \" \" + PREFIX_DATE + \"3\"; // not valid date","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"$bank\"; // \u0027$\u0027 not allowed in venues","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"    public static final String INVALID_CAPACITY_DESC \u003d \" \" + PREFIX_CAPACITY + \"ten\"; // accepts numbers only","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"18:00\"; // accepts numbers only","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2021-10-17"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-07"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        DESC_FOOTBALL_TRAINING \u003d new EditEventDescriptorBuilder().withName(VALID_VENUE_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).withVenue(VALID_VENUE_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_FOOTBALL_TRAINING).withTime(VALID_TIME_FOOTBALL_TRAINING)","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"        DESC_SWIM_TRAINING \u003d new EditEventDescriptorBuilder().withName(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_SWIM_TRAINING).withTime(VALID_TIME_SWIM_TRAINING)","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"        if (actualModel instanceof Person) {","lastModifiedDate":"2021-10-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":202,"author":{"gitId":"rebeccalaujx"},"content":"        } else {","lastModifiedDate":"2021-10-19"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"            AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"            List\u003cEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEventList());","lastModifiedDate":"2021-10-19"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"            assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2021-10-19"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2021-10-19"},{"lineNumber":208,"author":{"gitId":"rebeccalaujx"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredEventList());","lastModifiedDate":"2021-10-19"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-19"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":226,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":227,"author":{"gitId":"rebeccalaujx"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the","lastModifiedDate":"2021-10-19"},{"lineNumber":228,"author":{"gitId":"rebeccalaujx"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-10-19"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"    public static void showEventAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-10-19"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":233,"author":{"gitId":"rebeccalaujx"},"content":"        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":234,"author":{"gitId":"rebeccalaujx"},"content":"        final String[] splitName \u003d event.getEventName().eventName.split(\"\\\\s+\");","lastModifiedDate":"2021-10-19"},{"lineNumber":235,"author":{"gitId":"chongjunwei"},"content":"        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":237,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(1, model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":238,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rebeccalaujx":65,"gordonlzy":20,"chongjunwei":3,"VimuthM":24,"-":99,"jaredlhf":28}},{"path":"src/test/java/safeforhall/logic/commands/DeadlineCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-11"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameMissedDeadlinePredicate;","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.NameNearLastDatePredicate;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand firstDeadlineCommand \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand secondDeadlineCommand \u003d new DeadlineCommand(\"c\", new LastDate(\"12-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstDeadlineCommand.equals(firstDeadlineCommand));","lastModifiedDate":"2021-10-23"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand findFirstCommandCopy \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstDeadlineCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstDeadlineCommand.equals(1));","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstDeadlineCommand.equals(null));","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstDeadlineCommand.equals(secondDeadlineCommand));","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateFetNotFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-23"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"17-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"f\", new LastDate(\"17-09-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Collections.EMPTY_LIST, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateArtNotFound() {","lastModifiedDate":"2021-10-11"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-09-2021\"),","lastModifiedDate":"2021-10-11"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-09-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"c\", new LastDate(\"10-09-2021\"), new LastDate(\"15-09-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Collections.EMPTY_LIST, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateFet() {","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLastDateCollection() {","lastModifiedDate":"2021-10-10"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateFet() {","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_FET;","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ELLE);","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    public void execute_twoLastDateCollection() {","lastModifiedDate":"2021-10-10"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_ART;","lastModifiedDate":"2021-10-23"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-10"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(CARL);","lastModifiedDate":"2021-10-11"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(FIONA);","lastModifiedDate":"2021-10-11"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLateFet() {","lastModifiedDate":"2021-10-11"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_MISSED_FET;","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"lf\", new LastDate(\"17-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ALICE);","lastModifiedDate":"2021-10-11"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(ELLE);","lastModifiedDate":"2021-10-11"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"    public void execute_oneLateCollection() {","lastModifiedDate":"2021-10-11"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        String expectedMessage \u003d DeadlineCommand.MESSAGE_SUCCESS_MISSED_ART;","lastModifiedDate":"2021-10-23"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d new DeadlineCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-11"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-11"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        List\u003cPerson\u003e validPeople \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-11"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"        validPeople.add(GEORGE);","lastModifiedDate":"2021-10-11"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(validPeople, expectedModel.getFilteredPersonList());","lastModifiedDate":"2021-10-11"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"gordonlzy":137,"VimuthM":6,"-":13}},{"path":"src/test/java/safeforhall/logic/commands/ExcludeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"public class ExcludeCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public void checkAllExistsFalse() {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        toRemove.add(ALICE);","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        toRemove.add(BENSON);","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e current \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        current.add(BENSON);","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1), new ResidentList(\"Benson\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.checkAllExists(toRemove, current));","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    public void removeOneRoomTest() throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d model.toPersonList(new ResidentList(TypicalPersons.DANIEL","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                .getRoom().toString(), TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(ExcludeCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"                toRemove.stream().map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.VOLLEYBALL.getEventName()));","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.DANIEL.getRoom().toString()));","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    public void removeMultipleRoomsTest() throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        String constructor1 \u003d TypicalPersons.CARL.getRoom().toString() + \", \" + BENSON","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"                .getRoom().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        String constructor2 \u003d TypicalPersons.CARL.toString() + \", \" + BENSON.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d model.toPersonList(new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(ExcludeCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"                toRemove.stream().map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BAND.getEventName()));","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BAND);","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1), new ResidentList(constructor1,","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                constructor2));","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    public void removeOneNameTest() throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d model.toPersonList(new ResidentList(TypicalPersons.DANIEL","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"                .getName().toString(), TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(ExcludeCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                toRemove.stream().map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.VOLLEYBALL.getEventName()));","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.DANIEL.getName().toString()));","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"    public void removeMultipleNamesTest() throws CommandException {","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        String constructor1 \u003d TypicalPersons.CARL.getName().toString() + \", \" + BENSON","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"                .getName().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"        String constructor2 \u003d TypicalPersons.CARL.toString() + \", \" + BENSON.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d model.toPersonList(new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(ExcludeCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"                toRemove.stream().map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BAND.getEventName()));","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BAND);","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1), new ResidentList(constructor1,","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"                constructor2));","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    public void removeNonExistentRoomTest() {","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"A103\", \"David Li; Room: C112; Phone: 91031282; \"","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"                        + \"Email: lidavid@example.com; Vaccinated: T; Faculty: SDE; Last Fet Date: 02-10-2021; \"","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"                        + \"Last Collection Date: 01-10-2021\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"    public void removeNonExistentNameTest() {","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Daniel Meier\", \"David Li; Room: C112; Phone: 91031282; \"","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"                        + \"Email: lidavid@example.com; Vaccinated: T; Faculty: SDE; Last Fet Date: 02-10-2021; \"","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"                        + \"Last Collection Date: 01-10-2021\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand firstCommand \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand secondCommand \u003d new ExcludeCommand(Index.fromOneBased(2),","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Bernice\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommand));","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand firstCommandCopy \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(1));","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"        // different command -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(secondCommand));","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"gordonlzy":143}},{"path":"src/test/java/safeforhall/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"        CommandResult expectedCommandResult \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"                new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        boolean result \u003d expectedCommandResult.isExit();","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(result, true);","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"rebeccalaujx":3,"chongjunwei":2,"VimuthM":4,"-":14}},{"path":"src/test/java/safeforhall/logic/commands/ExportCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"/**","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":" * Contains integration tests (interaction with the Model) for {@code ExportCommand}.","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":" */","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"public class ExportCommandTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"    private static final String TEST_DATA_FOLDER \u003d \"src/test/data/ExportTest/\";","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    private AddressBook emptyAddressBook \u003d new AddressBookBuilder().build();","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    private Model emptyModel \u003d new ModelManager(emptyAddressBook, new UserPrefs());","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    public void equals() {","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand export1 \u003d new ExportCommand(TEST_DATA_FOLDER, \"exportFile1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand export2 \u003d new ExportCommand(TEST_DATA_FOLDER, \"exportFile2\");","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(export1.equals(export1));","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand export1Copy \u003d new ExportCommand(TEST_DATA_FOLDER, \"exportFile1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(export1.equals(export1Copy));","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(export1.equals(1));","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(export1.equals(null));","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        // different object -\u003e returns false","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(export1.equals(export2));","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    public void getEmailArr_emptyFilteredList_returnsEmptyArray() {","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(TEST_DATA_FOLDER, \"\");","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString[]\u003e emailArr \u003d exportCommand.getEmailArr(emptyModel.getFilteredPersonList());","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        ArrayList\u003cString[]\u003e expectedEmailArr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(emailArr, expectedEmailArr);","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    public void writeCsv_duplicateFile_throwsException() {","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"            ExportCommand exportCommand1 \u003d new ExportCommand(TEST_DATA_FOLDER, \"emptyArrTest\");","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"            ExportCommand exportCommand2 \u003d new ExportCommand(TEST_DATA_FOLDER, \"emptyArrTest\");","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"            ArrayList\u003cString[]\u003e emptyEmailArr \u003d exportCommand1.getEmailArr(emptyModel.getFilteredPersonList());","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"            ArrayList\u003cString[]\u003e emptyEmailArr2 \u003d exportCommand2.getEmailArr(emptyModel.getFilteredPersonList());","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"            exportCommand1.writeCsv(emptyEmailArr);","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"            exportCommand2.writeCsv(emptyEmailArr2);","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"            assertEquals(1, 2);","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"jaredlhf":73}},{"path":"src/test/java/safeforhall/logic/commands/FindCompositePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"public class FindCompositePredicateTest {","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate firstPredicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate secondPredicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate firstPredicateCopy \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        firstPredicateCopy.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        // different predicate -\u003e returns false","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"chongjunwei":4,"VimuthM":42}},{"path":"src/test/java/safeforhall/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE,","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"                true, false, false);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        boolean result \u003d expectedCommandResult.isShowHelp();","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(result, true);","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"rebeccalaujx":5,"VimuthM":4,"-":14}},{"path":"src/test/java/safeforhall/logic/commands/ImportCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":" * Contains integration tests (interaction with the Model) for {@code ImportCommand}.","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"public class ImportCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ImportTest\");","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalImportedAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        ImportCommand imp \u003d new ImportCommand(\"safeforhall\");","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        ImportCommand imp2 \u003d new ImportCommand(\"residents\");","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        assertTrue(imp.equals(imp));","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"        ImportCommand impCopy \u003d new ImportCommand(\"safeforhall\");","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        assertTrue(imp.equals(impCopy));","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        assertFalse(imp.equals(1));","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        assertFalse(imp.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"        assertFalse(imp.equals(imp2));","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"    private Path getTestDataFilePath(String csvFileInTestDataFolder) {","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        return csvFileInTestDataFolder !\u003d null","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                ? TEST_DATA_FOLDER.resolve(csvFileInTestDataFolder)","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"                : null;","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsv_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"safeforhall.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY,","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE),","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvEmptyLines_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"emptylines.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY,","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE),","lastModifiedDate":"2021-10-25"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-25"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvMissingFet_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBookWithSpecifiedPersons(","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"                Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY_WO_FET,","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE)),","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"                new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"missingfet.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY_WO_FET,","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE),","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvMissingCollection_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBookWithSpecifiedPersons(","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"                Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY,","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"                        TypicalPersons.DARREN, TypicalPersons.ELLIE_WO_COLLECTION)),","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"                new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"missingcollection.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY,","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE_WO_COLLECTION),","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-25"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvWithEvents_success() {","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        AddressBook addressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        Event event \u003d new Event(new EventName(\"Gymming\"), new EventDate(\"09-09-2021\"),","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"                new EventTime(\"0830\"), new Venue(\"Gym\"), new Capacity(\"10\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.AMY.getName().toString(), TypicalPersons.AMY.toString()));","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        events.add(event);","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        addressBook.setEvents(events);","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        model \u003d new ModelManager(addressBook, new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        AddressBook expectedAddressBook \u003d TypicalPersons.getTypicalImportedAddressBook();","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        Event expectedEvent \u003d new Event(new EventName(\"Gymming\"), new EventDate(\"09-09-2021\"),","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"                new EventTime(\"0830\"), new Venue(\"Gym\"), new Capacity(\"10\"),","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"                new ResidentList(ResidentList.DEFAULT_LIST));","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cEvent\u003e expectedEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"        expectedEvents.add(expectedEvent);","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"        expectedAddressBook.setEvents(expectedEvents);","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"        expectedModel \u003d new ModelManager(expectedAddressBook, new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d ImportCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"safeforhall.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.AARON, TypicalPersons.BRAD, TypicalPersons.CODY,","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DARREN, TypicalPersons.ELLIE),","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvUnspecified_fail() {","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"nonexistent.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, ImportCommand.MESSAGE_FILE_NOT_FOUND, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvIncorrectDate_fail() {","lastModifiedDate":"2021-10-25"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"incorrectdate.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, String.format(ImportCommand.MESSAGE_ERROR_READING, 3)","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"                + LastDate.MESSAGE_CONSTRAINTS, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvIncorrectVacc_fail() {","lastModifiedDate":"2021-10-25"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"incorrectvacc.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, String.format(ImportCommand.MESSAGE_ERROR_READING, 4)","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"                + VaccStatus.MESSAGE_CONSTRAINTS, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"    public void execute_readCsvMissingFields_fail() {","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d new ImportCommand(getTestDataFilePath(\"missingfields.csv\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, String.format(ImportCommand.MESSAGE_ERROR_READING, 2)","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"                + ImportCommand.MESSAGE_INCORRECT_FIELDS, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"chongjunwei":4,"gordonlzy":1,"VimuthM":167}},{"path":"src/test/java/safeforhall/logic/commands/IncludeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public void checkDuplicatesTrue() {","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e current \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        current.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(BENSON.getName().toString(), BENSON.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.checkForDuplicates(toAdd, current));","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    public void addOneRoomTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(TypicalPersons.FIONA.getRoom().toString(),","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"                TypicalPersons.FIONA.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"                .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.FIONA.getRoom().toString(), TypicalPersons.FIONA.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"    public void addMultipleRoomsTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        String constructor1 \u003d TypicalPersons.ELLE.getRoom().toString() + \", \"","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.FIONA.getRoom().toString();","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        String constructor2 \u003d TypicalPersons.ELLE.toString() + \", \" + TypicalPersons.FIONA.toString();","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"                TypicalEvents.VOLLEYBALL.getEventName()));","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public void addOneNameTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(TypicalPersons.DANIEL.getName().toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"                TypicalEvents.BASKETBALL.getEventName()));","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.DANIEL.getName().toString(), TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"    public void addMultipleNamesTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        String constructor1 \u003d TypicalPersons.FIONA.getName().toString() + \", \"","lastModifiedDate":"2021-11-05"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.ELLE.getName().toString();","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        String constructor2 \u003d TypicalPersons.FIONA.toString() + \", \" + TypicalPersons.ELLE.toString();","lastModifiedDate":"2021-11-05"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d model.toPersonList(new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        CommandResult expectedMessage \u003d new CommandResult(String.format(IncludeCommand.MESSAGE_SUCCESS, toAdd.stream()","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"                        .map(p -\u003e p.getName().toString()).reduce((x, y) -\u003e x + \", \" + y).get(),","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                TypicalEvents.VOLLEYBALL.getEventName()));","lastModifiedDate":"2021-11-05"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-11-05"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(constructor1, constructor2));","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        CommandResult result \u003d command.execute(model);","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, expectedMessage);","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"    public void addExistingRoomTest() {","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-20"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.DANIEL.getRoom().toString(), TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"    public void addExistingNameTest() {","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-10-20"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(TypicalPersons.DANIEL.getName().toString(), TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"    public void addInvalidNameTest() {","lastModifiedDate":"2021-11-05"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-11-05"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-11-05"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"                new ResidentList(ResidentList.DEFAULT_LIST, TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-11-05"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"    public void invalidIndex_fails() {","lastModifiedDate":"2021-11-05"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        model.addEvent(TypicalEvents.VOLLEYBALL);","lastModifiedDate":"2021-11-05"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(10),","lastModifiedDate":"2021-11-05"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"                new ResidentList(ResidentList.DEFAULT_LIST, TypicalPersons.DANIEL.toString()));","lastModifiedDate":"2021-11-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"    public void exceedCapacity_fails() {","lastModifiedDate":"2021-11-05"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        model.addEvent(TypicalEvents.BASKETBALL);","lastModifiedDate":"2021-11-05"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"        IncludeCommand command \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-11-05"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"                new ResidentList(TypicalPersons.DANIEL.getName().toString() + \", \"","lastModifiedDate":"2021-11-05"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"                        + TypicalPersons.ELLE.getName().toString(), TypicalPersons.DANIEL.toString() + \", \"","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"                        + TypicalPersons.ELLE.toString()));","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-11-05"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-18"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand firstCommand \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":144,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand secondCommand \u003d new IncludeCommand(Index.fromOneBased(2), new ResidentList(\"Bernice\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":145,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":146,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":147,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommand));","lastModifiedDate":"2021-10-18"},{"lineNumber":148,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand firstCommandCopy \u003d new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"Alex\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(1));","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"        // different command -\u003e returns false","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(firstCommand.equals(secondCommand));","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":130,"VimuthM":32}},{"path":"src/test/java/safeforhall/logic/commands/SwitchCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"public class SwitchCommandTest {","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_help_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SwitchCommand.SWITCH_SUCCESS_MESSAGE,","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"                false, false, true);","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        boolean result \u003d expectedCommandResult.isSwitchTab();","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(result, true);","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new SwitchCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"rebeccalaujx":23}},{"path":"src/test/java/safeforhall/logic/commands/TraceCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalAddressBook;","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"public class TraceCommandTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command1 \u003d new TraceCommand(\"safeforhall\");","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command2 \u003d new TraceCommand(\"residents\");","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        TraceCommand commandWithDepth \u003d new TraceCommand(\"residents\", 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        TraceCommand commandWithDepthWithDuration \u003d new TraceCommand(\"residents\", 1, 7);","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertTrue(command1.equals(command1));","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command3 \u003d new TraceCommand(\"safeforhall\");","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        assertTrue(command1.equals(command3));","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        assertTrue(commandWithDepth.equals(commandWithDepthWithDuration));","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        assertFalse(command1.equals(1));","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        assertFalse(command1.equals(null));","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        assertFalse(command1.equals(command2));","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    public void execute_command_success() throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(TraceCommand.MESSAGE_FOUND_CONTACTS, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command \u003d new TraceCommand(TypicalPersons.GEORGE.getRoom().toString(), 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(e -\u003e false);","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"    public void execute_invalidPersonInfo_fail() {","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command \u003d new TraceCommand(\"E123\");","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(command, model, \"No resident with this information \u0027E123\u0027 could be found\");","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e command.execute(model));","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    public void execute_depthCheck_success() throws CommandException {","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(TraceCommand.MESSAGE_FOUND_CONTACTS, 4);","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command \u003d new TraceCommand(TypicalPersons.GEORGE.getRoom().toString(), 2, 1000);","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(p -\u003e p.equals(TypicalPersons.BENSON)","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"                || p.equals(TypicalPersons.CARL)","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"                || p.equals(TypicalPersons.ELLE)","lastModifiedDate":"2021-10-28"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                || p.equals(TypicalPersons.FIONA));","lastModifiedDate":"2021-10-28"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-28"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.BENSON, TypicalPersons.CARL,","lastModifiedDate":"2021-10-28"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.ELLE, TypicalPersons.FIONA), model.getFilteredPersonList());","lastModifiedDate":"2021-10-28"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VimuthM":79}},{"path":"src/test/java/safeforhall/logic/commands/add/AddEventCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":" * Contains integration tests (interaction with the Model) for {@code AddEventCommand}.","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"public class AddEventCommandIntegrationTest {","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"    private Model model;","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    public void setUp() {","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"        model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_newEvent_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.addEvent(validEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new AddEventCommand(validEvent), model,","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEvent_throwsCommandException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventInList \u003d model.getAddressBook().getEventList().get(0);","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(new AddEventCommand(eventInList), model, AddEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"rebeccalaujx":45}},{"path":"src/test/java/safeforhall/logic/commands/add/AddEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEvent_throwsCommandException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        assertThrows(CommandException.class, AddEventCommand.MESSAGE_DUPLICATE_EVENT, ()","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            -\u003e addEventCommand.execute(modelStub));","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidResident_throwsCommandException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        Event invalidEvent \u003d new EventBuilder().withEventName(\"invalid\")","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"                .withEventDate(\"02-10-2021\")","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"                .withEventTime(\"1240\")","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(\"gym\")","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(\"3\")","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"                .withResidentList(TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"                                + \", \" + TypicalPersons.BOB.getName().toString(),","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"                        TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"                                + \", \" + TypicalPersons.BOB.toString())","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(invalidEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(addEventCommand, model, String.format(AddEventCommand.MESSAGE_INVALID_RESIDENT,","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"                TypicalPersons.ALICE.getName().toString()));","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_exceedCapacityEvent_throwsCommandException() throws Exception {","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        Person alice \u003d new PersonBuilder().withName(TypicalPersons.ALICE.getName().toString()).build();","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"        Person bob \u003d new PersonBuilder().withName(TypicalPersons.BOB.getName().toString()).withRoom(\"E401\").build();","lastModifiedDate":"2021-11-04"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        addAliceCommand.execute(model);","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        addBobCommand.execute(model);","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"        Event invalidEvent \u003d new EventBuilder().withEventName(\"invalid\")","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"                .withEventDate(\"02-10-2021\")","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"                .withEventTime(\"1240\")","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(\"gym\")","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(\"1\")","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"                .withResidentList(TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"                                + \", \" + TypicalPersons.BOB.getName().toString(),","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"                        TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"                                + \", \" + TypicalPersons.BOB.toString())","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(invalidEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(addEventCommand, model, AddEventCommand.MESSAGE_EXCEED_CAPACITY);","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_personListToString() {","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        personList.add(TypicalPersons.ALICE);","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        personList.add(TypicalPersons.ELLE);","lastModifiedDate":"2021-11-02"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        String result \u003d addEventCommand.personListToString(personList);","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedResult \u003d TypicalPersons.ALICE.getName() + \", \" + TypicalPersons.ELLE.getName();","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(result, expectedResult);","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        Event swimTraining \u003d new EventBuilder().withEventName(\"Swim Training\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        Event basketballTraining \u003d new EventBuilder().withEventName(\"Basketball Training\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addSwimTrainingCommand \u003d new AddEventCommand(swimTraining);","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addBasketballTrainingCommand \u003d new AddEventCommand(basketballTraining);","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(addSwimTrainingCommand.equals(addSwimTrainingCommand));","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        AddEventCommand addSwimTrainingCommandCopy \u003d new AddEventCommand(swimTraining);","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(addSwimTrainingCommand.equals(addSwimTrainingCommandCopy));","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(addSwimTrainingCommand.equals(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(addSwimTrainingCommand.equals(null));","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(addSwimTrainingCommand.equals(addBasketballTrainingCommand));","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-11-02"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-11-02"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-11-02"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-11-02"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-11-02"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-11-02"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-11-02"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-11-02"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"        public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-11-02"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-11-02"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-11-02"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-11-02"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-08"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-08"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasExactPerson(Person person) {","lastModifiedDate":"2021-11-08"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":202,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"        public ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-11-02"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":208,"author":{"gitId":"rebeccalaujx"},"content":"        public ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-11-02"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":213,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"        public String getInvalidResident(Event event) throws CommandException {","lastModifiedDate":"2021-11-02"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":220,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":222,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":223,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":224,"author":{"gitId":"rebeccalaujx"},"content":"        public Event getEvent(EventName eventName) throws CommandException {","lastModifiedDate":"2021-11-02"},{"lineNumber":225,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":226,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":227,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":228,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":229,"author":{"gitId":"rebeccalaujx"},"content":"        public void deleteEvent(Event target) {","lastModifiedDate":"2021-11-02"},{"lineNumber":230,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":231,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":233,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":234,"author":{"gitId":"rebeccalaujx"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-11-02"},{"lineNumber":235,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":236,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":237,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":238,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":239,"author":{"gitId":"rebeccalaujx"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-11-02"},{"lineNumber":240,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":241,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":242,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":243,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":244,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-11-02"},{"lineNumber":245,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":246,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":247,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":248,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":249,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-11-02"},{"lineNumber":250,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":251,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":252,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":253,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":254,"author":{"gitId":"rebeccalaujx"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-11-02"},{"lineNumber":255,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":259,"author":{"gitId":"rebeccalaujx"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-11-02"},{"lineNumber":260,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":261,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":262,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":263,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":264,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cPerson\u003e getSortedPersonList() {","lastModifiedDate":"2021-11-02"},{"lineNumber":265,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":266,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":267,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":268,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":269,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cEvent\u003e getSortedEventList() {","lastModifiedDate":"2021-11-02"},{"lineNumber":270,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":271,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":272,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":273,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":274,"author":{"gitId":"rebeccalaujx"},"content":"        public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-11-02"},{"lineNumber":275,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":276,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":277,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":278,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":279,"author":{"gitId":"rebeccalaujx"},"content":"        public void updateSortedEventList(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-11-02"},{"lineNumber":280,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":281,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":282,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":283,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":284,"author":{"gitId":"rebeccalaujx"},"content":"        public ArrayList\u003cEvent\u003e getPersonEvents(Person person, Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-11-02"},{"lineNumber":285,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":286,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":287,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":288,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":289,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cPerson\u003e getSinglePerson() {","lastModifiedDate":"2021-11-02"},{"lineNumber":290,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":291,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":292,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":293,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":294,"author":{"gitId":"rebeccalaujx"},"content":"        public void setSinglePerson(Person person) {","lastModifiedDate":"2021-11-02"},{"lineNumber":295,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":296,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":297,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":298,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":299,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cEvent\u003e getSingleEvent() {","lastModifiedDate":"2021-11-02"},{"lineNumber":300,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":301,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":302,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":303,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":304,"author":{"gitId":"rebeccalaujx"},"content":"        public void setSingleEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":305,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":306,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":307,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":308,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":309,"author":{"gitId":"rebeccalaujx"},"content":"        public void setNoPerson() {","lastModifiedDate":"2021-11-02"},{"lineNumber":310,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":311,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":312,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":313,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":314,"author":{"gitId":"rebeccalaujx"},"content":"        public void setNoEvent() {","lastModifiedDate":"2021-11-02"},{"lineNumber":315,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-02"},{"lineNumber":316,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":317,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":318,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":319,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":320,"author":{"gitId":"rebeccalaujx"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2021-11-02"},{"lineNumber":321,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":322,"author":{"gitId":"rebeccalaujx"},"content":"    private class ModelStubWithEvent extends ModelStub {","lastModifiedDate":"2021-11-02"},{"lineNumber":323,"author":{"gitId":"rebeccalaujx"},"content":"        private final Event event;","lastModifiedDate":"2021-11-02"},{"lineNumber":324,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":325,"author":{"gitId":"rebeccalaujx"},"content":"        ModelStubWithEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":326,"author":{"gitId":"rebeccalaujx"},"content":"            requireNonNull(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":327,"author":{"gitId":"rebeccalaujx"},"content":"            this.event \u003d event;","lastModifiedDate":"2021-11-02"},{"lineNumber":328,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":329,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":330,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":331,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":332,"author":{"gitId":"rebeccalaujx"},"content":"            requireNonNull(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":333,"author":{"gitId":"rebeccalaujx"},"content":"            return this.event.isSameEvent(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":334,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":335,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":336,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":337,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":338,"author":{"gitId":"rebeccalaujx"},"content":"     * A Model stub that always accept the event being added.","lastModifiedDate":"2021-11-02"},{"lineNumber":339,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":340,"author":{"gitId":"rebeccalaujx"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {","lastModifiedDate":"2021-11-02"},{"lineNumber":341,"author":{"gitId":"rebeccalaujx"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":342,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":343,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":344,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":345,"author":{"gitId":"rebeccalaujx"},"content":"            requireNonNull(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":346,"author":{"gitId":"rebeccalaujx"},"content":"            return eventsAdded.stream().anyMatch(event::isSameEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":347,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":348,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":349,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":350,"author":{"gitId":"rebeccalaujx"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2021-11-02"},{"lineNumber":351,"author":{"gitId":"rebeccalaujx"},"content":"            requireNonNull(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":352,"author":{"gitId":"rebeccalaujx"},"content":"            eventsAdded.add(event);","lastModifiedDate":"2021-11-02"},{"lineNumber":353,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":354,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":355,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-02"},{"lineNumber":356,"author":{"gitId":"rebeccalaujx"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-11-02"},{"lineNumber":357,"author":{"gitId":"rebeccalaujx"},"content":"            return new AddressBook();","lastModifiedDate":"2021-11-02"},{"lineNumber":358,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":359,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":360,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":361,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"rebeccalaujx":360,"gordonlzy":1}},{"path":"src/test/java/safeforhall/logic/commands/add/AddPersonCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}.","lastModifiedDate":"2021-10-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandIntegrationTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"VimuthM":15,"-":30}},{"path":"src/test/java/safeforhall/logic/commands/add/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.commands.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.CommandResult;","lastModifiedDate":"2021-10-17"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));","lastModifiedDate":"2021-10-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-10-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);","lastModifiedDate":"2021-10-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, ()","lastModifiedDate":"2021-10-17"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"            -\u003e addPersonCommand.execute(modelStub));","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-10-17"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);","lastModifiedDate":"2021-10-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"        public void setEvent(Event target, Event editedEvent) {","lastModifiedDate":"2021-10-18"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-11-08"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        public boolean hasExactPerson(Person person) {","lastModifiedDate":"2021-11-08"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-11-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"        public ArrayList\u003cPerson\u003e toPersonList(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"        public ArrayList\u003cPerson\u003e getCurrentEventResidents(ResidentList residentList) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"        public String getInvalidResident(Event event) throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":171,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"        public Event getEvent(EventName eventName) throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":176,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-18"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"        public void deleteEvent(Event target) {","lastModifiedDate":"2021-10-18"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-10-17"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-17"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-10-17"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-17"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":206,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-13"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-13"},{"lineNumber":210,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":212,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":213,"author":{"gitId":"jaredlhf"},"content":"        public ObservableList\u003cPerson\u003e getSortedPersonList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":214,"author":{"gitId":"jaredlhf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":215,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":216,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":217,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":218,"author":{"gitId":"jaredlhf"},"content":"        public ObservableList\u003cEvent\u003e getSortedEventList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":219,"author":{"gitId":"jaredlhf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":220,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":221,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":222,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":223,"author":{"gitId":"jaredlhf"},"content":"        public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2021-10-28"},{"lineNumber":224,"author":{"gitId":"jaredlhf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":225,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":226,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":227,"author":{"gitId":"jaredlhf"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":228,"author":{"gitId":"jaredlhf"},"content":"        public void updateSortedEventList(Comparator\u003cEvent\u003e comparator) {","lastModifiedDate":"2021-10-28"},{"lineNumber":229,"author":{"gitId":"jaredlhf"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":230,"author":{"gitId":"jaredlhf"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":231,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":232,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":233,"author":{"gitId":"VimuthM"},"content":"        public ArrayList\u003cEvent\u003e getPersonEvents(Person person, Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2021-10-28"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":235,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":236,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":237,"author":{"gitId":"VimuthM"},"content":"        @Override","lastModifiedDate":"2021-10-28"},{"lineNumber":238,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cPerson\u003e getSinglePerson() {","lastModifiedDate":"2021-10-23"},{"lineNumber":239,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":240,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":241,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":242,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":243,"author":{"gitId":"rebeccalaujx"},"content":"        public void setSinglePerson(Person person) {","lastModifiedDate":"2021-10-23"},{"lineNumber":244,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":245,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":246,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":247,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":248,"author":{"gitId":"rebeccalaujx"},"content":"        public ObservableList\u003cEvent\u003e getSingleEvent() {","lastModifiedDate":"2021-10-23"},{"lineNumber":249,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":250,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":251,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":252,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":253,"author":{"gitId":"rebeccalaujx"},"content":"        public void setSingleEvent(Event event) {","lastModifiedDate":"2021-10-23"},{"lineNumber":254,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-23"},{"lineNumber":255,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":256,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":257,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":258,"author":{"gitId":"rebeccalaujx"},"content":"        public void setNoPerson() {","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":261,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":262,"author":{"gitId":"rebeccalaujx"},"content":"        @Override","lastModifiedDate":"2021-10-24"},{"lineNumber":263,"author":{"gitId":"rebeccalaujx"},"content":"        public void setNoEvent() {","lastModifiedDate":"2021-10-24"},{"lineNumber":264,"author":{"gitId":"rebeccalaujx"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-10-24"},{"lineNumber":265,"author":{"gitId":"rebeccalaujx"},"content":"        }","lastModifiedDate":"2021-10-24"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"rebeccalaujx":33,"chongjunwei":26,"gordonlzy":23,"VimuthM":26,"-":181,"jaredlhf":21}},{"path":"src/test/java/safeforhall/logic/commands/delete/DeleteEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-02"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-02"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-02"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-11-02"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-11-02"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-11-02"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-02"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-02"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-11-02"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-11-02"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-11-02"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-11-02"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":" * {@code DeleteEventCommand}.","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-11-02"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"public class DeleteEventCommandTest {","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"    private Model model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        int firstEventIndex \u003d TypicalIndexes.INDEX_FIRST_EVENT.getZeroBased();","lastModifiedDate":"2021-11-02"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        int secondEventIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased();","lastModifiedDate":"2021-11-02"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        Event firstEventToDelete \u003d model.getFilteredEventList().get(firstEventIndex);","lastModifiedDate":"2021-11-02"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        Event secondEventToDelete \u003d model.getFilteredEventList().get(secondEventIndex);","lastModifiedDate":"2021-11-02"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_SECOND_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedEvent \u003d \"1.\\t\" + firstEventToDelete.getEventName() + \"\\n\"","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"                + \"2.\\t\" + secondEventToDelete.getEventName() + \"\\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, deletedEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deleteEvent(firstEventToDelete);","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deleteEvent(secondEventToDelete);","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-11-02"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-02"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-11-02"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(TypicalIndexes.INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-11-02"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedEvent \u003d \"1.\\t\" + eventToDelete.getEventName() + \"\\n\";","lastModifiedDate":"2021-11-02"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, deletedEvent);","lastModifiedDate":"2021-11-02"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-02"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deleteEvent(eventToDelete);","lastModifiedDate":"2021-11-02"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        showNoEvent(expectedModel);","lastModifiedDate":"2021-11-02"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-11-02"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-11-02"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-11-02"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-11-02"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());","lastModifiedDate":"2021-11-02"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-11-02"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(indexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e firstIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        firstIndexArray.add(TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(firstIndexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e secondIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-02"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        secondIndexArray.add(TypicalIndexes.INDEX_SECOND_EVENT);","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(secondIndexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-02"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-11-02"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-02"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(firstIndexArray);","lastModifiedDate":"2021-11-02"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-11-02"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-11-02"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-11-02"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-11-02"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-11-02"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"    private void showNoEvent(Model model) {","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        model.updateFilteredEventList(p -\u003e false);","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(model.getFilteredEventList().isEmpty());","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-11-02"}],"authorContributionMap":{"rebeccalaujx":130}},{"path":"src/test/java/safeforhall/logic/commands/delete/DeletePersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.delete;","lastModifiedDate":"2021-11-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":" * {@code DeletePersonCommand}.","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        int firstPersonIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased();","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"        int secondPersonIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON.getZeroBased();","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        Person firstPersonToDelete \u003d model.getFilteredPersonList().get(firstPersonIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        Person secondPersonToDelete \u003d model.getFilteredPersonList().get(secondPersonIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResident \u003d \"1.\\t\" + firstPersonToDelete.getName() + \"\\n\"","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"                + \"2.\\t\" + secondPersonToDelete.getName() + \"\\n\";","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedResident);","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deletePerson(firstPersonToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.deletePerson(secondPersonToDelete);","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(TypicalIndexes.INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-04"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        String deletedResident \u003d \"1.\\t\" + personToDelete.getName() + \"\\n\";","lastModifiedDate":"2021-10-10"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, deletedResident);","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(outOfBoundIndex);","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(indexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e firstIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        firstIndexArray.add(TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(firstIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e secondIndexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        secondIndexArray.add(TypicalIndexes.INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(secondIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(firstIndexArray);","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"rebeccalaujx":26,"chongjunwei":15,"-":73,"VimuthM":16}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d new EventBuilder().build();","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        Event lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        EventBuilder eventInList \u003d new EventBuilder(lastEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d eventInList.withEventName(VALID_NAME_SWIM_TRAINING)","lastModifiedDate":"2021-10-20"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"                .withEventDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_NAME_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastEvent, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(lastEvent, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, new EditEventDescriptor());","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        Event editedEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventInFilteredList \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        Event editedEvent \u003d new EventBuilder(eventInFilteredList)","lastModifiedDate":"2021-10-20"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"                .withEventName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-20"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setEvent(model.getFilteredEventList().get(0), editedEvent);","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEventUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        Event firstEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_SECOND_EVENT, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateEventFilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"        // edit event in filtered list into a duplicate in address book","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        Event eventInList \u003d model.getAddressBook().getEventList().get(INDEX_SECOND_EVENT.getZeroBased());","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT,","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder(eventInList).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_exceedEventCapacity_failure() {","lastModifiedDate":"2021-11-02"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());","lastModifiedDate":"2021-11-02"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor eventDescriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-11-02"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(\"2\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastEvent,","lastModifiedDate":"2021-11-02"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder(eventDescriptor).build());","lastModifiedDate":"2021-11-02"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_EXCEED_CAPACITY);","lastModifiedDate":"2021-11-02"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidEventIndexUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_invalidEventIndexFilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex,","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build());","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_EVENT, DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor copyDescriptor \u003d new EditEventDescriptor(DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_EVENT, copyDescriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_EVENT, DESC_FOOTBALL_TRAINING)));","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_EVENT, DESC_SWIM_TRAINING)));","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":183,"gordonlzy":4}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditEventDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventDescriptorTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand.EditEventDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventCommand.EditEventDescriptor(DESC_FOOTBALL_TRAINING);","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(DESC_FOOTBALL_TRAINING.equals(descriptorWithSameValues));","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(DESC_FOOTBALL_TRAINING.equals(DESC_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(5));","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(DESC_SWIM_TRAINING));","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        editedFootball \u003d new EditEventDescriptorBuilder(DESC_FOOTBALL_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(DESC_FOOTBALL_TRAINING.equals(editedFootball));","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":53}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"    //public static final String MESSAGE_DUPLICATE_NAME \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    //        \"Name should not be changed for more than one person.\\n\" + EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2021-10-17"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + model.getFilteredPersonList().get(0).getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2021-10-12"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e lastPersonIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        lastPersonIndexList.add(indexLastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"             .build();","lastModifiedDate":"2021-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-17"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"             .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(lastPersonIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + lastPerson.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonCommand(indexArray, new EditPersonCommand.EditPersonDescriptor());","lastModifiedDate":"2021-10-17"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + editedPerson.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray,","lastModifiedDate":"2021-10-17"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        String editedResidents \u003d (\"1.\\t\" + personInFilteredList.getName() + \"\\n\");","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedResidents);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-17"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicateSinglePersonUnfilteredList_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexArray,","lastModifiedDate":"2021-10-17"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"             new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-10-17"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2017-05-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(outOfBoundIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(targetIndexList,","lastModifiedDate":"2021-10-17"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-10-17"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e firstPersonList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        firstPersonList.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e secondPersonList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        firstPersonList.add(INDEX_SECOND_PERSON);","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(firstPersonList, DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor copyDescriptor \u003d new EditPersonCommand.EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(firstPersonList, copyDescriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(secondPersonList, DESC_AMY)));","lastModifiedDate":"2021-10-17"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":201,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(firstPersonList, DESC_BOB)));","lastModifiedDate":"2021-10-17"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"rebeccalaujx":117,"-":78,"VimuthM":9}},{"path":"src/test/java/safeforhall/logic/commands/edit/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.commands.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"//import static safeforhall.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2021-10-06"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand.EditPersonDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-10-17"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"                new EditPersonCommand.EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rebeccalaujx":4,"-":40,"VimuthM":7}},{"path":"src/test/java/safeforhall/logic/commands/find/FindEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindEventCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"/**","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) for {@code FindEventCommand}.","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":" */","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"public class FindEventCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    private Model model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"    public void equals() {","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate firstPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        firstPredicate.setEventName(new EventName(\"Training\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        firstPredicate.setEventDate(new EventDate(\"01-03-2021\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        firstPredicate.setVenue(new Venue(\"Field\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        firstPredicate.setCapacity(new Capacity(\"5\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate secondPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        // different Event -\u003e returns false","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    public void execute_zeroKeywords_noEventFound() {","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"null\", null, null, null);","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand command \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        expectedModel.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredEventList());","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    public void execute_multipleKeywords_multipleEventsFound() {","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"basketball powerlifting band\", null, null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand command \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        expectedModel.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(Arrays.asList(TypicalEvents.BASKETBALL, TypicalEvents.POWERLIFTING, TypicalEvents.BAND),","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"                model.getFilteredEventList());","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"    public void execute_multipleKeywords_multipleEventsFound2() {","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"swim road relay\", null, null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand command \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"        expectedModel.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(Arrays.asList(TypicalEvents.SWIM, TypicalEvents.ROAD_RELAY),","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"                model.getFilteredEventList());","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"    public void execute_multipleKeywords_multipleEventsFound3() {","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"swim band volleyball\", null, null, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand command \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"        expectedModel.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(Arrays.asList(TypicalEvents.VOLLEYBALL, TypicalEvents.SWIM, TypicalEvents.BAND),","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"                model.getFilteredEventList());","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"    public void execute_missingFieldWithPrefix_fail() {","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-25"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-25"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(\"\", null, null, null);","lastModifiedDate":"2021-10-25"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand command \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"            expectedModel.updateFilteredEventList(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(Arrays.asList(TypicalEvents.SWIM, TypicalEvents.BAND, TypicalEvents.VOLLEYBALL),","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"                    model.getFilteredEventList());","lastModifiedDate":"2021-10-25"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"            fail();","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"    private FindCompositePredicate preparePredicate(String eventName, String eventDate, String venue, String capacity) {","lastModifiedDate":"2021-10-25"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate f \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"        if (eventName !\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"            f.setEventName(new EventName(eventName));","lastModifiedDate":"2021-10-25"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"        if (eventDate !\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"            f.setEventDate(new EventDate(eventDate));","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"        if (venue !\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"            f.setVenue(new Venue(venue));","lastModifiedDate":"2021-10-25"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        if (capacity !\u003d null) {","lastModifiedDate":"2021-10-25"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"            f.setCapacity(new Capacity(capacity));","lastModifiedDate":"2021-10-25"},{"lineNumber":140,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"        return f;","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"chongjunwei":142,"VimuthM":2}},{"path":"src/test/java/safeforhall/logic/commands/find/FindPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.commands.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}.","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"public class FindPersonCommandTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate firstPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setName(new Name(\"Alice\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setFaculty(new Faculty(\"SoC\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        firstPredicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate secondPredicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-10-04"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"null\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.FIONA),","lastModifiedDate":"2021-10-04"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-04"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    public void execute_multiplePredicates_multiplePersonsFound() {","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(null, null, null, null, \"F\", null);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"    public void execute_multiplePredicates_multiplePersonsFound2() {","lastModifiedDate":"2021-10-12"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 4);","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(\"kurz elle kunz best\", null, null, null, null, \"soc\");","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE,","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.FIONA, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"    public void execute_missingFieldWithPrefix_fail() {","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(\"\", null, null, null, null, null);","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"            assertEquals(Arrays.asList(TypicalPersons.CARL, TypicalPersons.ELLE, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"                    model.getFilteredPersonList());","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"    public void execute_invalidRoom_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(null, \"A12\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-21"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"    public void execute_invalidRoom2_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-10-21"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            FindCompositePredicate predicate \u003d preparePredicate(null, \"1A\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"            expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"            assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-21"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    public void execute_validRoom_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d preparePredicate(null, \"a1\", null, null, null, null);","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"        assertEquals(Arrays.asList(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.CARL,","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"                TypicalPersons.DANIEL, TypicalPersons.ELLE, TypicalPersons.FIONA, TypicalPersons.GEORGE),","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"                model.getFilteredPersonList());","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-12"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"    private FindCompositePredicate preparePredicate(String name, String room , String phone, String email,","lastModifiedDate":"2021-10-12"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"                                                    String vaccStatus, String faculty) {","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate f \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        if (name !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"            f.setName(new Name(name));","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"        if (room !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"            f.setRoom(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"        if (phone !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"            f.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"        if (email !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"            f.setEmail(new Email(email));","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"            f.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"        if (faculty !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"            f.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"        return f;","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"chongjunwei":15,"-":39,"VimuthM":137}},{"path":"src/test/java/safeforhall/logic/commands/sort/SortEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.sort;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortEventCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortEventCommand.DESCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"public class SortEventCommandTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    public void constructor_nullField_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SortEventCommand(null, ASCENDING));","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    public void constructor_nullOrder_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SortEventCommand(EventName.FIELD, null));","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    public void getComparator_invalidField_throwsCommandException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand invalidFieldCommand \u003d new SortEventCommand(\"z\", ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(CommandException.class, SortEventCommand.ALLOWED_FIELDS, () -\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"                invalidFieldCommand.getComparator());","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    public void getComparator_invalidOrder_throwsCommandException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand invalidFieldCommand \u003d new SortEventCommand(EventName.FIELD, \"c\");","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(CommandException.class, SortEventCommand.ALLOWED_ORDER, () -\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"                invalidFieldCommand.getComparator());","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public void execute_listIsNotSorted_showsSortedList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        Model model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Model expectedModel \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cEvent\u003e eventNameComparator \u003d Comparator.comparing(Event::getEventName);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        expectedModel.updateSortedEventList(eventNameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new SortEventCommand(EventName.FIELD, ASCENDING), model,","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"                SortEventCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"    public void execute_listIsSorted_showsSameList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        Model model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        Model expectedModel \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cEvent\u003e eventNameComparator \u003d Comparator.comparing(Event::getEventName);","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        expectedModel.updateSortedEventList(eventNameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"        model.updateSortedEventList(eventNameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new SortEventCommand(Name.FIELD, ASCENDING), model,","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"                SortEventCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"    public void equals() {","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand sortVenueAscendingCommand \u003d new SortEventCommand(Venue.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand sortVenueDescendingCommand \u003d new SortEventCommand(Venue.FIELD, DESCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand sortFacultyDescendingCommand \u003d new SortEventCommand(Faculty.FIELD, DESCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(sortVenueAscendingCommand.equals(sortVenueAscendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand sortVenueAscendingCommandCopy \u003d new SortEventCommand(Venue.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(sortVenueAscendingCommand.equals(sortVenueAscendingCommandCopy));","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortVenueAscendingCommand.equals(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortVenueAscendingCommand.equals(null));","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        // different order -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortVenueAscendingCommand.equals(sortVenueDescendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"        // different field -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortVenueAscendingCommand.equals(sortFacultyDescendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"jaredlhf":100}},{"path":"src/test/java/safeforhall/logic/commands/sort/SortPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.sort;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.DESCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"public class SortPersonCommandTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    public void constructor_nullField_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SortPersonCommand(null, ASCENDING));","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    public void constructor_nullOrder_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SortPersonCommand(Name.FIELD, null));","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    public void getComparator_invalidField_throwsCommandException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand invalidFieldCommand \u003d new SortPersonCommand(\"z\", ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(CommandException.class, SortPersonCommand.ALLOWED_FIELDS, () -\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"                invalidFieldCommand.getComparator());","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    public void getComparator_invalidOrder_throwsCommandException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand invalidFieldCommand \u003d new SortPersonCommand(Name.FIELD, \"c\");","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(CommandException.class, SortPersonCommand.ALLOWED_ORDER, () -\u003e","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"                invalidFieldCommand.getComparator());","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    public void execute_listIsNotSorted_showsSortedList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cPerson\u003e nameComparator \u003d Comparator.comparing(Person::getName);","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        expectedModel.updateSortedPersonList(nameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new SortPersonCommand(Name.FIELD, ASCENDING), model,","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"                SortPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    public void execute_listIsSorted_showsSameList() {","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        Model expectedModel \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"        Comparator\u003cPerson\u003e nameComparator \u003d Comparator.comparing(Person::getName);","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        expectedModel.updateSortedPersonList(nameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        model.updateSortedPersonList(nameComparator);","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        assertCommandSuccess(new SortPersonCommand(Name.FIELD, ASCENDING), model,","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"                SortPersonCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-11-03"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"    public void equals() {","lastModifiedDate":"2021-11-03"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand sortEmailAscendingCommand \u003d new SortPersonCommand(Email.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand sortEmailDescendingCommand \u003d new SortPersonCommand(Email.FIELD, DESCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand sortFacultyDescendingCommand \u003d new SortPersonCommand(Faculty.FIELD, DESCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(sortEmailAscendingCommand.equals(sortEmailAscendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand sortEmailAscendingCommandCopy \u003d new SortPersonCommand(Email.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(sortEmailAscendingCommand.equals(sortEmailAscendingCommandCopy));","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortEmailAscendingCommand.equals(1));","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortEmailAscendingCommand.equals(null));","lastModifiedDate":"2021-11-03"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"        // different order -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortEmailAscendingCommand.equals(sortEmailDescendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"        // different field -\u003e returns false","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(sortEmailAscendingCommand.equals(sortFacultyDescendingCommand));","lastModifiedDate":"2021-11-03"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"jaredlhf":99}},{"path":"src/test/java/safeforhall/logic/commands/view/ViewEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2021-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-20"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"public class ViewEventCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"        model \u003d new ModelManager(TypicalEvents.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new ViewEventCommand(), model, ViewEventCommand.MESSAGE_ALL_EVENTS_SHOWN, expectedModel);","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        showEventAtIndex(model, TypicalIndexes.INDEX_FIRST_EVENT);","lastModifiedDate":"2021-10-20"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new ViewEventCommand(), model, ViewEventCommand.MESSAGE_ALL_EVENTS_SHOWN, expectedModel);","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rebeccalaujx":2,"chongjunwei":1,"-":25,"VimuthM":5,"jaredlhf":6}},{"path":"src/test/java/safeforhall/logic/commands/view/ViewPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.commands.view;","lastModifiedDate":"2021-10-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ModelManager;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalIndexes;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewCommand.","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"public class ViewPersonCommandTest {","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new ViewPersonCommand(), model,","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"                ViewPersonCommand.MESSAGE_ALL_RESIDENTS_SHOWN, expectedModel);","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        assertCommandSuccess(new ViewPersonCommand(), model,","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"                ViewPersonCommand.MESSAGE_ALL_RESIDENTS_SHOWN, expectedModel);","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rebeccalaujx":4,"chongjunwei":1,"-":25,"VimuthM":9,"jaredlhf":2}},{"path":"src/test/java/safeforhall/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import java.util.List;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ClearCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExcludeCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ExitCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.HelpCommand;","lastModifiedDate":"2021-10-04"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.TraceCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewEventCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.view.ViewPersonCommand;","lastModifiedDate":"2021-10-20"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonUtil;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-10"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person), true);","lastModifiedDate":"2021-10-17"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new AddPersonCommand(person), command);","lastModifiedDate":"2021-10-17"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, true) instanceof ClearCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", true) instanceof ClearCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand(","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), true);","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(new DeletePersonCommand(indexArray), command);","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    public void parseCommand_import() throws Exception {","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        ImportCommand command \u003d (ImportCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"                ImportCommand.COMMAND_WORD + \" safeforhall\", true);","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new ImportCommand(\"safeforhall\"), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    public void parseCommand_trace() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        TraceCommand command \u003d (TraceCommand) parser.parseCommand(","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"                TraceCommand.COMMAND_WORD + \" r/A123\", true);","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new TraceCommand(\"A123\"), command);","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"                + PersonUtil.getEditPersonDescriptorDetails(descriptor), true);","lastModifiedDate":"2021-10-25"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cIndex\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        list.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        assertEquals(new EditPersonCommand(list, descriptor), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, true) instanceof ExitCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", true) instanceof ExitCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        String joint \u003d keywords.stream().collect(Collectors.joining(\" \"));","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"                FindPersonCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_NAME + joint + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_ROOM + \"A100\" + \" \"","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"                        + CliSyntax.PREFIX_VACCSTATUS + \"T\", true);","lastModifiedDate":"2021-10-16"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"        FindCompositePredicate predicate \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(joint));","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(\"A100\");","lastModifiedDate":"2021-10-17"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(\"T\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(new FindPersonCommand(predicate), command);","lastModifiedDate":"2021-10-25"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, true) instanceof HelpCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", true) instanceof HelpCommand);","lastModifiedDate":"2021-10-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand command \u003d (DeadlineCommand) parser.parseCommand(","lastModifiedDate":"2021-10-23"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"                DeadlineCommand.COMMAND_WORD + \" k/c d1/10-10-2021 d2/12-10-2021\", true);","lastModifiedDate":"2021-11-05"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"12-10-2021\")), command);","lastModifiedDate":"2021-11-05"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"    public void parseCommand_view() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewPersonCommand.COMMAND_WORD, true) instanceof ViewPersonCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewPersonCommand.COMMAND_WORD + \" 3\", true) instanceof ViewPersonCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":144,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-20"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewEventCommand.COMMAND_WORD, false) instanceof ViewEventCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(parser.parseCommand(ViewEventCommand.COMMAND_WORD + \" 3\", false) instanceof ViewEventCommand);","lastModifiedDate":"2021-10-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"    public void parseCommand_include() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand command \u003d (IncludeCommand) parser.parseCommand(","lastModifiedDate":"2021-10-18"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"                IncludeCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"                        + \"1 \" + CliSyntax.PREFIX_RESIDENTS + \"a213\", false);","lastModifiedDate":"2021-10-18"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(command, new IncludeCommand(Index.fromOneBased(1), new ResidentList(\"a213\")));","lastModifiedDate":"2021-10-18"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"    public void parseCommand_export() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand command \u003d (ExportCommand) parser.parseCommand(ExportCommand.COMMAND_WORD","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"jaredlhf"},"content":"                + \" safeforhall\", true);","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(new ExportCommand(\"safeforhall\"), command);","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":163,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"    public void parseCommand_exclude() throws Exception {","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand command \u003d (ExcludeCommand) parser.parseCommand(","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"                ExcludeCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"                        + \"1 \" + CliSyntax.PREFIX_RESIDENTS + \"a213\", false);","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(command, new ExcludeCommand(Index.fromOneBased(1), new ResidentList(\"a213\")));","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"jaredlhf"},"content":"    public void parseCommand_sortPerson() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand command \u003d (SortPersonCommand) parser.parseCommand(SortPersonCommand.COMMAND_WORD","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"jaredlhf"},"content":"                + \" \" + PREFIX_SORT + Name.FIELD + \" \" + PREFIX_ORDER + ASCENDING, true);","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(new SortPersonCommand(Name.FIELD, ASCENDING), command);","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"jaredlhf"},"content":"    public void parseCommand_sortEvent() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand command \u003d (SortEventCommand) parser.parseCommand(SortEventCommand.COMMAND_WORD","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"jaredlhf"},"content":"                + \" \" + PREFIX_SORT + EventName.FIELD + \" \" + PREFIX_ORDER + ASCENDING, false);","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(new SortEventCommand(EventName.FIELD, ASCENDING), command);","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"            -\u003e parser.parseCommand(\"\", true));","lastModifiedDate":"2021-10-16"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()","lastModifiedDate":"2021-10-16"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"            -\u003e parser.parseCommand(\"unknownCommand\", true));","lastModifiedDate":"2021-10-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"rebeccalaujx":4,"gordonlzy":26,"chongjunwei":10,"VimuthM":66,"-":49,"jaredlhf":41}},{"path":"src/test/java/safeforhall/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"VimuthM":1,"-":149}},{"path":"src/test/java/safeforhall/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.Command;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"            Assertions.assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2021-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"VimuthM":6,"-":34}},{"path":"src/test/java/safeforhall/logic/parser/DeadlineCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_C;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_F;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_LC;","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.KEYWORD_DESC_LF;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.LAST_DATE1_DESC_OCT;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.LAST_DATE2_DESC_OCT;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.DeadlineCommand;","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"public class DeadlineCommandParserTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    private final DeadlineCommandParser parser \u003d new DeadlineCommandParser();","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"      \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"                DeadlineCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public void parse_validArgs_returnsListCommand() {","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        DeadlineCommand expectedDeadlineCommand \u003d new DeadlineCommand(\"f\",","lastModifiedDate":"2021-11-05"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"10-10-2021\"), new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_F + LAST_DATE1_DESC_OCT + LAST_DATE2_DESC_OCT,","lastModifiedDate":"2021-11-05"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"                expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_C + LAST_DATE1_DESC_OCT + LAST_DATE2_DESC_OCT,","lastModifiedDate":"2021-11-05"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_F + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_C + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"lf\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_LF + LAST_DATE1_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, KEYWORD_DESC_LC + LAST_DATE1_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_F","lastModifiedDate":"2021-10-23"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_C","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"f\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_F + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"c\", new LastDate(\"10-10-2021\"),","lastModifiedDate":"2021-11-05"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                new LastDate(\"15-10-2021\"));","lastModifiedDate":"2021-11-05"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_C + LAST_DATE1_DESC_OCT","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE2_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"lf\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_LF","lastModifiedDate":"2021-11-05"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        expectedDeadlineCommand \u003d new DeadlineCommand(\"lc\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + KEYWORD_DESC_LC","lastModifiedDate":"2021-11-05"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"                + LAST_DATE1_DESC_OCT, expectedDeadlineCommand);","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"gordonlzy":86}},{"path":"src/test/java/safeforhall/logic/parser/ExcludeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.ExcludeCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class ExcludeCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    private static final String DEFAULT_INDEX \u003d \"1\";","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    private ExcludeCommandParser parser \u003d new ExcludeCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"      \",","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public void parse_validArgs_returnsIncludeCommand() {","lastModifiedDate":"2021-10-25"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-25"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        ExcludeCommand expectedExcludeCommand \u003d new ExcludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-25"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Alex Yeoh, Bernice Yu\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"Alex Yeoh , Bernice Yu\",","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                expectedExcludeCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-25"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" Alex Yeoh , Bernice Yu \",","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                expectedExcludeCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"e417 , a213\",","lastModifiedDate":"2021-10-25"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                expectedExcludeCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-25"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" e417 , a213 \",","lastModifiedDate":"2021-10-25"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"                expectedExcludeCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-25"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        // no input","lastModifiedDate":"2021-10-25"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        // no field specified","lastModifiedDate":"2021-10-25"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, DEFAULT_INDEX,","lastModifiedDate":"2021-10-25"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"some random string\",","lastModifiedDate":"2021-10-25"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"i/ string\",","lastModifiedDate":"2021-10-25"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ExcludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                + CliSyntax.PREFIX_RESIDENTS + \"e417 a213\", ResidentList.MESSAGE_CONSTRAINTS); // no comma","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-25"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"e417, roy\",","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"                ResidentList.MESSAGE_CONSTRAINTS); // room and name","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"gordonlzy":79}},{"path":"src/test/java/safeforhall/logic/parser/ExportCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"public class ExportCommandParserTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"    private ExportCommandParser parser \u003d new ExportCommandParser();","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \", ExportCommand.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"    public void parse_validArgs_returnsImportCommand() {","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"        ExportCommand expectedExportCommand \u003d new ExportCommand(\"safeforhall\");","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"                \" safeforhall\", expectedExportCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"jaredlhf":24}},{"path":"src/test/java/safeforhall/logic/parser/ImportCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.ExportCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.ImportCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class ImportCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    private ImportCommandParser parser \u003d new ImportCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \", ExportCommand.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    public void parse_validArgs_returnsImportCommand() {","lastModifiedDate":"2021-10-25"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        ImportCommand expectedImportCommand \u003d new ImportCommand(\"safeforhall\");","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"                \" safeforhall\", expectedImportCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"VimuthM":23,"jaredlhf":2}},{"path":"src/test/java/safeforhall/logic/parser/IncludeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.IncludeCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class IncludeCommandParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    private static final String DEFAULT_INDEX \u003d \"1\";","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    private IncludeCommandParser parser \u003d new IncludeCommandParser();","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"      \",","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    public void parse_validArgs_returnsIncludeCommand() {","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        IncludeCommand expectedIncludeCommand \u003d new IncludeCommand(Index.fromOneBased(1),","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"                new ResidentList(\"Alex Yeoh, Bernice Yu\"));","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"Alex Yeoh , Bernice Yu\",","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" Alex Yeoh , Bernice Yu \",","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"1\" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \"e417 , a213\",","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \" + \"  1  \" + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"                        + CliSyntax.PREFIX_RESIDENTS + \" e417 , a213 \",","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"                expectedIncludeCommand);","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"        // no input","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        // no field specified","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, DEFAULT_INDEX,","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"some random string\",","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \"i/ string\",","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, IncludeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                + CliSyntax.PREFIX_RESIDENTS + \"e417 a213\", ResidentList.MESSAGE_CONSTRAINTS); // no comma","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"        assertParseFailure(parser, \" \" + DEFAULT_INDEX + \" \"","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"                + CliSyntax.PREFIX_RESIDENTS + \"e417, roy\",","lastModifiedDate":"2021-10-18"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"                ResidentList.MESSAGE_CONSTRAINTS); // room and name","lastModifiedDate":"2021-11-05"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":79}},{"path":"src/test/java/safeforhall/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_ROOM \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FACULTY \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_VACCSTATUS \u003d \" \";","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    private static final String INVALID_DATE \u003d \"1.10.2021\";","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    private static final String INVALID_RESIDENTS \u003d \"Alex Yeoh, C11\";","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_EVENTNAME \u003d \"F@@tball\";","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_EVENTDATE \u003d \"03\";","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_EVENTTIME \u003d \"time\";","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_VENUE \u003d \" \";","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_CAPACITY \u003d \"CAP5.0\";","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FILENAME \u003d \"file name\";","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FIELD \u003d \"z\";","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_ORDER \u003d \"c\";","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_ROOM \u003d \"A100\";","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"    private static final String VALID_DATE \u003d \"21-10-2021\";","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_FACULTY \u003d \"SoC\";","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_VACCSTATUS \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"    private static final String VALID_RESIDENTS \u003d \"Alex Yeoh, Bernice Yu\";","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_EVENTNAME \u003d \"Training\";","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_EVENTDATE \u003d \"03-01-2021\";","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_EVENTTIME \u003d \"0600\";","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_VENUE \u003d \"NUS field\";","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_CAPACITY \u003d \"5\";","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_FILENAME \u003d \"filename\";","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        assertThrows(ParseException.class, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX, ()","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRoom((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoom(INVALID_ROOM));","lastModifiedDate":"2021-10-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_validValueWithoutWhitespace_returnsRoom() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"        Room expectedRoom \u003d new Room(VALID_ROOM);","lastModifiedDate":"2021-10-10"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedRoom, ParserUtil.parseRoom(VALID_ROOM));","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"    public void parseRoom_validValueWithWhitespace_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"jaredlhf"},"content":"        Room expectedRoom \u003d new Room(VALID_ROOM);","lastModifiedDate":"2021-10-10"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedRoom, ParserUtil.parseRoom(roomWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND1));","lastModifiedDate":"2021-10-21"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue2_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND2));","lastModifiedDate":"2021-10-21"},{"lineNumber":156,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":158,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_invalidValue3_throwsParseException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRoomForFind(INVALID_ROOM_FOR_FIND3));","lastModifiedDate":"2021-10-21"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue1_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND1 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND1, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue2_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND2 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND2, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"    public void parseRoomForFind_validValue3_returnsTrimmedRoom() throws Exception {","lastModifiedDate":"2021-10-21"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"        String roomWithWhitespace \u003d WHITESPACE + VALID_ROOM_FOR_FIND3 + WHITESPACE;","lastModifiedDate":"2021-10-21"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"        assertEquals(VALID_ROOM_FOR_FIND3, ParserUtil.parseRoomForFind(roomWithWhitespace));","lastModifiedDate":"2021-10-21"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2021-10-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":201,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":205,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVaccStatus((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":210,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":211,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVaccStatus(INVALID_VACCSTATUS));","lastModifiedDate":"2021-10-10"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_validValueWithoutWhitespace_returnsVaccStatus() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":216,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus expectedVaccStatus \u003d new VaccStatus(VALID_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":217,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedVaccStatus, ParserUtil.parseVaccStatus(VALID_VACCSTATUS));","lastModifiedDate":"2021-10-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"jaredlhf"},"content":"    public void parseVaccStatus_validValueWithWhitespace_returnsTrimmedVaccStatus() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":222,"author":{"gitId":"jaredlhf"},"content":"        String vaccStatusWithWhitespace \u003d WHITESPACE + VALID_VACCSTATUS + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":223,"author":{"gitId":"jaredlhf"},"content":"        VaccStatus expectedVaccStatus \u003d new VaccStatus(VALID_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":224,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedVaccStatus, ParserUtil.parseVaccStatus(vaccStatusWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":228,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":229,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFaculty((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":233,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":234,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFaculty(INVALID_FACULTY));","lastModifiedDate":"2021-10-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":238,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_validValueWithoutWhitespace_returnsFaculty() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":239,"author":{"gitId":"jaredlhf"},"content":"        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);","lastModifiedDate":"2021-10-10"},{"lineNumber":240,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFaculty, ParserUtil.parseFaculty(VALID_FACULTY));","lastModifiedDate":"2021-10-10"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":244,"author":{"gitId":"jaredlhf"},"content":"    public void parseFaculty_validValueWithWhitespace_returnsTrimmedFaculty() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":245,"author":{"gitId":"jaredlhf"},"content":"        String facultyWithWhitespace \u003d WHITESPACE + VALID_FACULTY + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":246,"author":{"gitId":"jaredlhf"},"content":"        Faculty expectedFaculty \u003d new Faculty(VALID_FACULTY);","lastModifiedDate":"2021-10-10"},{"lineNumber":247,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFaculty, ParserUtil.parseFaculty(facultyWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));","lastModifiedDate":"2021-10-10"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":255,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":256,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":257,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));","lastModifiedDate":"2021-10-10"},{"lineNumber":258,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":259,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":260,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":261,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsLastDate() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":262,"author":{"gitId":"gordonlzy"},"content":"        LastDate expectedDate \u003d new LastDate(VALID_DATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":263,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));","lastModifiedDate":"2021-10-10"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":267,"author":{"gitId":"gordonlzy"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedLastDate() throws Exception {","lastModifiedDate":"2021-10-10"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"        LastDate expectedDate \u003d new LastDate(VALID_DATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":270,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));","lastModifiedDate":"2021-10-10"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":273,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":275,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseResidents((String) null));","lastModifiedDate":"2021-10-18"},{"lineNumber":276,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseResidents(INVALID_RESIDENTS));","lastModifiedDate":"2021-10-18"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":283,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":284,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_validValueWithoutWhitespace_returnsLastDate() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":285,"author":{"gitId":"gordonlzy"},"content":"        ResidentList expectedList \u003d new ResidentList(VALID_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":286,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedList, ParserUtil.parseResidents(VALID_RESIDENTS));","lastModifiedDate":"2021-10-18"},{"lineNumber":287,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":288,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":289,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":290,"author":{"gitId":"gordonlzy"},"content":"    public void parseResidents_validValueWithWhitespace_returnsTrimmedLastDate() throws Exception {","lastModifiedDate":"2021-10-18"},{"lineNumber":291,"author":{"gitId":"gordonlzy"},"content":"        String listWithWhitespace \u003d WHITESPACE + VALID_RESIDENTS + WHITESPACE;","lastModifiedDate":"2021-10-18"},{"lineNumber":292,"author":{"gitId":"gordonlzy"},"content":"        ResidentList expectedList \u003d new ResidentList(VALID_RESIDENTS);","lastModifiedDate":"2021-10-18"},{"lineNumber":293,"author":{"gitId":"gordonlzy"},"content":"        Assertions.assertEquals(expectedList, ParserUtil.parseResidents(listWithWhitespace));","lastModifiedDate":"2021-10-18"},{"lineNumber":294,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":295,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":296,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":297,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventName_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":298,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventName((String) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":299,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":300,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":301,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":302,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventName_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":303,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventName(INVALID_EVENTNAME));","lastModifiedDate":"2021-10-27"},{"lineNumber":304,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":305,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":306,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":307,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventDate_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":308,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventDate((String) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":309,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":310,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":311,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":312,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventDate_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":313,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventDate(INVALID_EVENTDATE));","lastModifiedDate":"2021-10-27"},{"lineNumber":314,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":315,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":316,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":317,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventVenue_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":318,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVenue((String) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":319,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":320,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":321,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":322,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventDate_invalidVenue_throwsParseException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":323,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVenue(INVALID_VENUE));","lastModifiedDate":"2021-10-27"},{"lineNumber":324,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":325,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":326,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":327,"author":{"gitId":"chongjunwei"},"content":"    public void parseCapacity_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":328,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCapacity((String) null));","lastModifiedDate":"2021-10-27"},{"lineNumber":329,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":330,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":331,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":332,"author":{"gitId":"chongjunwei"},"content":"    public void parseCapacity_invalidValue_throwsParseException() {","lastModifiedDate":"2021-10-27"},{"lineNumber":333,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCapacity(INVALID_CAPACITY));","lastModifiedDate":"2021-10-27"},{"lineNumber":334,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":335,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":336,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":337,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventName_validValueWithoutWhitespace_returnsEventName() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":338,"author":{"gitId":"chongjunwei"},"content":"        EventName expectedEventName \u003d new EventName(VALID_EVENTNAME);","lastModifiedDate":"2021-10-27"},{"lineNumber":339,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventName, ParserUtil.parseEventName(VALID_EVENTNAME));","lastModifiedDate":"2021-10-27"},{"lineNumber":340,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":341,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":342,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":343,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventName_validValueWithWhitespace_returnsTrimmedEventName() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":344,"author":{"gitId":"chongjunwei"},"content":"        String eventNameWithWhitespace \u003d WHITESPACE + VALID_EVENTNAME + WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":345,"author":{"gitId":"chongjunwei"},"content":"        EventName expectedEventName \u003d new EventName(VALID_EVENTNAME);","lastModifiedDate":"2021-10-27"},{"lineNumber":346,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventName, ParserUtil.parseEventName(eventNameWithWhitespace));","lastModifiedDate":"2021-10-27"},{"lineNumber":347,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":348,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":349,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":350,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventDate_validValueWithoutWhitespace_returnsEventDate() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":351,"author":{"gitId":"chongjunwei"},"content":"        EventDate expectedEventDate \u003d new EventDate(VALID_EVENTDATE);","lastModifiedDate":"2021-10-27"},{"lineNumber":352,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventDate, ParserUtil.parseEventDate(VALID_EVENTDATE));","lastModifiedDate":"2021-10-27"},{"lineNumber":353,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":354,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":355,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":356,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventDate_validValueWithWhitespace_returnsTrimmedEventDate() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":357,"author":{"gitId":"chongjunwei"},"content":"        String eventDateWithWhitespace \u003d WHITESPACE + VALID_EVENTDATE + WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":358,"author":{"gitId":"chongjunwei"},"content":"        EventDate expectedEventDate \u003d new EventDate(VALID_EVENTDATE);","lastModifiedDate":"2021-10-27"},{"lineNumber":359,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventDate, ParserUtil.parseEventDate(eventDateWithWhitespace));","lastModifiedDate":"2021-10-27"},{"lineNumber":360,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":361,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":362,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":363,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventTime_validValueWithoutWhitespace_returnsEventTime() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":364,"author":{"gitId":"chongjunwei"},"content":"        EventTime expectedEventTime \u003d new EventTime(VALID_EVENTTIME);","lastModifiedDate":"2021-10-27"},{"lineNumber":365,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventTime, ParserUtil.parseEventTime(VALID_EVENTTIME));","lastModifiedDate":"2021-10-27"},{"lineNumber":366,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":367,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":368,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":369,"author":{"gitId":"chongjunwei"},"content":"    public void parseEventTime_validValueWithWhitespace_returnsTrimmedEventTime() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":370,"author":{"gitId":"chongjunwei"},"content":"        String eventTimeWithWhitespace \u003d WHITESPACE + VALID_EVENTTIME + WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":371,"author":{"gitId":"chongjunwei"},"content":"        EventTime expectedEventTime \u003d new EventTime(VALID_EVENTTIME);","lastModifiedDate":"2021-10-27"},{"lineNumber":372,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedEventTime, ParserUtil.parseEventTime(eventTimeWithWhitespace));","lastModifiedDate":"2021-10-27"},{"lineNumber":373,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":374,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":375,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":376,"author":{"gitId":"chongjunwei"},"content":"    public void parseVenue_validValueWithoutWhitespace_returnsVenue() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":377,"author":{"gitId":"chongjunwei"},"content":"        Venue expectedVenue \u003d new Venue(VALID_VENUE);","lastModifiedDate":"2021-10-27"},{"lineNumber":378,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedVenue, ParserUtil.parseVenue(VALID_VENUE));","lastModifiedDate":"2021-10-27"},{"lineNumber":379,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":380,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":381,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":382,"author":{"gitId":"chongjunwei"},"content":"    public void parseVenue_validValueWithWhitespace_returnsTrimmedVenue() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":383,"author":{"gitId":"chongjunwei"},"content":"        String venueWithWhitespace \u003d WHITESPACE + VALID_VENUE + WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":384,"author":{"gitId":"chongjunwei"},"content":"        Venue expectedVenue \u003d new Venue(VALID_VENUE);","lastModifiedDate":"2021-10-27"},{"lineNumber":385,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedVenue, ParserUtil.parseVenue(venueWithWhitespace));","lastModifiedDate":"2021-10-27"},{"lineNumber":386,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":387,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":388,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":389,"author":{"gitId":"chongjunwei"},"content":"    public void parseCapacity_validValueWithoutWhitespace_returnsCapacity() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":390,"author":{"gitId":"chongjunwei"},"content":"        Capacity expectedCapacity \u003d new Capacity(VALID_CAPACITY);","lastModifiedDate":"2021-10-27"},{"lineNumber":391,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedCapacity, ParserUtil.parseCapacity(VALID_CAPACITY));","lastModifiedDate":"2021-10-27"},{"lineNumber":392,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":393,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":394,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":395,"author":{"gitId":"chongjunwei"},"content":"    public void parseCapacity_validValueWithWhitespace_returnsTrimmedCapacity() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":396,"author":{"gitId":"chongjunwei"},"content":"        String capacityWithWhitespace \u003d WHITESPACE + VALID_CAPACITY + WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":397,"author":{"gitId":"chongjunwei"},"content":"        Capacity expectedCapacity \u003d new Capacity(VALID_CAPACITY);","lastModifiedDate":"2021-10-27"},{"lineNumber":398,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedCapacity, ParserUtil.parseCapacity(capacityWithWhitespace));","lastModifiedDate":"2021-10-27"},{"lineNumber":399,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":400,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":401,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":402,"author":{"gitId":"jaredlhf"},"content":"    public void parseExportFileName_emptyValue_throwsParseException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":403,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExportFileName(EMPTY_STRING));","lastModifiedDate":"2021-10-28"},{"lineNumber":404,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":405,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":406,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":407,"author":{"gitId":"jaredlhf"},"content":"    public void parseExportFileName_null_throwsNullPointerException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":408,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExportFileName((String) null));","lastModifiedDate":"2021-10-28"},{"lineNumber":409,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":410,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":411,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":412,"author":{"gitId":"jaredlhf"},"content":"    public void parseExportFileName_validValue_returnsString() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":413,"author":{"gitId":"jaredlhf"},"content":"        String expectedFileName \u003d VALID_FILENAME;","lastModifiedDate":"2021-10-28"},{"lineNumber":414,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFileName, ParserUtil.parseExportFileName(VALID_FILENAME));","lastModifiedDate":"2021-10-28"},{"lineNumber":415,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":416,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":417,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":418,"author":{"gitId":"jaredlhf"},"content":"    public void parseExportFileName_validValue_throwsParseException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":419,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExportFileName(INVALID_FILENAME));","lastModifiedDate":"2021-10-28"},{"lineNumber":420,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":421,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":422,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":423,"author":{"gitId":"jaredlhf"},"content":"    public void parseImportFileName_emptyValue_throwsParseException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":424,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseImportFileName(EMPTY_STRING));","lastModifiedDate":"2021-10-28"},{"lineNumber":425,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":426,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":427,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":428,"author":{"gitId":"jaredlhf"},"content":"    public void parseImportFileName_null_throwsNullPointerException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":429,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseImportFileName((String) null));","lastModifiedDate":"2021-10-28"},{"lineNumber":430,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":431,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":432,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":433,"author":{"gitId":"jaredlhf"},"content":"    public void parseImportFileName_validValue_returnsString() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":434,"author":{"gitId":"jaredlhf"},"content":"        String expectedFileName \u003d VALID_FILENAME;","lastModifiedDate":"2021-10-28"},{"lineNumber":435,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedFileName, ParserUtil.parseImportFileName(VALID_FILENAME));","lastModifiedDate":"2021-10-28"},{"lineNumber":436,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":437,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":438,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":439,"author":{"gitId":"jaredlhf"},"content":"    public void parseImportFileName_validValue_throwsParseException() throws Exception {","lastModifiedDate":"2021-10-28"},{"lineNumber":440,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseImportFileName(INVALID_FILENAME));","lastModifiedDate":"2021-10-28"},{"lineNumber":441,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":442,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":443,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":444,"author":{"gitId":"jaredlhf"},"content":"    public void parsePersonField_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":445,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePersonField((String) null));","lastModifiedDate":"2021-11-03"},{"lineNumber":446,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":447,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":448,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":449,"author":{"gitId":"jaredlhf"},"content":"    public void parsePersonField_emptyValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":450,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePersonField(EMPTY_STRING));","lastModifiedDate":"2021-11-03"},{"lineNumber":451,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":452,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":453,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":454,"author":{"gitId":"jaredlhf"},"content":"    public void parsePersonField_invalidValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":455,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePersonField(INVALID_FIELD));","lastModifiedDate":"2021-11-03"},{"lineNumber":456,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":457,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":458,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":459,"author":{"gitId":"jaredlhf"},"content":"    public void parsePersonField_validValue_returnsString() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":460,"author":{"gitId":"jaredlhf"},"content":"        String expectedField \u003d Name.FIELD;","lastModifiedDate":"2021-11-03"},{"lineNumber":461,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedField, ParserUtil.parsePersonField(Name.FIELD));","lastModifiedDate":"2021-11-03"},{"lineNumber":462,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":463,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":464,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":465,"author":{"gitId":"jaredlhf"},"content":"    public void parsePersonField_validValueWithWhitespace_returnsTrimmedField() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":466,"author":{"gitId":"jaredlhf"},"content":"        String fieldWithWhitespace \u003d WHITESPACE + Name.FIELD + WHITESPACE;","lastModifiedDate":"2021-11-03"},{"lineNumber":467,"author":{"gitId":"jaredlhf"},"content":"        String expectedField \u003d Name.FIELD;","lastModifiedDate":"2021-11-03"},{"lineNumber":468,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedField, ParserUtil.parsePersonField(fieldWithWhitespace));","lastModifiedDate":"2021-11-03"},{"lineNumber":469,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":470,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":471,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":472,"author":{"gitId":"jaredlhf"},"content":"    public void parseEventField_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":473,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventField((String) null));","lastModifiedDate":"2021-11-03"},{"lineNumber":474,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":475,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":476,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":477,"author":{"gitId":"jaredlhf"},"content":"    public void parseEventField_emptyValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":478,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventField(EMPTY_STRING));","lastModifiedDate":"2021-11-03"},{"lineNumber":479,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":480,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":481,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":482,"author":{"gitId":"jaredlhf"},"content":"    public void parseEventField_invalidValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":483,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventField(INVALID_FIELD));","lastModifiedDate":"2021-11-03"},{"lineNumber":484,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":485,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":486,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":487,"author":{"gitId":"jaredlhf"},"content":"    public void parseEventField_validValue_returnsString() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":488,"author":{"gitId":"jaredlhf"},"content":"        String expectedField \u003d EventName.FIELD;","lastModifiedDate":"2021-11-03"},{"lineNumber":489,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedField, ParserUtil.parseEventField(Name.FIELD));","lastModifiedDate":"2021-11-03"},{"lineNumber":490,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":491,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":492,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":493,"author":{"gitId":"jaredlhf"},"content":"    public void parseEventField_validValueWithWhitespace_returnsTrimmedField() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":494,"author":{"gitId":"jaredlhf"},"content":"        String fieldWithWhitespace \u003d WHITESPACE + EventName.FIELD + WHITESPACE;","lastModifiedDate":"2021-11-03"},{"lineNumber":495,"author":{"gitId":"jaredlhf"},"content":"        String expectedField \u003d EventName.FIELD;","lastModifiedDate":"2021-11-03"},{"lineNumber":496,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedField, ParserUtil.parseEventField(fieldWithWhitespace));","lastModifiedDate":"2021-11-03"},{"lineNumber":497,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":498,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":499,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":500,"author":{"gitId":"jaredlhf"},"content":"    public void parseOrder_null_throwsNullPointerException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":501,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOrder((String) null));","lastModifiedDate":"2021-11-03"},{"lineNumber":502,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":503,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":504,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":505,"author":{"gitId":"jaredlhf"},"content":"    public void parseOrder_emptyValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":506,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOrder(EMPTY_STRING));","lastModifiedDate":"2021-11-03"},{"lineNumber":507,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":508,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":509,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":510,"author":{"gitId":"jaredlhf"},"content":"    public void parseOrder_invalidValue_throwsParseException() {","lastModifiedDate":"2021-11-03"},{"lineNumber":511,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOrder(INVALID_ORDER));","lastModifiedDate":"2021-11-03"},{"lineNumber":512,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":513,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":514,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":515,"author":{"gitId":"jaredlhf"},"content":"    public void parseOrder_validValue_returnsString() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":516,"author":{"gitId":"jaredlhf"},"content":"        String expectedOrder \u003d ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":517,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedOrder, ParserUtil.parseOrder(ASCENDING));","lastModifiedDate":"2021-11-03"},{"lineNumber":518,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":519,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":520,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":521,"author":{"gitId":"jaredlhf"},"content":"    public void parseOrder_validValueWithWhitespace_returnsTrimmedField() throws Exception {","lastModifiedDate":"2021-11-03"},{"lineNumber":522,"author":{"gitId":"jaredlhf"},"content":"        String orderWithWhitespace \u003d WHITESPACE + ASCENDING + WHITESPACE;","lastModifiedDate":"2021-11-03"},{"lineNumber":523,"author":{"gitId":"jaredlhf"},"content":"        String expectedOrder \u003d ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":524,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(expectedOrder, ParserUtil.parseOrder(orderWithWhitespace));","lastModifiedDate":"2021-11-03"},{"lineNumber":525,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":526,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"rebeccalaujx":2,"chongjunwei":120,"gordonlzy":52,"VimuthM":47,"-":122,"jaredlhf":183}},{"path":"src/test/java/safeforhall/logic/parser/TraceCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.TraceCommand;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"public class TraceCommandParserTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    private TraceCommandParser parser \u003d new TraceCommandParser();","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TraceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    public void parse_validArgs_returnsImportCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        TraceCommand expectedTraceCommand \u003d new TraceCommand(\"A106\");","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"                \" r/A106\", expectedTraceCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        expectedTraceCommand \u003d new TraceCommand(\"A106\", 2);","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"                \" r/A106 d/2\", expectedTraceCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidArgs_fails() {","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"                \" a/A106\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TraceCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"                \" r/A106 d/2.3\",","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"                \"Depth and duration must be integers\\n\" + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"                \" r/A1D06 d/2.3\",","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"                \"Information is neither a room or name\\n\" + TraceCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VimuthM":46}},{"path":"src/test/java/safeforhall/logic/parser/add/AddEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-27"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_CAPACITY_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_TIME_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-27"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-27"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.TIME_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_TIME_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-27"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-27"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalEvents.SWIM_WO_RESIDENTS;","lastModifiedDate":"2021-10-27"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-27"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddEventCommand;","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-27"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"public class AddEventCommandParserTest {","lastModifiedDate":"2021-10-27"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        Event expectedEvent \u003d new EventBuilder(SWIM_WO_RESIDENTS).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-27"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, NAME_DESC_FOOTBALL_TRAINING + NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        // multiple dates - last date accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, NAME_DESC_SWIM_TRAINING + DATE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        // multiple venues - last venue accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_FOOTBALL_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        // multiple capacities - last capacity accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING + CAPACITY_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        // multiple times - last time accepted","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, new AddEventCommand(expectedEvent));","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-27"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                AddEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-27"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        // missing name prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, VALID_NAME_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"                + VALID_DATE_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, expectedMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        // missing date prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"                + VALID_DATE_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, expectedMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        // missing time prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + VALID_TIME_SWIM_TRAINING, expectedMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        // missing venue prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VALID_VENUE_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, expectedMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"        // missing capacity prefix","lastModifiedDate":"2021-10-27"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"                + VALID_CAPACITY_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, expectedMessage);","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        // invalid name","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"        // invalid date","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"                + INVALID_EVENT_DATE_DESC + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        // invalid time","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + INVALID_TIME_DESC, EventTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        // invalid venue","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + INVALID_VENUE_DESC","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"                + CAPACITY_DESC_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"        // invalid capacity","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"                + INVALID_CAPACITY_DESC + TIME_DESC_SWIM_TRAINING, Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"        // non-empty preamble","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"                        + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"                        + VALID_CAPACITY_SWIM_TRAINING + TIME_DESC_SWIM_TRAINING,","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-27"}],"authorContributionMap":{"VimuthM":143}},{"path":"src/test/java/safeforhall/logic/parser/add/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.logic.parser.add;","lastModifiedDate":"2021-10-17"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_COLLECTIONDATE_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_FETDATE_DESC;","lastModifiedDate":"2021-10-13"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VACCSTATUS_DESC;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_COLLECTION;","lastModifiedDate":"2021-10-14"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_FET;","lastModifiedDate":"2021-10-14"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.AMY_NO_FET_COLLECTION;","lastModifiedDate":"2021-10-14"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-13"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"public class AddPersonCommandParserTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();","lastModifiedDate":"2021-10-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2021-10-10"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"jaredlhf"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        // multiple rooms - last room accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_AMY","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        // multiple faculties - last faculty accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":90,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_AMY + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        // multiple vaccination status - last vaccStatus accepted","lastModifiedDate":"2021-10-10"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"        // multiple fet dates - last fet date accepted","lastModifiedDate":"2021-10-13"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_AMY + FET_DESC_BOB + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"        // multiple collection dates - last collection date accepted","lastModifiedDate":"2021-10-13"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_AMY + VACCSTATUS_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"                + FET_DESC_BOB + COLLECTION_DESC_AMY + COLLECTION_DESC_BOB, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-13"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY_NO_FET_COLLECTION).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"        // missing lastFetDate and lastCollectionDate","lastModifiedDate":"2021-10-13"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        // missing lastFetDate","lastModifiedDate":"2021-10-13"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"        expectedPerson \u003d new PersonBuilder(AMY_NO_FET).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + COLLECTION_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        // missing lastCollectionDate","lastModifiedDate":"2021-10-13"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"        expectedPerson \u003d new PersonBuilder(AMY_NO_COLLECTION).build();","lastModifiedDate":"2021-10-14"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"                + VACCSTATUS_DESC_AMY + FACULTY_DESC_AMY + FET_DESC_AMY, new AddPersonCommand(expectedPerson));","lastModifiedDate":"2021-10-17"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-17"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"                AddPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"        // missing name prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"                        + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"                        + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"        // missing room prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ROOM_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":147,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":148,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":149,"author":{"gitId":"jaredlhf"},"content":"        // missing faculty prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":150,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":151,"author":{"gitId":"jaredlhf"},"content":"                + VALID_FACULTY_BOB + VACCSTATUS_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"        // missing vaccination prefix","lastModifiedDate":"2021-10-10"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VALID_VACCSTATUS_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ROOM_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"                + VALID_FACULTY_BOB + VALID_VACCSTATUS_BOB, expectedMessage);","lastModifiedDate":"2021-10-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":165,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":166,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":170,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":171,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":176,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":177,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":178,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":179,"author":{"gitId":"jaredlhf"},"content":"        // invalid room","lastModifiedDate":"2021-10-10"},{"lineNumber":180,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":181,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":182,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Room.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"jaredlhf"},"content":"        // invalid faculty","lastModifiedDate":"2021-10-10"},{"lineNumber":185,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":186,"author":{"gitId":"jaredlhf"},"content":"                + INVALID_FACULTY_DESC + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":187,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Faculty.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":189,"author":{"gitId":"jaredlhf"},"content":"        // invalid vaccination status","lastModifiedDate":"2021-10-10"},{"lineNumber":190,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-10"},{"lineNumber":191,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + INVALID_VACCSTATUS_DESC + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":192,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, VaccStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":193,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":194,"author":{"gitId":"jaredlhf"},"content":"        // invalid FET date","lastModifiedDate":"2021-10-13"},{"lineNumber":195,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":196,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + INVALID_FETDATE_DESC","lastModifiedDate":"2021-10-13"},{"lineNumber":197,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":198,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":199,"author":{"gitId":"jaredlhf"},"content":"        // invalid collection date","lastModifiedDate":"2021-10-13"},{"lineNumber":200,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":201,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":202,"author":{"gitId":"jaredlhf"},"content":"                + INVALID_COLLECTIONDATE_DESC, LastDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":205,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC","lastModifiedDate":"2021-10-10"},{"lineNumber":206,"author":{"gitId":"jaredlhf"},"content":"                + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB","lastModifiedDate":"2021-10-13"},{"lineNumber":207,"author":{"gitId":"jaredlhf"},"content":"                + COLLECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":211,"author":{"gitId":"jaredlhf"},"content":"                + ROOM_DESC_BOB + FACULTY_DESC_BOB + VACCSTATUS_DESC_BOB + FET_DESC_BOB + COLLECTION_DESC_BOB,","lastModifiedDate":"2021-10-13"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-17"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"VimuthM":27,"-":34,"jaredlhf":153}},{"path":"src/test/java/safeforhall/logic/parser/delete/DeletePersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.delete;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.delete.DeletePersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them.","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"public class DeletePersonCommandParserTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        indexArray.add(INDEX_FIRST_PERSON);","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(indexArray));","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"                DeletePersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"rebeccalaujx":6,"chongjunwei":8,"-":20,"VimuthM":4}},{"path":"src/test/java/safeforhall/logic/parser/edit/EditEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_CAPACITY_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand.EditEventDescriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EditEventDescriptorBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventCommandParserTest {","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String INVALID_EVENT_INDEX \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"            Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX + \"\\n\" + EditEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    private EditEventCommandParser parser \u003d new EditEventCommandParser();","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"        // no index specified","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, VALID_NAME_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        // no field specified","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\", EditEventCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        // no index and no field specified","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"rebeccalaujx"},"content":"        // negative index","lastModifiedDate":"2021-10-19"},{"lineNumber":62,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"        // zero index","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_FOOTBALL_TRAINING, INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 some random string\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 i/ string\", INVALID_EVENT_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid name","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid date","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATE_DESC, EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid venue","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        // invalid date followed by valid venue","lastModifiedDate":"2021-10-19"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_DATE_DESC + VENUE_DESC_FOOTBALL_TRAINING,","lastModifiedDate":"2021-10-19"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"                EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":91,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"        // valid capacity followed by invalid capacity. The test case for invalid capacity followed by valid capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + CAPACITY_DESC_SWIM_TRAINING + INVALID_CAPACITY_DESC,","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"                Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT_NAME_DESC + INVALID_EVENT_DATE_DESC","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"                        + VALID_CAPACITY_FOOTBALL_TRAINING, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_FOOTBALL_TRAINING + NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"                .withName(VALID_NAME_FOOTBALL_TRAINING).withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING + DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withVenue(VALID_VENUE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"                .withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        // name","lastModifiedDate":"2021-10-19"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d","lastModifiedDate":"2021-10-19"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"                new EditEventDescriptorBuilder().withName(VALID_NAME_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        // date","lastModifiedDate":"2021-10-19"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withDate(VALID_DATE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":143,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":144,"author":{"gitId":"rebeccalaujx"},"content":"        // venue","lastModifiedDate":"2021-10-19"},{"lineNumber":145,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withVenue(VALID_VENUE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":147,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":148,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":149,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":150,"author":{"gitId":"rebeccalaujx"},"content":"        // capacity","lastModifiedDate":"2021-10-19"},{"lineNumber":151,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":153,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":154,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-19"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"                + CAPACITY_DESC_FOOTBALL_TRAINING + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-19"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_SWIM_TRAINING + VENUE_DESC_SWIM_TRAINING + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).withDate(VALID_DATE_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"                .build();","lastModifiedDate":"2021-10-19"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_EVENT;","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_CAPACITY_DESC + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder()","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"                .withCapacity(VALID_CAPACITY_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_SWIM_TRAINING + INVALID_CAPACITY_DESC","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"rebeccalaujx"},"content":"                + DATE_DESC_SWIM_TRAINING + CAPACITY_DESC_SWIM_TRAINING;","lastModifiedDate":"2021-10-19"},{"lineNumber":185,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventDescriptorBuilder().withCapacity(VALID_CAPACITY_SWIM_TRAINING)","lastModifiedDate":"2021-10-19"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(VALID_VENUE_SWIM_TRAINING).withDate(VALID_DATE_SWIM_TRAINING).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":191,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":191}},{"path":"src/test/java/safeforhall/logic/parser/edit/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.logic.parser.edit;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FET_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand;","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"public class EditPersonCommandParserTest {","lastModifiedDate":"2021-10-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"    private static final String INVALID_PERSON_INDEX \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \"\\n\" + EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();","lastModifiedDate":"2021-10-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-10-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 some random string\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1 i/ string\", INVALID_PERSON_INDEX);","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2021-10-10"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        //assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-10-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"             .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        // name","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"rebeccalaujx"},"content":"        //room","lastModifiedDate":"2021-10-13"},{"lineNumber":156,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + ROOM_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":157,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withRoom(VALID_ROOM_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":158,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":159,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":161,"author":{"gitId":"rebeccalaujx"},"content":"        //faculty","lastModifiedDate":"2021-10-13"},{"lineNumber":162,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":163,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withFaculty(VALID_FACULTY_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":164,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":165,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":166,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":167,"author":{"gitId":"rebeccalaujx"},"content":"        //vaccStatus","lastModifiedDate":"2021-10-13"},{"lineNumber":168,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":169,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withVaccStatus(VALID_VACCSTATUS_AMY).build();","lastModifiedDate":"2021-10-13"},{"lineNumber":170,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":171,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-13"},{"lineNumber":172,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":173,"author":{"gitId":"rebeccalaujx"},"content":"        //lastFetDate","lastModifiedDate":"2021-10-19"},{"lineNumber":174,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + FET_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":175,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withLastFetDate(VALID_FETDATE_AMY).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":176,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":177,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":178,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":179,"author":{"gitId":"rebeccalaujx"},"content":"        //lastCollectionDate","lastModifiedDate":"2021-10-19"},{"lineNumber":180,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + COLLECTION_DESC_AMY;","lastModifiedDate":"2021-10-19"},{"lineNumber":181,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withLastCollectionDate(VALID_COLLECTIONDATE_AMY).build();","lastModifiedDate":"2021-10-19"},{"lineNumber":182,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":183,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-19"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":187,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":190,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":192,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"rebeccalaujx"},"content":"             + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":195,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":196,"author":{"gitId":"rebeccalaujx"},"content":"             .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":197,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":198,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":199,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":200,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"rebeccalaujx"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":204,"author":{"gitId":"rebeccalaujx"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":205,"author":{"gitId":"rebeccalaujx"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-10-12"},{"lineNumber":206,"author":{"gitId":"rebeccalaujx"},"content":"        ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-12"},{"lineNumber":207,"author":{"gitId":"rebeccalaujx"},"content":"        targetIndexList.add(targetIndex);","lastModifiedDate":"2021-10-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"rebeccalaujx"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":210,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-10-12"},{"lineNumber":211,"author":{"gitId":"rebeccalaujx"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":212,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"rebeccalaujx"},"content":"        // other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":215,"author":{"gitId":"rebeccalaujx"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":216,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-12"},{"lineNumber":217,"author":{"gitId":"rebeccalaujx"},"content":"             .build();","lastModifiedDate":"2021-10-12"},{"lineNumber":218,"author":{"gitId":"rebeccalaujx"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndexList, descriptor);","lastModifiedDate":"2021-10-17"},{"lineNumber":219,"author":{"gitId":"rebeccalaujx"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"rebeccalaujx":126,"-":82,"VimuthM":12,"jaredlhf":2}},{"path":"src/test/java/safeforhall/logic/parser/find/FindEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.find;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_CAPACITY_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC2;","lastModifiedDate":"2021-10-27"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;","lastModifiedDate":"2021-10-27"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindEventCommand;","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindEventCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"public class FindEventCommandParserTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    private FindEventCommandParser parser \u003d new FindEventCommandParser();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand expectedFindEventCommand \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"                new FindEventCommand(new FindEventCommand.FindCompositePredicate(preparePredicate(\"Football Training\",","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"                        null, null, null)));","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"                FindEventCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Football Training\",","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"                expectedFindEventCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-10-26"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"                FindEventCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"  Football  Training  \",","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"                expectedFindEventCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"        // no input","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"        // no field specified","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"1\", FindEventCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"some random string\", FindEventCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"i/ string\", FindEventCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"        // invalid event name","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        // invalid event date","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, INVALID_EVENT_DATE_DESC, EventDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        String userInput \u003d NAME_DESC_FOOTBALL_TRAINING + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"                + CAPACITY_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventName(new EventName(VALID_NAME_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventDate(new EventDate(VALID_DATE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"        predicate.setVenue(new Venue(VALID_VENUE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"        predicate.setCapacity(new Capacity(VALID_CAPACITY_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand expectedCommand \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"        String userInput \u003d NAME_DESC_FOOTBALL_TRAINING + DATE_DESC_FOOTBALL_TRAINING + VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventName(new EventName(VALID_NAME_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventDate(new EventDate(VALID_DATE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"        predicate.setVenue(new Venue(VALID_VENUE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand expectedCommand \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"        // event name","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"        String userInput \u003d NAME_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventName(new EventName(VALID_NAME_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"        FindEventCommand expectedCommand \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"        // date","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"        userInput \u003d DATE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"        predicate.setEventDate(new EventDate(VALID_DATE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"        expectedCommand \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-27"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-27"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"        // venue","lastModifiedDate":"2021-10-27"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        userInput \u003d VENUE_DESC_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-27"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":140,"author":{"gitId":"chongjunwei"},"content":"        predicate.setVenue(new Venue(VALID_VENUE_FOOTBALL_TRAINING));","lastModifiedDate":"2021-10-27"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"        expectedCommand \u003d new FindEventCommand(predicate);","lastModifiedDate":"2021-10-27"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":143,"author":{"gitId":"chongjunwei"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-27"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":145,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":146,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":147,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidName_fail() {","lastModifiedDate":"2021-10-27"},{"lineNumber":148,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":150,"author":{"gitId":"chongjunwei"},"content":"            predicate.setEventName(new EventName(INVALID_EVENT_NAME_DESC));","lastModifiedDate":"2021-10-27"},{"lineNumber":151,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":152,"author":{"gitId":"chongjunwei"},"content":"            assertParseFailure(parser, INVALID_EVENT_NAME_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":153,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":154,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-27"},{"lineNumber":155,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidDate_fail() {","lastModifiedDate":"2021-10-27"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":161,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":162,"author":{"gitId":"chongjunwei"},"content":"            predicate.setEventDate(new EventDate(INVALID_EVENT_DATE_DESC));","lastModifiedDate":"2021-10-27"},{"lineNumber":163,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"            assertParseFailure(parser, INVALID_EVENT_DATE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-27"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":169,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":170,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":171,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidDate2_fail() {","lastModifiedDate":"2021-10-27"},{"lineNumber":172,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":173,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"            predicate.setEventDate(new EventDate(INVALID_EVENT_DATE_DESC2));","lastModifiedDate":"2021-10-27"},{"lineNumber":175,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":176,"author":{"gitId":"chongjunwei"},"content":"            assertParseFailure(parser, INVALID_EVENT_DATE_DESC2, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":177,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":178,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-27"},{"lineNumber":179,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":180,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":181,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":182,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":183,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidVenue_fail() {","lastModifiedDate":"2021-10-27"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":185,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":186,"author":{"gitId":"chongjunwei"},"content":"            predicate.setVenue(new Venue(INVALID_VENUE_DESC));","lastModifiedDate":"2021-10-27"},{"lineNumber":187,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":188,"author":{"gitId":"chongjunwei"},"content":"            assertParseFailure(parser, INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":190,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-27"},{"lineNumber":191,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":192,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":193,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":194,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":195,"author":{"gitId":"chongjunwei"},"content":"    public void parse_invalidCapacity_fail() {","lastModifiedDate":"2021-10-27"},{"lineNumber":196,"author":{"gitId":"chongjunwei"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"            FindEventCommand.FindCompositePredicate predicate \u003d new FindEventCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-27"},{"lineNumber":198,"author":{"gitId":"chongjunwei"},"content":"            predicate.setCapacity(new Capacity(INVALID_CAPACITY_DESC));","lastModifiedDate":"2021-10-27"},{"lineNumber":199,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":200,"author":{"gitId":"chongjunwei"},"content":"            assertParseFailure(parser, INVALID_CAPACITY_DESC, Venue.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-27"},{"lineNumber":201,"author":{"gitId":"chongjunwei"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":202,"author":{"gitId":"chongjunwei"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-27"},{"lineNumber":203,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":204,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":205,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":206,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"chongjunwei"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"    private FindCompositePredicate preparePredicate(String eventName, String eventDate, String venue, String capacity) {","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"chongjunwei"},"content":"        FindCompositePredicate f \u003d new FindCompositePredicate();","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"chongjunwei"},"content":"        if (eventName !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"chongjunwei"},"content":"            f.setEventName(new EventName(eventName));","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"chongjunwei"},"content":"        if (eventDate !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":216,"author":{"gitId":"chongjunwei"},"content":"            f.setEventDate(new EventDate(eventDate));","lastModifiedDate":"2021-10-26"},{"lineNumber":217,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":218,"author":{"gitId":"chongjunwei"},"content":"        if (venue !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":219,"author":{"gitId":"chongjunwei"},"content":"            f.setVenue(new Venue(venue));","lastModifiedDate":"2021-10-26"},{"lineNumber":220,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"        if (capacity !\u003d null) {","lastModifiedDate":"2021-10-26"},{"lineNumber":222,"author":{"gitId":"chongjunwei"},"content":"            f.setCapacity(new Capacity(capacity));","lastModifiedDate":"2021-10-26"},{"lineNumber":223,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":224,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":225,"author":{"gitId":"chongjunwei"},"content":"        return f;","lastModifiedDate":"2021-10-26"},{"lineNumber":226,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":227,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"chongjunwei":227}},{"path":"src/test/java/safeforhall/logic/parser/find/FindPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.logic.parser.find;","lastModifiedDate":"2021-10-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-10-12"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.ROOM_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand;","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.commands.find.FindPersonCommand.FindCompositePredicate;","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CliSyntax;","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.logic.parser.CommandParserTestUtil;","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-12"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-12"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-12"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-12"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"public class FindPersonCommandParserTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-10-25"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC1 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND1;","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC2 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND2;","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_DESC3 \u003d \" \" + PREFIX_ROOM + INVALID_ROOM_FOR_FIND3;","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC1 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND1;","lastModifiedDate":"2021-10-21"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC2 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND2;","lastModifiedDate":"2021-10-21"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_DESC3 \u003d \" \" + PREFIX_ROOM + VALID_ROOM_FOR_FIND3;","lastModifiedDate":"2021-10-21"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-10-12"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-10-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"                new FindPersonCommand(new FindPersonCommand.FindCompositePredicate(preparePredicate(\"Alice Bob\",","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"                        null, null, null, null, null)));","lastModifiedDate":"2021-10-12"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-12"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"Alice Bob\", expectedFindPersonCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"        CommandParserTestUtil.assertParseSuccess(parser,","lastModifiedDate":"2021-10-12"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_NAME + \"  Alice   Bob  \",","lastModifiedDate":"2021-10-25"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"                expectedFindPersonCommand);","lastModifiedDate":"2021-10-25"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        // no input","lastModifiedDate":"2021-10-12"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-10-12"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        // no field specified","lastModifiedDate":"2021-10-12"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"1\", FindPersonCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"        // invalid arguments","lastModifiedDate":"2021-10-12"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"some random string\", FindPersonCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-25"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-10-12"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        assertParseFailure(parser, \"i/ string\", FindPersonCommand.MESSAGE_NOT_FILTERED);","lastModifiedDate":"2021-10-25"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-10-12"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-10-12"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2021-10-12"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2021-10-12"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2021-10-12"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-10-12"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-10-12"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-10-12"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-10-12"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"            Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-10-12"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + VACCSTATUS_DESC_AMY","lastModifiedDate":"2021-10-12"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"                + FACULTY_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        predicate.setPhone(new Phone(VALID_PHONE_BOB));","lastModifiedDate":"2021-10-12"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        predicate.setEmail(new Email(VALID_EMAIL_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        predicate.setFaculty(new Faculty(VALID_FACULTY_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":147,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"        // name","lastModifiedDate":"2021-10-12"},{"lineNumber":155,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":157,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":159,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":160,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":161,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"        // room","lastModifiedDate":"2021-10-12"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"        userInput \u003d ROOM_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_AMY);","lastModifiedDate":"2021-10-17"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"        expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"        // vaccination","lastModifiedDate":"2021-10-12"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"        userInput \u003d VACCSTATUS_DESC_AMY;","lastModifiedDate":"2021-10-12"},{"lineNumber":172,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":174,"author":{"gitId":"chongjunwei"},"content":"        expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-10-12"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d NAME_DESC_AMY + ROOM_DESC_AMY + VACCSTATUS_DESC_AMY + ROOM_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":184,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"        predicate.setName(new Name(VALID_NAME_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_BOB);","lastModifiedDate":"2021-10-17"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"        predicate.setVaccStatus(new VaccStatus(VALID_VACCSTATUS_AMY));","lastModifiedDate":"2021-10-12"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":189,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom1_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":197,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":199,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC1, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom2_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":209,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC2, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":217,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":218,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":219,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidRoom3_fail() {","lastModifiedDate":"2021-10-21"},{"lineNumber":220,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":221,"author":{"gitId":"chongjunwei"},"content":"            FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"VimuthM"},"content":"            predicate.setRoom(INVALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":223,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":224,"author":{"gitId":"VimuthM"},"content":"            assertParseFailure(parser, INVALID_ROOM_DESC3, Room.MESSAGE_CONSTRAINTS_FOR_FIND);","lastModifiedDate":"2021-10-21"},{"lineNumber":225,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":226,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":227,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":228,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":229,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":230,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":231,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoomBlock_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":232,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":235,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":237,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC1, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":238,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":239,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":240,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":241,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoomBlockLevel_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":242,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":245,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":247,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC2, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":248,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":249,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":250,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":251,"author":{"gitId":"VimuthM"},"content":"    public void parse_validRoom_success() {","lastModifiedDate":"2021-10-21"},{"lineNumber":252,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"VimuthM"},"content":"        predicate.setRoom(VALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":254,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":255,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":257,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, VALID_ROOM_DESC3, expectedCommand);","lastModifiedDate":"2021-10-21"},{"lineNumber":258,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":259,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":260,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":261,"author":{"gitId":"VimuthM"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-10-12"},{"lineNumber":262,"author":{"gitId":"VimuthM"},"content":"        // no other valid values specified","lastModifiedDate":"2021-10-12"},{"lineNumber":263,"author":{"gitId":"VimuthM"},"content":"        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-10-12"},{"lineNumber":264,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":265,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate predicate \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"VimuthM"},"content":"        predicate.setPhone(new Phone(VALID_PHONE_BOB));","lastModifiedDate":"2021-10-12"},{"lineNumber":267,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand expectedCommand \u003d new FindPersonCommand(predicate);","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":269,"author":{"gitId":"VimuthM"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-10-12"},{"lineNumber":270,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":271,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":272,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-12"},{"lineNumber":273,"author":{"gitId":"VimuthM"},"content":"     * Parses {@code userInput} into a {@code FindCompositePredicate}.","lastModifiedDate":"2021-10-12"},{"lineNumber":274,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-12"},{"lineNumber":275,"author":{"gitId":"VimuthM"},"content":"    private FindCompositePredicate preparePredicate(String name, String room , String phone, String email,","lastModifiedDate":"2021-10-21"},{"lineNumber":276,"author":{"gitId":"VimuthM"},"content":"                                                                String vaccStatus, String faculty) {","lastModifiedDate":"2021-10-12"},{"lineNumber":277,"author":{"gitId":"chongjunwei"},"content":"        FindPersonCommand.FindCompositePredicate f \u003d new FindPersonCommand.FindCompositePredicate();","lastModifiedDate":"2021-10-25"},{"lineNumber":278,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":279,"author":{"gitId":"VimuthM"},"content":"        if (name !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":280,"author":{"gitId":"VimuthM"},"content":"            f.setName(new Name(name));","lastModifiedDate":"2021-10-12"},{"lineNumber":281,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":282,"author":{"gitId":"VimuthM"},"content":"        if (room !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":283,"author":{"gitId":"VimuthM"},"content":"            f.setRoom(room);","lastModifiedDate":"2021-10-17"},{"lineNumber":284,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":285,"author":{"gitId":"VimuthM"},"content":"        if (phone !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":286,"author":{"gitId":"VimuthM"},"content":"            f.setPhone(new Phone(phone));","lastModifiedDate":"2021-10-12"},{"lineNumber":287,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":288,"author":{"gitId":"VimuthM"},"content":"        if (email !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":289,"author":{"gitId":"VimuthM"},"content":"            f.setEmail(new Email(email));","lastModifiedDate":"2021-10-12"},{"lineNumber":290,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":291,"author":{"gitId":"VimuthM"},"content":"        if (vaccStatus !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":292,"author":{"gitId":"VimuthM"},"content":"            f.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-12"},{"lineNumber":293,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":294,"author":{"gitId":"VimuthM"},"content":"        if (faculty !\u003d null) {","lastModifiedDate":"2021-10-12"},{"lineNumber":295,"author":{"gitId":"VimuthM"},"content":"            f.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-12"},{"lineNumber":296,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-12"},{"lineNumber":297,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":298,"author":{"gitId":"VimuthM"},"content":"        return f;","lastModifiedDate":"2021-10-12"},{"lineNumber":299,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"chongjunwei":41,"-":17,"VimuthM":242}},{"path":"src/test/java/safeforhall/logic/parser/sort/SortEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser.sort;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortEventCommand.ALLOWED_FIELDS;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortEventCommand.ALLOWED_ORDER;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortEventCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortEventCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"public class SortEventCommandParserTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    private SortEventCommandParser parser \u003d new SortEventCommandParser();","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public void parse_compulsoryFieldsMissing_failure() {","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"                SortEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"        //missing order","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, PREFIX_SORT + EventName.FIELD + \" \" + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"                expectedMessage);","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        //missing field","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, EventName.FIELD + \" \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"                expectedMessage);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        //invalid order","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \" + PREFIX_SORT + EventName.FIELD + \" \" + PREFIX_ORDER + \"z\",","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"                ALLOWED_ORDER);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        //invalid field","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \" + PREFIX_SORT + \"z \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"                ALLOWED_FIELDS);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    public void parse_validValue_success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        SortEventCommand expectedCommand \u003d new SortEventCommand(EventName.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_SORT + EventName.FIELD + \" \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"                expectedCommand);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"jaredlhf":52}},{"path":"src/test/java/safeforhall/logic/parser/sort/SortPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredlhf"},"content":"package safeforhall.logic.parser.sort;","lastModifiedDate":"2021-11-03"},{"lineNumber":2,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ALLOWED_FIELDS;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ALLOWED_ORDER;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.sort.SortPersonCommand.ASCENDING;","lastModifiedDate":"2021-11-03"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ORDER;","lastModifiedDate":"2021-11-03"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_SORT;","lastModifiedDate":"2021-11-03"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-11-03"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-11-03"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-03"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.core.Messages;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.logic.commands.sort.SortPersonCommand;","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-11-03"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"public class SortPersonCommandParserTest {","lastModifiedDate":"2021-11-03"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"    private SortPersonCommandParser parser \u003d new SortPersonCommandParser();","lastModifiedDate":"2021-11-03"},{"lineNumber":19,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public void parse_compulsoryFieldsMissing_failure() {","lastModifiedDate":"2021-11-03"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-11-03"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"                SortPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-11-03"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"        //missing order","lastModifiedDate":"2021-11-03"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, PREFIX_SORT + Name.FIELD + \" \" + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"                expectedMessage);","lastModifiedDate":"2021-11-03"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"        //missing field","lastModifiedDate":"2021-11-03"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, Name.FIELD + \" \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"                expectedMessage);","lastModifiedDate":"2021-11-03"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-11-03"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        //invalid order","lastModifiedDate":"2021-11-03"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \" + PREFIX_SORT + Name.FIELD + \" \" + PREFIX_ORDER + \"z\",","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"                ALLOWED_ORDER);","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        //invalid field","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        assertParseFailure(parser, \" \" + PREFIX_SORT + \"z \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"                ALLOWED_FIELDS);","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"    public void parse_validValue_success() {","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        SortPersonCommand expectedCommand \u003d new SortPersonCommand(Name.FIELD, ASCENDING);","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_SORT + Name.FIELD + \" \" + PREFIX_ORDER + ASCENDING,","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"                expectedCommand);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"}","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"jaredlhf":52}},{"path":"src/test/java/safeforhall/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.ROAD_RELAY;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import java.util.Optional;","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-20"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-13"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"    // TODO: Fix testcase","lastModifiedDate":"2021-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"    public void findEventSuccess() {","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(ROAD_RELAY);","lastModifiedDate":"2021-10-18"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findEvent(new EventName(\"basketball\")).get(), BASKETBALL);","lastModifiedDate":"2021-10-18"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findEvent(new EventName(\"road relay\")).get(), ROAD_RELAY);","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"    public void findEventFailure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"        EventName eventName \u003d new EventName(\"non existent event\");","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findEvent(eventName));","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"    public void findPersonSuccess() throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addPerson(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"A100\").get(), ALICE);","lastModifiedDate":"2021-10-20"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"A101\").get(), BENSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"Alice Pauline\").get(), ALICE);","lastModifiedDate":"2021-10-20"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(addressBook.findPerson(\"Benson Meier\").get(), BENSON);","lastModifiedDate":"2021-10-20"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"    public void findPersonFailure() throws CommandException {","lastModifiedDate":"2021-10-20"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findPerson(\"A401\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(Optional.empty(), addressBook.findPerson(\"Johnny Lim\"));","lastModifiedDate":"2021-10-20"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e addressBook.findPerson(\"T12\"));","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"            addressBook.hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-10-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":148,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"        @Override","lastModifiedDate":"2021-10-13"},{"lineNumber":150,"author":{"gitId":"chongjunwei"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2021-10-13"},{"lineNumber":151,"author":{"gitId":"chongjunwei"},"content":"            return events;","lastModifiedDate":"2021-10-13"},{"lineNumber":152,"author":{"gitId":"chongjunwei"},"content":"        }","lastModifiedDate":"2021-10-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"gordonlzy":36,"chongjunwei":7,"VimuthM":21,"-":91}},{"path":"src/test/java/safeforhall/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.VOLLEYBALL;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-10-04"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.AddressBookBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validViewSinglePersonCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"rebeccalaujx"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"rebeccalaujx"},"content":"        FilteredList\u003cPerson\u003e singlePerson \u003d new FilteredList\u003c\u003e(addressBook.getPersonList());","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"rebeccalaujx"},"content":"        singlePerson.setPredicate(ALICE::equals);","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"rebeccalaujx"},"content":"        modelManager.setSinglePerson(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(modelManager.getSinglePerson(), singlePerson);","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validViewSingleEventCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"rebeccalaujx"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"rebeccalaujx"},"content":"        FilteredList\u003cEvent\u003e singleEvent \u003d new FilteredList\u003c\u003e(addressBook.getEventList());","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"rebeccalaujx"},"content":"        singleEvent.setPredicate(BASKETBALL::equals);","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"rebeccalaujx"},"content":"        modelManager.setSingleEvent(BASKETBALL);","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(modelManager.getSingleEvent(), singleEvent);","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validViewNoPersonCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"rebeccalaujx"},"content":"        modelManager.setNoPerson();","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"rebeccalaujx"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"rebeccalaujx"},"content":"        FilteredList\u003cPerson\u003e noPerson \u003d new FilteredList\u003c\u003e(addressBook.getPersonList());","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"rebeccalaujx"},"content":"        noPerson.setPredicate(person -\u003e false);","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(modelManager.getSinglePerson(), noPerson);","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"rebeccalaujx"},"content":"    public void execute_validViewNoEventCommand_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"rebeccalaujx"},"content":"        modelManager.setNoEvent();","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"rebeccalaujx"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"rebeccalaujx"},"content":"        FilteredList\u003cEvent\u003e noEvent \u003d new FilteredList\u003c\u003e(addressBook.getEventList());","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"rebeccalaujx"},"content":"        noEvent.setPredicate(event -\u003e false);","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"rebeccalaujx"},"content":"        assertEquals(modelManager.getSingleEvent(), noEvent);","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"    public void toPersonListTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-18"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-18"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-18"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"        ResidentList listWithName \u003d new ResidentList(\"Alice Pauline, Benson Meier\");","lastModifiedDate":"2021-10-18"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personListWithName \u003d modelManager.toPersonList(listWithName);","lastModifiedDate":"2021-10-18"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personListWithName, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"        ResidentList listWithRoom \u003d new ResidentList(\"A100, A101\");","lastModifiedDate":"2021-10-18"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personListWithRoom \u003d modelManager.toPersonList(listWithRoom);","lastModifiedDate":"2021-10-18"},{"lineNumber":197,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personListWithRoom, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":198,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":199,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"    public void toPersonListTest_fails() throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-26"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-26"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-26"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"        ResidentList listWithName \u003d new ResidentList(\"Alice Pauline, Benson Meier, Jackson\");","lastModifiedDate":"2021-10-26"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e modelManager.toPersonList(listWithName));","lastModifiedDate":"2021-10-26"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":215,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":216,"author":{"gitId":"gordonlzy"},"content":"    public void getCurrentResidentsTest() throws CommandException {","lastModifiedDate":"2021-10-18"},{"lineNumber":217,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-18"},{"lineNumber":218,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":219,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-18"},{"lineNumber":220,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-18"},{"lineNumber":221,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":222,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-18"},{"lineNumber":223,"author":{"gitId":"gordonlzy"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-18"},{"lineNumber":224,"author":{"gitId":"gordonlzy"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-18"},{"lineNumber":225,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":226,"author":{"gitId":"gordonlzy"},"content":"        ResidentList list \u003d new ResidentList(\"Alice Pauline, Benson Meier\",","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"gordonlzy"},"content":"                ALICE.toString() + \", \" + BENSON.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e personList \u003d modelManager.getCurrentEventResidents(list);","lastModifiedDate":"2021-10-18"},{"lineNumber":229,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(personList, expected);","lastModifiedDate":"2021-10-18"},{"lineNumber":230,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":231,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":232,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":233,"author":{"gitId":"VimuthM"},"content":"    public void getCurrentResidentsTest_fails() throws CommandException {","lastModifiedDate":"2021-10-26"},{"lineNumber":234,"author":{"gitId":"VimuthM"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-26"},{"lineNumber":235,"author":{"gitId":"VimuthM"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":236,"author":{"gitId":"VimuthM"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-26"},{"lineNumber":237,"author":{"gitId":"VimuthM"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-26"},{"lineNumber":238,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":239,"author":{"gitId":"VimuthM"},"content":"        ArrayList\u003cPerson\u003e expected \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":240,"author":{"gitId":"VimuthM"},"content":"        expected.add(ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":241,"author":{"gitId":"VimuthM"},"content":"        expected.add(BENSON);","lastModifiedDate":"2021-10-26"},{"lineNumber":242,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":243,"author":{"gitId":"VimuthM"},"content":"        ResidentList list \u003d new ResidentList(\"Alice Pauline, Benson Meier, Jackson\");","lastModifiedDate":"2021-10-26"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"        assertThrows(CommandException.class, () -\u003e modelManager.getCurrentEventResidents(list));","lastModifiedDate":"2021-10-26"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":246,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"    public void getEventSuccess() throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withEvent(BASKETBALL).withEvent(VOLLEYBALL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-24"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-24"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"        EventName basketballEvent \u003d new EventName(\"basketball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"        Event foundBasketball \u003d modelManager.getEvent(basketballEvent);","lastModifiedDate":"2021-10-24"},{"lineNumber":255,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(foundBasketball, BASKETBALL);","lastModifiedDate":"2021-10-24"},{"lineNumber":256,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":257,"author":{"gitId":"gordonlzy"},"content":"        EventName volleyballEvent \u003d new EventName(\"volleyball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":258,"author":{"gitId":"gordonlzy"},"content":"        Event foundVolleyball \u003d modelManager.getEvent(volleyballEvent);","lastModifiedDate":"2021-10-24"},{"lineNumber":259,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(foundVolleyball, VOLLEYBALL);","lastModifiedDate":"2021-10-24"},{"lineNumber":260,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":261,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":262,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":263,"author":{"gitId":"gordonlzy"},"content":"    public void getEventFailure() {","lastModifiedDate":"2021-10-18"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withEvent(BASKETBALL).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-24"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-24"},{"lineNumber":267,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"        EventName volleyballEvent \u003d new EventName(\"volleyball\");","lastModifiedDate":"2021-10-18"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(CommandException.class, () -\u003e modelManager.getEvent(volleyballEvent));","lastModifiedDate":"2021-10-24"},{"lineNumber":270,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":271,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":272,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":273,"author":{"gitId":"gordonlzy"},"content":"    public void getInvalidResident_invalidFound() throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":274,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-24"},{"lineNumber":275,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":276,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-24"},{"lineNumber":277,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-24"},{"lineNumber":278,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":279,"author":{"gitId":"gordonlzy"},"content":"        EventBuilder eventBuilder \u003d new EventBuilder();","lastModifiedDate":"2021-10-24"},{"lineNumber":280,"author":{"gitId":"gordonlzy"},"content":"        Event event \u003d eventBuilder.withResidentList(ALICE.getName().toString(), ALICE.toString()).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":281,"author":{"gitId":"gordonlzy"},"content":"        String result \u003d modelManager.getInvalidResident(event);","lastModifiedDate":"2021-10-24"},{"lineNumber":282,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, \"\");","lastModifiedDate":"2021-10-24"},{"lineNumber":283,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":284,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":285,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":286,"author":{"gitId":"gordonlzy"},"content":"    public void getInvalidResident_invalidNotFound() throws CommandException {","lastModifiedDate":"2021-10-24"},{"lineNumber":287,"author":{"gitId":"gordonlzy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)","lastModifiedDate":"2021-10-24"},{"lineNumber":288,"author":{"gitId":"gordonlzy"},"content":"                .withPerson(BENSON).withPerson(CARL).build();","lastModifiedDate":"2021-10-24"},{"lineNumber":289,"author":{"gitId":"gordonlzy"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-10-24"},{"lineNumber":290,"author":{"gitId":"gordonlzy"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2021-10-24"},{"lineNumber":291,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":292,"author":{"gitId":"gordonlzy"},"content":"        EventBuilder eventBuilder \u003d new EventBuilder();","lastModifiedDate":"2021-10-24"},{"lineNumber":293,"author":{"gitId":"gordonlzy"},"content":"        Event event \u003d eventBuilder.withResidentList(\"John\", \"John; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":294,"author":{"gitId":"gordonlzy"},"content":"                + \"Room: C111; Phone: 91031280; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":295,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lijohn@example.com; Vaccinated: T; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":296,"author":{"gitId":"gordonlzy"},"content":"                + \"Faculty: SDE; Last Fet Date: 02-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":297,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 01-10-2021\").build();","lastModifiedDate":"2021-10-26"},{"lineNumber":298,"author":{"gitId":"gordonlzy"},"content":"        String result \u003d modelManager.getInvalidResident(event);","lastModifiedDate":"2021-10-24"},{"lineNumber":299,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(result, \"John\");","lastModifiedDate":"2021-10-24"},{"lineNumber":300,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"rebeccalaujx":38,"gordonlzy":102,"VimuthM":38,"-":123}},{"path":"src/test/java/safeforhall/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"VimuthM":2,"-":19}},{"path":"src/test/java/safeforhall/model/event/CapacityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"public class CapacityTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Capacity(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    public void constructor_invalidCapacity_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"        String invalidCapacity \u003d \"\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Capacity(invalidCapacity));","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public void isValidCapacity() {","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        // null capacity","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Capacity.isValidCapacity(null));","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        // blank capacity","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Capacity.isValidCapacity(\"\")); // empty string","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Capacity.isValidCapacity(\" \")); // spaces only","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"        // invalid capacity","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Capacity.isValidCapacity(\"-1\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Capacity.isValidCapacity(\"0\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Capacity.isValidCapacity(\"3.5\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        // valid capacity","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(Capacity.isValidCapacity(\"1\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(Capacity.isValidCapacity(\"3\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(Capacity.isValidCapacity(\"300\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        assertTrue(Capacity.isValidCapacity(\"1000\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        Capacity c1 \u003d new Capacity(\"5\");","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        Capacity c2 \u003d new Capacity(\"10\");","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"        Capacity c3 \u003d new Capacity(\"5\");","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(c1.compareTo(c2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(c2.compareTo(c1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(c3.compareTo(c1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"chongjunwei":39,"VimuthM":3,"jaredlhf":12}},{"path":"src/test/java/safeforhall/model/event/EventDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"public class EventDateTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventDate(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public void isValidEventDate() {","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"        // null dates","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventDate(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"        // invalid dates","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(EventDate.isValidEventDate(\"\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"        // valid dates","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(EventDate.isValidEventDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(EventDate.isValidEventDate(\"10.10.2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(EventDate.isValidEventDate(\"10/10/2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":31,"author":{"gitId":"jaredlhf"},"content":"    public void isPast() {","lastModifiedDate":"2021-10-27"},{"lineNumber":32,"author":{"gitId":"jaredlhf"},"content":"        EventDate past \u003d new EventDate(\"01-01-2021\");","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(past.isPast());","lastModifiedDate":"2021-10-27"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"        EventDate past2 \u003d new EventDate(\"10-12-2000\");","lastModifiedDate":"2021-10-27"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(past2.isPast());","lastModifiedDate":"2021-10-27"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        EventDate e1 \u003d new EventDate(\"01-10-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"        EventDate e2 \u003d new EventDate(\"03-10-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        EventDate e3 \u003d new EventDate(\"01-10-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e1.compareTo(e2), -2);","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e2.compareTo(e1), 2);","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e3.compareTo(e1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"chongjunwei":26,"gordonlzy":2,"jaredlhf":21}},{"path":"src/test/java/safeforhall/model/event/EventNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"rebeccalaujx"},"content":"import java.util.List;","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"public class EventNameContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"    public void equals() {","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"        EventNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"        EventNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"                new EventNameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        EventNameContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-10-25"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"    //TODO","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"        // One keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"        EventNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"Football\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        // Multiple keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Football\", \"Swim\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Football\", \"Basketball\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"fooTbAll\", \"swIM\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new EventBuilder().withEventName(\"Football Swim\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    @Test","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        // Zero keywords","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"        EventNameContainsKeywordsPredicate predicate \u003d new EventNameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-10-25"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Swim\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football Basketball\").build()));","lastModifiedDate":"2021-10-20"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        // Keywords match phone, email, but does not match name","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"20-10-2021\", \"Field\", \"20\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new EventBuilder().withEventName(\"Football Training\").withEventDate(\"20-10-2021\")","lastModifiedDate":"2021-10-20"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"                .withVenue(\"Field\").withCapacity(\"20\").build()));","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":60,"chongjunwei":15,"gordonlzy":7}},{"path":"src/test/java/safeforhall/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-27"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_CAPACITY_BASKETBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_DATE_VOLLEYBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_VOLLEYBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_BASKETBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VENUE_FOOTBALL_TRAINING;","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.DANCE;","lastModifiedDate":"2021-10-27"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.SWIM;","lastModifiedDate":"2021-10-27"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalEvents.VOLLEYBALL;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-27"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"public class EventTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public void isSameEvent() {","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BASKETBALL.isSameEvent(BASKETBALL));","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.isSameEvent(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        Event editedBasketball \u003d new EventBuilder(BASKETBALL).withCapacity(VALID_CAPACITY_BASKETBALL)","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"                .withVenue(VALID_VENUE_BASKETBALL)","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"                .build();","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BASKETBALL.isSameEvent(editedBasketball));","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        Event editedVolleyball \u003d new EventBuilder(VOLLEYBALL)","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                .withEventName(VALID_NAME_VOLLEYBALL.toLowerCase()).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(VOLLEYBALL.isSameEvent(editedVolleyball));","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        editedBasketball \u003d new EventBuilder(BASKETBALL).withEventName(VALID_NAME_VOLLEYBALL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.isSameEvent(editedBasketball));","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_VOLLEYBALL + \" \";","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        editedVolleyball \u003d new EventBuilder(VOLLEYBALL).withEventName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(VOLLEYBALL.isSameEvent(editedVolleyball));","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public void hasUnvaccinatedResident() {","lastModifiedDate":"2021-10-27"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        // vaccinated","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(BASKETBALL.hasUnvaccinatedResident());","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        // non-vaccinated","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(SWIM.hasUnvaccinatedResident());","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    public void numOfUnvaccinatedResidents() {","lastModifiedDate":"2021-10-27"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(0, BASKETBALL.numOfUnvaccinatedResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(1, SWIM.numOfUnvaccinatedResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(2, DANCE.numOfUnvaccinatedResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    public void isOver() {","lastModifiedDate":"2021-10-27"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(BASKETBALL.isOver());","lastModifiedDate":"2021-10-27"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"        assertTrue(SWIM.isOver());","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    public void equals() {","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        Event basketballCopy \u003d new EventBuilder(BASKETBALL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BASKETBALL.equals(basketballCopy));","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BASKETBALL.equals(BASKETBALL));","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(5));","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(VOLLEYBALL));","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"        Event editedBasketball \u003d new EventBuilder(BASKETBALL).withEventName(VALID_NAME_VOLLEYBALL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(editedBasketball));","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"        editedBasketball \u003d new EventBuilder(BASKETBALL).withEventDate(VALID_DATE_VOLLEYBALL).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(editedBasketball));","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"        editedBasketball \u003d new EventBuilder(BASKETBALL).withVenue(VALID_VENUE_FOOTBALL_TRAINING).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(BASKETBALL.equals(editedBasketball));","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"    public void test_hasNoResidents_success() {","lastModifiedDate":"2021-10-27"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"        Event editedBasketball \u003d new EventBuilder(BASKETBALL).withCapacity(VALID_CAPACITY_BASKETBALL)","lastModifiedDate":"2021-10-27"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"                .withVenue(VALID_VENUE_BASKETBALL)","lastModifiedDate":"2021-10-27"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"                .withResidentList(TypicalPersons.GEORGE.getName().toString(), TypicalPersons.GEORGE.toString())","lastModifiedDate":"2021-10-27"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-27"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"        assertFalse(editedBasketball.hasNoResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"        editedBasketball \u003d new EventBuilder(BASKETBALL).withCapacity(VALID_CAPACITY_BASKETBALL)","lastModifiedDate":"2021-10-27"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"                .withVenue(VALID_VENUE_BASKETBALL)","lastModifiedDate":"2021-10-27"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"                .withResidentList(ResidentList.DEFAULT_LIST, ResidentList.DEFAULT_LIST)","lastModifiedDate":"2021-10-27"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-27"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"        assertTrue(editedBasketball.hasNoResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":120,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":123,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() throws Exception {","lastModifiedDate":"2021-10-27"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            Event editedBasketball \u003d new EventBuilder(BASKETBALL).withEventDate(VALID_DATE_VOLLEYBALL).build();","lastModifiedDate":"2021-10-27"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"            editedBasketball.hashCode();","lastModifiedDate":"2021-10-27"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            throw new NoSuchMethodException(\"hashCode not overridden\");","lastModifiedDate":"2021-10-27"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"gordonlzy":77,"VimuthM":26,"jaredlhf":28}},{"path":"src/test/java/safeforhall/model/event/ResidentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"public class ResidentListTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ResidentList(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_nameRoomConflict_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ResidentList(\"Peter, a213\")); // name and room","lastModifiedDate":"2021-11-05"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"    public void isValidResidentList() throws ParseException {","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        // null residentList","lastModifiedDate":"2021-11-05"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ResidentList.isValidResidentList(null));","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        // invalid residentList","lastModifiedDate":"2021-11-05"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentList(\"\")); // empty string","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentList(\" \")); // spaces only","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentList(\"a213 b423\")); // no comma between information","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        // valid residentList","lastModifiedDate":"2021-11-05"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(ResidentList.DEFAULT_LIST)); // default no residents string","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack\")); // alphabets only","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack, Capital Tan\")); // more than one name","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"peter jack,Capital Tan\")); // comma no space","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"a213\")); // rooms only","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"A213\")); // rooms capital","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentList(\"A213, b423\")); // more than one room","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    public void hasUnvaccinatedResident() {","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        ResidentList emptyResidentList \u003d new ResidentList(ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-11-05"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"        assertFalse(emptyResidentList.hasUnvaccinatedResident());","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-27"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    public void numOfUnvaccinatedResidents() {","lastModifiedDate":"2021-10-27"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        ResidentList residentList \u003d new ResidentList(ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-27"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(0, residentList.numOfUnvaccinatedResidents());","lastModifiedDate":"2021-10-27"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-27"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-27"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"    public void isValidResidentStorage() {","lastModifiedDate":"2021-11-05"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"        // null residentStorage","lastModifiedDate":"2021-11-05"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ResidentList.isValidResidentStorage(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        // invalid residentStorage","lastModifiedDate":"2021-11-05"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentStorage(\"\")); // empty string","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentStorage(\" \")); // spaces only","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentStorage(\"David Li; Room: C112; Phone: 91031282; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lidavid@example.com; Vaccinated: T; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"                + \"Faculty: SDE; Last Fet Date: 02-10-2021;\")); // missing a field","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(ResidentList.isValidResidentStorage(\"Alex Yeoh; Room: E417; Phone: 87438807; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: alexyeoh@example.com; Vaccinated: T; Faculty: SOC; Last Fet Date: 01-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 10-10-2021 Bernice Yu; Room: A213; Phone: 99272758; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: berniceyu@example.com; Vaccinated: F; Faculty: FASS; Last Fet Date: 10-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 11-10-2021peter jack,Capital Tan\")); // no comma between information","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"        // valid residentStorage","lastModifiedDate":"2021-11-05"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"None\")); // default no residents string","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"David Li; Room: C112; Phone: 91031282; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lidavid@example.com; Vaccinated: T; Faculty: SDE; Last Fet Date: 02-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 01-10-2021\")); // single entry","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"Alex Yeoh; Room: E417; Phone: 87438807; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: alexyeoh@example.com; Vaccinated: T; Faculty: SOC; Last Fet Date: 01-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 10-10-2021, Bernice Yu; Room: A213; Phone: 99272758; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: berniceyu@example.com; Vaccinated: F; Faculty: FASS; Last Fet Date: 10-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 11-10-2021, David Li; Room: C112; Phone: 91031282; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lidavid@example.com; Vaccinated: T; Faculty: SDE; Last Fet Date: 02-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 01-10-2021\")); // multiple entries","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"david li; room: C112; phone: 91031282; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lidavid@example.com; vaccinated: T; faculty: SDE; last fet date: 02-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"                + \"last collection date: 01-10-2021\")); // in lower case","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"Alex Yeoh; Room: E417; Phone: 87438807; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: alexyeoh@example.com; Vaccinated: T; Faculty: SOC; Last Fet Date: 01-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 10-10-2021,Bernice Yu; Room: A213; Phone: 99272758; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: berniceyu@example.com; Vaccinated: F; Faculty: FASS; Last Fet Date: 10-10-2021; \"","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 11-10-2021\")); // comma no space","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ResidentList.isValidResidentStorage(\"David Li;Room:C112;Phone:91031282;\"","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"                + \"Email: lidavid@example.com;Vaccinated:T;Faculty:SDE;Last Fet Date: 02-10-2021;\"","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"                + \"Last Collection Date: 01-10-2021\")); // colon and semicolon no space","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public void getCombinedStorageStringTest() {","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residentList \u003d new ResidentList(ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(TypicalPersons.ALICE);","lastModifiedDate":"2021-10-26"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"        // empty current, one person in toAdd","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"        String combinedString \u003d residentList.getCombinedStorageString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, TypicalPersons.ALICE.toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        // empty current, multiple persons in toAdd","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(TypicalPersons.BOB);","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(TypicalPersons.CARL);","lastModifiedDate":"2021-10-26"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getCombinedStorageString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"        String expectedString \u003d TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, expectedString);","lastModifiedDate":"2021-10-26"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":124,"author":{"gitId":"gordonlzy"},"content":"        // current not empty","lastModifiedDate":"2021-10-26"},{"lineNumber":125,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(TypicalPersons.ELLE.getName().toString(), TypicalPersons.ELLE.toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":126,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getCombinedStorageString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":127,"author":{"gitId":"gordonlzy"},"content":"        expectedString \u003d TypicalPersons.ELLE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":128,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":131,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":132,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":133,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":134,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, expectedString);","lastModifiedDate":"2021-10-26"},{"lineNumber":135,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":136,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"gordonlzy"},"content":"    public void getCombinedDisplayStringTest() {","lastModifiedDate":"2021-10-26"},{"lineNumber":139,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residentList \u003d new ResidentList(ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-26"},{"lineNumber":140,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toAdd \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-26"},{"lineNumber":141,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"        // empty current, no one added","lastModifiedDate":"2021-11-05"},{"lineNumber":143,"author":{"gitId":"gordonlzy"},"content":"        String combinedString \u003d residentList.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"        assertEquals(combinedString, ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-11-05"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"        // empty current, one person in toAdd","lastModifiedDate":"2021-11-05"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"        toAdd.add(TypicalPersons.ALICE);","lastModifiedDate":"2021-11-05"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"        combinedString \u003d residentList.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-11-05"},{"lineNumber":149,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, TypicalPersons.ALICE.getName().toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":150,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":151,"author":{"gitId":"gordonlzy"},"content":"        // empty current, multiple persons in toAdd","lastModifiedDate":"2021-10-26"},{"lineNumber":152,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(TypicalPersons.BOB);","lastModifiedDate":"2021-10-26"},{"lineNumber":153,"author":{"gitId":"gordonlzy"},"content":"        toAdd.add(TypicalPersons.CARL);","lastModifiedDate":"2021-10-26"},{"lineNumber":154,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":155,"author":{"gitId":"gordonlzy"},"content":"        String expectedString \u003d TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":156,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":157,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":158,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":159,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.getName().toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":160,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, expectedString);","lastModifiedDate":"2021-10-26"},{"lineNumber":161,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":162,"author":{"gitId":"gordonlzy"},"content":"        // current not empty","lastModifiedDate":"2021-10-26"},{"lineNumber":163,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(TypicalPersons.ELLE.getName().toString(), TypicalPersons.ELLE.toString());","lastModifiedDate":"2021-10-26"},{"lineNumber":164,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getCombinedDisplayString(toAdd);","lastModifiedDate":"2021-10-26"},{"lineNumber":165,"author":{"gitId":"gordonlzy"},"content":"        expectedString \u003d TypicalPersons.ELLE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":166,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":167,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":168,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":169,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":170,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-26"},{"lineNumber":171,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.getName().toString();","lastModifiedDate":"2021-10-26"},{"lineNumber":172,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, expectedString);","lastModifiedDate":"2021-10-26"},{"lineNumber":173,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":174,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"gordonlzy"},"content":"    public void getRemovedStorageStringTest() {","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residentList \u003d new ResidentList(TypicalPersons.ALICE.getName().toString(),","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"gordonlzy"},"content":"                TypicalPersons.ALICE.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"gordonlzy"},"content":"        toRemove.add(TypicalPersons.ALICE);","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"gordonlzy"},"content":"        // one resident in current, remove one of them","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"gordonlzy"},"content":"        String combinedString \u003d residentList.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"gordonlzy"},"content":"        // two residents in current, remove one of them","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"gordonlzy"},"content":"        String constructorString1 \u003d TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"gordonlzy"},"content":"        String constructorString2 \u003d TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, TypicalPersons.BOB.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"        // three residents in current, remove one of them","lastModifiedDate":"2021-11-05"},{"lineNumber":198,"author":{"gitId":"gordonlzy"},"content":"        constructorString1 \u003d TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.getName().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"gordonlzy"},"content":"        constructorString2 \u003d TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-11-05"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"        combinedString \u003d residentList.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-11-05"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"        assertEquals(combinedString, TypicalPersons.BOB.toString() + \", \"","lastModifiedDate":"2021-11-05"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"                + TypicalPersons.CARL.toString());","lastModifiedDate":"2021-11-05"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"        // three residents in current, remove three of them","lastModifiedDate":"2021-11-05"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"        toRemove.add(TypicalPersons.BOB);","lastModifiedDate":"2021-11-05"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"        toRemove.add(TypicalPersons.CARL);","lastModifiedDate":"2021-11-05"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":217,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getRemovedStorageString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"gordonlzy"},"content":"    public void getRemovedDisplayStringTest() {","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"gordonlzy"},"content":"        ResidentList residentList \u003d new ResidentList(TypicalPersons.ALICE.getName().toString(),","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"gordonlzy"},"content":"                TypicalPersons.ALICE.toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"gordonlzy"},"content":"        ArrayList\u003cPerson\u003e toRemove \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"gordonlzy"},"content":"        toRemove.add(TypicalPersons.ALICE);","lastModifiedDate":"2021-10-25"},{"lineNumber":228,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":229,"author":{"gitId":"gordonlzy"},"content":"        // one resident in current, remove one of them","lastModifiedDate":"2021-10-25"},{"lineNumber":230,"author":{"gitId":"gordonlzy"},"content":"        String combinedString \u003d residentList.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":231,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-25"},{"lineNumber":232,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":233,"author":{"gitId":"gordonlzy"},"content":"        // two residents in current, remove one of them","lastModifiedDate":"2021-10-25"},{"lineNumber":234,"author":{"gitId":"gordonlzy"},"content":"        String constructorString1 \u003d TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":235,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":236,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":237,"author":{"gitId":"gordonlzy"},"content":"        String constructorString2 \u003d TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":238,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":239,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":240,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-10-25"},{"lineNumber":241,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":242,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, TypicalPersons.BOB.getName().toString());","lastModifiedDate":"2021-10-25"},{"lineNumber":243,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":244,"author":{"gitId":"VimuthM"},"content":"        // three residents in current, remove one of them","lastModifiedDate":"2021-11-05"},{"lineNumber":245,"author":{"gitId":"gordonlzy"},"content":"        constructorString1 \u003d TypicalPersons.ALICE.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.getName().toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.getName().toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"gordonlzy"},"content":"        constructorString2 \u003d TypicalPersons.ALICE.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.BOB.toString()","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"gordonlzy"},"content":"                + \", \"","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"gordonlzy"},"content":"                + TypicalPersons.CARL.toString();","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"VimuthM"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-11-05"},{"lineNumber":256,"author":{"gitId":"VimuthM"},"content":"        combinedString \u003d residentList.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-11-05"},{"lineNumber":257,"author":{"gitId":"VimuthM"},"content":"        assertEquals(combinedString, TypicalPersons.BOB.getName().toString() + \", \"","lastModifiedDate":"2021-11-05"},{"lineNumber":258,"author":{"gitId":"VimuthM"},"content":"                + TypicalPersons.CARL.getName().toString());","lastModifiedDate":"2021-11-05"},{"lineNumber":259,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":260,"author":{"gitId":"VimuthM"},"content":"        // three residents in current, remove three of them","lastModifiedDate":"2021-11-05"},{"lineNumber":261,"author":{"gitId":"VimuthM"},"content":"        toRemove.add(TypicalPersons.BOB);","lastModifiedDate":"2021-11-05"},{"lineNumber":262,"author":{"gitId":"VimuthM"},"content":"        toRemove.add(TypicalPersons.CARL);","lastModifiedDate":"2021-11-05"},{"lineNumber":263,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":264,"author":{"gitId":"gordonlzy"},"content":"        residentList \u003d new ResidentList(constructorString1, constructorString2);","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"gordonlzy"},"content":"        combinedString \u003d residentList.getRemovedDisplayString(toRemove);","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(combinedString, ResidentList.DEFAULT_LIST);","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-26"},{"lineNumber":269,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"gordonlzy":230,"VimuthM":26,"jaredlhf":13}},{"path":"src/test/java/safeforhall/model/event/UniqueEventListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-22"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.TypicalEvents.BAND;","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.TypicalEvents.VOLLEYBALL;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"import java.util.Collections;","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"import java.util.List;","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.testutil.EventBuilder;","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"public class UniqueEventListTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"    public void contains_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"    public void contains_eventNotInList_returnsFalse() {","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(uniqueEventList.contains(BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"    public void contains_eventInList_returnsTrue() {","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(uniqueEventList.contains(BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":38,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":39,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":40,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":41,"author":{"gitId":"chongjunwei"},"content":"    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-10-22"},{"lineNumber":42,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"        Event editedBand \u003d new EventBuilder(BAND)","lastModifiedDate":"2021-10-22"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"                .build();","lastModifiedDate":"2021-10-22"},{"lineNumber":45,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(uniqueEventList.contains(editedBand));","lastModifiedDate":"2021-10-22"},{"lineNumber":46,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"    public void add_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":50,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.add(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":53,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":54,"author":{"gitId":"chongjunwei"},"content":"    public void add_duplicateEvent_throwsDuplicateEventException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.add(BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_nullTargetEvent_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvent(null, BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":63,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":64,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":65,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_nullEditedEvent_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvent(BAND, null));","lastModifiedDate":"2021-10-22"},{"lineNumber":67,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e uniqueEventList.setEvent(BAND, BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_editedEventIsSameEvent_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.setEvent(BAND, BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        expectedUniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_editedEventHasSameIdentity_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"        Event editedBand \u003d new EventBuilder(BAND)","lastModifiedDate":"2021-10-22"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"                .build();","lastModifiedDate":"2021-10-22"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.setEvent(BAND, editedBand);","lastModifiedDate":"2021-10-22"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"        expectedUniqueEventList.add(editedBand);","lastModifiedDate":"2021-10-22"},{"lineNumber":91,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":92,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":93,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_editedEventHasDifferentIdentity_success() {","lastModifiedDate":"2021-10-22"},{"lineNumber":96,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":97,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.setEvent(BAND, VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":99,"author":{"gitId":"chongjunwei"},"content":"        expectedUniqueEventList.add(VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":100,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":101,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":104,"author":{"gitId":"chongjunwei"},"content":"    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":105,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":106,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":107,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.setEvent(BAND, VOLLEYBALL));","lastModifiedDate":"2021-10-22"},{"lineNumber":108,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":109,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":110,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"    public void remove_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.remove(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":113,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":114,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":115,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":116,"author":{"gitId":"chongjunwei"},"content":"    public void remove_eventDoesNotExist_throwsEventNotFoundException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":117,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e uniqueEventList.remove(BAND));","lastModifiedDate":"2021-10-22"},{"lineNumber":118,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":121,"author":{"gitId":"chongjunwei"},"content":"    public void remove_existingEvent_removesEvent() {","lastModifiedDate":"2021-10-22"},{"lineNumber":122,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":123,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.remove(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":124,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":125,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":126,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":127,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents_nullUniqueEventList_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":130,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((UniqueEventList) null));","lastModifiedDate":"2021-10-22"},{"lineNumber":131,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":132,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":133,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":134,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {","lastModifiedDate":"2021-10-22"},{"lineNumber":135,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"        expectedUniqueEventList.add(VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":138,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.setEvents(expectedUniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":139,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":140,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":141,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":142,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":143,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":144,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents((List\u003cEvent\u003e) null));","lastModifiedDate":"2021-10-22"},{"lineNumber":145,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":146,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":147,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":148,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-10-22"},{"lineNumber":149,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.add(BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":150,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e eventList \u003d Collections.singletonList(VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":151,"author":{"gitId":"chongjunwei"},"content":"        uniqueEventList.setEvents(eventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":152,"author":{"gitId":"chongjunwei"},"content":"        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2021-10-22"},{"lineNumber":153,"author":{"gitId":"chongjunwei"},"content":"        expectedUniqueEventList.add(VOLLEYBALL);","lastModifiedDate":"2021-10-22"},{"lineNumber":154,"author":{"gitId":"chongjunwei"},"content":"        assertEquals(expectedUniqueEventList, uniqueEventList);","lastModifiedDate":"2021-10-22"},{"lineNumber":155,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":156,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":157,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":158,"author":{"gitId":"chongjunwei"},"content":"    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":159,"author":{"gitId":"chongjunwei"},"content":"        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(BAND, BAND);","lastModifiedDate":"2021-10-22"},{"lineNumber":160,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(DuplicateEventException.class, () -\u003e uniqueEventList.setEvents(listWithDuplicateEvents));","lastModifiedDate":"2021-10-22"},{"lineNumber":161,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":162,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":163,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":164,"author":{"gitId":"chongjunwei"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":165,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-10-22"},{"lineNumber":166,"author":{"gitId":"chongjunwei"},"content":"            -\u003e uniqueEventList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-10-22"},{"lineNumber":167,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":168,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"chongjunwei":168}},{"path":"src/test/java/safeforhall/model/event/VenueTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chongjunwei"},"content":"package safeforhall.model.event;","lastModifiedDate":"2021-10-22"},{"lineNumber":2,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-22"},{"lineNumber":5,"author":{"gitId":"chongjunwei"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-22"},{"lineNumber":6,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-22"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-22"},{"lineNumber":9,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":10,"author":{"gitId":"chongjunwei"},"content":"public class VenueTest {","lastModifiedDate":"2021-10-22"},{"lineNumber":11,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":12,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":13,"author":{"gitId":"chongjunwei"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Venue(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":15,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":16,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"    public void constructor_invalidVenue_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-22"},{"lineNumber":19,"author":{"gitId":"chongjunwei"},"content":"        String invalidVenue \u003d \"\";","lastModifiedDate":"2021-10-22"},{"lineNumber":20,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Venue(invalidVenue));","lastModifiedDate":"2021-10-22"},{"lineNumber":21,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":23,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-22"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    public void isValidVenue() {","lastModifiedDate":"2021-10-22"},{"lineNumber":25,"author":{"gitId":"chongjunwei"},"content":"        // null venue","lastModifiedDate":"2021-10-22"},{"lineNumber":26,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(NullPointerException.class, () -\u003e Venue.isValidVenue(null));","lastModifiedDate":"2021-10-22"},{"lineNumber":27,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":28,"author":{"gitId":"chongjunwei"},"content":"        // invalid venue","lastModifiedDate":"2021-10-22"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Venue.isValidVenue(\"\")); // empty string","lastModifiedDate":"2021-10-22"},{"lineNumber":30,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Venue.isValidVenue(\" \")); // spaces only","lastModifiedDate":"2021-10-22"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"        assertFalse(Venue.isValidVenue(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-10-22"},{"lineNumber":32,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-22"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        // valid venue","lastModifiedDate":"2021-10-22"},{"lineNumber":34,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(Venue.isValidVenue(\"Football training\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        assertTrue(Venue.isValidVenue(\"Frisbee training\"));","lastModifiedDate":"2021-10-22"},{"lineNumber":36,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-22"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        Venue v1 \u003d new Venue(\"A\");","lastModifiedDate":"2021-11-03"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"        Venue v2 \u003d new Venue(\"B\");","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"        Venue v3 \u003d new Venue(\"a\");","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(v1.compareTo(v2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(v2.compareTo(v1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(v3.compareTo(v1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"chongjunwei"},"content":"}","lastModifiedDate":"2021-10-22"}],"authorContributionMap":{"chongjunwei":36,"jaredlhf":12}},{"path":"src/test/java/safeforhall/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"            new Email(\"e1234567@u.nus.edu\").hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":80,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"        Email e1 \u003d new Email(\"abc@gmail.com\");","lastModifiedDate":"2021-11-03"},{"lineNumber":83,"author":{"gitId":"jaredlhf"},"content":"        Email e2 \u003d new Email(\"bcd@gmai.com\");","lastModifiedDate":"2021-11-03"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"        Email e3 \u003d new Email(\"abc@gmail.com\");","lastModifiedDate":"2021-11-03"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e1.compareTo(e2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":87,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e2.compareTo(e1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(e3.compareTo(e1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"VimuthM":12,"-":66,"jaredlhf":12}},{"path":"src/test/java/safeforhall/model/person/EventNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"public class EventNameContainsKeywordsPredicateTest {","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"        // Keywords match phone, email, but does not match name","lastModifiedDate":"2021-10-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"123456\")","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"                .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-10-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"chongjunwei":1,"VimuthM":5,"-":69}},{"path":"src/test/java/safeforhall/model/person/FacultyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-26"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-26"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"public class FacultyTest {","lastModifiedDate":"2021-10-26"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Faculty(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    public void constructor_invalidFaculty_throwsIllegalArgumentException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        String invalidName \u003d \"%aas\";","lastModifiedDate":"2021-10-26"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"    public void isValidFaculty() {","lastModifiedDate":"2021-10-26"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        // null name","lastModifiedDate":"2021-10-26"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"        assertThrows(NullPointerException.class, () -\u003e Faculty.isValidFaculty(null));","lastModifiedDate":"2021-10-26"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        // invalid name","lastModifiedDate":"2021-10-26"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"\")); // empty string","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\" \")); // spaces only","lastModifiedDate":"2021-10-26"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-10-26"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-10-26"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"12345\")); // numbers only","lastModifiedDate":"2021-10-26"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Faculty.isValidFaculty(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        // valid name","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        assertTrue(Faculty.isValidFaculty(\"SoC\")); // alphabets only","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"        assertTrue(Faculty.isValidFaculty(\"Fass\")); // with capital letters","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"            new Faculty(\"SoC\").hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        Faculty f1 \u003d new Faculty(\"ABC\");","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Faculty f2 \u003d new Faculty(\"BCD\");","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        Faculty f3 \u003d new Faculty(\"ABC\");","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(f1.compareTo(f2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(f2.compareTo(f1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(f3.compareTo(f1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-26"}],"authorContributionMap":{"VimuthM":49,"jaredlhf":12}},{"path":"src/test/java/safeforhall/model/person/LastDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-02"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"public class LastDateTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LastDate(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"    public void isValidDate() {","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        // null dates","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"        assertThrows(NullPointerException.class, () -\u003e new LastDate(null));","lastModifiedDate":"2021-10-10"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        // invalid dates","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"        //assertFalse(LastDate.isValidDate(\"\"));","lastModifiedDate":"2021-10-13"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"9-9-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isValidDate(\"19-9-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"        // valid dates","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isValidDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isValidDate(\"10.10.2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isValidDate(\"10/10/2021\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"    public void isFutureDate() {","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isFutureDate(LastDate.DEFAULT_DATE)); // default lastDate","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isFutureDate(LocalDate.now().format(formatter))); // current date","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isFutureDate(LocalDate.now().minusDays(1).format(formatter))); // a day before current date","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(LastDate.isFutureDate(\"10-10-2020\")); // current date","lastModifiedDate":"2021-11-02"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isFutureDate(LocalDate.now().plusDays(1).format(formatter))); // a day after current date","lastModifiedDate":"2021-11-02"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(LastDate.isFutureDate(\"10-10-2022\")); // a day after current date","lastModifiedDate":"2021-11-02"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    public void returnsDateWhenEmpty_success() {","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"        LastDate date \u003d new LastDate(LastDate.DEFAULT_DATE);","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        assertDoesNotThrow(() -\u003e date.getDeadline());","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        LastDate ld1 \u003d new LastDate(\"10-02-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        LastDate ld2 \u003d new LastDate(\"11-02-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        LastDate ld3 \u003d new LastDate(\"10-02-2020\");","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(ld1.compareTo(ld2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(ld2.compareTo(ld1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(ld3.compareTo(ld1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":46,"VimuthM":6,"jaredlhf":13}},{"path":"src/test/java/safeforhall/model/person/NameMissedDeadlinePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-11"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-11"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-11"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-11"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-11"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"public class NameMissedDeadlinePredicateTest {","lastModifiedDate":"2021-10-11"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeFound_returnsTrue() {","lastModifiedDate":"2021-10-11"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"02-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"02-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"01-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"30-09-2021\").build()));","lastModifiedDate":"2021-11-02"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"30-09-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-11"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeNotFound_returnsFalse() {","lastModifiedDate":"2021-10-11"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"10-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"10-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"09-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"09-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-11"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-11"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"21-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-10-2021\").build()));","lastModifiedDate":"2021-10-12"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-11"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-12"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    public void testGetDeadlinePeriod() {","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"        NameMissedDeadlinePredicate predicate \u003d new NameMissedDeadlinePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(predicate.getDeadlinePeriod(ALICE), 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-12"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"        assertEquals(predicate.getDeadlinePeriod(ALICE), 1);","lastModifiedDate":"2021-10-12"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameMissedDeadlinePredicate(\"c\", new LastDate(LastDate.DEFAULT_DATE));","lastModifiedDate":"2021-11-02"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"        NameMissedDeadlinePredicate finalPredicate \u003d predicate;","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"        assertDoesNotThrow(() -\u003e finalPredicate.getDeadlinePeriod(ALICE));","lastModifiedDate":"2021-10-26"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-12"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-11"}],"authorContributionMap":{"gordonlzy":61,"VimuthM":4}},{"path":"src/test/java/safeforhall/model/person/NameNearLastDatePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-10"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"public class NameNearLastDatePredicateTest {","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeFound_returnsTrue() {","lastModifiedDate":"2021-10-10"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"03-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"04-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withFet(\"05-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(predicate.test(new PersonBuilder().withCollection(\"06-10-2021\").build()));","lastModifiedDate":"2021-10-11"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    @Test","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    public void test_nameWithinRangeNotFound_returnsFalse() {","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        NameNearLastDatePredicate predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"10-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"11-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"10-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"09-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"09-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"f\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withFet(\"14-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        predicate \u003d new NameNearLastDatePredicate(\"c\", new LastDate(\"10-10-2021\"), new LastDate(\"13-10-2021\"));","lastModifiedDate":"2021-10-10"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(predicate.test(new PersonBuilder().withCollection(\"14-09-2021\").build()));","lastModifiedDate":"2021-10-10"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-10"}],"authorContributionMap":{"gordonlzy":52}},{"path":"src/test/java/safeforhall/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        assertFalse(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            new Name(\"Ellie\").hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        Name n1 \u003d new Name(\"ABC\");","lastModifiedDate":"2021-11-03"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        Name n2 \u003d new Name(\"BCD\");","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        Name n3 \u003d new Name(\"ABC\");","lastModifiedDate":"2021-11-03"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(n1.compareTo(n2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(n2.compareTo(n1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(n3.compareTo(n1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"gordonlzy":3,"VimuthM":12,"-":36,"jaredlhf":11}},{"path":"src/test/java/safeforhall/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2021-10-26"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"                .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        // different name, all other attributes same (including room) -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"        // different name, different room all other attributes same -\u003e returns false","lastModifiedDate":"2021-11-02"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withRoom(\"E101\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).withRoom(\"E101\").build();","lastModifiedDate":"2021-11-02"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"    public void checkHashCode() {","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build().hashCode();","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"VimuthM"},"content":"    public void testHasMissedDeadline() {","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"        assertTrue(editedAlice.hasMissedDeadline());","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    public void getMissedDates() {","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-10-26"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        Person finalEditedAlice \u003d editedAlice;","lastModifiedDate":"2021-10-26"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"        assertDoesNotThrow(finalEditedAlice::getMissedDates);","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"        // Has not missed returns -1","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withFet(\"01-01-2100\").build();","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"        assertEquals(-1, editedAlice.getMissedDates());","lastModifiedDate":"2021-10-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"gordonlzy":9,"VimuthM":34,"-":64}},{"path":"src/test/java/safeforhall/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 6 numbers","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        assertTrue(Phone.isValidPhone(\"911119\")); // exactly 6 numbers","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-11-03"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"    public void checkCompareTo() {","lastModifiedDate":"2021-11-03"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        Phone p1 \u003d new Phone(\"123456\");","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"        Phone p2 \u003d new Phone(\"234546\");","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"        Phone p3 \u003d new Phone(\"123456\");","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(p1.compareTo(p2), -1);","lastModifiedDate":"2021-11-03"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(p2.compareTo(p1), 1);","lastModifiedDate":"2021-11-03"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(p3.compareTo(p1), 0);","lastModifiedDate":"2021-11-03"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"VimuthM":7,"-":36,"jaredlhf":9}},{"path":"src/test/java/safeforhall/model/person/RoomValidCheckPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-21"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-21"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-10-21"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-10-21"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-21"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-21"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"public class RoomValidCheckPredicateTest {","lastModifiedDate":"2021-10-21"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND1 \u003d \"AA\";","lastModifiedDate":"2021-10-21"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND2 \u003d \"A12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"    private static final String INVALID_ROOM_FOR_FIND3 \u003d \"12\";","lastModifiedDate":"2021-10-21"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND1 \u003d \"A\";","lastModifiedDate":"2021-10-21"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND3 \u003d \"E200\";","lastModifiedDate":"2021-10-21"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM_FOR_FIND4 \u003d \"2\";","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    public void equals() {","lastModifiedDate":"2021-10-21"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"        String input1 \u003d \"A100\";","lastModifiedDate":"2021-10-21"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        String input2 \u003d \"A1\";","lastModifiedDate":"2021-10-21"},{"lineNumber":26,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate firstPredicate \u003d new RoomValidCheckPredicate(input1);","lastModifiedDate":"2021-10-21"},{"lineNumber":28,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate secondPredicate \u003d new RoomValidCheckPredicate(input2);","lastModifiedDate":"2021-10-21"},{"lineNumber":29,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-10-21"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-10-21"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate firstPredicateCopy \u003d new RoomValidCheckPredicate(input1);","lastModifiedDate":"2021-10-21"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-10-21"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":37,"author":{"gitId":"VimuthM"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":38,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-10-21"},{"lineNumber":39,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-10-21"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-10-21"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-10-21"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"    public void test_validRoomForFind_returnsTrue() {","lastModifiedDate":"2021-10-21"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"        RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A200\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").withRoom(\"e200\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        predicate \u003d new RoomValidCheckPredicate(VALID_ROOM_FOR_FIND4);","lastModifiedDate":"2021-10-26"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").withRoom(\"e200\").build()));","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-10-21"},{"lineNumber":63,"author":{"gitId":"VimuthM"},"content":"    public void test_invalidRoomForFind_throwsException() {","lastModifiedDate":"2021-10-21"},{"lineNumber":64,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":65,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND1);","lastModifiedDate":"2021-10-21"},{"lineNumber":66,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND2);","lastModifiedDate":"2021-10-21"},{"lineNumber":73,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRoom(\"A100\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-21"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"            RoomValidCheckPredicate predicate \u003d new RoomValidCheckPredicate(INVALID_ROOM_FOR_FIND3);","lastModifiedDate":"2021-10-21"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"            assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withRoom(\"A100\").withPhone(\"12345\")","lastModifiedDate":"2021-10-21"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                    .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-10-21"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-10-21"},{"lineNumber":83,"author":{"gitId":"VimuthM"},"content":"            assertEquals(1, 1);","lastModifiedDate":"2021-10-21"},{"lineNumber":84,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-21"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-21"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-21"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-21"}],"authorContributionMap":{"VimuthM":87}},{"path":"src/test/java/safeforhall/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.person;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.PersonBuilder;","lastModifiedDate":"2021-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"VimuthM":9,"-":159}},{"path":"src/test/java/safeforhall/model/util/SampleDataUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.model.util;","lastModifiedDate":"2021-11-05"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-11-05"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-05"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-11-05"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"/**","lastModifiedDate":"2021-11-05"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":" * Class to ensure SampleDataUtil exists and has a method to return a ReadOnlyAddressBook.","lastModifiedDate":"2021-11-05"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":" * The contents of this object is not verified to allow free editing of sample data without","lastModifiedDate":"2021-11-05"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":" * failing the test case.","lastModifiedDate":"2021-11-05"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":" */","lastModifiedDate":"2021-11-05"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"public class SampleDataUtilTest {","lastModifiedDate":"2021-11-05"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-11-05"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"    @Test","lastModifiedDate":"2021-11-05"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"    public void testSampleData() {","lastModifiedDate":"2021-11-05"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-11-05"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"            ReadOnlyAddressBook addressBook \u003d SampleDataUtil.getSampleAddressBook();","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-05"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"            fail();","lastModifiedDate":"2021-11-05"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-11-05"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-11-05"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-11-05"}],"authorContributionMap":{"VimuthM":24}},{"path":"src/test/java/safeforhall/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"chongjunwei"},"content":"import static safeforhall.storage.JsonAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-26"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-24"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.BAND;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-24"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"public class JsonAdaptedEventTest {","lastModifiedDate":"2021-10-18"},{"lineNumber":20,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_EVENTNAME \u003d \" \";","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_EVENTDATE \u003d \"231-31-20322\";","lastModifiedDate":"2021-10-24"},{"lineNumber":22,"author":{"gitId":"chongjunwei"},"content":"    private static final String INVALID_EVENTTIME \u003d \"03\";","lastModifiedDate":"2021-10-26"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_VENUE \u003d \" \";","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_CAPACITY \u003d \"capacity\";","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_RESIDENTS \u003d \"fakename1, ABCD324948\";","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_EVENTNAME \u003d BAND.getEventName().eventName;","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_EVENTDATE \u003d BAND.getEventDate().eventDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":29,"author":{"gitId":"chongjunwei"},"content":"    private static final String VALID_EVENTTIME \u003d BAND.getEventTime().eventTime;","lastModifiedDate":"2021-10-26"},{"lineNumber":30,"author":{"gitId":"jaredlhf"},"content":"    private static final String VALID_VENUE \u003d BAND.getVenue().venue;","lastModifiedDate":"2021-10-24"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_CAPACITY \u003d BAND.getCapacity().inputCapacity;","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_RESIDENTS \u003d BAND.getResidentList().getResidentsStorage();","lastModifiedDate":"2021-10-27"},{"lineNumber":33,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":35,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(BAND);","lastModifiedDate":"2021-10-24"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(BAND, event.toModelType());","lastModifiedDate":"2021-10-24"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":41,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidEventName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":42,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":43,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(INVALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"chongjunwei"},"content":"                        VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d EventName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":47,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":49,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullEventName_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":51,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(null, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":52,"author":{"gitId":"chongjunwei"},"content":"                VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidEventDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(VALID_EVENTNAME, INVALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"                        VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d EventDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullEventDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENTNAME,","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"                null, VALID_EVENTTIME, VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    public void toModelType_invalidEventTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, INVALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"chongjunwei"},"content":"                        VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d EventTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":83,"author":{"gitId":"chongjunwei"},"content":"    @Test","lastModifiedDate":"2021-10-26"},{"lineNumber":84,"author":{"gitId":"chongjunwei"},"content":"    public void toModelType_nullEventTime_throwsIllegalValueException() {","lastModifiedDate":"2021-10-26"},{"lineNumber":85,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENTNAME,","lastModifiedDate":"2021-10-26"},{"lineNumber":86,"author":{"gitId":"chongjunwei"},"content":"                VALID_EVENTDATE, null, VALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventTime.class.getSimpleName());","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"chongjunwei"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-26"},{"lineNumber":89,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":90,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidVenue_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE,","lastModifiedDate":"2021-10-26"},{"lineNumber":95,"author":{"gitId":"chongjunwei"},"content":"                        VALID_EVENTTIME, INVALID_VENUE, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d Venue.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullVenue_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"chongjunwei"},"content":"                null, VALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidCapacity_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"chongjunwei"},"content":"                        VALID_VENUE, INVALID_CAPACITY, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d Capacity.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullCapacity_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":120,"author":{"gitId":"chongjunwei"},"content":"                VALID_VENUE, null, VALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Capacity.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidResidents_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"chongjunwei"},"content":"                new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":129,"author":{"gitId":"chongjunwei"},"content":"                        VALID_VENUE, VALID_CAPACITY, INVALID_RESIDENTS);","lastModifiedDate":"2021-10-26"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d ResidentList.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullResidents_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"chongjunwei"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENTNAME, VALID_EVENTDATE, VALID_EVENTTIME,","lastModifiedDate":"2021-10-26"},{"lineNumber":137,"author":{"gitId":"chongjunwei"},"content":"                VALID_VENUE, VALID_CAPACITY, null);","lastModifiedDate":"2021-10-26"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ResidentList.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":4,"chongjunwei":41,"VimuthM":2,"jaredlhf":95}},{"path":"src/test/java/safeforhall/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-24"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-24"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_ROOM \u003d \" \";","lastModifiedDate":"2021-10-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_VACC \u003d \"fake\";","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FACULTY \u003d \"1234\";","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_FETDATE \u003d \"111/23/090\";","lastModifiedDate":"2021-10-24"},{"lineNumber":27,"author":{"gitId":"jaredlhf"},"content":"    private static final String INVALID_COLLECTIONDATE \u003d \"20-313-4234\";","lastModifiedDate":"2021-10-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_VACC \u003d BENSON.getVaccStatus().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_FACULTY \u003d BENSON.getFaculty().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_FETDATE \u003d BENSON.getLastFetDate().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"VimuthM"},"content":"    private static final String VALID_COLLECTIONDATE \u003d BENSON.getLastCollectionDate().toString();","lastModifiedDate":"2021-10-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":48,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":56,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidRoom_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d Room.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullRoom_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":82,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, null, VALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, null,","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"                VALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidVaccStatus_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"                        INVALID_VACC, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d VaccStatus.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullVaccStatus_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"                null, VALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, VaccStatus.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":127,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":128,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":129,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":130,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidFaculty_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":131,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":132,"author":{"gitId":"jaredlhf"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":133,"author":{"gitId":"jaredlhf"},"content":"                        VALID_VACC, INVALID_FACULTY, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":134,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d Faculty.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":135,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":136,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":137,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":138,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":139,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_nullFaculty_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":140,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":141,"author":{"gitId":"jaredlhf"},"content":"                VALID_VACC, null, VALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":142,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName());","lastModifiedDate":"2021-10-24"},{"lineNumber":143,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":144,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":145,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":146,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":147,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidFetDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":148,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":149,"author":{"gitId":"jaredlhf"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":150,"author":{"gitId":"jaredlhf"},"content":"                        VALID_VACC, VALID_FACULTY, INVALID_FETDATE, VALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":151,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d LastDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":152,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":153,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":154,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":156,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidCollectionDate_throwsIllegalValueException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-10-24"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ROOM, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-10-24"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"                        VALID_VACC, VALID_FACULTY, VALID_FETDATE, INVALID_COLLECTIONDATE);","lastModifiedDate":"2021-10-24"},{"lineNumber":160,"author":{"gitId":"jaredlhf"},"content":"        String expectedMessage \u003d LastDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-10-24"},{"lineNumber":161,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":162,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":163,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":164,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":25,"-":61,"jaredlhf":79}},{"path":"src/test/java/safeforhall/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.BASKETBALL;","lastModifiedDate":"2021-10-24"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.HACKERS;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalEvents.POOL;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-10-24"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-10-24"},{"lineNumber":11,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-10-24"},{"lineNumber":12,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    public void readAddressBook_invalidEventAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidEventAddressBook.json\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"    public void readAddressBook_invalidAndValidEventAddressBook_throwDataConversionException() {","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidEventAddressBook.json\"));","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-10-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2021-10-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2021-10-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"    public void readAndSaveEventAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"jaredlhf"},"content":"        Path filePath \u003d testFolder.resolve(\"TempEventAddressBook.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":105,"author":{"gitId":"jaredlhf"},"content":"        AddressBook original \u003d TypicalEvents.getTypicalAddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":106,"author":{"gitId":"jaredlhf"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":107,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":108,"author":{"gitId":"jaredlhf"},"content":"        // Save in new file and read back","lastModifiedDate":"2021-10-24"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":112,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":113,"author":{"gitId":"jaredlhf"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2021-10-24"},{"lineNumber":114,"author":{"gitId":"jaredlhf"},"content":"        original.addEvent(HACKERS);","lastModifiedDate":"2021-10-24"},{"lineNumber":115,"author":{"gitId":"jaredlhf"},"content":"        original.removeEvent(BASKETBALL);","lastModifiedDate":"2021-10-24"},{"lineNumber":116,"author":{"gitId":"jaredlhf"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-10-24"},{"lineNumber":117,"author":{"gitId":"jaredlhf"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":118,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2021-10-24"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"        original.addEvent(POOL);","lastModifiedDate":"2021-10-24"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2021-10-24"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2021-10-24"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2021-10-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":5,"-":101,"jaredlhf":42}},{"path":"src/test/java/safeforhall/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.util.JsonUtil;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"jaredlhf"},"content":"import safeforhall.testutil.TypicalEvents;","lastModifiedDate":"2021-10-24"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.testutil.TypicalPersons;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"jaredlhf"},"content":"    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsAddressBook.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":24,"author":{"gitId":"jaredlhf"},"content":"    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"jaredlhf"},"content":"    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.json\");","lastModifiedDate":"2021-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":52,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_typicalEventsFile_success() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":53,"author":{"gitId":"jaredlhf"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EVENTS_FILE,","lastModifiedDate":"2021-10-24"},{"lineNumber":54,"author":{"gitId":"jaredlhf"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"jaredlhf"},"content":"        AddressBook typicalEventsAddressBook \u003d TypicalEvents.getTypicalAddressBook();","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"jaredlhf"},"content":"        assertEquals(addressBookFromFile, typicalEventsAddressBook);","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_invalidEventsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"jaredlhf"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_FILE,","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":65,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":66,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"jaredlhf"},"content":"    @Test","lastModifiedDate":"2021-10-24"},{"lineNumber":68,"author":{"gitId":"jaredlhf"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-10-24"},{"lineNumber":69,"author":{"gitId":"jaredlhf"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENT_FILE,","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"jaredlhf"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"jaredlhf"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_EVENT,","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"jaredlhf"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"VimuthM":6,"-":41,"jaredlhf":28}},{"path":"src/test/java/safeforhall/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"safeforhall.json\"));","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"            JsonUserPrefsStorage json \u003d new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder));","lastModifiedDate":"2021-10-26"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"            json.saveUserPrefs(userPrefs);","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"        try {","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"            Path result \u003d jsonUserPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"VimuthM"},"content":"        } catch (NoSuchMethodError e) {","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"            throw new AssertionError(\"There should not be an error getting the user prefs filepath\");","lastModifiedDate":"2021-10-26"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VimuthM":13,"-":114}},{"path":"src/test/java/safeforhall/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.storage;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.GuiSettings;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.UserPrefs;","lastModifiedDate":"2021-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":6,"-":62}},{"path":"src/test/java/safeforhall/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"     * Adds a new {@code Event} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"    public AddressBookBuilder withEvent(Event event) {","lastModifiedDate":"2021-10-18"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"gordonlzy":9,"VimuthM":3,"-":31}},{"path":"src/test/java/safeforhall/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"VimuthM":1,"-":33}},{"path":"src/test/java/safeforhall/testutil/EditEventDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rebeccalaujx"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-19"},{"lineNumber":2,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditEventCommand;","lastModifiedDate":"2021-10-19"},{"lineNumber":4,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-19"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-19"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":9,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-19"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"/**","lastModifiedDate":"2021-10-19"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":" */","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"rebeccalaujx"},"content":"public class EditEventDescriptorBuilder {","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"rebeccalaujx"},"content":"    private EditEventCommand.EditEventDescriptor descriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":18,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder() {","lastModifiedDate":"2021-10-19"},{"lineNumber":19,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventCommand.EditEventDescriptor();","lastModifiedDate":"2021-10-19"},{"lineNumber":20,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":21,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder(EditEventCommand.EditEventDescriptor descriptor) {","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"rebeccalaujx"},"content":"        this.descriptor \u003d new EditEventCommand.EditEventDescriptor(descriptor);","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":26,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":27,"author":{"gitId":"rebeccalaujx"},"content":"     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details","lastModifiedDate":"2021-10-19"},{"lineNumber":28,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventDescriptorBuilder(Event event) {","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor \u003d new EditEventCommand.EditEventDescriptor();","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setName(event.getEventName());","lastModifiedDate":"2021-10-19"},{"lineNumber":32,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setDate(event.getEventDate());","lastModifiedDate":"2021-10-19"},{"lineNumber":33,"author":{"gitId":"chongjunwei"},"content":"        descriptor.setTime(event.getEventTime());","lastModifiedDate":"2021-10-24"},{"lineNumber":34,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVenue(event.getVenue());","lastModifiedDate":"2021-10-19"},{"lineNumber":35,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setCapacity(event.getCapacity());","lastModifiedDate":"2021-10-19"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setTime(event.getEventTime());","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":38,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":39,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":40,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code EventName} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":41,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":42,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-10-19"},{"lineNumber":43,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setName(new EventName(name));","lastModifiedDate":"2021-10-19"},{"lineNumber":44,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":45,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":46,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":47,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":48,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code EventDate} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":49,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withDate(String date) {","lastModifiedDate":"2021-10-19"},{"lineNumber":51,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setDate(new EventDate(date));","lastModifiedDate":"2021-10-19"},{"lineNumber":52,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":55,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"     * Sets the {@code EventTime} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":58,"author":{"gitId":"chongjunwei"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withTime(String time) {","lastModifiedDate":"2021-10-24"},{"lineNumber":59,"author":{"gitId":"chongjunwei"},"content":"        descriptor.setTime(new EventTime(time));","lastModifiedDate":"2021-10-24"},{"lineNumber":60,"author":{"gitId":"chongjunwei"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":61,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":62,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":63,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":64,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Venue} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":65,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":66,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withVenue(String venue) {","lastModifiedDate":"2021-10-19"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVenue(new Venue(venue));","lastModifiedDate":"2021-10-19"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Capacity} of the {@code EditEventDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"    public safeforhall.testutil.EditEventDescriptorBuilder withCapacity(String capacity) {","lastModifiedDate":"2021-10-19"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setCapacity(new Capacity(capacity));","lastModifiedDate":"2021-10-19"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"    public EditEventCommand.EditEventDescriptor build() {","lastModifiedDate":"2021-10-19"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        return descriptor;","lastModifiedDate":"2021-10-19"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"}","lastModifiedDate":"2021-10-19"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"rebeccalaujx":73,"chongjunwei":10}},{"path":"src/test/java/safeforhall/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-13"},{"lineNumber":6,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setRoom(person.getRoom());","lastModifiedDate":"2021-10-13"},{"lineNumber":37,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setFaculty(person.getFaculty());","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setVaccStatus(person.getVaccStatus());","lastModifiedDate":"2021-10-13"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setLastFetDate(person.getLastFetDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        descriptor.setLastCollectionDate(person.getLastCollectionDate());","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":68,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Room} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":69,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":70,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withRoom(String room) {","lastModifiedDate":"2021-10-13"},{"lineNumber":71,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setRoom(new Room(room));","lastModifiedDate":"2021-10-13"},{"lineNumber":72,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":73,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":75,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":76,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code Faculty} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":77,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":78,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withFaculty(String faculty) {","lastModifiedDate":"2021-10-13"},{"lineNumber":79,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setFaculty(new Faculty(faculty));","lastModifiedDate":"2021-10-13"},{"lineNumber":80,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":81,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":82,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-13"},{"lineNumber":84,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code VaccStatus} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-13"},{"lineNumber":85,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-13"},{"lineNumber":86,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withVaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-13"},{"lineNumber":87,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setVaccStatus(new VaccStatus(vaccStatus));","lastModifiedDate":"2021-10-13"},{"lineNumber":88,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-13"},{"lineNumber":89,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-13"},{"lineNumber":90,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code LastFetDate} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":93,"author":{"gitId":"rebeccalaujx"},"content":"     */","lastModifiedDate":"2021-10-19"},{"lineNumber":94,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withLastFetDate(String lastFetDate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":95,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setLastFetDate(new LastDate(lastFetDate));","lastModifiedDate":"2021-10-19"},{"lineNumber":96,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":97,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":98,"author":{"gitId":"rebeccalaujx"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":99,"author":{"gitId":"rebeccalaujx"},"content":"    /**","lastModifiedDate":"2021-10-19"},{"lineNumber":100,"author":{"gitId":"rebeccalaujx"},"content":"     * Sets the {@code LastCollectionDate} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"rebeccalaujx"},"content":"    public EditPersonDescriptorBuilder withLastCollectionDate(String lastCollectionDate) {","lastModifiedDate":"2021-10-19"},{"lineNumber":103,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.setLastCollectionDate(new LastDate(lastCollectionDate));","lastModifiedDate":"2021-10-19"},{"lineNumber":104,"author":{"gitId":"rebeccalaujx"},"content":"        return this;","lastModifiedDate":"2021-10-19"},{"lineNumber":105,"author":{"gitId":"rebeccalaujx"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"rebeccalaujx":44,"VimuthM":5,"-":58,"jaredlhf":3}},{"path":"src/test/java/safeforhall/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Capacity;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.EventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"chongjunwei"},"content":"import safeforhall.model.event.EventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Venue;","lastModifiedDate":"2021-10-18"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":" * A utility class to help with building Event objects.","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"public class EventBuilder {","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_EVENT_NAME \u003d \"Football Training\";","lastModifiedDate":"2021-10-20"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_EVENT_DATE \u003d \"20-10-2021\";","lastModifiedDate":"2021-10-20"},{"lineNumber":17,"author":{"gitId":"chongjunwei"},"content":"    public static final String DEFAULT_EVENT_TIME \u003d \"0800\";","lastModifiedDate":"2021-10-24"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_VENUE \u003d \"Field\";","lastModifiedDate":"2021-10-20"},{"lineNumber":19,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_CAPACITY \u003d \"20\";","lastModifiedDate":"2021-10-20"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_RESIDENT_LIST \u003d \"None\";","lastModifiedDate":"2021-10-24"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    private EventName eventName;","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    private EventDate eventDate;","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"    private EventTime eventTime;","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"    private Venue venue;","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"    private Capacity capacity;","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"    private ResidentList residents;","lastModifiedDate":"2021-10-18"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder() {","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"        eventName \u003d new EventName(DEFAULT_EVENT_NAME);","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"        eventDate \u003d new EventDate(DEFAULT_EVENT_DATE);","lastModifiedDate":"2021-10-18"},{"lineNumber":35,"author":{"gitId":"chongjunwei"},"content":"        eventTime \u003d new EventTime(DEFAULT_EVENT_TIME);","lastModifiedDate":"2021-10-24"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"        venue \u003d new Venue(DEFAULT_VENUE);","lastModifiedDate":"2021-10-18"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"        capacity \u003d new Capacity(DEFAULT_CAPACITY);","lastModifiedDate":"2021-10-18"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"        residents \u003d new ResidentList(DEFAULT_RESIDENT_LIST);","lastModifiedDate":"2021-10-18"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":42,"author":{"gitId":"gordonlzy"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2021-10-18"},{"lineNumber":43,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":44,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2021-10-18"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        eventName \u003d eventToCopy.getEventName();","lastModifiedDate":"2021-10-18"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        eventDate \u003d eventToCopy.getEventDate();","lastModifiedDate":"2021-10-18"},{"lineNumber":47,"author":{"gitId":"chongjunwei"},"content":"        eventTime \u003d eventToCopy.getEventTime();","lastModifiedDate":"2021-10-24"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"        venue \u003d eventToCopy.getVenue();","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"gordonlzy"},"content":"        capacity \u003d eventToCopy.getCapacity();","lastModifiedDate":"2021-10-18"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"        residents \u003d eventToCopy.getResidentList();","lastModifiedDate":"2021-10-27"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code eventName} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withEventName(String eventName) {","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"        this.eventName \u003d new EventName(eventName);","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code EventDate} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withEventDate(String eventDate) {","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"        this.eventDate \u003d new EventDate(eventDate);","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"chongjunwei"},"content":"    /**","lastModifiedDate":"2021-10-24"},{"lineNumber":70,"author":{"gitId":"chongjunwei"},"content":"     * Sets the {@code EventTime} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-24"},{"lineNumber":71,"author":{"gitId":"chongjunwei"},"content":"     */","lastModifiedDate":"2021-10-24"},{"lineNumber":72,"author":{"gitId":"chongjunwei"},"content":"    public EventBuilder withEventTime(String eventTime) {","lastModifiedDate":"2021-10-24"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"        this.eventTime \u003d new EventTime(eventTime);","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"chongjunwei"},"content":"        return this;","lastModifiedDate":"2021-10-24"},{"lineNumber":75,"author":{"gitId":"chongjunwei"},"content":"    }","lastModifiedDate":"2021-10-24"},{"lineNumber":76,"author":{"gitId":"chongjunwei"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code Venue} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withVenue(String venue) {","lastModifiedDate":"2021-10-18"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"        this.venue \u003d new Venue(venue);","lastModifiedDate":"2021-10-18"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":85,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":86,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code Capacity} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":87,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":88,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withCapacity(String capacity) {","lastModifiedDate":"2021-10-18"},{"lineNumber":89,"author":{"gitId":"gordonlzy"},"content":"        this.capacity \u003d new Capacity(capacity);","lastModifiedDate":"2021-10-18"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":94,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code ResidentList} of the {@code Event} that we are building.","lastModifiedDate":"2021-10-18"},{"lineNumber":95,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":96,"author":{"gitId":"gordonlzy"},"content":"    public EventBuilder withResidentList(String residentsDisplay, String residentStorage) {","lastModifiedDate":"2021-10-26"},{"lineNumber":97,"author":{"gitId":"gordonlzy"},"content":"        this.residents \u003d new ResidentList(residentsDisplay, residentStorage);","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"gordonlzy"},"content":"        return this;","lastModifiedDate":"2021-10-18"},{"lineNumber":99,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"    public Event build() {","lastModifiedDate":"2021-10-18"},{"lineNumber":102,"author":{"gitId":"chongjunwei"},"content":"        return new Event(eventName, eventDate, eventTime, venue, capacity, residents);","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":89,"chongjunwei":14,"VimuthM":1}},{"path":"src/test/java/safeforhall/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Email;","lastModifiedDate":"2021-10-10"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Faculty;","lastModifiedDate":"2021-10-10"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.LastDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Name;","lastModifiedDate":"2021-10-10"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Phone;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.Room;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.person.VaccStatus;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":18,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_ROOM \u003d \"E416\";","lastModifiedDate":"2021-11-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"jaredlhf"},"content":"    public static final String DEFAULT_VACCSTATUS \u003d \"T\";","lastModifiedDate":"2021-10-10"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"    public static final String DEFAULT_FACULTY \u003d \"SoC\";","lastModifiedDate":"2021-10-06"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_FETDATE \u003d \"None\";","lastModifiedDate":"2021-11-02"},{"lineNumber":24,"author":{"gitId":"gordonlzy"},"content":"    public static final String DEFAULT_COLLECTDATE \u003d \"None\";","lastModifiedDate":"2021-11-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"VimuthM"},"content":"    private Room room;","lastModifiedDate":"2021-10-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"VimuthM"},"content":"    private VaccStatus vaccStatus;","lastModifiedDate":"2021-10-06"},{"lineNumber":31,"author":{"gitId":"VimuthM"},"content":"    private Faculty faculty;","lastModifiedDate":"2021-10-06"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"    private LastDate lastFetDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"    private LastDate lastCollectionDate;","lastModifiedDate":"2021-10-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"        room \u003d new Room(DEFAULT_ROOM);","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"jaredlhf"},"content":"        vaccStatus \u003d new VaccStatus(DEFAULT_VACCSTATUS);","lastModifiedDate":"2021-10-10"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d new Faculty(DEFAULT_FACULTY);","lastModifiedDate":"2021-10-06"},{"lineNumber":45,"author":{"gitId":"gordonlzy"},"content":"        lastFetDate \u003d new LastDate(DEFAULT_FETDATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"gordonlzy"},"content":"        lastCollectionDate \u003d new LastDate(DEFAULT_COLLECTDATE);","lastModifiedDate":"2021-10-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"        room \u003d personToCopy.getRoom();","lastModifiedDate":"2021-10-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"VimuthM"},"content":"        vaccStatus \u003d personToCopy.getVaccStatus();","lastModifiedDate":"2021-10-06"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"        faculty \u003d personToCopy.getFaculty();","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"        lastFetDate \u003d personToCopy.getLastFetDate();","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"        lastCollectionDate \u003d personToCopy.getLastCollectionDate();","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code Room} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withRoom(String room) {","lastModifiedDate":"2021-10-06"},{"lineNumber":75,"author":{"gitId":"VimuthM"},"content":"        this.room \u003d new Room(room);","lastModifiedDate":"2021-10-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":96,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code VaccStatus} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withVaccStatus(String vaccStatus) {","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"        this.vaccStatus \u003d new VaccStatus(vaccStatus);","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":101,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":102,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":103,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":104,"author":{"gitId":"VimuthM"},"content":"     * Sets the {@code Faculty} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-06"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withFaculty(String faculty) {","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"        this.faculty \u003d new Faculty(faculty);","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":110,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":111,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code LastDate} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":113,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withFet(String lastFetDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        this.lastFetDate \u003d new LastDate(lastFetDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":116,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"     * Sets the {@code LastDate} of the {@code Person} that we are building.","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-06"},{"lineNumber":122,"author":{"gitId":"VimuthM"},"content":"    public PersonBuilder withCollection(String lastCollectionDate) {","lastModifiedDate":"2021-10-06"},{"lineNumber":123,"author":{"gitId":"gordonlzy"},"content":"        this.lastCollectionDate \u003d new LastDate(lastCollectionDate);","lastModifiedDate":"2021-10-10"},{"lineNumber":124,"author":{"gitId":"VimuthM"},"content":"        return this;","lastModifiedDate":"2021-10-06"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"        return new Person(name, room, phone, email, vaccStatus, faculty, lastFetDate, lastCollectionDate);","lastModifiedDate":"2021-10-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"gordonlzy":18,"VimuthM":45,"-":66,"jaredlhf":2}},{"path":"src/test/java/safeforhall/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_COLLECTIONDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-10-04"},{"lineNumber":5,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FACULTY;","lastModifiedDate":"2021-10-10"},{"lineNumber":6,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_FETDATE;","lastModifiedDate":"2021-10-13"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_ROOM;","lastModifiedDate":"2021-10-10"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.parser.CliSyntax.PREFIX_VACCSTATUS;","lastModifiedDate":"2021-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import safeforhall.logic.commands.add.AddPersonCommand;","lastModifiedDate":"2021-10-17"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"import safeforhall.logic.commands.edit.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-10-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_ROOM + person.getRoom().room + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_FACULTY + person.getFaculty().faculty + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":38,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_VACCSTATUS + person.getVaccStatus().vaccStatus + \" \");","lastModifiedDate":"2021-10-10"},{"lineNumber":39,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_FETDATE + person.getLastFetDate().date + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":40,"author":{"gitId":"jaredlhf"},"content":"        sb.append(PREFIX_COLLECTIONDATE + person.getLastCollectionDate().date + \" \");","lastModifiedDate":"2021-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.room).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getVaccStatus().ifPresent(vaccStatus -\u003e sb.append(PREFIX_VACCSTATUS)","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"rebeccalaujx"},"content":"                .append(vaccStatus.vaccStatus).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getFaculty().ifPresent(faculty -\u003e sb.append(PREFIX_FACULTY).append(faculty.faculty).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getLastFetDate().ifPresent(lastFetDate -\u003e sb.append(PREFIX_FETDATE)","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"rebeccalaujx"},"content":"                .append(lastFetDate.date).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"rebeccalaujx"},"content":"        descriptor.getLastCollectionDate().ifPresent(lastCollectionDate -\u003e sb.append(PREFIX_COLLECTIONDATE)","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"rebeccalaujx"},"content":"                .append(lastCollectionDate.date).append(\" \"));","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"rebeccalaujx"},"content":"        return sb.toString();","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"rebeccalaujx":10,"VimuthM":7,"-":35,"jaredlhf":10}},{"path":"src/test/java/safeforhall/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":1,"-":71}},{"path":"src/test/java/safeforhall/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.Model;","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VimuthM":4,"-":51,"jaredlhf":1}},{"path":"src/test/java/safeforhall/testutil/TypicalAddressBook.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"VimuthM"},"content":"public class TypicalAddressBook {","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"VimuthM"},"content":"    private TypicalAddressBook() {} // prevents instantiation","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"     * Returns an {@code AddressBook} with all the typical persons and events.","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"VimuthM"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"VimuthM"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"VimuthM"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"        for (Event event : TypicalEvents.getTypicalEvents()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"VimuthM"},"content":"            ab.addEvent(event);","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"VimuthM"},"content":"        return ab;","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"VimuthM":24}},{"path":"src/test/java/safeforhall/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"gordonlzy"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-18"},{"lineNumber":2,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":3,"author":{"gitId":"gordonlzy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-18"},{"lineNumber":4,"author":{"gitId":"gordonlzy"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-10-18"},{"lineNumber":5,"author":{"gitId":"gordonlzy"},"content":"import java.util.List;","lastModifiedDate":"2021-10-18"},{"lineNumber":6,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":7,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-18"},{"lineNumber":8,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.Event;","lastModifiedDate":"2021-10-18"},{"lineNumber":9,"author":{"gitId":"gordonlzy"},"content":"import safeforhall.model.event.ResidentList;","lastModifiedDate":"2021-10-26"},{"lineNumber":10,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":11,"author":{"gitId":"gordonlzy"},"content":"/**","lastModifiedDate":"2021-10-18"},{"lineNumber":12,"author":{"gitId":"gordonlzy"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2021-10-18"},{"lineNumber":13,"author":{"gitId":"gordonlzy"},"content":" */","lastModifiedDate":"2021-10-18"},{"lineNumber":14,"author":{"gitId":"gordonlzy"},"content":"public class TypicalEvents {","lastModifiedDate":"2021-10-18"},{"lineNumber":15,"author":{"gitId":"gordonlzy"},"content":"    public static final Event BASKETBALL \u003d new EventBuilder().withEventName(\"basketball\")","lastModifiedDate":"2021-10-18"},{"lineNumber":16,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":17,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"basketball court\")","lastModifiedDate":"2021-10-18"},{"lineNumber":18,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"0830\")","lastModifiedDate":"2021-10-24"},{"lineNumber":19,"author":{"gitId":"VimuthM"},"content":"            .withCapacity(\"1\")","lastModifiedDate":"2021-11-05"},{"lineNumber":20,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(ResidentList.DEFAULT_LIST, ResidentList.DEFAULT_LIST)","lastModifiedDate":"2021-10-26"},{"lineNumber":21,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":22,"author":{"gitId":"gordonlzy"},"content":"    public static final Event VOLLEYBALL \u003d new EventBuilder().withEventName(\"volleyball\")","lastModifiedDate":"2021-10-18"},{"lineNumber":23,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"12-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":24,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"0800\")","lastModifiedDate":"2021-10-24"},{"lineNumber":25,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"volleyball court\")","lastModifiedDate":"2021-10-18"},{"lineNumber":26,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"6\")","lastModifiedDate":"2021-10-18"},{"lineNumber":27,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.DANIEL.getName().toString(), TypicalPersons.DANIEL.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":28,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":29,"author":{"gitId":"gordonlzy"},"content":"    public static final Event POWERLIFTING \u003d new EventBuilder().withEventName(\"powerlifting\")","lastModifiedDate":"2021-10-18"},{"lineNumber":30,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"15-10-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":31,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"0830\")","lastModifiedDate":"2021-10-24"},{"lineNumber":32,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"gym\")","lastModifiedDate":"2021-10-18"},{"lineNumber":33,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"7\")","lastModifiedDate":"2021-10-18"},{"lineNumber":34,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.ELLE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.FIONA.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.GEORGE.getName().toString(),","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"gordonlzy"},"content":"                    TypicalPersons.ELLE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.FIONA.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.GEORGE.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":41,"author":{"gitId":"VimuthM"},"content":"    public static final Event SWIM_WO_RESIDENTS \u003d new EventBuilder().withEventName(\"Swim Training\")","lastModifiedDate":"2021-10-27"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            .withEventDate(\"19-10-2021\")","lastModifiedDate":"2021-10-27"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            .withEventTime(\"0800\")","lastModifiedDate":"2021-10-27"},{"lineNumber":44,"author":{"gitId":"VimuthM"},"content":"            .withVenue(\"Pool\")","lastModifiedDate":"2021-10-27"},{"lineNumber":45,"author":{"gitId":"VimuthM"},"content":"            .withCapacity(\"15\")","lastModifiedDate":"2021-10-27"},{"lineNumber":46,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-27"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"    public static final Event SWIM \u003d new EventBuilder().withEventName(\"swim\")","lastModifiedDate":"2021-10-18"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-09-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":49,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"0800\")","lastModifiedDate":"2021-10-24"},{"lineNumber":50,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"swimming pool\")","lastModifiedDate":"2021-10-18"},{"lineNumber":51,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"8\")","lastModifiedDate":"2021-10-18"},{"lineNumber":52,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.GEORGE.getName().toString(), TypicalPersons.GEORGE.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":53,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":54,"author":{"gitId":"gordonlzy"},"content":"    public static final Event BAND \u003d new EventBuilder().withEventName(\"band\")","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"10-11-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":56,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"0830\")","lastModifiedDate":"2021-10-24"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"band room\")","lastModifiedDate":"2021-10-18"},{"lineNumber":58,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"9\")","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.CARL.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.BENSON.getName().toString(),","lastModifiedDate":"2021-10-26"},{"lineNumber":61,"author":{"gitId":"gordonlzy"},"content":"                    TypicalPersons.CARL.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":62,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.BENSON.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":63,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":64,"author":{"gitId":"gordonlzy"},"content":"    public static final Event ROAD_RELAY \u003d new EventBuilder().withEventName(\"road relay\")","lastModifiedDate":"2021-10-18"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"            .withEventDate(\"12-12-2021\")","lastModifiedDate":"2021-10-18"},{"lineNumber":66,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"1830\")","lastModifiedDate":"2021-10-24"},{"lineNumber":67,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"track\")","lastModifiedDate":"2021-10-18"},{"lineNumber":68,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"10\")","lastModifiedDate":"2021-10-18"},{"lineNumber":69,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.GEORGE.getName().toString(), TypicalPersons.GEORGE.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":70,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":71,"author":{"gitId":"gordonlzy"},"content":"    public static final Event DANCE \u003d new EventBuilder().withEventName(\"dance\")","lastModifiedDate":"2021-10-18"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"            .withEventDate(\"01-10-2021\")","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"1230\")","lastModifiedDate":"2021-10-24"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"            .withVenue(\"studio\")","lastModifiedDate":"2021-10-18"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"            .withCapacity(\"11\")","lastModifiedDate":"2021-10-18"},{"lineNumber":76,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.GEORGE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":77,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.CARL.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":78,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.BENSON.getName().toString(),","lastModifiedDate":"2021-10-26"},{"lineNumber":79,"author":{"gitId":"gordonlzy"},"content":"                    TypicalPersons.GEORGE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":80,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.CARL.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":81,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.BENSON.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":82,"author":{"gitId":"gordonlzy"},"content":"            .build();","lastModifiedDate":"2021-10-18"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":84,"author":{"gitId":"jaredlhf"},"content":"    // Manually added","lastModifiedDate":"2021-10-24"},{"lineNumber":85,"author":{"gitId":"jaredlhf"},"content":"    public static final Event POOL \u003d new EventBuilder().withEventName(\"pool\")","lastModifiedDate":"2021-10-24"},{"lineNumber":86,"author":{"gitId":"jaredlhf"},"content":"            .withEventDate(\"10-11-2021\")","lastModifiedDate":"2021-10-24"},{"lineNumber":87,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"1800\")","lastModifiedDate":"2021-10-26"},{"lineNumber":88,"author":{"gitId":"jaredlhf"},"content":"            .withVenue(\"pool room\")","lastModifiedDate":"2021-10-24"},{"lineNumber":89,"author":{"gitId":"jaredlhf"},"content":"            .withCapacity(\"10\")","lastModifiedDate":"2021-10-24"},{"lineNumber":90,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.GEORGE.getName().toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":91,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.CARL.getName().toString(),","lastModifiedDate":"2021-10-26"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"                    TypicalPersons.GEORGE.toString()","lastModifiedDate":"2021-10-26"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"                            + \", \" + TypicalPersons.CARL.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":94,"author":{"gitId":"jaredlhf"},"content":"            .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":95,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":96,"author":{"gitId":"jaredlhf"},"content":"    public static final Event HACKERS \u003d new EventBuilder().withEventName(\"hackers\")","lastModifiedDate":"2021-10-24"},{"lineNumber":97,"author":{"gitId":"jaredlhf"},"content":"            .withEventDate(\"01-10-2021\")","lastModifiedDate":"2021-10-24"},{"lineNumber":98,"author":{"gitId":"chongjunwei"},"content":"            .withEventTime(\"2000\")","lastModifiedDate":"2021-10-26"},{"lineNumber":99,"author":{"gitId":"jaredlhf"},"content":"            .withVenue(\"lab\")","lastModifiedDate":"2021-10-24"},{"lineNumber":100,"author":{"gitId":"jaredlhf"},"content":"            .withCapacity(\"20\")","lastModifiedDate":"2021-10-24"},{"lineNumber":101,"author":{"gitId":"gordonlzy"},"content":"            .withResidentList(TypicalPersons.BENSON.getName().toString(), TypicalPersons.BENSON.toString())","lastModifiedDate":"2021-10-26"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"            .build();","lastModifiedDate":"2021-10-24"},{"lineNumber":103,"author":{"gitId":"jaredlhf"},"content":"","lastModifiedDate":"2021-10-24"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2021-10-18"},{"lineNumber":105,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":106,"author":{"gitId":"gordonlzy"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2021-10-18"},{"lineNumber":107,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":108,"author":{"gitId":"gordonlzy"},"content":"    /**","lastModifiedDate":"2021-10-18"},{"lineNumber":109,"author":{"gitId":"gordonlzy"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-10-18"},{"lineNumber":110,"author":{"gitId":"gordonlzy"},"content":"     */","lastModifiedDate":"2021-10-18"},{"lineNumber":111,"author":{"gitId":"gordonlzy"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-10-18"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-18"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2021-10-18"},{"lineNumber":114,"author":{"gitId":"gordonlzy"},"content":"            ab.addEvent(event);","lastModifiedDate":"2021-10-18"},{"lineNumber":115,"author":{"gitId":"gordonlzy"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":116,"author":{"gitId":"gordonlzy"},"content":"        return ab;","lastModifiedDate":"2021-10-18"},{"lineNumber":117,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":118,"author":{"gitId":"gordonlzy"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":119,"author":{"gitId":"gordonlzy"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2021-10-18"},{"lineNumber":120,"author":{"gitId":"gordonlzy"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BASKETBALL, VOLLEYBALL, POWERLIFTING, SWIM, BAND, ROAD_RELAY, DANCE));","lastModifiedDate":"2021-10-18"},{"lineNumber":121,"author":{"gitId":"gordonlzy"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":122,"author":{"gitId":"gordonlzy"},"content":"}","lastModifiedDate":"2021-10-18"}],"authorContributionMap":{"gordonlzy":92,"chongjunwei":9,"VimuthM":8,"jaredlhf":13}},{"path":"src/test/java/safeforhall/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"import safeforhall.commons.core.index.Index;","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"rebeccalaujx"},"content":"    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-10-19"},{"lineNumber":13,"author":{"gitId":"rebeccalaujx"},"content":"    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"rebeccalaujx":2,"VimuthM":2,"-":10}},{"path":"src/test/java/safeforhall/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.testutil;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":4,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_COLLECTIONDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":8,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":9,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_AMY;","lastModifiedDate":"2021-10-13"},{"lineNumber":10,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_FETDATE_BOB;","lastModifiedDate":"2021-10-13"},{"lineNumber":11,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":16,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_ROOM_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":17,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_AMY;","lastModifiedDate":"2021-10-10"},{"lineNumber":18,"author":{"gitId":"jaredlhf"},"content":"import static safeforhall.logic.commands.CommandTestUtil.VALID_VACCSTATUS_BOB;","lastModifiedDate":"2021-10-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":24,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.AddressBook;","lastModifiedDate":"2021-10-04"},{"lineNumber":25,"author":{"gitId":"VimuthM"},"content":"import safeforhall.model.person.Person;","lastModifiedDate":"2021-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A100\")","lastModifiedDate":"2021-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":36,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":37,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":38,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":39,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":40,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A101\")","lastModifiedDate":"2021-10-06"},{"lineNumber":43,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2021-10-06"},{"lineNumber":44,"author":{"gitId":"jaredlhf"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2021-10-13"},{"lineNumber":45,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":46,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":47,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"12-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":48,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"13-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":49,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":50,"author":{"gitId":"VimuthM"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2021-10-06"},{"lineNumber":51,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A102\")","lastModifiedDate":"2021-10-06"},{"lineNumber":52,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2021-10-06"},{"lineNumber":53,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":54,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":55,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":56,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"10-10-2021\")","lastModifiedDate":"2021-10-10"},{"lineNumber":57,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"03-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":58,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":59,"author":{"gitId":"VimuthM"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2021-10-06"},{"lineNumber":60,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A103\")","lastModifiedDate":"2021-10-06"},{"lineNumber":61,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2021-10-06"},{"lineNumber":62,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":63,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":64,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":65,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"12-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":66,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"13-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":67,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":68,"author":{"gitId":"VimuthM"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2021-10-06"},{"lineNumber":69,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A104\")","lastModifiedDate":"2021-10-06"},{"lineNumber":70,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2021-10-06"},{"lineNumber":71,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":72,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":73,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":74,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"05-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":75,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"16-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":76,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":77,"author":{"gitId":"VimuthM"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2021-10-06"},{"lineNumber":78,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A105\")","lastModifiedDate":"2021-10-06"},{"lineNumber":79,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2021-10-06"},{"lineNumber":80,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":81,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":83,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"20-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":84,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"04-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":85,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":86,"author":{"gitId":"VimuthM"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")","lastModifiedDate":"2021-10-06"},{"lineNumber":87,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A106\")","lastModifiedDate":"2021-10-06"},{"lineNumber":88,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2021-10-06"},{"lineNumber":89,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":90,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-12"},{"lineNumber":91,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":92,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":93,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"01-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":94,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":97,"author":{"gitId":"VimuthM"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2021-10-06"},{"lineNumber":98,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2021-10-06"},{"lineNumber":99,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"stefan@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":100,"author":{"gitId":"gordonlzy"},"content":"            .withRoom(\"A107\")","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-10"},{"lineNumber":102,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":103,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":104,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"15-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":105,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":106,"author":{"gitId":"VimuthM"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2021-10-06"},{"lineNumber":107,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2021-10-06"},{"lineNumber":108,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"hans@example.com\")","lastModifiedDate":"2021-10-06"},{"lineNumber":109,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(\"C200\")","lastModifiedDate":"2021-10-10"},{"lineNumber":110,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-10"},{"lineNumber":111,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-13"},{"lineNumber":112,"author":{"gitId":"gordonlzy"},"content":"            .withFet(\"20-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":113,"author":{"gitId":"gordonlzy"},"content":"            .withCollection(\"22-10-2021\")","lastModifiedDate":"2021-10-11"},{"lineNumber":114,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":117,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":118,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":119,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-06"},{"lineNumber":120,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":121,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":122,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-10"},{"lineNumber":123,"author":{"gitId":"jaredlhf"},"content":"            .withFet(VALID_FETDATE_AMY)","lastModifiedDate":"2021-10-13"},{"lineNumber":124,"author":{"gitId":"jaredlhf"},"content":"            .withCollection(VALID_COLLECTIONDATE_AMY)","lastModifiedDate":"2021-10-13"},{"lineNumber":125,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-06"},{"lineNumber":126,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without FET or COLLECTION","lastModifiedDate":"2021-10-14"},{"lineNumber":127,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_FET_COLLECTION \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":128,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":129,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":130,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":131,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":132,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":133,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":134,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without FET","lastModifiedDate":"2021-10-14"},{"lineNumber":135,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_FET \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":136,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":137,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":138,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":139,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":140,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":141,"author":{"gitId":"VimuthM"},"content":"            .withCollection(VALID_COLLECTIONDATE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":142,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":143,"author":{"gitId":"VimuthM"},"content":"    // Person AMY without COLLECTION","lastModifiedDate":"2021-10-14"},{"lineNumber":144,"author":{"gitId":"VimuthM"},"content":"    public static final Person AMY_NO_COLLECTION \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":145,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":146,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":147,"author":{"gitId":"VimuthM"},"content":"            .withRoom(VALID_ROOM_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":148,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(VALID_FACULTY_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":149,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(VALID_VACCSTATUS_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":150,"author":{"gitId":"VimuthM"},"content":"            .withFet(VALID_FETDATE_AMY)","lastModifiedDate":"2021-10-14"},{"lineNumber":151,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-14"},{"lineNumber":152,"author":{"gitId":"VimuthM"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":153,"author":{"gitId":"VimuthM"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":154,"author":{"gitId":"VimuthM"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-10-06"},{"lineNumber":155,"author":{"gitId":"jaredlhf"},"content":"            .withRoom(VALID_ROOM_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":156,"author":{"gitId":"jaredlhf"},"content":"            .withFaculty(VALID_FACULTY_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":157,"author":{"gitId":"jaredlhf"},"content":"            .withVaccStatus(VALID_VACCSTATUS_BOB)","lastModifiedDate":"2021-10-10"},{"lineNumber":158,"author":{"gitId":"jaredlhf"},"content":"            .withFet(VALID_FETDATE_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":159,"author":{"gitId":"jaredlhf"},"content":"            .withCollection(VALID_COLLECTIONDATE_BOB)","lastModifiedDate":"2021-10-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":162,"author":{"gitId":"VimuthM"},"content":"    // Typical persons to be imported","lastModifiedDate":"2021-10-25"},{"lineNumber":163,"author":{"gitId":"VimuthM"},"content":"    public static final Person AARON \u003d new PersonBuilder().withName(\"Aaron Bower\")","lastModifiedDate":"2021-10-25"},{"lineNumber":164,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"97601364\")","lastModifiedDate":"2021-10-25"},{"lineNumber":165,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"Maggielonely@yahoo.co.jp\")","lastModifiedDate":"2021-10-25"},{"lineNumber":166,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"D208\")","lastModifiedDate":"2021-10-25"},{"lineNumber":167,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-25"},{"lineNumber":168,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"SoC\")","lastModifiedDate":"2021-10-25"},{"lineNumber":169,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"03-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":170,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"10-09-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":171,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":172,"author":{"gitId":"VimuthM"},"content":"    public static final Person BRAD \u003d new PersonBuilder().withName(\"Brad Pitt\")","lastModifiedDate":"2021-10-25"},{"lineNumber":173,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"92353605\")","lastModifiedDate":"2021-10-25"},{"lineNumber":174,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"lazyHeidi@rambler.ru\")","lastModifiedDate":"2021-10-25"},{"lineNumber":175,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A111\")","lastModifiedDate":"2021-10-25"},{"lineNumber":176,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-25"},{"lineNumber":177,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Fass\")","lastModifiedDate":"2021-10-25"},{"lineNumber":178,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"20-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":179,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"16-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":180,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":181,"author":{"gitId":"VimuthM"},"content":"    public static final Person CODY \u003d new PersonBuilder().withName(\"Cody Miller\")","lastModifiedDate":"2021-10-25"},{"lineNumber":182,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"93510639\")","lastModifiedDate":"2021-10-25"},{"lineNumber":183,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"lonelyCole2@live.fr\")","lastModifiedDate":"2021-10-25"},{"lineNumber":184,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A114\")","lastModifiedDate":"2021-10-25"},{"lineNumber":185,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-25"},{"lineNumber":186,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Sde\")","lastModifiedDate":"2021-10-25"},{"lineNumber":187,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"23-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":188,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"25-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":189,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":190,"author":{"gitId":"VimuthM"},"content":"    public static final Person DARREN \u003d new PersonBuilder().withName(\"Darren Hia\")","lastModifiedDate":"2021-10-25"},{"lineNumber":191,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"92976221\")","lastModifiedDate":"2021-10-25"},{"lineNumber":192,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"elatedClaudia@chello.nl\")","lastModifiedDate":"2021-10-25"},{"lineNumber":193,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A410\")","lastModifiedDate":"2021-10-25"},{"lineNumber":194,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-25"},{"lineNumber":195,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Foe\")","lastModifiedDate":"2021-10-25"},{"lineNumber":196,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"29-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":197,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"17-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":198,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":199,"author":{"gitId":"VimuthM"},"content":"    public static final Person ELLIE \u003d new PersonBuilder().withName(\"Ellie Muslinger\")","lastModifiedDate":"2021-10-25"},{"lineNumber":200,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"97728537\")","lastModifiedDate":"2021-10-25"},{"lineNumber":201,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"wanderingBrandon4@yahoo.com.sg\")","lastModifiedDate":"2021-10-25"},{"lineNumber":202,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"B109\")","lastModifiedDate":"2021-10-25"},{"lineNumber":203,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-25"},{"lineNumber":204,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Biz\")","lastModifiedDate":"2021-10-25"},{"lineNumber":205,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"17-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":206,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"30-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":207,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":208,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":209,"author":{"gitId":"VimuthM"},"content":"    // Missing fet and collection for importing","lastModifiedDate":"2021-10-25"},{"lineNumber":210,"author":{"gitId":"VimuthM"},"content":"    public static final Person CODY_WO_FET \u003d new PersonBuilder().withName(\"Cody Miller\")","lastModifiedDate":"2021-10-25"},{"lineNumber":211,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"93510639\")","lastModifiedDate":"2021-10-25"},{"lineNumber":212,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"lonelyCole2@live.fr\")","lastModifiedDate":"2021-10-25"},{"lineNumber":213,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"A114\")","lastModifiedDate":"2021-10-25"},{"lineNumber":214,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"T\")","lastModifiedDate":"2021-10-25"},{"lineNumber":215,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Sde\")","lastModifiedDate":"2021-10-25"},{"lineNumber":216,"author":{"gitId":"VimuthM"},"content":"            .withCollection(\"25-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":217,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":218,"author":{"gitId":"VimuthM"},"content":"    public static final Person ELLIE_WO_COLLECTION \u003d new PersonBuilder().withName(\"Ellie Muslinger\")","lastModifiedDate":"2021-10-25"},{"lineNumber":219,"author":{"gitId":"VimuthM"},"content":"            .withPhone(\"97728537\")","lastModifiedDate":"2021-10-25"},{"lineNumber":220,"author":{"gitId":"VimuthM"},"content":"            .withEmail(\"wanderingBrandon4@yahoo.com.sg\")","lastModifiedDate":"2021-10-25"},{"lineNumber":221,"author":{"gitId":"VimuthM"},"content":"            .withRoom(\"B109\")","lastModifiedDate":"2021-10-25"},{"lineNumber":222,"author":{"gitId":"VimuthM"},"content":"            .withVaccStatus(\"F\")","lastModifiedDate":"2021-10-25"},{"lineNumber":223,"author":{"gitId":"VimuthM"},"content":"            .withFaculty(\"Biz\")","lastModifiedDate":"2021-10-25"},{"lineNumber":224,"author":{"gitId":"VimuthM"},"content":"            .withFet(\"17-08-2021\")","lastModifiedDate":"2021-10-25"},{"lineNumber":225,"author":{"gitId":"VimuthM"},"content":"            .build();","lastModifiedDate":"2021-10-25"},{"lineNumber":226,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":245,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":246,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":247,"author":{"gitId":"VimuthM"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-10-25"},{"lineNumber":248,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":249,"author":{"gitId":"VimuthM"},"content":"    public static AddressBook getTypicalImportedAddressBook() {","lastModifiedDate":"2021-10-25"},{"lineNumber":250,"author":{"gitId":"VimuthM"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-25"},{"lineNumber":251,"author":{"gitId":"VimuthM"},"content":"        for (Person person : getTypicalImportedPersons()) {","lastModifiedDate":"2021-10-25"},{"lineNumber":252,"author":{"gitId":"VimuthM"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":253,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":254,"author":{"gitId":"VimuthM"},"content":"        return ab;","lastModifiedDate":"2021-10-25"},{"lineNumber":255,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":256,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":257,"author":{"gitId":"VimuthM"},"content":"    /**","lastModifiedDate":"2021-10-25"},{"lineNumber":258,"author":{"gitId":"VimuthM"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2021-10-25"},{"lineNumber":259,"author":{"gitId":"VimuthM"},"content":"     */","lastModifiedDate":"2021-10-25"},{"lineNumber":260,"author":{"gitId":"VimuthM"},"content":"    public static AddressBook getTypicalAddressBookWithSpecifiedPersons(List\u003cPerson\u003e list) {","lastModifiedDate":"2021-10-25"},{"lineNumber":261,"author":{"gitId":"VimuthM"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-10-25"},{"lineNumber":262,"author":{"gitId":"VimuthM"},"content":"        for (Person person : list) {","lastModifiedDate":"2021-10-25"},{"lineNumber":263,"author":{"gitId":"VimuthM"},"content":"            ab.addPerson(person);","lastModifiedDate":"2021-10-25"},{"lineNumber":264,"author":{"gitId":"VimuthM"},"content":"        }","lastModifiedDate":"2021-10-25"},{"lineNumber":265,"author":{"gitId":"VimuthM"},"content":"        return ab;","lastModifiedDate":"2021-10-25"},{"lineNumber":266,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":267,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":268,"author":{"gitId":"VimuthM"},"content":"    public static List\u003cPerson\u003e getTypicalImportedPersons() {","lastModifiedDate":"2021-10-25"},{"lineNumber":269,"author":{"gitId":"VimuthM"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(AARON, BRAD, CODY, DARREN, ELLIE));","lastModifiedDate":"2021-10-25"},{"lineNumber":270,"author":{"gitId":"VimuthM"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"gordonlzy":19,"VimuthM":175,"-":40,"jaredlhf":37}},{"path":"src/test/java/safeforhall/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"VimuthM":1,"-":34}},{"path":"src/test/java/safeforhall/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VimuthM"},"content":"package safeforhall.ui;","lastModifiedDate":"2021-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"VimuthM"},"content":"import static safeforhall.testutil.Assert.assertThrows;","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"VimuthM"},"content":"import safeforhall.MainApp;","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"},{"lineNumber":115,"author":{"gitId":"VimuthM"},"content":"","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"VimuthM":4,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"\u003c?import safeforhall.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":3,"VimuthM":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"VimuthM"},"content":"\u003cfx:root type\u003d\"safeforhall.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":5,"VimuthM":1}}]
